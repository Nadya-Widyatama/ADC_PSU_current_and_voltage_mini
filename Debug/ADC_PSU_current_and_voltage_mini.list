
ADC_PSU_current_and_voltage_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eeb4  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800f110  0800f110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5c0  0800f5c0  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5c0  0800f5c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5c8  0800f5c8  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5c8  0800f5c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f5cc  0800f5cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800f5d0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200001d4  0800f7a4  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800f7a4  00011604  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac67  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb2  00000000  00000000  0002be71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011af  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b1e  00000000  00000000  0003136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcb4  00000000  00000000  00054e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6197  00000000  00000000  00070b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a4  00000000  00000000  00156d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0015e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800f0f4 	.word	0x0800f0f4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	0800f0f4 	.word	0x0800f0f4

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:
float temperature,voltage1,current1,voltage2,current2,konsumsiEnergi;
float read_data_float, write_value_float,arusFiltered;
int before = 0;
uint32_t adcBuffer[4];

void __io_putchar(char ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	230a      	movs	r3, #10
 8001042:	2201      	movs	r2, #1
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001046:	f008 ff7f 	bl	8009f48 <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200003e8 	.word	0x200003e8

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 fa1d 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f849 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 facb 	bl	8001600 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800106a:	f000 f957 	bl	800131c <MX_GPDMA1_Init>
  MX_ADC1_Init();
 800106e:	f000 f8b9 	bl	80011e4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001072:	f000 f973 	bl	800135c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001076:	f000 f9c7 	bl	8001408 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800107a:	f000 fa75 	bl	8001568 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001084:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <main+0x90>)
 8001086:	f004 f91b 	bl	80052c0 <HAL_GPIO_WritePin>
  Beep_Beep();
 800108a:	f000 fd67 	bl	8001b5c <Beep_Beep>

  uint32_t address = 0x000000;
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 3; i++) {
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e011      	b.n	80010bc <main+0x64>
	  ReadData(address, sizeof(float));
 8001098:	2104      	movs	r1, #4
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f000 fcfa 	bl	8001a94 <ReadData>
	  if (!isnan(read_data_float)) {
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <main+0x94>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	eef4 7a67 	vcmp.f32	s15, s15
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	d709      	bvc.n	80010c4 <main+0x6c>
		  break;
	  }
	  HAL_Delay(50);
 80010b0:	2032      	movs	r0, #50	@ 0x32
 80010b2:	f001 fab1 	bl	8002618 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	ddea      	ble.n	8001098 <main+0x40>
 80010c2:	e000      	b.n	80010c6 <main+0x6e>
		  break;
 80010c4:	bf00      	nop
  }

  // Start convert ADC using DMA
  if (HAL_ADC_Start_DMA(&hadc1, adcBuffer, 4) != HAL_OK) {
 80010c6:	2204      	movs	r2, #4
 80010c8:	4909      	ldr	r1, [pc, #36]	@ (80010f0 <main+0x98>)
 80010ca:	480a      	ldr	r0, [pc, #40]	@ (80010f4 <main+0x9c>)
 80010cc:	f001 fe4c 	bl	8002d68 <HAL_ADC_Start_DMA>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <main+0x82>
	  Error_Handler();
 80010d6:	f000 fd7b 	bl	8001bd0 <Error_Handler>
	  //Read Data from Memory W25Q128JV
	  //ReadData(address, sizeof(float));


	  //Read ADC
	  ReadADC_voltage_current();
 80010da:	f000 fb1d 	bl	8001718 <ReadADC_voltage_current>
	  HAL_Delay(100);
 80010de:	2064      	movs	r0, #100	@ 0x64
 80010e0:	f001 fa9a 	bl	8002618 <HAL_Delay>
	  ReadADC_voltage_current();
 80010e4:	bf00      	nop
 80010e6:	e7f8      	b.n	80010da <main+0x82>
 80010e8:	42020400 	.word	0x42020400
 80010ec:	20000498 	.word	0x20000498
 80010f0:	200004a0 	.word	0x200004a0
 80010f4:	200001f0 	.word	0x200001f0

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09c      	sub	sp, #112	@ 0x70
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2250      	movs	r2, #80	@ 0x50
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f00a fbff 	bl	800b90a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <SystemClock_Config+0xe4>)
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	4a2e      	ldr	r2, [pc, #184]	@ (80011dc <SystemClock_Config+0xe4>)
 8001124:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001128:	6113      	str	r3, [r2, #16]
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <SystemClock_Config+0xe4>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001136:	bf00      	nop
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <SystemClock_Config+0xe4>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b08      	cmp	r3, #8
 8001142:	d1f9      	bne.n	8001138 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 8001144:	2312      	movs	r3, #18
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800114c:	2308      	movs	r3, #8
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2340      	movs	r3, #64	@ 0x40
 8001152:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001158:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800115a:	2320      	movs	r3, #32
 800115c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8001162:	2302      	movs	r3, #2
 8001164:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001166:	2302      	movs	r3, #2
 8001168:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800116a:	2340      	movs	r3, #64	@ 0x40
 800116c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800117a:	2304      	movs	r3, #4
 800117c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800117e:	2300      	movs	r3, #0
 8001180:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	4618      	mov	r0, r3
 800118c:	f004 f8b0 	bl	80052f0 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001196:	f000 fd1b 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	231f      	movs	r3, #31
 800119c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80011a2:	2308      	movs	r3, #8
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2101      	movs	r1, #1
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 fcd1 	bl	8005b60 <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011c4:	f000 fd04 	bl	8001bd0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <SystemClock_Config+0xe8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <SystemClock_Config+0xe8>)
 80011ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	3770      	adds	r7, #112	@ 0x70
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	44020800 	.word	0x44020800
 80011e0:	40022000 	.word	0x40022000

080011e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fb8a 	bl	800b90a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <MX_ADC1_Init+0x120>)
 80011f8:	4a43      	ldr	r2, [pc, #268]	@ (8001308 <MX_ADC1_Init+0x124>)
 80011fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011fc:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <MX_ADC1_Init+0x120>)
 80011fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b3f      	ldr	r3, [pc, #252]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120a:	4b3e      	ldr	r3, [pc, #248]	@ (8001304 <MX_ADC1_Init+0x120>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001210:	4b3c      	ldr	r3, [pc, #240]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001212:	2201      	movs	r2, #1
 8001214:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001218:	2208      	movs	r2, #8
 800121a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800121c:	4b39      	ldr	r3, [pc, #228]	@ (8001304 <MX_ADC1_Init+0x120>)
 800121e:	2200      	movs	r2, #0
 8001220:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001222:	4b38      	ldr	r3, [pc, #224]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001224:	2201      	movs	r2, #1
 8001226:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001228:	4b36      	ldr	r3, [pc, #216]	@ (8001304 <MX_ADC1_Init+0x120>)
 800122a:	2204      	movs	r2, #4
 800122c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b35      	ldr	r3, [pc, #212]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001236:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123c:	4b31      	ldr	r3, [pc, #196]	@ (8001304 <MX_ADC1_Init+0x120>)
 800123e:	2200      	movs	r2, #0
 8001240:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001242:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <MX_ADC1_Init+0x120>)
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001250:	4b2c      	ldr	r3, [pc, #176]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001252:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001256:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001258:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <MX_ADC1_Init+0x120>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001260:	4828      	ldr	r0, [pc, #160]	@ (8001304 <MX_ADC1_Init+0x120>)
 8001262:	f001 fc33 	bl	8002acc <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 fcb0 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <MX_ADC1_Init+0x128>)
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001274:	2306      	movs	r3, #6
 8001276:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001278:	2305      	movs	r3, #5
 800127a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800127c:	237f      	movs	r3, #127	@ 0x7f
 800127e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001280:	2304      	movs	r3, #4
 8001282:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	481d      	ldr	r0, [pc, #116]	@ (8001304 <MX_ADC1_Init+0x120>)
 800128e:	f001 fe77 	bl	8002f80 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001298:	f000 fc9a 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_ADC1_Init+0x12c>)
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012a0:	230c      	movs	r3, #12
 80012a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012a4:	2304      	movs	r3, #4
 80012a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4815      	ldr	r0, [pc, #84]	@ (8001304 <MX_ADC1_Init+0x120>)
 80012ae:	f001 fe67 	bl	8002f80 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012b8:	f000 fc8a 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_ADC1_Init+0x130>)
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012c0:	2312      	movs	r3, #18
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012c4:	2305      	movs	r3, #5
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	480d      	ldr	r0, [pc, #52]	@ (8001304 <MX_ADC1_Init+0x120>)
 80012ce:	f001 fe57 	bl	8002f80 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80012d8:	f000 fc7a 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_ADC1_Init+0x134>)
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012e0:	2318      	movs	r3, #24
 80012e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012e4:	2304      	movs	r3, #4
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_ADC1_Init+0x120>)
 80012ee:	f001 fe47 	bl	8002f80 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012f8:	f000 fc6a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001f0 	.word	0x200001f0
 8001308:	42028000 	.word	0x42028000
 800130c:	14f00020 	.word	0x14f00020
 8001310:	10c00010 	.word	0x10c00010
 8001314:	04300002 	.word	0x04300002
 8001318:	2a000400 	.word	0x2a000400

0800131c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <MX_GPDMA1_Init+0x3c>)
 8001324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001328:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <MX_GPDMA1_Init+0x3c>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_GPDMA1_Init+0x3c>)
 8001334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	201b      	movs	r0, #27
 8001346:	f002 fbe9 	bl	8003b1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800134a:	201b      	movs	r0, #27
 800134c:	f002 fc00 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	44020c00 	.word	0x44020c00

0800135c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001362:	4a28      	ldr	r2, [pc, #160]	@ (8001404 <MX_SPI1_Init+0xa8>)
 8001364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001368:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800136c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001376:	2203      	movs	r2, #3
 8001378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_SPI1_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001388:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800138c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_SPI1_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_SPI1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_SPI1_Init+0xa4>)
 80013ec:	f006 ffc8 	bl	8008380 <HAL_SPI_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80013f6:	f000 fbeb 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000030c 	.word	0x2000030c
 8001404:	40013000 	.word	0x40013000

08001408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b09c      	sub	sp, #112	@ 0x70
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001428:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2234      	movs	r2, #52	@ 0x34
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f00a fa61 	bl	800b90a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001448:	4b45      	ldr	r3, [pc, #276]	@ (8001560 <MX_TIM1_Init+0x158>)
 800144a:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <MX_TIM1_Init+0x15c>)
 800144c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800144e:	4b44      	ldr	r3, [pc, #272]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b42      	ldr	r3, [pc, #264]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 800145a:	4b41      	ldr	r3, [pc, #260]	@ (8001560 <MX_TIM1_Init+0x158>)
 800145c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001460:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b3f      	ldr	r3, [pc, #252]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001468:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <MX_TIM1_Init+0x158>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b3c      	ldr	r3, [pc, #240]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001474:	483a      	ldr	r0, [pc, #232]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001476:	f007 fcfe 	bl	8008e76 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001480:	f000 fba6 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800148e:	4619      	mov	r1, r3
 8001490:	4833      	ldr	r0, [pc, #204]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001492:	f007 ff8b 	bl	80093ac <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800149c:	f000 fb98 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014a0:	482f      	ldr	r0, [pc, #188]	@ (8001560 <MX_TIM1_Init+0x158>)
 80014a2:	f007 fd3f 	bl	8008f24 <HAL_TIM_PWM_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014ac:	f000 fb90 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c0:	4619      	mov	r1, r3
 80014c2:	4827      	ldr	r0, [pc, #156]	@ (8001560 <MX_TIM1_Init+0x158>)
 80014c4:	f008 fc02 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014ce:	f000 fb7f 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	@ 0x60
 80014d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	481a      	ldr	r0, [pc, #104]	@ (8001560 <MX_TIM1_Init+0x158>)
 80014f8:	f007 fe44 	bl	8009184 <HAL_TIM_PWM_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001502:	f000 fb65 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800152c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4807      	ldr	r0, [pc, #28]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001544:	f008 fc2a 	bl	8009d9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800154e:	f000 fb3f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_TIM1_Init+0x158>)
 8001554:	f000 fd62 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001558:	bf00      	nop
 800155a:	3770      	adds	r7, #112	@ 0x70
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000039c 	.word	0x2000039c
 8001564:	40012c00 	.word	0x40012c00

08001568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <MX_USART1_UART_Init+0x94>)
 8001570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015b2:	f008 fc79 	bl	8009ea8 <HAL_UART_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 fb08 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015c4:	f009 f934 	bl	800a830 <HAL_UARTEx_SetTxFifoThreshold>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015ce:	f000 faff 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015d6:	f009 f969 	bl	800a8ac <HAL_UARTEx_SetRxFifoThreshold>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015e0:	f000 faf6 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_USART1_UART_Init+0x90>)
 80015e6:	f009 f8ea 	bl	800a7be <HAL_UARTEx_DisableFifoMode>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015f0:	f000 faee 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200003e8 	.word	0x200003e8
 80015fc:	40013800 	.word	0x40013800

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b36      	ldr	r3, [pc, #216]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161c:	4a34      	ldr	r2, [pc, #208]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001626:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 8001628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 8001636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800163a:	4a2d      	ldr	r2, [pc, #180]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 8001646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 8001654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001658:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <MX_GPIO_Init+0xf0>)
 8001664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	481f      	ldr	r0, [pc, #124]	@ (80016f4 <MX_GPIO_Init+0xf4>)
 8001676:	f003 fe23 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BATT1_Pin|BATT2_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001680:	481d      	ldr	r0, [pc, #116]	@ (80016f8 <MX_GPIO_Init+0xf8>)
 8001682:	f003 fe1d 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	@ 0x80
 800168a:	481c      	ldr	r0, [pc, #112]	@ (80016fc <MX_GPIO_Init+0xfc>)
 800168c:	f003 fe18 	bl	80052c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001690:	2310      	movs	r3, #16
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	4813      	ldr	r0, [pc, #76]	@ (80016f4 <MX_GPIO_Init+0xf4>)
 80016a8:	f003 fcb8 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT1_Pin BATT2_Pin */
  GPIO_InitStruct.Pin = BATT1_Pin|BATT2_Pin;
 80016ac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <MX_GPIO_Init+0xf8>)
 80016c6:	f003 fca9 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	4806      	ldr	r0, [pc, #24]	@ (80016fc <MX_GPIO_Init+0xfc>)
 80016e2:	f003 fc9b 	bl	800501c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	44020c00 	.word	0x44020c00
 80016f4:	42020000 	.word	0x42020000
 80016f8:	42020400 	.word	0x42020400
 80016fc:	42020800 	.word	0x42020800

08001700 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
		//ReadADC_voltage_current();
	}
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	0000      	movs	r0, r0
	...

08001718 <ReadADC_voltage_current>:

// Function to process ADC data into Voltage and Current values
void ReadADC_voltage_current(void){
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
	uint32_t sumADC_voltage1 = 0, sumADC_current1 = 0,sumADC_voltage2 = 0, sumADC_current2 = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
	uint16_t value_voltage1, value_current1, value_voltage2, value_current2;
	float voltage_current1,voltage_current2;

	for (int i = 0; i < 500; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e016      	b.n	8001762 <ReadADC_voltage_current+0x4a>
		sumADC_voltage1 += adcBuffer[0];
 8001734:	4bc6      	ldr	r3, [pc, #792]	@ (8001a50 <ReadADC_voltage_current+0x338>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173a:	4413      	add	r3, r2
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
		sumADC_voltage2 += adcBuffer[1];
 800173e:	4bc4      	ldr	r3, [pc, #784]	@ (8001a50 <ReadADC_voltage_current+0x338>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	61fb      	str	r3, [r7, #28]
		sumADC_current1 += adcBuffer[2];
 8001748:	4bc1      	ldr	r3, [pc, #772]	@ (8001a50 <ReadADC_voltage_current+0x338>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	6a3a      	ldr	r2, [r7, #32]
 800174e:	4413      	add	r3, r2
 8001750:	623b      	str	r3, [r7, #32]
		sumADC_current2 += adcBuffer[3];
 8001752:	4bbf      	ldr	r3, [pc, #764]	@ (8001a50 <ReadADC_voltage_current+0x338>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4413      	add	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < 500; i++) {
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001768:	dbe4      	blt.n	8001734 <ReadADC_voltage_current+0x1c>
	}

	value_voltage1 = ((sumADC_voltage1 / 500) - 60) * 3882 / (3942 - 60);
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	4ab9      	ldr	r2, [pc, #740]	@ (8001a54 <ReadADC_voltage_current+0x33c>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	f640 722a 	movw	r2, #3882	@ 0xf2a
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	f5a3 3363 	sub.w	r3, r3, #232448	@ 0x38c00
 8001780:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001784:	4ab4      	ldr	r2, [pc, #720]	@ (8001a58 <ReadADC_voltage_current+0x340>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	827b      	strh	r3, [r7, #18]
	value_current1 = ((sumADC_current1 / 500) - 60) * 4035 / (4095 - 60);
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	4ab0      	ldr	r2, [pc, #704]	@ (8001a54 <ReadADC_voltage_current+0x33c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	f640 72c3 	movw	r2, #4035	@ 0xfc3
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	f5a3 336c 	sub.w	r3, r3, #241664	@ 0x3b000
 80017a4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80017a8:	4aac      	ldr	r2, [pc, #688]	@ (8001a5c <ReadADC_voltage_current+0x344>)
 80017aa:	fba2 1203 	umull	r1, r2, r2, r3
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	0adb      	lsrs	r3, r3, #11
 80017b6:	823b      	strh	r3, [r7, #16]
	value_voltage2 = ((sumADC_voltage2 / 500) - 59) * 3886 / (3994 - 59);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4aa6      	ldr	r2, [pc, #664]	@ (8001a54 <ReadADC_voltage_current+0x33c>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	f640 722e 	movw	r2, #3886	@ 0xf2e
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	f5a3 335f 	sub.w	r3, r3, #228352	@ 0x37c00
 80017ce:	f2a3 339a 	subw	r3, r3, #922	@ 0x39a
 80017d2:	4aa3      	ldr	r2, [pc, #652]	@ (8001a60 <ReadADC_voltage_current+0x348>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0adb      	lsrs	r3, r3, #11
 80017da:	81fb      	strh	r3, [r7, #14]
	value_current2 = sumADC_current2 / 500;//((sumADC_current2 / 200) - 57) * 4038 / (4095 - 57);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4a9d      	ldr	r2, [pc, #628]	@ (8001a54 <ReadADC_voltage_current+0x33c>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	81bb      	strh	r3, [r7, #12]

	voltage1 = (value_voltage1 * 14.6) / 3882;
 80017e8:	8a7b      	ldrh	r3, [r7, #18]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe feae 	bl	800054c <__aeabi_i2d>
 80017f0:	a381      	add	r3, pc, #516	@ (adr r3, 80019f8 <ReadADC_voltage_current+0x2e0>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe ff13 	bl	8000620 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	a37f      	add	r3, pc, #508	@ (adr r3, 8001a00 <ReadADC_voltage_current+0x2e8>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7ff f834 	bl	8000874 <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9fc 	bl	8000c10 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	4a92      	ldr	r2, [pc, #584]	@ (8001a64 <ReadADC_voltage_current+0x34c>)
 800181c:	6013      	str	r3, [r2, #0]
	voltage_current1 = (value_current1 * 3.31) / 4035;
 800181e:	8a3b      	ldrh	r3, [r7, #16]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe93 	bl	800054c <__aeabi_i2d>
 8001826:	a378      	add	r3, pc, #480	@ (adr r3, 8001a08 <ReadADC_voltage_current+0x2f0>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe fef8 	bl	8000620 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	a375      	add	r3, pc, #468	@ (adr r3, 8001a10 <ReadADC_voltage_current+0x2f8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f819 	bl	8000874 <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9e1 	bl	8000c10 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	60bb      	str	r3, [r7, #8]
	current1 = fabs((voltage_current1 - 2.55) / 0.1041);
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f7fe fe8c 	bl	8000570 <__aeabi_f2d>
 8001858:	a36f      	add	r3, pc, #444	@ (adr r3, 8001a18 <ReadADC_voltage_current+0x300>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fd27 	bl	80002b0 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a36d      	add	r3, pc, #436	@ (adr r3, 8001a20 <ReadADC_voltage_current+0x308>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7ff f800 	bl	8000874 <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f9c8 	bl	8000c10 <__aeabi_d2f>
 8001880:	ee07 0a90 	vmov	s15, r0
 8001884:	eef0 7ae7 	vabs.f32	s15, s15
 8001888:	4b77      	ldr	r3, [pc, #476]	@ (8001a68 <ReadADC_voltage_current+0x350>)
 800188a:	edc3 7a00 	vstr	s15, [r3]

	voltage2 = (value_voltage2 * 14.6) / 3836;
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe5b 	bl	800054c <__aeabi_i2d>
 8001896:	a358      	add	r3, pc, #352	@ (adr r3, 80019f8 <ReadADC_voltage_current+0x2e0>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fec0 	bl	8000620 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8001a28 <ReadADC_voltage_current+0x310>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe ffe1 	bl	8000874 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f9a9 	bl	8000c10 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a6c <ReadADC_voltage_current+0x354>)
 80018c2:	6013      	str	r3, [r2, #0]
	voltage_current2 = (value_current2 * 3.31) / 4095;
 80018c4:	89bb      	ldrh	r3, [r7, #12]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe40 	bl	800054c <__aeabi_i2d>
 80018cc:	a34e      	add	r3, pc, #312	@ (adr r3, 8001a08 <ReadADC_voltage_current+0x2f0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fea5 	bl	8000620 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a354      	add	r3, pc, #336	@ (adr r3, 8001a30 <ReadADC_voltage_current+0x318>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe ffc6 	bl	8000874 <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f98e 	bl	8000c10 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	607b      	str	r3, [r7, #4]
	current2 = fabs((voltage_current2 - 2.437) / 0.1041);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7fe fe39 	bl	8000570 <__aeabi_f2d>
 80018fe:	a34e      	add	r3, pc, #312	@ (adr r3, 8001a38 <ReadADC_voltage_current+0x320>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe fcd4 	bl	80002b0 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	a343      	add	r3, pc, #268	@ (adr r3, 8001a20 <ReadADC_voltage_current+0x308>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe ffad 	bl	8000874 <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f975 	bl	8000c10 <__aeabi_d2f>
 8001926:	ee07 0a90 	vmov	s15, r0
 800192a:	eef0 7ae7 	vabs.f32	s15, s15
 800192e:	4b50      	ldr	r3, [pc, #320]	@ (8001a70 <ReadADC_voltage_current+0x358>)
 8001930:	edc3 7a00 	vstr	s15, [r3]

	//Konsumsi Arus Algoritma
	NowMillis = HAL_GetTick();
 8001934:	f000 fe64 	bl	8002600 <HAL_GetTick>
 8001938:	4603      	mov	r3, r0
 800193a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a74 <ReadADC_voltage_current+0x35c>)
 800193c:	6013      	str	r3, [r2, #0]
	if (NowMillis - SebelumMillis >= 1000){
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <ReadADC_voltage_current+0x35c>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <ReadADC_voltage_current+0x360>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800194c:	d339      	bcc.n	80019c2 <ReadADC_voltage_current+0x2aa>
		arusFiltered = 0.2 * current1 + 0.8 * arusFiltered;
 800194e:	4b46      	ldr	r3, [pc, #280]	@ (8001a68 <ReadADC_voltage_current+0x350>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe0c 	bl	8000570 <__aeabi_f2d>
 8001958:	a339      	add	r3, pc, #228	@ (adr r3, 8001a40 <ReadADC_voltage_current+0x328>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe5f 	bl	8000620 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	4b44      	ldr	r3, [pc, #272]	@ (8001a7c <ReadADC_voltage_current+0x364>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdfe 	bl	8000570 <__aeabi_f2d>
 8001974:	a334      	add	r3, pc, #208	@ (adr r3, 8001a48 <ReadADC_voltage_current+0x330>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe51 	bl	8000620 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4620      	mov	r0, r4
 8001984:	4629      	mov	r1, r5
 8001986:	f7fe fc95 	bl	80002b4 <__adddf3>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f93d 	bl	8000c10 <__aeabi_d2f>
 8001996:	4603      	mov	r3, r0
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <ReadADC_voltage_current+0x364>)
 800199a:	6013      	str	r3, [r2, #0]
		konsumsiEnergi += (arusFiltered / 3600);
 800199c:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <ReadADC_voltage_current+0x364>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001a80 <ReadADC_voltage_current+0x368>
 80019a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019aa:	4b36      	ldr	r3, [pc, #216]	@ (8001a84 <ReadADC_voltage_current+0x36c>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <ReadADC_voltage_current+0x36c>)
 80019b6:	edc3 7a00 	vstr	s15, [r3]
		SebelumMillis = NowMillis;
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <ReadADC_voltage_current+0x35c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2e      	ldr	r2, [pc, #184]	@ (8001a78 <ReadADC_voltage_current+0x360>)
 80019c0:	6013      	str	r3, [r2, #0]
//	printf("Voltage1 : %.2f |", voltage1);
//	printf("current1 : %.4f |", current1);
//	printf("Voltage2 : %.2f |", voltage2);
//	printf("current2 : %.4f \n", current2);

	printf("Raw data : %d |", value_current1);
 80019c2:	8a3b      	ldrh	r3, [r7, #16]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4830      	ldr	r0, [pc, #192]	@ (8001a88 <ReadADC_voltage_current+0x370>)
 80019c8:	f009 ff2a 	bl	800b820 <iprintf>
	printf("voltage_current1 : %.2f ", voltage_current1);
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f7fe fdcf 	bl	8000570 <__aeabi_f2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	482d      	ldr	r0, [pc, #180]	@ (8001a8c <ReadADC_voltage_current+0x374>)
 80019d8:	f009 ff22 	bl	800b820 <iprintf>
	printf("current1 : %.4f \n", current1);
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <ReadADC_voltage_current+0x350>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdc5 	bl	8000570 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4829      	ldr	r0, [pc, #164]	@ (8001a90 <ReadADC_voltage_current+0x378>)
 80019ec:	f009 ff18 	bl	800b820 <iprintf>

//	printf("Raw data voltage1: %d |", value_voltage1);
//	printf("Raw data currene1: %d |", value_current1);
//	printf("Raw data voltage2: %d |", value_voltage2);
//	printf("Raw data currene2: %d \n", value_current2);
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	@ 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}
 80019f8:	33333333 	.word	0x33333333
 80019fc:	402d3333 	.word	0x402d3333
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40ae5400 	.word	0x40ae5400
 8001a08:	47ae147b 	.word	0x47ae147b
 8001a0c:	400a7ae1 	.word	0x400a7ae1
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40af8600 	.word	0x40af8600
 8001a18:	66666666 	.word	0x66666666
 8001a1c:	40046666 	.word	0x40046666
 8001a20:	2f837b4a 	.word	0x2f837b4a
 8001a24:	3fbaa64c 	.word	0x3fbaa64c
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40adf800 	.word	0x40adf800
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40affe00 	.word	0x40affe00
 8001a38:	db22d0e5 	.word	0xdb22d0e5
 8001a3c:	40037ef9 	.word	0x40037ef9
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	3fc99999 	.word	0x3fc99999
 8001a48:	9999999a 	.word	0x9999999a
 8001a4c:	3fe99999 	.word	0x3fe99999
 8001a50:	200004a0 	.word	0x200004a0
 8001a54:	10624dd3 	.word	0x10624dd3
 8001a58:	10e1cc09 	.word	0x10e1cc09
 8001a5c:	03dec141 	.word	0x03dec141
 8001a60:	853cb2c7 	.word	0x853cb2c7
 8001a64:	20000484 	.word	0x20000484
 8001a68:	20000488 	.word	0x20000488
 8001a6c:	2000048c 	.word	0x2000048c
 8001a70:	20000490 	.word	0x20000490
 8001a74:	2000047c 	.word	0x2000047c
 8001a78:	20000480 	.word	0x20000480
 8001a7c:	2000049c 	.word	0x2000049c
 8001a80:	45610000 	.word	0x45610000
 8001a84:	20000494 	.word	0x20000494
 8001a88:	0800f110 	.word	0x0800f110
 8001a8c:	0800f120 	.word	0x0800f120
 8001a90:	0800f13c 	.word	0x0800f13c

08001a94 <ReadData>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
    HAL_Delay(50);
}

//Function to read data from flash memory
void ReadData(uint32_t address, uint32_t length) {
 8001a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
 8001aa0:	466b      	mov	r3, sp
 8001aa2:	461e      	mov	r6, r3
    uint8_t cmd[4];
    cmd[0] = 0x03;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	73fb      	strb	r3, [r7, #15]

    uint8_t data[length];
 8001abe:	6839      	ldr	r1, [r7, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	4688      	mov	r8, r1
 8001aca:	4699      	mov	r9, r3
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001adc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	461d      	mov	r5, r3
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	00eb      	lsls	r3, r5, #3
 8001af0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af4:	00e2      	lsls	r2, r4, #3
 8001af6:	1dcb      	adds	r3, r1, #7
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	ebad 0d03 	sub.w	sp, sp, r3
 8001b00:	466b      	mov	r3, sp
 8001b02:	3300      	adds	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2110      	movs	r1, #16
 8001b0a:	4811      	ldr	r0, [pc, #68]	@ (8001b50 <ReadData+0xbc>)
 8001b0c:	f003 fbd8 	bl	80052c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8001b10:	f107 010c 	add.w	r1, r7, #12
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	2204      	movs	r2, #4
 8001b1a:	480e      	ldr	r0, [pc, #56]	@ (8001b54 <ReadData+0xc0>)
 8001b1c:	f006 fd2c 	bl	8008578 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	6939      	ldr	r1, [r7, #16]
 8001b2a:	480a      	ldr	r0, [pc, #40]	@ (8001b54 <ReadData+0xc0>)
 8001b2c:	f006 ff26 	bl	800897c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2110      	movs	r1, #16
 8001b34:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <ReadData+0xbc>)
 8001b36:	f003 fbc3 	bl	80052c0 <HAL_GPIO_WritePin>

    memcpy(&read_data_float, data, sizeof(read_data_float));
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <ReadData+0xc4>)
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	46b5      	mov	sp, r6
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b50:	42020000 	.word	0x42020000
 8001b54:	2000030c 	.word	0x2000030c
 8001b58:	20000498 	.word	0x20000498

08001b5c <Beep_Beep>:

//Function to produce a beep sound on the buzzer
void Beep_Beep(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b62:	2100      	movs	r1, #0
 8001b64:	4819      	ldr	r0, [pc, #100]	@ (8001bcc <Beep_Beep+0x70>)
 8001b66:	f007 fa3f 	bl	8008fe8 <HAL_TIM_PWM_Start>
	for (int i = 0; i < 2; i++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	e024      	b.n	8001bba <Beep_Beep+0x5e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b70:	2100      	movs	r1, #0
 8001b72:	4816      	ldr	r0, [pc, #88]	@ (8001bcc <Beep_Beep+0x70>)
 8001b74:	f007 fa38 	bl	8008fe8 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <Beep_Beep+0x70>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 8001b82:	2064      	movs	r0, #100	@ 0x64
 8001b84:	f000 fd48 	bl	8002618 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <Beep_Beep+0x70>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001b90:	2032      	movs	r0, #50	@ 0x32
 8001b92:	f000 fd41 	bl	8002618 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <Beep_Beep+0x70>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001ba0:	2032      	movs	r0, #50	@ 0x32
 8001ba2:	f000 fd39 	bl	8002618 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <Beep_Beep+0x70>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001bae:	2032      	movs	r0, #50	@ 0x32
 8001bb0:	f000 fd32 	bl	8002618 <HAL_Delay>
	for (int i = 0; i < 2; i++) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	ddd7      	ble.n	8001b70 <Beep_Beep+0x14>
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000039c 	.word	0x2000039c

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <Error_Handler+0x8>

08001bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0c8      	sub	sp, #288	@ 0x120
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bf6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bfa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c14:	4618      	mov	r0, r3
 8001c16:	2388      	movs	r3, #136	@ 0x88
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f009 fe75 	bl	800b90a <memset>
  if(hadc->Instance==ADC1)
 8001c20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a9a      	ldr	r2, [pc, #616]	@ (8001e98 <HAL_ADC_MspInit+0x2ac>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	f040 812d 	bne.w	8001e8e <HAL_ADC_MspInit+0x2a2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001c34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c38:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001c3c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001c48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c50:	2200      	movs	r2, #0
 8001c52:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 fac3 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8001c64:	f7ff ffb4 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c68:	4b8c      	ldr	r3, [pc, #560]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6e:	4a8b      	ldr	r2, [pc, #556]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c78:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001c82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c94:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b81      	ldr	r3, [pc, #516]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cac:	f003 0204 	and.w	r2, r3, #4
 8001cb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cc2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b75      	ldr	r3, [pc, #468]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cca:	4a74      	ldr	r2, [pc, #464]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd4:	4b71      	ldr	r3, [pc, #452]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cda:	f003 0201 	and.w	r2, r3, #1
 8001cde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ce2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cf0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf8:	4a68      	ldr	r2, [pc, #416]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d02:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_ADC_MspInit+0x2b0>)
 8001d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d08:	f003 0202 	and.w	r2, r3, #2
 8001d0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d1e:	681b      	ldr	r3, [r3, #0]
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = ACS_BATT2_Pin|ADC_BATT2_Pin;
 8001d20:	2311      	movs	r3, #17
 8001d22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d32:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001d36:	4619      	mov	r1, r3
 8001d38:	4859      	ldr	r0, [pc, #356]	@ (8001ea0 <HAL_ADC_MspInit+0x2b4>)
 8001d3a:	f003 f96f 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACS_BATT1_Pin;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(ACS_BATT1_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001d54:	4619      	mov	r1, r3
 8001d56:	4853      	ldr	r0, [pc, #332]	@ (8001ea4 <HAL_ADC_MspInit+0x2b8>)
 8001d58:	f003 f960 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_BATT1_Pin;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(ADC_BATT1_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001d72:	4619      	mov	r1, r3
 8001d74:	484c      	ldr	r0, [pc, #304]	@ (8001ea8 <HAL_ADC_MspInit+0x2bc>)
 8001d76:	f003 f951 	bl	800501c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001d7a:	2321      	movs	r3, #33	@ 0x21
 8001d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001d98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8001da6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001daa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    NodeConfig.Init.SrcBurstLength = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    NodeConfig.Init.DestBurstLength = 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001dba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001de0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001de4:	4931      	ldr	r1, [pc, #196]	@ (8001eac <HAL_ADC_MspInit+0x2c0>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fadc 	bl	80043a4 <HAL_DMAEx_List_BuildNode>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_ADC_MspInit+0x20a>
    {
      Error_Handler();
 8001df2:	f7ff feed 	bl	8001bd0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001df6:	4a2d      	ldr	r2, [pc, #180]	@ (8001eac <HAL_ADC_MspInit+0x2c0>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	482d      	ldr	r0, [pc, #180]	@ (8001eb0 <HAL_ADC_MspInit+0x2c4>)
 8001dfc:	f002 fafe 	bl	80043fc <HAL_DMAEx_List_InsertNode>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_ADC_MspInit+0x21e>
    {
      Error_Handler();
 8001e06:	f7ff fee3 	bl	8001bd0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001e0a:	4829      	ldr	r0, [pc, #164]	@ (8001eb0 <HAL_ADC_MspInit+0x2c4>)
 8001e0c:	f002 fbbf 	bl	800458e <HAL_DMAEx_List_SetCircularMode>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_ADC_MspInit+0x22e>
    {
      Error_Handler();
 8001e16:	f7ff fedb 	bl	8001bd0 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001e1a:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e1c:	4a26      	ldr	r2, [pc, #152]	@ (8001eb8 <HAL_ADC_MspInit+0x2cc>)
 8001e1e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001e20:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e3a:	2281      	movs	r2, #129	@ 0x81
 8001e3c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001e3e:	481d      	ldr	r0, [pc, #116]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e40:	f002 f966 	bl	8004110 <HAL_DMAEx_List_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_ADC_MspInit+0x262>
    {
      Error_Handler();
 8001e4a:	f7ff fec1 	bl	8001bd0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001e4e:	4918      	ldr	r1, [pc, #96]	@ (8001eb0 <HAL_ADC_MspInit+0x2c4>)
 8001e50:	4818      	ldr	r0, [pc, #96]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e52:	f002 fbfd 	bl	8004650 <HAL_DMAEx_List_LinkQ>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001e5c:	f7ff feb8 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001e60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e64:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e74:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <HAL_ADC_MspInit+0x2c8>)
 8001e80:	f002 f8e5 	bl	800404e <HAL_DMA_ConfigChannelAttributes>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_ADC_MspInit+0x2a2>
    {
      Error_Handler();
 8001e8a:	f7ff fea1 	bl	8001bd0 <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e8e:	bf00      	nop
 8001e90:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	42028000 	.word	0x42028000
 8001e9c:	44020c00 	.word	0x44020c00
 8001ea0:	42020800 	.word	0x42020800
 8001ea4:	42020000 	.word	0x42020000
 8001ea8:	42020400 	.word	0x42020400
 8001eac:	20000258 	.word	0x20000258
 8001eb0:	2000027c 	.word	0x2000027c
 8001eb4:	20000294 	.word	0x20000294
 8001eb8:	40020050 	.word	0x40020050

08001ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0ae      	sub	sp, #184	@ 0xb8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	2288      	movs	r2, #136	@ 0x88
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f009 fd14 	bl	800b90a <memset>
  if(hspi->Instance==SPI1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a38      	ldr	r2, [pc, #224]	@ (8001fc8 <HAL_SPI_MspInit+0x10c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d169      	bne.n	8001fc0 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001eec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001efe:	f107 0318 	add.w	r3, r7, #24
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 f96e 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001f0e:	f7ff fe5f 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f12:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f18:	4a2c      	ldr	r2, [pc, #176]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f1e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f36:	4a25      	ldr	r2, [pc, #148]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f40:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f54:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_SPI_MspInit+0x110>)
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f6c:	23c0      	movs	r3, #192	@ 0xc0
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f84:	2305      	movs	r3, #5
 8001f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480f      	ldr	r0, [pc, #60]	@ (8001fd0 <HAL_SPI_MspInit+0x114>)
 8001f92:	f003 f843 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f96:	2308      	movs	r3, #8
 8001f98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4806      	ldr	r0, [pc, #24]	@ (8001fd4 <HAL_SPI_MspInit+0x118>)
 8001fbc:	f003 f82e 	bl	800501c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001fc0:	bf00      	nop
 8001fc2:	37b8      	adds	r7, #184	@ 0xb8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	44020c00 	.word	0x44020c00
 8001fd0:	42020000 	.word	0x42020000
 8001fd4:	42020400 	.word	0x42020400

08001fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_TIM_Base_MspInit+0x40>)
 8001fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ff0:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <HAL_TIM_Base_MspInit+0x40>)
 8001ff2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ff6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_TIM_Base_MspInit+0x40>)
 8001ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40012c00 	.word	0x40012c00
 8002018:	44020c00 	.word	0x44020c00

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a13      	ldr	r2, [pc, #76]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d11f      	bne.n	800207e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b13      	ldr	r3, [pc, #76]	@ (800208c <HAL_TIM_MspPostInit+0x70>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_TIM_MspPostInit+0x70>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800204e:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <HAL_TIM_MspPostInit+0x70>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002060:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <HAL_TIM_MspPostInit+0x74>)
 800207a:	f002 ffcf 	bl	800501c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	44020c00 	.word	0x44020c00
 8002090:	42020000 	.word	0x42020000

08002094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b0ac      	sub	sp, #176	@ 0xb0
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	2288      	movs	r2, #136	@ 0x88
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f009 fc28 	bl	800b90a <memset>
  if(huart->Instance==USART1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <HAL_UART_MspInit+0xc4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d145      	bne.n	8002150 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020c4:	f04f 0201 	mov.w	r2, #1
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020d0:	2300      	movs	r3, #0
 80020d2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f883 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80020e4:	f7ff fd74 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <HAL_UART_MspInit+0xc8>)
 80020ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020ee:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <HAL_UART_MspInit+0xc8>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_UART_MspInit+0xc8>)
 80020fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_UART_MspInit+0xc8>)
 8002108:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800210c:	4a13      	ldr	r2, [pc, #76]	@ (800215c <HAL_UART_MspInit+0xc8>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_UART_MspInit+0xc8>)
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002124:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800213e:	2307      	movs	r3, #7
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <HAL_UART_MspInit+0xcc>)
 800214c:	f002 ff66 	bl	800501c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002150:	bf00      	nop
 8002152:	37b0      	adds	r7, #176	@ 0xb0
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013800 	.word	0x40013800
 800215c:	44020c00 	.word	0x44020c00
 8002160:	42020000 	.word	0x42020000

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <NMI_Handler+0x4>

0800216c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <MemManage_Handler+0x4>

0800217c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <UsageFault_Handler+0x4>

0800218c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ba:	f000 fa0d 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80021ca:	f001 fddf 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000294 	.word	0x20000294

080021d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_kill>:

int _kill(int pid, int sig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f2:	f009 fbdd 	bl	800b9b0 <__errno>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2216      	movs	r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
  return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_exit>:

void _exit (int status)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffe7 	bl	80021e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800221a:	bf00      	nop
 800221c:	e7fd      	b.n	800221a <_exit+0x12>

0800221e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e00a      	b.n	8002246 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002230:	f3af 8000 	nop.w
 8002234:	4601      	mov	r1, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	60ba      	str	r2, [r7, #8]
 800223c:	b2ca      	uxtb	r2, r1
 800223e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3301      	adds	r3, #1
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	dbf0      	blt.n	8002230 <_read+0x12>
  }

  return len;
 800224e:	687b      	ldr	r3, [r7, #4]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e009      	b.n	800227e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	60ba      	str	r2, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fede 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	dbf1      	blt.n	800226a <_write+0x12>
  }
  return len;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_close>:

int _close(int file)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022b8:	605a      	str	r2, [r3, #4]
  return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_isatty>:

int _isatty(int file)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	@ (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f009 fb42 	bl	800b9b0 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	@ (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20008000 	.word	0x20008000
 8002358:	00000400 	.word	0x00000400
 800235c:	200004b0 	.word	0x200004b0
 8002360:	20000608 	.word	0x20000608

08002364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800236a:	4b30      	ldr	r3, [pc, #192]	@ (800242c <SystemInit+0xc8>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002370:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <SystemInit+0xc8>)
 8002372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002376:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800237a:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <SystemInit+0xcc>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002380:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <SystemInit+0xcc>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002386:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <SystemInit+0xcc>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <SystemInit+0xcc>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4927      	ldr	r1, [pc, #156]	@ (8002430 <SystemInit+0xcc>)
 8002392:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <SystemInit+0xd0>)
 8002394:	4013      	ands	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002398:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <SystemInit+0xcc>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800239e:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <SystemInit+0xcc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80023a4:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <SystemInit+0xcc>)
 80023a6:	4a24      	ldr	r2, [pc, #144]	@ (8002438 <SystemInit+0xd4>)
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80023aa:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <SystemInit+0xcc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <SystemInit+0xcc>)
 80023b2:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <SystemInit+0xd4>)
 80023b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <SystemInit+0xcc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80023bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <SystemInit+0xcc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <SystemInit+0xcc>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <SystemInit+0xcc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023ce:	4b17      	ldr	r3, [pc, #92]	@ (800242c <SystemInit+0xc8>)
 80023d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023d4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <SystemInit+0xd8>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80023de:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80023e6:	d003      	beq.n	80023f0 <SystemInit+0x8c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023ee:	d117      	bne.n	8002420 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <SystemInit+0xd8>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <SystemInit+0xd8>)
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <SystemInit+0xdc>)
 8002400:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <SystemInit+0xd8>)
 8002404:	4a0f      	ldr	r2, [pc, #60]	@ (8002444 <SystemInit+0xe0>)
 8002406:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <SystemInit+0xd8>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <SystemInit+0xd8>)
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <SystemInit+0xd8>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4a08      	ldr	r2, [pc, #32]	@ (800243c <SystemInit+0xd8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	61d3      	str	r3, [r2, #28]
  }
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00
 8002430:	44020c00 	.word	0x44020c00
 8002434:	fae2eae3 	.word	0xfae2eae3
 8002438:	01010280 	.word	0x01010280
 800243c:	40022000 	.word	0x40022000
 8002440:	08192a3b 	.word	0x08192a3b
 8002444:	4c5d6e7f 	.word	0x4c5d6e7f

08002448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002480 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800244c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800244e:	e003      	b.n	8002458 <LoopCopyDataInit>

08002450 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002452:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002454:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002456:	3104      	adds	r1, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002458:	480b      	ldr	r0, [pc, #44]	@ (8002488 <LoopForever+0xa>)
	ldr	r3, =_edata
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <LoopForever+0xe>)
	adds	r2, r0, r1
 800245c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800245e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002460:	d3f6      	bcc.n	8002450 <CopyDataInit>
	ldr	r2, =_sbss
 8002462:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002464:	e002      	b.n	800246c <LoopFillZerobss>

08002466 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002466:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002468:	f842 3b04 	str.w	r3, [r2], #4

0800246c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800246c:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <LoopForever+0x16>)
	cmp	r2, r3
 800246e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002470:	d3f9      	bcc.n	8002466 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002472:	f7ff ff77 	bl	8002364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002476:	f009 faa1 	bl	800b9bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247a:	f7fe fded 	bl	8001058 <main>

0800247e <LoopForever>:

LoopForever:
    b LoopForever
 800247e:	e7fe      	b.n	800247e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002480:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002484:	0800f5d0 	.word	0x0800f5d0
	ldr	r0, =_sdata
 8002488:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800248c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002490:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002494:	20000604 	.word	0x20000604

08002498 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_IRQHandler>
	...

0800249c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f001 fb30 	bl	8003b06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024a6:	f003 fd13 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_Init+0x44>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	490b      	ldr	r1, [pc, #44]	@ (80024e4 <HAL_Init+0x48>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <HAL_Init+0x4c>)
 80024be:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024c0:	2004      	movs	r0, #4
 80024c2:	f001 fb75 	bl	8003bb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c6:	200f      	movs	r0, #15
 80024c8:	f000 f810 	bl	80024ec <HAL_InitTick>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e002      	b.n	80024dc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024d6:	f7ff fb81 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	44020c00 	.word	0x44020c00
 80024e4:	0800f150 	.word	0x0800f150
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_InitTick+0xdc>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e05c      	b.n	80025be <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002504:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <HAL_InitTick+0xe0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d10c      	bne.n	800252a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002510:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <HAL_InitTick+0xe4>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <HAL_InitTick+0xdc>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e037      	b.n	800259a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800252a:	f001 fb99 	bl	8003c60 <HAL_SYSTICK_GetCLKSourceConfig>
 800252e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d023      	beq.n	800257e <HAL_InitTick+0x92>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d82d      	bhi.n	8002598 <HAL_InitTick+0xac>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_InitTick+0x5e>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d00d      	beq.n	8002564 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002548:	e026      	b.n	8002598 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800254a:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <HAL_InitTick+0xe4>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <HAL_InitTick+0xdc>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002558:	fbb3 f3f1 	udiv	r3, r3, r1
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	60fb      	str	r3, [r7, #12]
        break;
 8002562:	e01a      	b.n	800259a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002564:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <HAL_InitTick+0xdc>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002572:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	60fb      	str	r3, [r7, #12]
        break;
 800257c:	e00d      	b.n	800259a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_InitTick+0xdc>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002588:	fbb3 f3f2 	udiv	r3, r3, r2
 800258c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	60fb      	str	r3, [r7, #12]
        break;
 8002596:	e000      	b.n	800259a <HAL_InitTick+0xae>
        break;
 8002598:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f001 fae6 	bl	8003b6c <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e009      	b.n	80025be <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025aa:	2200      	movs	r2, #0
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	f04f 30ff 	mov.w	r0, #4294967295
 80025b2:	f001 fab3 	bl	8003b1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80025b6:	4a07      	ldr	r2, [pc, #28]	@ (80025d4 <HAL_InitTick+0xe8>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000008 	.word	0x20000008
 80025cc:	e000e010 	.word	0xe000e010
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008
 80025fc:	200004b4 	.word	0x200004b4

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200004b4 	.word	0x200004b4

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008

08002660 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80026d6:	f043 0202 	orr.w	r2, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80026f4:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80026f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80026fa:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	42028000 	.word	0x42028000

08002714 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3360      	adds	r3, #96	@ 0x60
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <LL_ADC_SetOffset+0x44>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	4313      	orrs	r3, r2
 8002744:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	03fff000 	.word	0x03fff000

0800275c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3360      	adds	r3, #96	@ 0x60
 800276a:	461a      	mov	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3360      	adds	r3, #96	@ 0x60
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027be:	b480      	push	{r7}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3360      	adds	r3, #96	@ 0x60
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3360      	adds	r3, #96	@ 0x60
 8002804:	461a      	mov	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	615a      	str	r2, [r3, #20]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3330      	adds	r3, #48	@ 0x30
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	211f      	movs	r1, #31
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 011f 	and.w	r1, r3, #31
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3314      	adds	r3, #20
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0e5b      	lsrs	r3, r3, #25
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0d1b      	lsrs	r3, r3, #20
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2107      	movs	r1, #7
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	401a      	ands	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0d1b      	lsrs	r3, r3, #20
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800293c:	43db      	mvns	r3, r3
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0318 	and.w	r3, r3, #24
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002948:	40d9      	lsrs	r1, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	400b      	ands	r3, r1
 800294e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	000fffff 	.word	0x000fffff

0800296c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800297c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6093      	str	r3, [r2, #8]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a4:	d101      	bne.n	80029aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029f4:	d101      	bne.n	80029fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_IsEnabled+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_IsEnabled+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e131      	b.n	8002d4a <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff f879 	bl	8001bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff3f 	bl	8002990 <LL_ADC_IsDeepPowerDownEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff25 	bl	800296c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff5a 	bl	80029e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d115      	bne.n	8002b5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff3e 	bl	80029b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3c:	4b85      	ldr	r3, [pc, #532]	@ (8002d54 <HAL_ADC_Init+0x288>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	4a85      	ldr	r2, [pc, #532]	@ (8002d58 <HAL_ADC_Init+0x28c>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff3c 	bl	80029e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	f043 0210 	orr.w	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff75 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002b94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 80ca 	bne.w	8002d38 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 80c6 	bne.w	8002d38 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bb4:	f043 0202 	orr.w	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff35 	bl	8002a30 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bcc:	4863      	ldr	r0, [pc, #396]	@ (8002d5c <HAL_ADC_Init+0x290>)
 8002bce:	f7ff ff2f 	bl	8002a30 <LL_ADC_IsEnabled>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4860      	ldr	r0, [pc, #384]	@ (8002d60 <HAL_ADC_Init+0x294>)
 8002be0:	f7ff fd3e 	bl	8002660 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e5b      	ldrb	r3, [r3, #25]
 8002be8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bf4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	3b01      	subs	r3, #1
 8002c18:	045b      	lsls	r3, r3, #17
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <HAL_ADC_Init+0x298>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff ff1a 	bl	8002aa4 <LL_ADC_INJ_IsConversionOngoing>
 8002c70:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d13d      	bne.n	8002cf4 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d13a      	bne.n	8002cf4 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7e1b      	ldrb	r3, [r3, #24]
 8002c82:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c9a:	f023 0302 	bic.w	r3, r3, #2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d118      	bne.n	8002ce4 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cbc:	f023 0304 	bic.w	r3, r3, #4
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cc8:	4311      	orrs	r1, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	e007      	b.n	8002cf4 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10c      	bne.n	8002d16 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f023 010f 	bic.w	r1, r3, #15
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	1e5a      	subs	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d14:	e007      	b.n	8002d26 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 020f 	bic.w	r2, r2, #15
 8002d24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d36:	e007      	b.n	8002d48 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	f043 0210 	orr.w	r2, r3, #16
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000000 	.word	0x20000000
 8002d58:	053e2d63 	.word	0x053e2d63
 8002d5c:	42028000 	.word	0x42028000
 8002d60:	42028300 	.word	0x42028300
 8002d64:	fff04007 	.word	0xfff04007

08002d68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0a2      	sub	sp, #136	@ 0x88
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fe80 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f040 80d9 	bne.w	8002f38 <HAL_ADC_Start_DMA+0x1d0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_Start_DMA+0x2c>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0d6      	b.n	8002f42 <HAL_ADC_Start_DMA+0x1da>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fcef 	bl	8003780 <ADC_Enable>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002da8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 80be 	bne.w	8002f2e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_ADC_Start_DMA+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd6:	f023 0206 	bic.w	r2, r3, #6
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dde:	e002      	b.n	8002de6 <HAL_ADC_Start_DMA+0x7e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dea:	4a58      	ldr	r2, [pc, #352]	@ (8002f4c <HAL_ADC_Start_DMA+0x1e4>)
 8002dec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df2:	4a57      	ldr	r2, [pc, #348]	@ (8002f50 <HAL_ADC_Start_DMA+0x1e8>)
 8002df4:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfa:	4a56      	ldr	r2, [pc, #344]	@ (8002f54 <HAL_ADC_Start_DMA+0x1ec>)
 8002dfc:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	221c      	movs	r2, #28
 8002e04:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d04d      	beq.n	8002ed8 <HAL_ADC_Start_DMA+0x170>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d046      	beq.n	8002ed4 <HAL_ADC_Start_DMA+0x16c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d040      	beq.n	8002ed4 <HAL_ADC_Start_DMA+0x16c>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f107 0314 	add.w	r3, r7, #20
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fab5 	bl	80043d0 <HAL_DMAEx_List_GetNodeConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_ADC_Start_DMA+0x108>
            {
              return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e068      	b.n	8002f42 <HAL_ADC_Start_DMA+0x1da>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d104      	bne.n	8002e80 <HAL_ADC_Start_DMA+0x118>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e7e:	e00a      	b.n	8002e96 <HAL_ADC_Start_DMA+0x12e>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d104      	bne.n	8002e90 <HAL_ADC_Start_DMA+0x128>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e8e:	e002      	b.n	8002e96 <HAL_ADC_Start_DMA+0x12e>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ea2:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f9d8 	bl	800427c <HAL_DMAEx_List_Start_IT>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002ed2:	e026      	b.n	8002f22 <HAL_ADC_Start_DMA+0x1ba>
          }
          else
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e034      	b.n	8002f42 <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d104      	bne.n	8002eec <HAL_ADC_Start_DMA+0x184>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eea:	e00c      	b.n	8002f06 <HAL_ADC_Start_DMA+0x19e>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d104      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x198>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002efe:	e002      	b.n	8002f06 <HAL_ADC_Start_DMA+0x19e>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3340      	adds	r3, #64	@ 0x40
 8002f10:	4619      	mov	r1, r3
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f18:	f000 fed8 	bl	8003ccc <HAL_DMA_Start_IT>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fd95 	bl	8002a56 <LL_ADC_REG_StartConversion>
 8002f2c:	e007      	b.n	8002f3e <HAL_ADC_Start_DMA+0x1d6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002f36:	e002      	b.n	8002f3e <HAL_ADC_Start_DMA+0x1d6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 8002f3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3788      	adds	r7, #136	@ 0x88
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	08003885 	.word	0x08003885
 8002f50:	0800395d 	.word	0x0800395d
 8002f54:	08003979 	.word	0x08003979

08002f58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0b6      	sub	sp, #216	@ 0xd8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x22>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e3d8      	b.n	8003754 <HAL_ADC_ConfigChannel+0x7d4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fd65 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 83bd 	bne.w	8003736 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d104      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fb8f 	bl	80026ec <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f7ff fc4b 	bl	8002876 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fd4a 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002fea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fd56 	bl	8002aa4 <LL_ADC_INJ_IsConversionOngoing>
 8002ff8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ffc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 81d9 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 81d4 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003018:	d10f      	bne.n	800303a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	4619      	mov	r1, r3
 8003026:	f7ff fc52 	bl	80028ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fbf9 	bl	800282a <LL_ADC_SetSamplingTimeCommonConfig>
 8003038:	e00e      	b.n	8003058 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	461a      	mov	r2, r3
 8003048:	f7ff fc41 	bl	80028ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fbe9 	bl	800282a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d022      	beq.n	80030c0 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6919      	ldr	r1, [r3, #16]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800308a:	f7ff fb43 	bl	8002714 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6919      	ldr	r1, [r3, #16]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	461a      	mov	r2, r3
 800309c:	f7ff fb8f 	bl	80027be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x136>
 80030b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030b4:	e000      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x138>
 80030b6:	2300      	movs	r3, #0
 80030b8:	461a      	mov	r2, r3
 80030ba:	f7ff fb9b 	bl	80027f4 <LL_ADC_SetOffsetSaturation>
 80030be:	e17b      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fb48 	bl	800275c <LL_ADC_GetOffsetChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x16c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fb3d 	bl	800275c <LL_ADC_GetOffsetChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	0e9b      	lsrs	r3, r3, #26
 80030e6:	f003 021f 	and.w	r2, r3, #31
 80030ea:	e01e      	b.n	800312a <HAL_ADC_ConfigChannel+0x1aa>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fb32 	bl	800275c <LL_ADC_GetOffsetChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800310a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800310e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8003112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e004      	b.n	8003128 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800311e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x1c2>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	e018      	b.n	8003174 <HAL_ADC_ConfigChannel+0x1f4>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800315a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800315e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8003166:	2320      	movs	r3, #32
 8003168:	e004      	b.n	8003174 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800316a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003174:	429a      	cmp	r2, r3
 8003176:	d106      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2200      	movs	r2, #0
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fb01 	bl	8002788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fae5 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x232>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fada 	bl	800275c <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	0e9b      	lsrs	r3, r3, #26
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	e01e      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x270>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff facf 	bl	800275c <LL_ADC_GetOffsetChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80031d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80031d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80031e0:	2320      	movs	r3, #32
 80031e2:	e004      	b.n	80031ee <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80031e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x288>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0e9b      	lsrs	r3, r3, #26
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	e018      	b.n	800323a <HAL_ADC_ConfigChannel+0x2ba>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800321c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e004      	b.n	800323a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800323a:	429a      	cmp	r2, r3
 800323c:	d106      	bne.n	800324c <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fa9e 	bl	8002788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fa82 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x2f8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2102      	movs	r1, #2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fa77 	bl	800275c <LL_ADC_GetOffsetChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	f003 021f 	and.w	r2, r3, #31
 8003276:	e01e      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x336>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fa6c 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003284:	4603      	mov	r3, r0
 8003286:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003296:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800329a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800329e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e004      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80032aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x34e>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0e9b      	lsrs	r3, r3, #26
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	e016      	b.n	80032fc <HAL_ADC_ConfigChannel+0x37c>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80032e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80032e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e004      	b.n	80032fc <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80032f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fa3d 	bl	8002788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2103      	movs	r1, #3
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fa21 	bl	800275c <LL_ADC_GetOffsetChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <HAL_ADC_ConfigChannel+0x3ba>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2103      	movs	r1, #3
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fa16 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	e017      	b.n	800336a <HAL_ADC_ConfigChannel+0x3ea>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2103      	movs	r1, #3
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fa0b 	bl	800275c <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003354:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8003360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x402>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	e011      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x426>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003392:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 800339a:	2320      	movs	r3, #32
 800339c:	e003      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800339e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d106      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	2103      	movs	r1, #3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f9e8 	bl	8002788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fb37 	bl	8002a30 <LL_ADC_IsEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 813f 	bne.w	8003648 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f7ff faa4 	bl	8002924 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a8e      	ldr	r2, [pc, #568]	@ (800361c <HAL_ADC_ConfigChannel+0x69c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 8130 	bne.w	8003648 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x490>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	3301      	adds	r3, #1
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	2b09      	cmp	r3, #9
 8003406:	bf94      	ite	ls
 8003408:	2301      	movls	r3, #1
 800340a:	2300      	movhi	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e019      	b.n	8003444 <HAL_ADC_ConfigChannel+0x4c4>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800341e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003420:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003428:	2320      	movs	r3, #32
 800342a:	e003      	b.n	8003434 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800342c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2b09      	cmp	r3, #9
 800343c:	bf94      	ite	ls
 800343e:	2301      	movls	r3, #1
 8003440:	2300      	movhi	r3, #0
 8003442:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003444:	2b00      	cmp	r3, #0
 8003446:	d079      	beq.n	800353c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x4e4>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0e9b      	lsrs	r3, r3, #26
 800345a:	3301      	adds	r3, #1
 800345c:	069b      	lsls	r3, r3, #26
 800345e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003462:	e015      	b.n	8003490 <HAL_ADC_ConfigChannel+0x510>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003474:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 800347c:	2320      	movs	r3, #32
 800347e:	e003      	b.n	8003488 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3301      	adds	r3, #1
 800348a:	069b      	lsls	r3, r3, #26
 800348c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x530>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	0e9b      	lsrs	r3, r3, #26
 80034a2:	3301      	adds	r3, #1
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	2101      	movs	r1, #1
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	e017      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x560>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e003      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80034cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	ea42 0103 	orr.w	r1, r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x586>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	3301      	adds	r3, #1
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	051b      	lsls	r3, r3, #20
 8003504:	e018      	b.n	8003538 <HAL_ADC_ConfigChannel+0x5b8>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e003      	b.n	800352a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8003522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003538:	430b      	orrs	r3, r1
 800353a:	e080      	b.n	800363e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x5d8>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	3301      	adds	r3, #1
 8003550:	069b      	lsls	r3, r3, #26
 8003552:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003556:	e015      	b.n	8003584 <HAL_ADC_ConfigChannel+0x604>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	069b      	lsls	r3, r3, #26
 8003580:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x624>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	e017      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x654>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	61fb      	str	r3, [r7, #28]
  return result;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3301      	adds	r3, #1
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	ea42 0103 	orr.w	r1, r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x680>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	3b1e      	subs	r3, #30
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	e01d      	b.n	800363c <HAL_ADC_ConfigChannel+0x6bc>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	613b      	str	r3, [r7, #16]
  return result;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003618:	2320      	movs	r3, #32
 800361a:	e005      	b.n	8003628 <HAL_ADC_ConfigChannel+0x6a8>
 800361c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3301      	adds	r3, #1
 800362a:	f003 021f 	and.w	r2, r3, #31
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	3b1e      	subs	r3, #30
 8003636:	051b      	lsls	r3, r3, #20
 8003638:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003642:	4619      	mov	r1, r3
 8003644:	f7ff f943 	bl	80028ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <HAL_ADC_ConfigChannel+0x7dc>)
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d079      	beq.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003654:	4842      	ldr	r0, [pc, #264]	@ (8003760 <HAL_ADC_ConfigChannel+0x7e0>)
 8003656:	f7ff f829 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 800365a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a40      	ldr	r2, [pc, #256]	@ (8003764 <HAL_ADC_ConfigChannel+0x7e4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d124      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800366c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11e      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a3b      	ldr	r2, [pc, #236]	@ (8003768 <HAL_ADC_ConfigChannel+0x7e8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d164      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003682:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003686:	4619      	mov	r1, r3
 8003688:	4835      	ldr	r0, [pc, #212]	@ (8003760 <HAL_ADC_ConfigChannel+0x7e0>)
 800368a:	f7fe fffc 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800368e:	4b37      	ldr	r3, [pc, #220]	@ (800376c <HAL_ADC_ConfigChannel+0x7ec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	4a36      	ldr	r2, [pc, #216]	@ (8003770 <HAL_ADC_ConfigChannel+0x7f0>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	3301      	adds	r3, #1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036a2:	e002      	b.n	80036aa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f9      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b0:	e04a      	b.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <HAL_ADC_ConfigChannel+0x7f4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d113      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_ADC_ConfigChannel+0x7e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d13a      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036da:	4619      	mov	r1, r3
 80036dc:	4820      	ldr	r0, [pc, #128]	@ (8003760 <HAL_ADC_ConfigChannel+0x7e0>)
 80036de:	f7fe ffd2 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036e2:	e031      	b.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a23      	ldr	r2, [pc, #140]	@ (8003778 <HAL_ADC_ConfigChannel+0x7f8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d113      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003768 <HAL_ADC_ConfigChannel+0x7e8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d121      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800370c:	4619      	mov	r1, r3
 800370e:	4814      	ldr	r0, [pc, #80]	@ (8003760 <HAL_ADC_ConfigChannel+0x7e0>)
 8003710:	f7fe ffb9 	bl	8002686 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003714:	e018      	b.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	@ (800377c <HAL_ADC_ConfigChannel+0x7fc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d113      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a10      	ldr	r2, [pc, #64]	@ (8003768 <HAL_ADC_ConfigChannel+0x7e8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe ffca 	bl	80026c8 <LL_ADC_EnableChannelVDDcore>
 8003734:	e008      	b.n	8003748 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	f043 0220 	orr.w	r2, r3, #32
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003750:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003754:	4618      	mov	r0, r3
 8003756:	37d8      	adds	r7, #216	@ 0xd8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	80080000 	.word	0x80080000
 8003760:	42028300 	.word	0x42028300
 8003764:	c3210000 	.word	0xc3210000
 8003768:	42028000 	.word	0x42028000
 800376c:	20000000 	.word	0x20000000
 8003770:	053e2d63 	.word	0x053e2d63
 8003774:	88600004 	.word	0x88600004
 8003778:	c7520000 	.word	0xc7520000
 800377c:	99200040 	.word	0x99200040

08003780 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f94d 	bl	8002a30 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d166      	bne.n	800386a <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	4b34      	ldr	r3, [pc, #208]	@ (8003874 <ADC_Enable+0xf4>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e052      	b.n	800386c <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff f91c 	bl	8002a08 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037d0:	4829      	ldr	r0, [pc, #164]	@ (8003878 <ADC_Enable+0xf8>)
 80037d2:	f7fe ff6b 	bl	80026ac <LL_ADC_GetCommonPathInternalCh>
 80037d6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e0:	4b26      	ldr	r3, [pc, #152]	@ (800387c <ADC_Enable+0xfc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	4a26      	ldr	r2, [pc, #152]	@ (8003880 <ADC_Enable+0x100>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	3301      	adds	r3, #1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037f4:	e002      	b.n	80037fc <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003802:	f7fe fefd 	bl	8002600 <HAL_GetTick>
 8003806:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003808:	e028      	b.n	800385c <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff f90e 	bl	8002a30 <LL_ADC_IsEnabled>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f8f2 	bl	8002a08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003824:	f7fe feec 	bl	8002600 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d914      	bls.n	800385c <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d00d      	beq.n	800385c <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	f043 0210 	orr.w	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d1cf      	bne.n	800380a <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	8000003f 	.word	0x8000003f
 8003878:	42028300 	.word	0x42028300
 800387c:	20000000 	.word	0x20000000
 8003880:	053e2d63 	.word	0x053e2d63

08003884 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d14b      	bne.n	8003936 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d021      	beq.n	80038fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe ffc7 	bl	8002850 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d032      	beq.n	800392e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d12b      	bne.n	800392e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11f      	bne.n	800392e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80038fa:	e018      	b.n	800392e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d111      	bne.n	800392e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7fd fee6 	bl	8001700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003934:	e00e      	b.n	8003954 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff fb12 	bl	8002f6c <HAL_ADC_ErrorCallback>
}
 8003948:	e004      	b.n	8003954 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff faf4 	bl	8002f58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff fae4 	bl	8002f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039bc:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039de:	4a04      	ldr	r2, [pc, #16]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	60d3      	str	r3, [r2, #12]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__NVIC_GetPriorityGrouping+0x18>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 0307 	and.w	r3, r3, #7
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	db0b      	blt.n	8003a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f003 021f 	and.w	r2, r3, #31
 8003a28:	4907      	ldr	r1, [pc, #28]	@ (8003a48 <__NVIC_EnableIRQ+0x38>)
 8003a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2001      	movs	r0, #1
 8003a32:	fa00 f202 	lsl.w	r2, r0, r2
 8003a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000e100 	.word	0xe000e100

08003a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	db0a      	blt.n	8003a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	490c      	ldr	r1, [pc, #48]	@ (8003a98 <__NVIC_SetPriority+0x4c>)
 8003a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a74:	e00a      	b.n	8003a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4908      	ldr	r1, [pc, #32]	@ (8003a9c <__NVIC_SetPriority+0x50>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	3b04      	subs	r3, #4
 8003a84:	0112      	lsls	r2, r2, #4
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	440b      	add	r3, r1
 8003a8a:	761a      	strb	r2, [r3, #24]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000e100 	.word	0xe000e100
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b089      	sub	sp, #36	@ 0x24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f1c3 0307 	rsb	r3, r3, #7
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	bf28      	it	cs
 8003abe:	2304      	movcs	r3, #4
 8003ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d902      	bls.n	8003ad0 <NVIC_EncodePriority+0x30>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3b03      	subs	r3, #3
 8003ace:	e000      	b.n	8003ad2 <NVIC_EncodePriority+0x32>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	43d9      	mvns	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	4313      	orrs	r3, r2
         );
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3724      	adds	r7, #36	@ 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ff4c 	bl	80039ac <__NVIC_SetPriorityGrouping>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2a:	f7ff ff63 	bl	80039f4 <__NVIC_GetPriorityGrouping>
 8003b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f7ff ffb3 	bl	8003aa0 <NVIC_EncodePriority>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff82 	bl	8003a4c <__NVIC_SetPriority>
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff56 	bl	8003a10 <__NVIC_EnableIRQ>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b7c:	d301      	bcc.n	8003b82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e00d      	b.n	8003b9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003b82:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <HAL_SYSTICK_Config+0x40>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003b8a:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <HAL_SYSTICK_Config+0x40>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003b90:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_SYSTICK_Config+0x40>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a05      	ldr	r2, [pc, #20]	@ (8003bac <HAL_SYSTICK_Config+0x40>)
 8003b96:	f043 0303 	orr.w	r3, r3, #3
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e010 	.word	0xe000e010

08003bb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d844      	bhi.n	8003c48 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003be7 	.word	0x08003be7
 8003bc8:	08003c05 	.word	0x08003c05
 8003bcc:	08003c27 	.word	0x08003c27
 8003bd0:	08003c49 	.word	0x08003c49
 8003bd4:	08003bd9 	.word	0x08003bd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6013      	str	r3, [r2, #0]
      break;
 8003be4:	e031      	b.n	8003c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003be6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003bf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003bfa:	f023 030c 	bic.w	r3, r3, #12
 8003bfe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003c02:	e022      	b.n	8003c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003c04:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003c10:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003c12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c16:	f023 030c 	bic.w	r3, r3, #12
 8003c1a:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003c24:	e011      	b.n	8003c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c38:	f023 030c 	bic.w	r3, r3, #12
 8003c3c:	4a07      	ldr	r2, [pc, #28]	@ (8003c5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003c3e:	f043 0308 	orr.w	r3, r3, #8
 8003c42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003c46:	e000      	b.n	8003c4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003c48:	bf00      	nop
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010
 8003c5c:	44020c00 	.word	0x44020c00

08003c60 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003c66:	4b17      	ldr	r3, [pc, #92]	@ (8003cc4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003c72:	2304      	movs	r3, #4
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	e01e      	b.n	8003cb6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003c78:	4b13      	ldr	r3, [pc, #76]	@ (8003cc8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003c7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d00f      	beq.n	8003caa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d80f      	bhi.n	8003cb0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d003      	beq.n	8003ca4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003c9c:	e008      	b.n	8003cb0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
        break;
 8003ca2:	e008      	b.n	8003cb6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	607b      	str	r3, [r7, #4]
        break;
 8003ca8:	e005      	b.n	8003cb6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003caa:	2302      	movs	r3, #2
 8003cac:	607b      	str	r3, [r7, #4]
        break;
 8003cae:	e002      	b.n	8003cb6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	607b      	str	r3, [r7, #4]
        break;
 8003cb4:	bf00      	nop
    }
  }
  return systick_source;
 8003cb6:	687b      	ldr	r3, [r7, #4]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e010 	.word	0xe000e010
 8003cc8:	44020c00 	.word	0x44020c00

08003ccc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e04f      	b.n	8003d84 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_DMA_Start_IT+0x26>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e048      	b.n	8003d84 <HAL_DMA_Start_IT+0xb8>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d136      	bne.n	8003d74 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f9d3 	bl	80040c6 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003d2e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d5e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e007      	b.n	8003d84 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2240      	movs	r2, #64	@ 0x40
 8003d78:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003d9c:	f023 030f 	bic.w	r3, r3, #15
 8003da0:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003daa:	3b50      	subs	r3, #80	@ 0x50
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2201      	movs	r2, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 813b 	beq.w	8004042 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d011      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003df0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d011      	beq.n	8003e30 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e22:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e54:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	f043 0204 	orr.w	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d011      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e86:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	f043 0208 	orr.w	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb8:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04c      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d045      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eee:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d12e      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f0a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0202 	orr.w	r2, r2, #2
 8003f1a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f34:	2201      	movs	r2, #1
 8003f36:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d07a      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
        }

        return;
 8003f58:	e075      	b.n	8004046 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d039      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d032      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d012      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d116      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d111      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fba:	2201      	movs	r2, #1
 8003fbc:	731a      	strb	r2, [r3, #12]
 8003fbe:	e008      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003fda:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d025      	beq.n	8004048 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0202 	orr.w	r2, r2, #2
 800400a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004024:	2201      	movs	r2, #1
 8004026:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
 8004040:	e002      	b.n	8004048 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004046:	bf00      	nop
    }
  }
}
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e02b      	b.n	80040ba <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800406a:	f023 030f 	bic.w	r3, r3, #15
 800406e:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	3b50      	subs	r3, #80	@ 0x50
 800407a:	09db      	lsrs	r3, r3, #7
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f003 0311 	and.w	r3, r3, #17
 8004098:	2b11      	cmp	r3, #17
 800409a:	d106      	bne.n	80040aa <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	e006      	b.n	80040b8 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
 80040d2:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	b291      	uxth	r1, r2
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80040f2:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004118:	f7fe fa72 	bl	8002600 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e085      	b.n	8004234 <HAL_DMAEx_List_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a43      	ldr	r2, [pc, #268]	@ (800423c <HAL_DMAEx_List_Init+0x12c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d049      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a42      	ldr	r2, [pc, #264]	@ (8004240 <HAL_DMAEx_List_Init+0x130>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d044      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a40      	ldr	r2, [pc, #256]	@ (8004244 <HAL_DMAEx_List_Init+0x134>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d03f      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3f      	ldr	r2, [pc, #252]	@ (8004248 <HAL_DMAEx_List_Init+0x138>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d03a      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3d      	ldr	r2, [pc, #244]	@ (800424c <HAL_DMAEx_List_Init+0x13c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d035      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3c      	ldr	r2, [pc, #240]	@ (8004250 <HAL_DMAEx_List_Init+0x140>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d030      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3a      	ldr	r2, [pc, #232]	@ (8004254 <HAL_DMAEx_List_Init+0x144>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02b      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a39      	ldr	r2, [pc, #228]	@ (8004258 <HAL_DMAEx_List_Init+0x148>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d026      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a37      	ldr	r2, [pc, #220]	@ (800425c <HAL_DMAEx_List_Init+0x14c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d021      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <HAL_DMAEx_List_Init+0x150>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01c      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a34      	ldr	r2, [pc, #208]	@ (8004264 <HAL_DMAEx_List_Init+0x154>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d017      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <HAL_DMAEx_List_Init+0x158>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <HAL_DMAEx_List_Init+0x15c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00d      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a30      	ldr	r2, [pc, #192]	@ (8004270 <HAL_DMAEx_List_Init+0x160>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d008      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004274 <HAL_DMAEx_List_Init+0x164>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <HAL_DMAEx_List_Init+0xb6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <HAL_DMAEx_List_Init+0x168>)
 80041c4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0206 	orr.w	r2, r2, #6
 80041e4:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80041e6:	e00f      	b.n	8004208 <HAL_DMAEx_List_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80041e8:	f7fe fa0a 	bl	8002600 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d908      	bls.n	8004208 <HAL_DMAEx_List_Init+0xf8>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2210      	movs	r2, #16
 80041fa:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2203      	movs	r2, #3
 8004200:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e015      	b.n	8004234 <HAL_DMAEx_List_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e8      	bne.n	80041e8 <HAL_DMAEx_List_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fa94 	bl	8004744 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40020050 	.word	0x40020050
 8004240:	400200d0 	.word	0x400200d0
 8004244:	40020150 	.word	0x40020150
 8004248:	400201d0 	.word	0x400201d0
 800424c:	40020250 	.word	0x40020250
 8004250:	400202d0 	.word	0x400202d0
 8004254:	40020350 	.word	0x40020350
 8004258:	400203d0 	.word	0x400203d0
 800425c:	40021050 	.word	0x40021050
 8004260:	400210d0 	.word	0x400210d0
 8004264:	40021150 	.word	0x40021150
 8004268:	400211d0 	.word	0x400211d0
 800426c:	40021250 	.word	0x40021250
 8004270:	400212d0 	.word	0x400212d0
 8004274:	40021350 	.word	0x40021350
 8004278:	400213d0 	.word	0x400213d0

0800427c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_DMAEx_List_Start_IT+0x16>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e082      	b.n	800439c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800429c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a8:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_DMAEx_List_Start_IT+0x40>
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d16a      	bne.n	800438c <HAL_DMAEx_List_Start_IT+0x110>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d067      	beq.n	800438c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d157      	bne.n	8004378 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_DMAEx_List_Start_IT+0x5a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e062      	b.n	800439c <HAL_DMAEx_List_Start_IT+0x120>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ea:	2202      	movs	r2, #2
 80042ec:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f8:	2200      	movs	r2, #0
 80042fa:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800430a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004322:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800433a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f107 010c 	add.w	r1, r7, #12
 8004346:	2200      	movs	r2, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fd97 	bl	8004e7c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4619      	mov	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	0c0b      	lsrs	r3, r1, #16
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800436c:	4013      	ands	r3, r2
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	430b      	orrs	r3, r1
 8004376:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e007      	b.n	800439c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2240      	movs	r2, #64	@ 0x40
 8004390:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_DMAEx_List_BuildNode+0x16>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e004      	b.n	80043c8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa8d 	bl	80048e0 <DMA_List_BuildNode>

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e004      	b.n	80043f4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80043ea:	6839      	ldr	r1, [r7, #0]
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fbcf 	bl	8004b90 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	@ 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_DMAEx_List_InsertNode+0x18>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b6      	b.n	8004586 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d104      	bne.n	800442a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2204      	movs	r2, #4
 8004424:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0ad      	b.n	8004586 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fcb6 	bl	8004da4 <DMA_List_CheckNodesBaseAddresses>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d004      	beq.n	8004448 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2205      	movs	r2, #5
 8004442:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e09e      	b.n	8004586 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fcd7 	bl	8004e04 <DMA_List_CheckNodesTypes>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2204      	movs	r2, #4
 8004460:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e08f      	b.n	8004586 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2202      	movs	r2, #2
 800446a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004472:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004476:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fcfd 	bl	8004e7c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11a      	bne.n	80044c0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e06c      	b.n	8004578 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044aa:	4013      	ands	r3, r2
 80044ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b0:	4319      	orrs	r1, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2202      	movs	r2, #2
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	e05b      	b.n	8004578 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044d0:	4013      	ands	r3, r2
 80044d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044d6:	4319      	orrs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e043      	b.n	800456e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	461a      	mov	r2, r3
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fcf2 	bl	8004edc <DMA_List_FindNode>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d132      	bne.n	8004564 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d11a      	bne.n	800453e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	461a      	mov	r2, r3
 8004516:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800451a:	4013      	ands	r3, r2
 800451c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800451e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004520:	4319      	orrs	r1, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800452e:	4013      	ands	r3, r2
 8004530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004534:	4319      	orrs	r1, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800453c:	e017      	b.n	800456e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800453e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004554:	4013      	ands	r3, r2
 8004556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800455a:	4319      	orrs	r1, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004562:	e004      	b.n	800456e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2206      	movs	r2, #6
 8004568:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00b      	b.n	8004586 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3730      	adds	r7, #48	@ 0x30
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08a      	sub	sp, #40	@ 0x28
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e052      	b.n	8004646 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e049      	b.n	8004646 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d101      	bne.n	80045ca <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e03d      	b.n	8004646 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2204      	movs	r2, #4
 80045ce:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e038      	b.n	8004646 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d104      	bne.n	80045e6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2204      	movs	r2, #4
 80045e0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e02f      	b.n	8004646 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f107 0220 	add.w	r2, r7, #32
 80045fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fc3c 	bl	8004e7c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8004608:	f107 030c 	add.w	r3, r7, #12
 800460c:	461a      	mov	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fc63 	bl	8004edc <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004620:	4013      	ands	r3, r2
 8004622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4610      	mov	r0, r2
 8004628:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800462a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800462c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3728      	adds	r7, #40	@ 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_DMAEx_List_LinkQ+0x16>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e05e      	b.n	8004728 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Get DMA state */
  state = hdma->State;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004670:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d002      	beq.n	8004684 <HAL_DMAEx_List_LinkQ+0x34>
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b05      	cmp	r3, #5
 8004682:	d108      	bne.n	8004696 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2240      	movs	r2, #64	@ 0x40
 8004688:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e048      	b.n	8004728 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	7b1b      	ldrb	r3, [r3, #12]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d104      	bne.n	80046aa <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e03e      	b.n	8004728 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a21      	ldr	r2, [pc, #132]	@ (8004734 <HAL_DMAEx_List_LinkQ+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMAEx_List_LinkQ+0x82>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004738 <HAL_DMAEx_List_LinkQ+0xe8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_DMAEx_List_LinkQ+0x82>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <HAL_DMAEx_List_LinkQ+0xec>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_DMAEx_List_LinkQ+0x82>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004740 <HAL_DMAEx_List_LinkQ+0xf0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_DMAEx_List_LinkQ+0x86>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_DMAEx_List_LinkQ+0x88>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_DMAEx_List_LinkQ+0xa4>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <HAL_DMAEx_List_LinkQ+0xa4>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2203      	movs	r2, #3
 80046ee:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e019      	b.n	8004728 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f8:	2b81      	cmp	r3, #129	@ 0x81
 80046fa:	d108      	bne.n	800470e <HAL_DMAEx_List_LinkQ+0xbe>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10d      	bne.n	8004720 <HAL_DMAEx_List_LinkQ+0xd0>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2204      	movs	r2, #4
 8004708:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00c      	b.n	8004728 <HAL_DMAEx_List_LinkQ+0xd8>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <HAL_DMAEx_List_LinkQ+0xd0>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2204      	movs	r2, #4
 800471a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e003      	b.n	8004728 <HAL_DMAEx_List_LinkQ+0xd8>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40020350 	.word	0x40020350
 8004738:	400203d0 	.word	0x400203d0
 800473c:	40021350 	.word	0x40021350
 8004740:	400213d0 	.word	0x400213d0

08004744 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a50      	ldr	r2, [pc, #320]	@ (80048a0 <DMA_List_Init+0x15c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d04a      	beq.n	80047f8 <DMA_List_Init+0xb4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4f      	ldr	r2, [pc, #316]	@ (80048a4 <DMA_List_Init+0x160>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d045      	beq.n	80047f8 <DMA_List_Init+0xb4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a4d      	ldr	r2, [pc, #308]	@ (80048a8 <DMA_List_Init+0x164>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d040      	beq.n	80047f8 <DMA_List_Init+0xb4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4c      	ldr	r2, [pc, #304]	@ (80048ac <DMA_List_Init+0x168>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d03b      	beq.n	80047f8 <DMA_List_Init+0xb4>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a4a      	ldr	r2, [pc, #296]	@ (80048b0 <DMA_List_Init+0x16c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d036      	beq.n	80047f8 <DMA_List_Init+0xb4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a49      	ldr	r2, [pc, #292]	@ (80048b4 <DMA_List_Init+0x170>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d031      	beq.n	80047f8 <DMA_List_Init+0xb4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a47      	ldr	r2, [pc, #284]	@ (80048b8 <DMA_List_Init+0x174>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02c      	beq.n	80047f8 <DMA_List_Init+0xb4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a46      	ldr	r2, [pc, #280]	@ (80048bc <DMA_List_Init+0x178>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d027      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a44      	ldr	r2, [pc, #272]	@ (80048c0 <DMA_List_Init+0x17c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a43      	ldr	r2, [pc, #268]	@ (80048c4 <DMA_List_Init+0x180>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a41      	ldr	r2, [pc, #260]	@ (80048c8 <DMA_List_Init+0x184>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a40      	ldr	r2, [pc, #256]	@ (80048cc <DMA_List_Init+0x188>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3e      	ldr	r2, [pc, #248]	@ (80048d0 <DMA_List_Init+0x18c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3d      	ldr	r2, [pc, #244]	@ (80048d4 <DMA_List_Init+0x190>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <DMA_List_Init+0x194>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <DMA_List_Init+0xb4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3a      	ldr	r2, [pc, #232]	@ (80048dc <DMA_List_Init+0x198>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <DMA_List_Init+0xb8>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <DMA_List_Init+0xba>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <DMA_List_Init+0xc8>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	430a      	orrs	r2, r1
 800481e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2200      	movs	r2, #0
 8004838:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2200      	movs	r2, #0
 8004840:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1a      	ldr	r2, [pc, #104]	@ (80048b8 <DMA_List_Init+0x174>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <DMA_List_Init+0x12e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <DMA_List_Init+0x178>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <DMA_List_Init+0x12e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <DMA_List_Init+0x194>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <DMA_List_Init+0x12e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1b      	ldr	r2, [pc, #108]	@ (80048dc <DMA_List_Init+0x198>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <DMA_List_Init+0x132>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <DMA_List_Init+0x134>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <DMA_List_Init+0x148>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2200      	movs	r2, #0
 8004892:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40020050 	.word	0x40020050
 80048a4:	400200d0 	.word	0x400200d0
 80048a8:	40020150 	.word	0x40020150
 80048ac:	400201d0 	.word	0x400201d0
 80048b0:	40020250 	.word	0x40020250
 80048b4:	400202d0 	.word	0x400202d0
 80048b8:	40020350 	.word	0x40020350
 80048bc:	400203d0 	.word	0x400203d0
 80048c0:	40021050 	.word	0x40021050
 80048c4:	400210d0 	.word	0x400210d0
 80048c8:	40021150 	.word	0x40021150
 80048cc:	400211d0 	.word	0x400211d0
 80048d0:	40021250 	.word	0x40021250
 80048d4:	400212d0 	.word	0x400212d0
 80048d8:	40021350 	.word	0x40021350
 80048dc:	400213d0 	.word	0x400213d0

080048e0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80048f2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80048f8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80048fe:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004904:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d017      	beq.n	8004946 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	051b      	lsls	r3, r3, #20
 800492c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004930:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	3b01      	subs	r3, #1
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800493e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004940:	431a      	orrs	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8004952:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004954:	431a      	orrs	r2, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004962:	d10c      	bne.n	800497e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d011      	beq.n	8004994 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	e00a      	b.n	8004994 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004986:	d105      	bne.n	8004994 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499c:	431a      	orrs	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00f      	beq.n	80049ca <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80049c2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80049c4:	431a      	orrs	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04e      	beq.n	8004a7e <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e8:	3b01      	subs	r3, #1
 80049ea:	0419      	lsls	r1, r3, #16
 80049ec:	4b66      	ldr	r3, [pc, #408]	@ (8004b88 <DMA_List_BuildNode+0x2a8>)
 80049ee:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80049f0:	431a      	orrs	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da06      	bge.n	8004a0c <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	e005      	b.n	8004a18 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da06      	bge.n	8004a2e <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	e005      	b.n	8004a3a <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da06      	bge.n	8004a50 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	e005      	b.n	8004a5c <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da06      	bge.n	8004a72 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e005      	b.n	8004a7e <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d059      	beq.n	8004b4e <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	da09      	bge.n	8004ab6 <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa6:	425b      	negs	r3, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	615a      	str	r2, [r3, #20]
 8004ab4:	e005      	b.n	8004ac2 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aba:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da0d      	bge.n	8004ae6 <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	425b      	negs	r3, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0419      	lsls	r1, r3, #16
 8004ada:	4b2c      	ldr	r3, [pc, #176]	@ (8004b8c <DMA_List_BuildNode+0x2ac>)
 8004adc:	400b      	ands	r3, r1
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	615a      	str	r2, [r3, #20]
 8004ae4:	e009      	b.n	8004afa <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aee:	0419      	lsls	r1, r3, #16
 8004af0:	4b26      	ldr	r3, [pc, #152]	@ (8004b8c <DMA_List_BuildNode+0x2ac>)
 8004af2:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004af4:	431a      	orrs	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da08      	bge.n	8004b14 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	425b      	negs	r3, r3
 8004b08:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	619a      	str	r2, [r3, #24]
 8004b12:	e004      	b.n	8004b1e <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b18:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da0b      	bge.n	8004b3e <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	425b      	negs	r3, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004b36:	431a      	orrs	r2, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	619a      	str	r2, [r3, #24]
 8004b3c:	e007      	b.n	8004b4e <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b46:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004b6e:	e005      	b.n	8004b7c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	07ff0000 	.word	0x07ff0000
 8004b8c:	1fff0000 	.word	0x1fff0000

08004b90 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0208 	and.w	r2, r3, #8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0203 	and.w	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bde:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004be8:	0d1b      	lsrs	r3, r3, #20
 8004bea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bee:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <DMA_List_GetNodeConfig+0x210>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c2a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c32:	60da      	str	r2, [r3, #12]
 8004c34:	e012      	b.n	8004c5c <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e002      	b.n	8004c5c <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cba:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004cc0:	e002      	b.n	8004cc8 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d04a      	beq.n	8004d7a <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cee:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8004cf0:	89fa      	ldrh	r2, [r7, #14]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d02:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8004d04:	89fa      	ldrh	r2, [r7, #14]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1a:	425a      	negs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	425a      	negs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8004d3c:	89fa      	ldrh	r2, [r7, #14]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8004d4a:	89fa      	ldrh	r2, [r7, #14]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d60:	425a      	negs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da11      	bge.n	8004d92 <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d72:	425a      	negs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004d78:	e00b      	b.n	8004d92 <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	0c002000 	.word	0x0c002000

08004da4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e00a      	b.n	8004de6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e004      	b.n	8004de6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e00e      	b.n	8004e42 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e006      	b.n	8004e42 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004e54:	2302      	movs	r3, #2
 8004e56:	e00b      	b.n	8004e70 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d001      	beq.n	8004e6e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e000      	b.n	8004e70 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004e9e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00f      	beq.n	8004ec6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004eac:	e00b      	b.n	8004ec6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a08      	ldr	r2, [pc, #32]	@ (8004ed8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004eb8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	fe010000 	.word	0xfe010000
 8004ed8:	f8010000 	.word	0xf8010000

08004edc <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	@ 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d142      	bne.n	8004f86 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004f00:	e01d      	b.n	8004f3e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e00f      	b.n	8004f38 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4413      	add	r3, r2
 8004f28:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004f30:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d3dc      	bcc.n	8004f02 <DMA_List_FindNode+0x26>
 8004f48:	e029      	b.n	8004f9e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e00f      	b.n	8004f80 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004f78:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3301      	adds	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d206      	bcs.n	8004f9e <DMA_List_FindNode+0xc2>
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f96:	4013      	ands	r3, r2
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d1d5      	bne.n	8004f4a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004faa:	4013      	ands	r3, r2
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d001      	beq.n	8004fb6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e02b      	b.n	800500e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00f      	beq.n	800500c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004ffc:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	041b      	lsls	r3, r3, #16
 8005006:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3724      	adds	r7, #36	@ 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800502a:	e136      	b.n	800529a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	2101      	movs	r1, #1
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8128 	beq.w	8005294 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x38>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b12      	cmp	r3, #18
 8005052:	d125      	bne.n	80050a0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	220f      	movs	r2, #15
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4013      	ands	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	08da      	lsrs	r2, r3, #3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3208      	adds	r2, #8
 800509a:	6979      	ldr	r1, [r7, #20]
 800509c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	2203      	movs	r2, #3
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4013      	ands	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 0203 	and.w	r2, r3, #3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d00b      	beq.n	80050f4 <HAL_GPIO_Init+0xd8>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d007      	beq.n	80050f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050e8:	2b11      	cmp	r3, #17
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b12      	cmp	r3, #18
 80050f2:	d130      	bne.n	8005156 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4013      	ands	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800512a:	2201      	movs	r2, #1
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4013      	ands	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	f003 0201 	and.w	r2, r3, #1
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b03      	cmp	r3, #3
 800515c:	d017      	beq.n	800518e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2203      	movs	r2, #3
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4013      	ands	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d07c      	beq.n	8005294 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800519a:	4a47      	ldr	r2, [pc, #284]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	3318      	adds	r3, #24
 80051a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	220f      	movs	r2, #15
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4013      	ands	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0a9a      	lsrs	r2, r3, #10
 80051c2:	4b3e      	ldr	r3, [pc, #248]	@ (80052bc <HAL_GPIO_Init+0x2a0>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	f002 0203 	and.w	r2, r2, #3
 80051cc:	00d2      	lsls	r2, r2, #3
 80051ce:	4093      	lsls	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80051d6:	4938      	ldr	r1, [pc, #224]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3318      	adds	r3, #24
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80051e4:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	43db      	mvns	r3, r3
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4013      	ands	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005208:	4a2b      	ldr	r2, [pc, #172]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800520e:	4b2a      	ldr	r3, [pc, #168]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	43db      	mvns	r3, r3
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4013      	ands	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005232:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005238:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 800523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	43db      	mvns	r3, r3
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4013      	ands	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800525e:	4a16      	ldr	r2, [pc, #88]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005266:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	43db      	mvns	r3, r3
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4013      	ands	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800528c:	4a0a      	ldr	r2, [pc, #40]	@ (80052b8 <HAL_GPIO_Init+0x29c>)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	3301      	adds	r3, #1
 8005298:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f aec1 	bne.w	800502c <HAL_GPIO_Init+0x10>
  }
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	44022000 	.word	0x44022000
 80052bc:	002f7f7f 	.word	0x002f7f7f

080052c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	807b      	strh	r3, [r7, #2]
 80052cc:	4613      	mov	r3, r2
 80052ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052d0:	787b      	ldrb	r3, [r7, #1]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052dc:	e002      	b.n	80052e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052de:	887a      	ldrh	r2, [r7, #2]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f000 bc28 	b.w	8005b54 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005304:	4b94      	ldr	r3, [pc, #592]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f003 0318 	and.w	r3, r3, #24
 800530c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800530e:	4b92      	ldr	r3, [pc, #584]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d05b      	beq.n	80053dc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d005      	beq.n	8005336 <HAL_RCC_OscConfig+0x46>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b18      	cmp	r3, #24
 800532e:	d114      	bne.n	800535a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d111      	bne.n	800535a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f000 bc08 	b.w	8005b54 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005344:	4b84      	ldr	r3, [pc, #528]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	4981      	ldr	r1, [pc, #516]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005354:	4313      	orrs	r3, r2
 8005356:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005358:	e040      	b.n	80053dc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d023      	beq.n	80053aa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005362:	4b7d      	ldr	r3, [pc, #500]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a7c      	ldr	r2, [pc, #496]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd f947 	bl	8002600 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005376:	f7fd f943 	bl	8002600 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e3e5      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005388:	4b73      	ldr	r3, [pc, #460]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005394:	4b70      	ldr	r3, [pc, #448]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	041b      	lsls	r3, r3, #16
 80053a2:	496d      	ldr	r1, [pc, #436]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	618b      	str	r3, [r1, #24]
 80053a8:	e018      	b.n	80053dc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053aa:	4b6b      	ldr	r3, [pc, #428]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6a      	ldr	r2, [pc, #424]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80053b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fd f923 	bl	8002600 <HAL_GetTick>
 80053ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80053be:	f7fd f91f 	bl	8002600 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e3c1      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80053d0:	4b61      	ldr	r3, [pc, #388]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80a0 	beq.w	800552a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_OscConfig+0x10c>
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b18      	cmp	r3, #24
 80053f4:	d109      	bne.n	800540a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d106      	bne.n	800540a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 8092 	bne.w	800552a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e3a4      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005412:	d106      	bne.n	8005422 <HAL_RCC_OscConfig+0x132>
 8005414:	4b50      	ldr	r3, [pc, #320]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a4f      	ldr	r2, [pc, #316]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800541a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e058      	b.n	80054d4 <HAL_RCC_OscConfig+0x1e4>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d112      	bne.n	8005450 <HAL_RCC_OscConfig+0x160>
 800542a:	4b4b      	ldr	r3, [pc, #300]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a4a      	ldr	r2, [pc, #296]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b48      	ldr	r3, [pc, #288]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a47      	ldr	r2, [pc, #284]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800543c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b45      	ldr	r3, [pc, #276]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a44      	ldr	r2, [pc, #272]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e041      	b.n	80054d4 <HAL_RCC_OscConfig+0x1e4>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x190>
 800545a:	4b3f      	ldr	r3, [pc, #252]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a3e      	ldr	r2, [pc, #248]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b3c      	ldr	r3, [pc, #240]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a3b      	ldr	r2, [pc, #236]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800546c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a38      	ldr	r2, [pc, #224]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e029      	b.n	80054d4 <HAL_RCC_OscConfig+0x1e4>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005488:	d112      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1c0>
 800548a:	4b33      	ldr	r3, [pc, #204]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a32      	ldr	r2, [pc, #200]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b30      	ldr	r3, [pc, #192]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2f      	ldr	r2, [pc, #188]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e011      	b.n	80054d4 <HAL_RCC_OscConfig+0x1e4>
 80054b0:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a28      	ldr	r2, [pc, #160]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	4b26      	ldr	r3, [pc, #152]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a25      	ldr	r2, [pc, #148]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b23      	ldr	r3, [pc, #140]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054ce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd f890 	bl	8002600 <HAL_GetTick>
 80054e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80054e4:	f7fd f88c 	bl	8002600 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	@ 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e32e      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054f6:	4b18      	ldr	r3, [pc, #96]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x1f4>
 8005502:	e012      	b.n	800552a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fd f87c 	bl	8002600 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800550c:	f7fd f878 	bl	8002600 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	@ 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e31a      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <HAL_RCC_OscConfig+0x268>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 809a 	beq.w	800566c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_RCC_OscConfig+0x25a>
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b18      	cmp	r3, #24
 8005542:	d149      	bne.n	80055d8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d146      	bne.n	80055d8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e2fe      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
 8005556:	bf00      	nop
 8005558:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11c      	bne.n	800559c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005562:	4b9a      	ldr	r3, [pc, #616]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0218 	and.w	r2, r3, #24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d014      	beq.n	800559c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005572:	4b96      	ldr	r3, [pc, #600]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 0218 	bic.w	r2, r3, #24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	4993      	ldr	r1, [pc, #588]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005584:	f000 fdd0 	bl	8006128 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005588:	4b91      	ldr	r3, [pc, #580]	@ (80057d0 <HAL_RCC_OscConfig+0x4e0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fc ffad 	bl	80024ec <HAL_InitTick>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e2db      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd f830 	bl	8002600 <HAL_GetTick>
 80055a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80055a4:	f7fd f82c 	bl	8002600 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e2ce      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b6:	4b85      	ldr	r3, [pc, #532]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80055c2:	4b82      	ldr	r3, [pc, #520]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	497e      	ldr	r1, [pc, #504]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80055d6:	e049      	b.n	800566c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02c      	beq.n	800563a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80055e0:	4b7a      	ldr	r3, [pc, #488]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 0218 	bic.w	r2, r3, #24
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4977      	ldr	r1, [pc, #476]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80055f2:	4b76      	ldr	r3, [pc, #472]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a75      	ldr	r2, [pc, #468]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fc ffff 	bl	8002600 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005606:	f7fc fffb 	bl	8002600 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e29d      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005618:	4b6c      	ldr	r3, [pc, #432]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005624:	4b69      	ldr	r3, [pc, #420]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	4966      	ldr	r1, [pc, #408]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005634:	4313      	orrs	r3, r2
 8005636:	610b      	str	r3, [r1, #16]
 8005638:	e018      	b.n	800566c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563a:	4b64      	ldr	r3, [pc, #400]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a63      	ldr	r2, [pc, #396]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fc ffdb 	bl	8002600 <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800564e:	f7fc ffd7 	bl	8002600 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e279      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005660:	4b5a      	ldr	r3, [pc, #360]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03c      	beq.n	80056f2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01c      	beq.n	80056ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005680:	4b52      	ldr	r3, [pc, #328]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005686:	4a51      	ldr	r2, [pc, #324]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005688:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800568c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fc ffb6 	bl	8002600 <HAL_GetTick>
 8005694:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005698:	f7fc ffb2 	bl	8002600 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e254      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80056aa:	4b48      	ldr	r3, [pc, #288]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0ef      	beq.n	8005698 <HAL_RCC_OscConfig+0x3a8>
 80056b8:	e01b      	b.n	80056f2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ba:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c0:	4a42      	ldr	r2, [pc, #264]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ca:	f7fc ff99 	bl	8002600 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80056d2:	f7fc ff95 	bl	8002600 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e237      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80056e4:	4b39      	ldr	r3, [pc, #228]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ef      	bne.n	80056d2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80d2 	beq.w	80058a4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005700:	4b34      	ldr	r3, [pc, #208]	@ (80057d4 <HAL_RCC_OscConfig+0x4e4>)
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d118      	bne.n	800573e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800570c:	4b31      	ldr	r3, [pc, #196]	@ (80057d4 <HAL_RCC_OscConfig+0x4e4>)
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	4a30      	ldr	r2, [pc, #192]	@ (80057d4 <HAL_RCC_OscConfig+0x4e4>)
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005718:	f7fc ff72 	bl	8002600 <HAL_GetTick>
 800571c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005720:	f7fc ff6e 	bl	8002600 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e210      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005732:	4b28      	ldr	r3, [pc, #160]	@ (80057d4 <HAL_RCC_OscConfig+0x4e4>)
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d108      	bne.n	8005758 <HAL_RCC_OscConfig+0x468>
 8005746:	4b21      	ldr	r3, [pc, #132]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800574c:	4a1f      	ldr	r2, [pc, #124]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005756:	e074      	b.n	8005842 <HAL_RCC_OscConfig+0x552>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d118      	bne.n	8005792 <HAL_RCC_OscConfig+0x4a2>
 8005760:	4b1a      	ldr	r3, [pc, #104]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005766:	4a19      	ldr	r2, [pc, #100]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005770:	4b16      	ldr	r3, [pc, #88]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005776:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800577c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005780:	4b12      	ldr	r3, [pc, #72]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005786:	4a11      	ldr	r2, [pc, #68]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005788:	f023 0304 	bic.w	r3, r3, #4
 800578c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005790:	e057      	b.n	8005842 <HAL_RCC_OscConfig+0x552>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b05      	cmp	r3, #5
 8005798:	d11e      	bne.n	80057d8 <HAL_RCC_OscConfig+0x4e8>
 800579a:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800579c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057a0:	4a0a      	ldr	r2, [pc, #40]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80057a2:	f043 0304 	orr.w	r3, r3, #4
 80057a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057aa:	4b08      	ldr	r3, [pc, #32]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80057ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057b0:	4a06      	ldr	r2, [pc, #24]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80057b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057ba:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80057bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057c0:	4a02      	ldr	r2, [pc, #8]	@ (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057ca:	e03a      	b.n	8005842 <HAL_RCC_OscConfig+0x552>
 80057cc:	44020c00 	.word	0x44020c00
 80057d0:	20000004 	.word	0x20000004
 80057d4:	44020800 	.word	0x44020800
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b85      	cmp	r3, #133	@ 0x85
 80057de:	d118      	bne.n	8005812 <HAL_RCC_OscConfig+0x522>
 80057e0:	4ba2      	ldr	r3, [pc, #648]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80057e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057e6:	4aa1      	ldr	r2, [pc, #644]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057f0:	4b9e      	ldr	r3, [pc, #632]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80057f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057f6:	4a9d      	ldr	r2, [pc, #628]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80057f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005800:	4b9a      	ldr	r3, [pc, #616]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005806:	4a99      	ldr	r2, [pc, #612]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005810:	e017      	b.n	8005842 <HAL_RCC_OscConfig+0x552>
 8005812:	4b96      	ldr	r3, [pc, #600]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005818:	4a94      	ldr	r2, [pc, #592]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005822:	4b92      	ldr	r3, [pc, #584]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005828:	4a90      	ldr	r2, [pc, #576]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 800582a:	f023 0304 	bic.w	r3, r3, #4
 800582e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005832:	4b8e      	ldr	r3, [pc, #568]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005838:	4a8c      	ldr	r2, [pc, #560]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 800583a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800583e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584a:	f7fc fed9 	bl	8002600 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005850:	e00a      	b.n	8005868 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005852:	f7fc fed5 	bl	8002600 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e175      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005868:	4b80      	ldr	r3, [pc, #512]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 800586a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0ed      	beq.n	8005852 <HAL_RCC_OscConfig+0x562>
 8005876:	e015      	b.n	80058a4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005878:	f7fc fec2 	bl	8002600 <HAL_GetTick>
 800587c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800587e:	e00a      	b.n	8005896 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f7fc febe 	bl	8002600 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e15e      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005896:	4b75      	ldr	r3, [pc, #468]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ed      	bne.n	8005880 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d036      	beq.n	800591e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d019      	beq.n	80058ec <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058b8:	4b6c      	ldr	r3, [pc, #432]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a6b      	ldr	r2, [pc, #428]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80058be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fc fe9c 	bl	8002600 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80058cc:	f7fc fe98 	bl	8002600 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e13a      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80058de:	4b63      	ldr	r3, [pc, #396]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x5dc>
 80058ea:	e018      	b.n	800591e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058ec:	4b5f      	ldr	r3, [pc, #380]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a5e      	ldr	r2, [pc, #376]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80058f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f8:	f7fc fe82 	bl	8002600 <HAL_GetTick>
 80058fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005900:	f7fc fe7e 	bl	8002600 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e120      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005912:	4b56      	ldr	r3, [pc, #344]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8115 	beq.w	8005b52 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b18      	cmp	r3, #24
 800592c:	f000 80af 	beq.w	8005a8e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	2b02      	cmp	r3, #2
 8005936:	f040 8086 	bne.w	8005a46 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800593a:	4b4c      	ldr	r3, [pc, #304]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4b      	ldr	r2, [pc, #300]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fc fe5b 	bl	8002600 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800594e:	f7fc fe57 	bl	8002600 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0f9      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005960:	4b42      	ldr	r3, [pc, #264]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800596c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005974:	f023 0303 	bic.w	r3, r3, #3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005980:	0212      	lsls	r2, r2, #8
 8005982:	430a      	orrs	r2, r1
 8005984:	4939      	ldr	r1, [pc, #228]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005986:	4313      	orrs	r3, r2
 8005988:	628b      	str	r3, [r1, #40]	@ 0x28
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	3b01      	subs	r3, #1
 8005990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	3b01      	subs	r3, #1
 800599a:	025b      	lsls	r3, r3, #9
 800599c:	b29b      	uxth	r3, r3
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	3b01      	subs	r3, #1
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	3b01      	subs	r3, #1
 80059b4:	061b      	lsls	r3, r3, #24
 80059b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80059ba:	492c      	ldr	r1, [pc, #176]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80059c0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	4a29      	ldr	r2, [pc, #164]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059c6:	f023 0310 	bic.w	r3, r3, #16
 80059ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d0:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80059d6:	4b25      	ldr	r3, [pc, #148]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	4a24      	ldr	r2, [pc, #144]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059dc:	f043 0310 	orr.w	r3, r3, #16
 80059e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80059e2:	4b22      	ldr	r3, [pc, #136]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	f023 020c 	bic.w	r2, r3, #12
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	491f      	ldr	r1, [pc, #124]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80059f4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	f023 0220 	bic.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a00:	491a      	ldr	r1, [pc, #104]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a06:	4b19      	ldr	r3, [pc, #100]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005a12:	4b16      	ldr	r3, [pc, #88]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a15      	ldr	r2, [pc, #84]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fc fdef 	bl	8002600 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005a26:	f7fc fdeb 	bl	8002600 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e08d      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a38:	4b0c      	ldr	r3, [pc, #48]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x736>
 8005a44:	e085      	b.n	8005b52 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a08      	ldr	r2, [pc, #32]	@ (8005a6c <HAL_RCC_OscConfig+0x77c>)
 8005a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc fdd5 	bl	8002600 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005a5a:	f7fc fdd1 	bl	8002600 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d903      	bls.n	8005a70 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e073      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
 8005a6c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a70:	4b3a      	ldr	r3, [pc, #232]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ee      	bne.n	8005a5a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005a7c:	4b37      	ldr	r3, [pc, #220]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a80:	4a36      	ldr	r2, [pc, #216]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005a82:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	6293      	str	r3, [r2, #40]	@ 0x28
 8005a8c:	e061      	b.n	8005b52 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005a8e:	4b33      	ldr	r3, [pc, #204]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a94:	4b31      	ldr	r3, [pc, #196]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a98:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d031      	beq.n	8005b06 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f003 0203 	and.w	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d12a      	bne.n	8005b06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d122      	bne.n	8005b06 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d11a      	bne.n	8005b06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	0a5b      	lsrs	r3, r3, #9
 8005ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d111      	bne.n	8005b06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d108      	bne.n	8005b06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	0e1b      	lsrs	r3, r3, #24
 8005af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b00:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d001      	beq.n	8005b0a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e024      	b.n	8005b54 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b0a:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d01a      	beq.n	8005b52 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	4a0e      	ldr	r2, [pc, #56]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005b22:	f023 0310 	bic.w	r3, r3, #16
 8005b26:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fc fd6a 	bl	8002600 <HAL_GetTick>
 8005b2c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005b2e:	bf00      	nop
 8005b30:	f7fc fd66 	bl	8002600 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d0f9      	beq.n	8005b30 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b40:	4a06      	ldr	r2, [pc, #24]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005b46:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	4a04      	ldr	r2, [pc, #16]	@ (8005b5c <HAL_RCC_OscConfig+0x86c>)
 8005b4c:	f043 0310 	orr.w	r3, r3, #16
 8005b50:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	44020c00 	.word	0x44020c00

08005b60 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e19e      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b74:	4b83      	ldr	r3, [pc, #524]	@ (8005d84 <HAL_RCC_ClockConfig+0x224>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d910      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b80      	ldr	r3, [pc, #512]	@ (8005d84 <HAL_RCC_ClockConfig+0x224>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 020f 	bic.w	r2, r3, #15
 8005b8a:	497e      	ldr	r1, [pc, #504]	@ (8005d84 <HAL_RCC_ClockConfig+0x224>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b7c      	ldr	r3, [pc, #496]	@ (8005d84 <HAL_RCC_ClockConfig+0x224>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e186      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d012      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695a      	ldr	r2, [r3, #20]
 8005bb4:	4b74      	ldr	r3, [pc, #464]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d909      	bls.n	8005bd6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005bc2:	4b71      	ldr	r3, [pc, #452]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	496d      	ldr	r1, [pc, #436]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d012      	beq.n	8005c08 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	4b68      	ldr	r3, [pc, #416]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d909      	bls.n	8005c08 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005bf4:	4b64      	ldr	r3, [pc, #400]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	4961      	ldr	r1, [pc, #388]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	4b5b      	ldr	r3, [pc, #364]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d908      	bls.n	8005c36 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005c24:	4b58      	ldr	r3, [pc, #352]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4955      	ldr	r1, [pc, #340]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	4b50      	ldr	r3, [pc, #320]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d908      	bls.n	8005c64 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005c52:	4b4d      	ldr	r3, [pc, #308]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 020f 	bic.w	r2, r3, #15
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	494a      	ldr	r1, [pc, #296]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8093 	beq.w	8005d98 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c7a:	4b43      	ldr	r3, [pc, #268]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d121      	bne.n	8005cca <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e113      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c92:	4b3d      	ldr	r3, [pc, #244]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d115      	bne.n	8005cca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e107      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005caa:	4b37      	ldr	r3, [pc, #220]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e0fb      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cba:	4b33      	ldr	r3, [pc, #204]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e0f3      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005cca:	4b2f      	ldr	r3, [pc, #188]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f023 0203 	bic.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	492c      	ldr	r1, [pc, #176]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cdc:	f7fc fc90 	bl	8002600 <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d112      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005cec:	f7fc fc88 	bl	8002600 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e0d7      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d02:	4b21      	ldr	r3, [pc, #132]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f003 0318 	and.w	r3, r3, #24
 8005d0a:	2b18      	cmp	r3, #24
 8005d0c:	d1ee      	bne.n	8005cec <HAL_RCC_ClockConfig+0x18c>
 8005d0e:	e043      	b.n	8005d98 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d112      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1a:	f7fc fc71 	bl	8002600 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0c0      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d30:	4b15      	ldr	r3, [pc, #84]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 0318 	and.w	r3, r3, #24
 8005d38:	2b10      	cmp	r3, #16
 8005d3a:	d1ee      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1ba>
 8005d3c:	e02c      	b.n	8005d98 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d122      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d48:	f7fc fc5a 	bl	8002600 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0a9      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <HAL_RCC_ClockConfig+0x228>)
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0318 	and.w	r3, r3, #24
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d1ee      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1e8>
 8005d6a:	e015      	b.n	8005d98 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fc fc48 	bl	8002600 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d906      	bls.n	8005d8c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e097      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
 8005d82:	bf00      	nop
 8005d84:	40022000 	.word	0x40022000
 8005d88:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f003 0318 	and.w	r3, r3, #24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e9      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b44      	ldr	r3, [pc, #272]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d208      	bcs.n	8005dc6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005db4:	4b41      	ldr	r3, [pc, #260]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f023 020f 	bic.w	r2, r3, #15
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	493e      	ldr	r1, [pc, #248]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec0 <HAL_RCC_ClockConfig+0x360>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d210      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec0 <HAL_RCC_ClockConfig+0x360>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 020f 	bic.w	r2, r3, #15
 8005ddc:	4938      	ldr	r1, [pc, #224]	@ (8005ec0 <HAL_RCC_ClockConfig+0x360>)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de4:	4b36      	ldr	r3, [pc, #216]	@ (8005ec0 <HAL_RCC_ClockConfig+0x360>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e05d      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	4b2d      	ldr	r3, [pc, #180]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d208      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005e12:	4b2a      	ldr	r3, [pc, #168]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4927      	ldr	r1, [pc, #156]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d209      	bcs.n	8005e56 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005e42:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	491a      	ldr	r1, [pc, #104]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d012      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d209      	bcs.n	8005e88 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005e74:	4b11      	ldr	r3, [pc, #68]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	490e      	ldr	r1, [pc, #56]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e88:	f000 f822 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <HAL_RCC_ClockConfig+0x35c>)
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	490b      	ldr	r1, [pc, #44]	@ (8005ec4 <HAL_RCC_ClockConfig+0x364>)
 8005e98:	5ccb      	ldrb	r3, [r1, r3]
 8005e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec8 <HAL_RCC_ClockConfig+0x368>)
 8005ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <HAL_RCC_ClockConfig+0x36c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fc fb20 	bl	80024ec <HAL_InitTick>
 8005eac:	4603      	mov	r3, r0
 8005eae:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	44020c00 	.word	0x44020c00
 8005ec0:	40022000 	.word	0x40022000
 8005ec4:	0800f150 	.word	0x0800f150
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	20000004 	.word	0x20000004

08005ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b089      	sub	sp, #36	@ 0x24
 8005ed4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005ed6:	4b8c      	ldr	r3, [pc, #560]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 0318 	and.w	r3, r3, #24
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800610c <HAL_RCC_GetSysClockFreq+0x23c>)
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e107      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ee8:	4b87      	ldr	r3, [pc, #540]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f003 0318 	and.w	r3, r3, #24
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d112      	bne.n	8005f1a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005ef4:	4b84      	ldr	r3, [pc, #528]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d009      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f00:	4b81      	ldr	r3, [pc, #516]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	08db      	lsrs	r3, r3, #3
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	4a81      	ldr	r2, [pc, #516]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	e0f1      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005f14:	4b7e      	ldr	r3, [pc, #504]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	e0ee      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0318 	and.w	r3, r3, #24
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d102      	bne.n	8005f2c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f26:	4b7b      	ldr	r3, [pc, #492]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x244>)
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	e0e5      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f2c:	4b76      	ldr	r3, [pc, #472]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f003 0318 	and.w	r3, r3, #24
 8005f34:	2b18      	cmp	r3, #24
 8005f36:	f040 80dd 	bne.w	80060f4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f3a:	4b73      	ldr	r3, [pc, #460]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005f44:	4b70      	ldr	r3, [pc, #448]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	0a1b      	lsrs	r3, r3, #8
 8005f4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005f50:	4b6d      	ldr	r3, [pc, #436]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005f60:	08db      	lsrs	r3, r3, #3
 8005f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	fb02 f303 	mul.w	r3, r2, r3
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80b7 	beq.w	80060ee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d003      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0xbe>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d056      	beq.n	800603a <HAL_RCC_GetSysClockFreq+0x16a>
 8005f8c:	e077      	b.n	800607e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d02d      	beq.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x240>)
 8005fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005faa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc4:	4b50      	ldr	r3, [pc, #320]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x248>
 8005fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fe4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005ff4:	e065      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006000:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800611c <HAL_RCC_GetSysClockFreq+0x24c>
 8006004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006008:	4b3f      	ldr	r3, [pc, #252]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 800600a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006018:	ed97 6a02 	vldr	s12, [r7, #8]
 800601c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x248>
 8006020:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006024:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800602c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006034:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006038:	e043      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006044:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006120 <HAL_RCC_GetSysClockFreq+0x250>
 8006048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604c:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 800604e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800605c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006060:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x248>
 8006064:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006068:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800606c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006070:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006078:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800607c:	e021      	b.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006124 <HAL_RCC_GetSysClockFreq+0x254>
 800608c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006090:	4b1d      	ldr	r3, [pc, #116]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 8006092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006118 <HAL_RCC_GetSysClockFreq+0x248>
 80060a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80060c0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80060c2:	4b11      	ldr	r3, [pc, #68]	@ (8006108 <HAL_RCC_GetSysClockFreq+0x238>)
 80060c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c6:	0a5b      	lsrs	r3, r3, #9
 80060c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060cc:	3301      	adds	r3, #1
 80060ce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060da:	edd7 6a06 	vldr	s13, [r7, #24]
 80060de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e6:	ee17 3a90 	vmov	r3, s15
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	e004      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	e001      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80060f4:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <HAL_RCC_GetSysClockFreq+0x240>)
 80060f6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80060f8:	69fb      	ldr	r3, [r7, #28]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3724      	adds	r7, #36	@ 0x24
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	44020c00 	.word	0x44020c00
 800610c:	003d0900 	.word	0x003d0900
 8006110:	03d09000 	.word	0x03d09000
 8006114:	017d7840 	.word	0x017d7840
 8006118:	46000000 	.word	0x46000000
 800611c:	4c742400 	.word	0x4c742400
 8006120:	4bbebc20 	.word	0x4bbebc20
 8006124:	4a742400 	.word	0x4a742400

08006128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800612c:	f7ff fed0 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006136:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800613a:	4907      	ldr	r1, [pc, #28]	@ (8006158 <HAL_RCC_GetHCLKFreq+0x30>)
 800613c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800613e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	4a05      	ldr	r2, [pc, #20]	@ (800615c <HAL_RCC_GetHCLKFreq+0x34>)
 8006148:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800614a:	4b04      	ldr	r3, [pc, #16]	@ (800615c <HAL_RCC_GetHCLKFreq+0x34>)
 800614c:	681b      	ldr	r3, [r3, #0]
}
 800614e:	4618      	mov	r0, r3
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	44020c00 	.word	0x44020c00
 8006158:	0800f150 	.word	0x0800f150
 800615c:	20000000 	.word	0x20000000

08006160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006164:	f7ff ffe0 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4904      	ldr	r1, [pc, #16]	@ (8006188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	44020c00 	.word	0x44020c00
 8006188:	0800f160 	.word	0x0800f160

0800618c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006190:	f7ff ffca 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 8006194:	4602      	mov	r2, r0
 8006196:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	4904      	ldr	r1, [pc, #16]	@ (80061b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	44020c00 	.word	0x44020c00
 80061b4:	0800f160 	.word	0x0800f160

080061b8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80061bc:	f7ff ffb4 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <HAL_RCC_GetPCLK3Freq+0x24>)
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	0b1b      	lsrs	r3, r3, #12
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	4904      	ldr	r1, [pc, #16]	@ (80061e0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80061ce:	5ccb      	ldrb	r3, [r1, r3]
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	44020c00 	.word	0x44020c00
 80061e0:	0800f160 	.word	0x0800f160

080061e4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80061e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e8:	b0aa      	sub	sp, #168	@ 0xa8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061f6:	2300      	movs	r3, #0
 80061f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006208:	2500      	movs	r5, #0
 800620a:	ea54 0305 	orrs.w	r3, r4, r5
 800620e:	d00b      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006210:	4bb8      	ldr	r3, [pc, #736]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006216:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800621a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	4ab4      	ldr	r2, [pc, #720]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006222:	430b      	orrs	r3, r1
 8006224:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006228:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f002 0801 	and.w	r8, r2, #1
 8006234:	f04f 0900 	mov.w	r9, #0
 8006238:	ea58 0309 	orrs.w	r3, r8, r9
 800623c:	d038      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800623e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006244:	2b05      	cmp	r3, #5
 8006246:	d819      	bhi.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006248:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006285 	.word	0x08006285
 8006254:	08006269 	.word	0x08006269
 8006258:	0800627d 	.word	0x0800627d
 800625c:	08006285 	.word	0x08006285
 8006260:	08006285 	.word	0x08006285
 8006264:	08006285 	.word	0x08006285
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006268:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800626c:	3308      	adds	r3, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f001 ffee 	bl	8008250 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800627a:	e004      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006282:	e000      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8006284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006286:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800628e:	4b99      	ldr	r3, [pc, #612]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006294:	f023 0107 	bic.w	r1, r3, #7
 8006298:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800629c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629e:	4a95      	ldr	r2, [pc, #596]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80062ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 0a02 	and.w	sl, r2, #2
 80062bc:	f04f 0b00 	mov.w	fp, #0
 80062c0:	ea5a 030b 	orrs.w	r3, sl, fp
 80062c4:	d03c      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80062c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062cc:	2b28      	cmp	r3, #40	@ 0x28
 80062ce:	d01b      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80062d0:	2b28      	cmp	r3, #40	@ 0x28
 80062d2:	d815      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d019      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x128>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d811      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80062dc:	2b18      	cmp	r3, #24
 80062de:	d017      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80062e0:	2b18      	cmp	r3, #24
 80062e2:	d80d      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d015      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d109      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062f0:	3308      	adds	r3, #8
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 ffac 	bl	8008250 <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80062fe:	e00a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006306:	e006      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006308:	bf00      	nop
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800630c:	bf00      	nop
 800630e:	e002      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10c      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800631e:	4b75      	ldr	r3, [pc, #468]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006324:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006328:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	4a71      	ldr	r2, [pc, #452]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006330:	430b      	orrs	r3, r1
 8006332:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006336:	e003      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800633c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006340:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f002 0304 	and.w	r3, r2, #4
 800634c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006350:	2300      	movs	r3, #0
 8006352:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006356:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800635a:	460b      	mov	r3, r1
 800635c:	4313      	orrs	r3, r2
 800635e:	d040      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006360:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800636a:	d01e      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800636c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006370:	d817      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006376:	d01a      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8006378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800637c:	d811      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800637e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006380:	d017      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006382:	2bc0      	cmp	r3, #192	@ 0xc0
 8006384:	d80d      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d015      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800638a:	2b40      	cmp	r3, #64	@ 0x40
 800638c:	d109      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800638e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006392:	3308      	adds	r3, #8
 8006394:	4618      	mov	r0, r3
 8006396:	f001 ff5b 	bl	8008250 <RCCEx_PLL2_Config>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80063a0:	e00a      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80063aa:	bf00      	nop
 80063ac:	e004      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80063ae:	bf00      	nop
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80063b2:	bf00      	nop
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80063b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80063c0:	4b4c      	ldr	r3, [pc, #304]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80063c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063c6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80063ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d0:	4a48      	ldr	r2, [pc, #288]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80063de:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80063ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063f2:	2300      	movs	r3, #0
 80063f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d043      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006402:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800640c:	d021      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800640e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006412:	d81a      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006418:	d01d      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800641a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800641e:	d814      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006420:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006424:	d019      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006426:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800642a:	d80e      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006434:	d109      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006436:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800643a:	3308      	adds	r3, #8
 800643c:	4618      	mov	r0, r3
 800643e:	f001 ff07 	bl	8008250 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006448:	e00a      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006450:	e006      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8006452:	bf00      	nop
 8006454:	e004      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800645e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006460:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10c      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006468:	4b22      	ldr	r3, [pc, #136]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800646a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800646e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	4a1e      	ldr	r2, [pc, #120]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800647a:	430b      	orrs	r3, r1
 800647c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006480:	e003      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006486:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800648a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006496:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006498:	2300      	movs	r3, #0
 800649a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800649c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80064a0:	460b      	mov	r3, r1
 80064a2:	4313      	orrs	r3, r2
 80064a4:	d03e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80064a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b0:	d01b      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x306>
 80064b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b6:	d814      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064bc:	d017      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80064be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c2:	d80e      	bhi.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d109      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064d2:	3308      	adds	r3, #8
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 febb 	bl	8008250 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80064e0:	e00b      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80064e8:	e007      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80064ea:	bf00      	nop
 80064ec:	e005      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80064ee:	bf00      	nop
 80064f0:	e003      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x316>
 80064f2:	bf00      	nop
 80064f4:	44020c00 	.word	0x44020c00
        break;
 80064f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006502:	4ba5      	ldr	r3, [pc, #660]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8006504:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006508:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800650c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006512:	4aa1      	ldr	r2, [pc, #644]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8006514:	430b      	orrs	r3, r1
 8006516:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800651a:	e003      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006520:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006524:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006530:	673b      	str	r3, [r7, #112]	@ 0x70
 8006532:	2300      	movs	r3, #0
 8006534:	677b      	str	r3, [r7, #116]	@ 0x74
 8006536:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d03b      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006546:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800654a:	d01b      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800654c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006550:	d814      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8006552:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006556:	d017      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006558:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800655c:	d80e      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d014      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8006562:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006566:	d109      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800656c:	3308      	adds	r3, #8
 800656e:	4618      	mov	r0, r3
 8006570:	f001 fe6e 	bl	8008250 <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800657a:	e008      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006582:	e004      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8006584:	bf00      	nop
 8006586:	e002      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8006588:	bf00      	nop
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800658c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10c      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006596:	4b80      	ldr	r3, [pc, #512]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8006598:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800659c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80065a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065ae:	e003      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80065b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80065b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065c6:	2300      	movs	r3, #0
 80065c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065ce:	460b      	mov	r3, r1
 80065d0:	4313      	orrs	r3, r2
 80065d2:	d033      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80065d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065de:	d015      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80065e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065e4:	d80e      	bhi.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d012      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80065ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ee:	d109      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065f4:	3308      	adds	r3, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 fe2a 	bl	8008250 <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006602:	e006      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800660a:	e002      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800660c:	bf00      	nop
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8006610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006612:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10c      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800661a:	4b5f      	ldr	r3, [pc, #380]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800661c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006620:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006624:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662a:	4a5b      	ldr	r2, [pc, #364]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800662c:	430b      	orrs	r3, r1
 800662e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006638:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800663c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	2100      	movs	r1, #0
 8006646:	6639      	str	r1, [r7, #96]	@ 0x60
 8006648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800664c:	667b      	str	r3, [r7, #100]	@ 0x64
 800664e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006652:	460b      	mov	r3, r1
 8006654:	4313      	orrs	r3, r2
 8006656:	d033      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8006658:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800665c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006662:	d015      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006664:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006668:	d80e      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800666e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006672:	d109      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006674:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006678:	3308      	adds	r3, #8
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fde8 	bl	8008250 <RCCEx_PLL2_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8006686:	e006      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800668e:	e002      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8006694:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006696:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10c      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800669e:	4b3e      	ldr	r3, [pc, #248]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80066a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066a4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80066a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80066ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ae:	4a3a      	ldr	r2, [pc, #232]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80066b0:	430b      	orrs	r3, r1
 80066b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80066b6:	e003      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80066bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	2100      	movs	r1, #0
 80066ca:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80066dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80066e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066e6:	61d3      	str	r3, [r2, #28]
 80066e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80066ea:	69d9      	ldr	r1, [r3, #28]
 80066ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80066f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066f4:	4a28      	ldr	r2, [pc, #160]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006706:	653b      	str	r3, [r7, #80]	@ 0x50
 8006708:	2300      	movs	r3, #0
 800670a:	657b      	str	r3, [r7, #84]	@ 0x54
 800670c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006710:	460b      	mov	r3, r1
 8006712:	4313      	orrs	r3, r2
 8006714:	d046      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006716:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006720:	d021      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006722:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006726:	d81a      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800672c:	d01d      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800672e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006732:	d814      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006734:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006738:	d019      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800673a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800673e:	d80e      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d016      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8006744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006748:	d109      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800674a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800674e:	3308      	adds	r3, #8
 8006750:	4618      	mov	r0, r3
 8006752:	f001 fd7d 	bl	8008250 <RCCEx_PLL2_Config>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800675c:	e00a      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006764:	e006      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8006766:	bf00      	nop
 8006768:	e004      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800676a:	bf00      	nop
 800676c:	e002      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800676e:	bf00      	nop
 8006770:	e000      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8006772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006774:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10f      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800677e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006782:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800678a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678c:	4a02      	ldr	r2, [pc, #8]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800678e:	430b      	orrs	r3, r1
 8006790:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006796:	bf00      	nop
 8006798:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80067a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067b2:	2300      	movs	r3, #0
 80067b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d043      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80067c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80067c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067ca:	d021      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80067cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067d0:	d81a      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80067d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d6:	d01d      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80067d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067dc:	d814      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80067de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067e2:	d019      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x634>
 80067e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067e8:	d80e      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x638>
 80067ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f2:	d109      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80067f8:	3308      	adds	r3, #8
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fd28 	bl	8008250 <RCCEx_PLL2_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006806:	e00a      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800680e:	e006      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8006810:	bf00      	nop
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8006814:	bf00      	nop
 8006816:	e002      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800681c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006826:	4bb6      	ldr	r3, [pc, #728]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006828:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800682c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006830:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	4ab2      	ldr	r2, [pc, #712]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006838:	430b      	orrs	r3, r1
 800683a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006844:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006854:	643b      	str	r3, [r7, #64]	@ 0x40
 8006856:	2300      	movs	r3, #0
 8006858:	647b      	str	r3, [r7, #68]	@ 0x44
 800685a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d030      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006864:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800686a:	2b05      	cmp	r3, #5
 800686c:	d80f      	bhi.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800686e:	2b03      	cmp	r3, #3
 8006870:	d211      	bcs.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8006872:	2b01      	cmp	r3, #1
 8006874:	d911      	bls.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8006876:	2b02      	cmp	r3, #2
 8006878:	d109      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800687a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800687e:	3308      	adds	r3, #8
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fce5 	bl	8008250 <RCCEx_PLL2_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800688c:	e006      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006894:	e002      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800689a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800689c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10c      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80068a4:	4b96      	ldr	r3, [pc, #600]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80068a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068aa:	f023 0107 	bic.w	r1, r3, #7
 80068ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80068b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b4:	4a92      	ldr	r2, [pc, #584]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80068b6:	430b      	orrs	r3, r1
 80068b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80068c2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80068c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	2100      	movs	r1, #0
 80068d0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80068d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80068dc:	460b      	mov	r3, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	d022      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80068e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80068e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d005      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80068f8:	bf00      	nop
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10c      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006906:	4b7e      	ldr	r3, [pc, #504]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800690c:	f023 0108 	bic.w	r1, r3, #8
 8006910:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006916:	4a7a      	ldr	r2, [pc, #488]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006918:	430b      	orrs	r3, r1
 800691a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800691e:	e003      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006924:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006928:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006934:	633b      	str	r3, [r7, #48]	@ 0x30
 8006936:	2300      	movs	r3, #0
 8006938:	637b      	str	r3, [r7, #52]	@ 0x34
 800693a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800693e:	460b      	mov	r3, r1
 8006940:	4313      	orrs	r3, r2
 8006942:	f000 80b0 	beq.w	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006946:	4b6f      	ldr	r3, [pc, #444]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	4a6e      	ldr	r2, [pc, #440]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006952:	f7fb fe55 	bl	8002600 <HAL_GetTick>
 8006956:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800695a:	e00b      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695c:	f7fb fe50 	bl	8002600 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d903      	bls.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006972:	e005      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006974:	4b63      	ldr	r3, [pc, #396]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ed      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8006980:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 808a 	bne.w	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800698a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800698c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d022      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80069a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d01b      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069ae:	4b54      	ldr	r3, [pc, #336]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80069b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069bc:	4b50      	ldr	r3, [pc, #320]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80069be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c2:	4a4f      	ldr	r2, [pc, #316]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80069ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d2:	4a4b      	ldr	r2, [pc, #300]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80069d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069dc:	4a48      	ldr	r2, [pc, #288]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80069de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d019      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f2:	f7fb fe05 	bl	8002600 <HAL_GetTick>
 80069f6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069fa:	e00d      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fb fe00 	bl	8002600 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d903      	bls.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8006a16:	e006      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a18:	4b39      	ldr	r3, [pc, #228]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0ea      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8006a26:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d132      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a3c:	d10f      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8006a3e:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006a56:	4a2a      	ldr	r2, [pc, #168]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	61d3      	str	r3, [r2, #28]
 8006a5c:	e005      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x886>
 8006a5e:	4b28      	ldr	r3, [pc, #160]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	4a27      	ldr	r2, [pc, #156]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a68:	61d3      	str	r3, [r2, #28]
 8006a6a:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a70:	4a23      	ldr	r2, [pc, #140]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a7a:	4b21      	ldr	r3, [pc, #132]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a7c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006a80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a92:	e008      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a94:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006a98:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8006a9c:	e003      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006aa2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ab8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006abc:	460b      	mov	r3, r1
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	d038      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac8:	2b30      	cmp	r3, #48	@ 0x30
 8006aca:	d014      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8006acc:	2b30      	cmp	r3, #48	@ 0x30
 8006ace:	d80e      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d012      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x916>
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d80a      	bhi.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d015      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d106      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae0:	4b07      	ldr	r3, [pc, #28]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae4:	4a06      	ldr	r2, [pc, #24]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8006ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aea:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006aec:	e00d      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006af4:	e009      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8006af6:	bf00      	nop
 8006af8:	e007      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8006afa:	bf00      	nop
 8006afc:	e005      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x926>
 8006afe:	bf00      	nop
 8006b00:	44020c00 	.word	0x44020c00
 8006b04:	44020800 	.word	0x44020800
        break;
 8006b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b12:	4bb5      	ldr	r3, [pc, #724]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b22:	49b1      	ldr	r1, [pc, #708]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006b30:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006b34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006b40:	623b      	str	r3, [r7, #32]
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d03c      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d81d      	bhi.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b75 	.word	0x08006b75
 8006b64:	08006b83 	.word	0x08006b83
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006b9f 	.word	0x08006b9f
 8006b70:	08006b9f 	.word	0x08006b9f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b74:	4b9c      	ldr	r3, [pc, #624]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	4a9b      	ldr	r2, [pc, #620]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006b80:	e00e      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006b86:	3308      	adds	r3, #8
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fb61 	bl	8008250 <RCCEx_PLL2_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006b94:	e004      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006b9c:	e000      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8006b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bae:	f023 0207 	bic.w	r2, r3, #7
 8006bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bb8:	498b      	ldr	r1, [pc, #556]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006bc6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006bca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d03c      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006be6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d01f      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006bf0:	2b20      	cmp	r3, #32
 8006bf2:	d819      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8006bf4:	2b18      	cmp	r3, #24
 8006bf6:	d01d      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006bf8:	2b18      	cmp	r3, #24
 8006bfa:	d815      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d007      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006c04:	e010      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c06:	4b78      	ldr	r3, [pc, #480]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	4a77      	ldr	r2, [pc, #476]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006c12:	e010      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c18:	3308      	adds	r3, #8
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fb18 	bl	8008250 <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006c26:	e006      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006c2e:	e002      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8006c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c44:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c4e:	4966      	ldr	r1, [pc, #408]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006c56:	e003      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006c5c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006c60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c76:	460b      	mov	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d03e      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c86:	d020      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8006c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c8c:	d819      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8006c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c90:	d01d      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8006c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c94:	d815      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8006c9a:	2b40      	cmp	r3, #64	@ 0x40
 8006c9c:	d007      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8006c9e:	e010      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca0:	4b51      	ldr	r3, [pc, #324]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca4:	4a50      	ldr	r2, [pc, #320]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006caa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006cac:	e010      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 facb 	bl	8008250 <RCCEx_PLL2_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8006cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10c      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006cd8:	4b43      	ldr	r3, [pc, #268]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cde:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8006ce2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce8:	493f      	ldr	r1, [pc, #252]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006cf6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	2100      	movs	r1, #0
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d038      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d20:	d00e      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8006d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d26:	d815      	bhi.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d017      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8006d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d30:	d110      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d32:	4b2d      	ldr	r3, [pc, #180]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	4a2c      	ldr	r2, [pc, #176]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006d3e:	e00e      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d44:	3308      	adds	r3, #8
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fa82 	bl	8008250 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006d52:	e004      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8006d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006d66:	4b20      	ldr	r3, [pc, #128]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d76:	491c      	ldr	r1, [pc, #112]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006d7e:	e003      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006d84:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	2100      	movs	r1, #0
 8006d92:	6039      	str	r1, [r7, #0]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d039      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006da4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006da8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006daa:	2b30      	cmp	r3, #48	@ 0x30
 8006dac:	d01e      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006dae:	2b30      	cmp	r3, #48	@ 0x30
 8006db0:	d815      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8006db2:	2b10      	cmp	r3, #16
 8006db4:	d002      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d007      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8006dba:	e010      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	4a09      	ldr	r2, [pc, #36]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006dc8:	e011      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006dce:	3308      	adds	r3, #8
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fa3d 	bl	8008250 <RCCEx_PLL2_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006ddc:	e007      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006de4:	e003      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8006de6:	bf00      	nop
 8006de8:	44020c00 	.word	0x44020c00
        break;
 8006dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10c      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006df6:	4b0c      	ldr	r3, [pc, #48]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006df8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e06:	4908      	ldr	r1, [pc, #32]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006e0e:	e003      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006e14:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8006e18:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	37a8      	adds	r7, #168	@ 0xa8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	44020c00 	.word	0x44020c00

08006e2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b08b      	sub	sp, #44	@ 0x2c
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006e34:	4bad      	ldr	r3, [pc, #692]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e3e:	4bab      	ldr	r3, [pc, #684]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006e48:	4ba8      	ldr	r3, [pc, #672]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e52:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006e54:	4ba5      	ldr	r3, [pc, #660]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e5e:	4ba3      	ldr	r3, [pc, #652]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8126 	beq.w	80070ce <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d053      	beq.n	8006f30 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d86f      	bhi.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d003      	beq.n	8006e9c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d02b      	beq.n	8006ef2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006e9a:	e068      	b.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e9c:	4b93      	ldr	r3, [pc, #588]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	4a92      	ldr	r2, [pc, #584]	@ (80070f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	ee07 3a90 	vmov	s15, r3
 8006ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed0:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ed4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80070f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006ef0:	e068      	b.n	8006fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80070f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f2e:	e049      	b.n	8006fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80070fc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f50:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80070f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f68:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f6c:	e02a      	b.n	8006fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	08db      	lsrs	r3, r3, #3
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	4a5d      	ldr	r2, [pc, #372]	@ (80070f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fa6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80070f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fbe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006fc2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fc4:	4b49      	ldr	r3, [pc, #292]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd0:	d121      	bne.n	8007016 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006fd2:	4b46      	ldr	r3, [pc, #280]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d017      	beq.n	800700e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fde:	4b43      	ldr	r3, [pc, #268]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe2:	0a5b      	lsrs	r3, r3, #9
 8006fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006ff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006ff8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007004:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e006      	b.n	800701c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e002      	b.n	800701c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800701c:	4b33      	ldr	r3, [pc, #204]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007028:	d121      	bne.n	800706e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800702a:	4b30      	ldr	r3, [pc, #192]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007036:	4b2d      	ldr	r3, [pc, #180]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007048:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800704c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007050:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	e006      	b.n	8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	e002      	b.n	8007074 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007074:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800707c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007080:	d121      	bne.n	80070c6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007082:	4b1a      	ldr	r3, [pc, #104]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d017      	beq.n	80070be <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800708e:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007092:	0e1b      	lsrs	r3, r3, #24
 8007094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80070a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80070a8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80070ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80070bc:	e010      	b.n	80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	e00c      	b.n	80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	609a      	str	r2, [r3, #8]
}
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	372c      	adds	r7, #44	@ 0x2c
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	44020c00 	.word	0x44020c00
 80070f0:	03d09000 	.word	0x03d09000
 80070f4:	46000000 	.word	0x46000000
 80070f8:	4a742400 	.word	0x4a742400
 80070fc:	4bbebc20 	.word	0x4bbebc20

08007100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b08b      	sub	sp, #44	@ 0x2c
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007108:	4bad      	ldr	r3, [pc, #692]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800710a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007112:	4bab      	ldr	r3, [pc, #684]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800711c:	4ba8      	ldr	r3, [pc, #672]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007126:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007128:	4ba5      	ldr	r3, [pc, #660]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007132:	4ba3      	ldr	r3, [pc, #652]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007136:	08db      	lsrs	r3, r3, #3
 8007138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8126 	beq.w	80073a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d053      	beq.n	8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b03      	cmp	r3, #3
 8007160:	d86f      	bhi.n	8007242 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d02b      	beq.n	80071c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800716e:	e068      	b.n	8007242 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007170:	4b93      	ldr	r3, [pc, #588]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a92      	ldr	r2, [pc, #584]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80071a8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80071ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071c4:	e068      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80071d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80071e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007202:	e049      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007220:	ed97 6a04 	vldr	s12, [r7, #16]
 8007224:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007230:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007240:	e02a      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007242:	4b5f      	ldr	r3, [pc, #380]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	08db      	lsrs	r3, r3, #3
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	4a5d      	ldr	r2, [pc, #372]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800724e:	fa22 f303 	lsr.w	r3, r2, r3
 8007252:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a04 	vldr	s12, [r7, #16]
 800727a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007296:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007298:	4b49      	ldr	r3, [pc, #292]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a4:	d121      	bne.n	80072ea <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80072a6:	4b46      	ldr	r3, [pc, #280]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072b2:	4b43      	ldr	r3, [pc, #268]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b6:	0a5b      	lsrs	r3, r3, #9
 80072b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80072c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80072cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80072d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	e006      	b.n	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e002      	b.n	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072f0:	4b33      	ldr	r3, [pc, #204]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072fc:	d121      	bne.n	8007342 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80072fe:	4b30      	ldr	r3, [pc, #192]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d017      	beq.n	800733a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800730a:	4b2d      	ldr	r3, [pc, #180]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800730c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800731c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007320:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007324:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800732c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007330:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]
 8007338:	e006      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	e002      	b.n	8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007348:	4b1d      	ldr	r3, [pc, #116]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007354:	d121      	bne.n	800739a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007356:	4b1a      	ldr	r3, [pc, #104]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d017      	beq.n	8007392 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007362:	4b17      	ldr	r3, [pc, #92]	@ (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007378:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800737c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007388:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007390:	e010      	b.n	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	e00c      	b.n	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	e008      	b.n	80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	372c      	adds	r7, #44	@ 0x2c
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	44020c00 	.word	0x44020c00
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	46000000 	.word	0x46000000
 80073cc:	4a742400 	.word	0x4a742400
 80073d0:	4bbebc20 	.word	0x4bbebc20

080073d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08c      	sub	sp, #48	@ 0x30
 80073d8:	af00      	add	r7, sp, #0
 80073da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80073de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80073e6:	430b      	orrs	r3, r1
 80073e8:	d14b      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80073ea:	4bc4      	ldr	r3, [pc, #784]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80073ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073f4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80073f6:	4bc1      	ldr	r3, [pc, #772]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80073f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b02      	cmp	r3, #2
 8007402:	d108      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740a:	d104      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800740c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007412:	f000 bf14 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007416:	4bb9      	ldr	r3, [pc, #740]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800741c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007420:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007424:	d108      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742c:	d104      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800742e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007434:	f000 bf03 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007438:	4bb0      	ldr	r3, [pc, #704]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007444:	d119      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744c:	d115      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800744e:	4bab      	ldr	r3, [pc, #684]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745a:	d30a      	bcc.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800745c:	4ba7      	ldr	r3, [pc, #668]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007466:	4aa6      	ldr	r2, [pc, #664]	@ (8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8007468:	fbb2 f3f3 	udiv	r3, r2, r3
 800746c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800746e:	f000 bee6 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007476:	f000 bee2 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800747e:	f000 bede 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007486:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800748a:	ea52 0301 	orrs.w	r3, r2, r1
 800748e:	f000 838e 	beq.w	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8007492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007496:	2a01      	cmp	r2, #1
 8007498:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 800749c:	f080 86cc 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80074a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a4:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80074a8:	ea52 0301 	orrs.w	r3, r2, r1
 80074ac:	f000 82aa 	beq.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80074b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b4:	2a01      	cmp	r2, #1
 80074b6:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80074ba:	f080 86bd 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80074be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c2:	f1a3 0110 	sub.w	r1, r3, #16
 80074c6:	ea52 0301 	orrs.w	r3, r2, r1
 80074ca:	f000 8681 	beq.w	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80074ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d2:	2a01      	cmp	r2, #1
 80074d4:	f173 0310 	sbcs.w	r3, r3, #16
 80074d8:	f080 86ae 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80074dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e0:	1f19      	subs	r1, r3, #4
 80074e2:	ea52 0301 	orrs.w	r3, r2, r1
 80074e6:	f000 84b1 	beq.w	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80074ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ee:	2a01      	cmp	r2, #1
 80074f0:	f173 0304 	sbcs.w	r3, r3, #4
 80074f4:	f080 86a0 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80074f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007500:	430b      	orrs	r3, r1
 8007502:	f000 85aa 	beq.w	800805a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8007506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750a:	497e      	ldr	r1, [pc, #504]	@ (8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800750c:	428a      	cmp	r2, r1
 800750e:	f173 0300 	sbcs.w	r3, r3, #0
 8007512:	f080 8691 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800751e:	430b      	orrs	r3, r1
 8007520:	f000 8532 	beq.w	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8007524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007528:	4977      	ldr	r1, [pc, #476]	@ (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800752a:	428a      	cmp	r2, r1
 800752c:	f173 0300 	sbcs.w	r3, r3, #0
 8007530:	f080 8682 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007538:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800753c:	430b      	orrs	r3, r1
 800753e:	f000 84bc 	beq.w	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8007542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007546:	4971      	ldr	r1, [pc, #452]	@ (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8007548:	428a      	cmp	r2, r1
 800754a:	f173 0300 	sbcs.w	r3, r3, #0
 800754e:	f080 8673 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007556:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800755a:	430b      	orrs	r3, r1
 800755c:	f000 85f2 	beq.w	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8007560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007564:	496a      	ldr	r1, [pc, #424]	@ (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8007566:	428a      	cmp	r2, r1
 8007568:	f173 0300 	sbcs.w	r3, r3, #0
 800756c:	f080 8664 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007578:	430b      	orrs	r3, r1
 800757a:	f000 81e5 	beq.w	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800757e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007582:	4964      	ldr	r1, [pc, #400]	@ (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8007584:	428a      	cmp	r2, r1
 8007586:	f173 0300 	sbcs.w	r3, r3, #0
 800758a:	f080 8655 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800758e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007592:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007596:	430b      	orrs	r3, r1
 8007598:	f000 83cc 	beq.w	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800759c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a0:	495d      	ldr	r1, [pc, #372]	@ (8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80075a2:	428a      	cmp	r2, r1
 80075a4:	f173 0300 	sbcs.w	r3, r3, #0
 80075a8:	f080 8646 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80075ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b0:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80075b4:	430b      	orrs	r3, r1
 80075b6:	f000 8331 	beq.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80075ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075be:	4957      	ldr	r1, [pc, #348]	@ (800771c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80075c0:	428a      	cmp	r2, r1
 80075c2:	f173 0300 	sbcs.w	r3, r3, #0
 80075c6:	f080 8637 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80075ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ce:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80075d2:	430b      	orrs	r3, r1
 80075d4:	f000 82bb 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 80075d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075dc:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80075e0:	f173 0300 	sbcs.w	r3, r3, #0
 80075e4:	f080 8628 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80075e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80075f0:	430b      	orrs	r3, r1
 80075f2:	f000 826d 	beq.w	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 80075f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fa:	f244 0101 	movw	r1, #16385	@ 0x4001
 80075fe:	428a      	cmp	r2, r1
 8007600:	f173 0300 	sbcs.w	r3, r3, #0
 8007604:	f080 8618 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007610:	430b      	orrs	r3, r1
 8007612:	f000 821e 	beq.w	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8007616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800761a:	f242 0101 	movw	r1, #8193	@ 0x2001
 800761e:	428a      	cmp	r2, r1
 8007620:	f173 0300 	sbcs.w	r3, r3, #0
 8007624:	f080 8608 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007630:	430b      	orrs	r3, r1
 8007632:	f000 8137 	beq.w	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800763a:	f241 0101 	movw	r1, #4097	@ 0x1001
 800763e:	428a      	cmp	r2, r1
 8007640:	f173 0300 	sbcs.w	r3, r3, #0
 8007644:	f080 85f8 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800764c:	1f11      	subs	r1, r2, #4
 800764e:	430b      	orrs	r3, r1
 8007650:	f000 80d2 	beq.w	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8007654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007658:	2a05      	cmp	r2, #5
 800765a:	f173 0300 	sbcs.w	r3, r3, #0
 800765e:	f080 85eb 	bcs.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007666:	1e51      	subs	r1, r2, #1
 8007668:	430b      	orrs	r3, r1
 800766a:	d006      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800766c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007670:	1e91      	subs	r1, r2, #2
 8007672:	430b      	orrs	r3, r1
 8007674:	d06c      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007676:	f000 bddf 	b.w	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800767a:	4b20      	ldr	r3, [pc, #128]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800767c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800768c:	f7fe fd7e 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 8007690:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007692:	f000 bdd4 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007696:	4b19      	ldr	r3, [pc, #100]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800769e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076a2:	d10a      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d107      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff fd26 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076b8:	e048      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80076ba:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d109      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076cc:	4b0b      	ldr	r3, [pc, #44]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	08db      	lsrs	r3, r3, #3
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	4a12      	ldr	r2, [pc, #72]	@ (8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80076d8:	fa22 f303 	lsr.w	r3, r2, r3
 80076dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076de:	e035      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80076e0:	4b06      	ldr	r3, [pc, #24]	@ (80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ec:	d11c      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d119      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 80076f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80076f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076f8:	e028      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80076fa:	bf00      	nop
 80076fc:	44020c00 	.word	0x44020c00
 8007700:	017d7840 	.word	0x017d7840
 8007704:	20000001 	.word	0x20000001
 8007708:	10000001 	.word	0x10000001
 800770c:	08000001 	.word	0x08000001
 8007710:	04000001 	.word	0x04000001
 8007714:	00200001 	.word	0x00200001
 8007718:	00040001 	.word	0x00040001
 800771c:	00020001 	.word	0x00020001
 8007720:	03d09000 	.word	0x03d09000
 8007724:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007728:	4b9f      	ldr	r3, [pc, #636]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800772a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b02      	cmp	r3, #2
 8007734:	d106      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	2b05      	cmp	r3, #5
 800773a:	d103      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 800773c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007742:	e003      	b.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007748:	f000 bd79 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800774c:	f000 bd77 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007750:	4b95      	ldr	r3, [pc, #596]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8007752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800775a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800775c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d104      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007762:	f7fe fcfd 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007766:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007768:	f000 bd69 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800776c:	4b8e      	ldr	r3, [pc, #568]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007778:	d10a      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	2b08      	cmp	r3, #8
 800777e:	d107      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007780:	f107 030c 	add.w	r3, r7, #12
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fcbb 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800778e:	e031      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007790:	4b85      	ldr	r3, [pc, #532]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b02      	cmp	r3, #2
 800779a:	d10c      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	2b18      	cmp	r3, #24
 80077a0:	d109      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077a2:	4b81      	ldr	r3, [pc, #516]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	08db      	lsrs	r3, r3, #3
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	4a7f      	ldr	r2, [pc, #508]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80077ae:	fa22 f303 	lsr.w	r3, r2, r3
 80077b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b4:	e01e      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80077b6:	4b7c      	ldr	r3, [pc, #496]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c2:	d105      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d102      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 80077ca:	4b79      	ldr	r3, [pc, #484]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80077cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ce:	e011      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80077d0:	4b75      	ldr	r3, [pc, #468]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80077d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d106      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	2b28      	cmp	r3, #40	@ 0x28
 80077e2:	d103      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 80077e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ea:	e003      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80077f0:	f000 bd25 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80077f4:	f000 bd23 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80077f8:	4b6b      	ldr	r3, [pc, #428]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80077fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80077fe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007802:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800780a:	f7fe fca9 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 800780e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007810:	f000 bd15 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007814:	4b64      	ldr	r3, [pc, #400]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800781c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007820:	d10a      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	2b40      	cmp	r3, #64	@ 0x40
 8007826:	d107      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007828:	f107 030c 	add.w	r3, r7, #12
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff fc67 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007836:	e033      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007838:	4b5b      	ldr	r3, [pc, #364]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b02      	cmp	r3, #2
 8007842:	d10c      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007846:	2bc0      	cmp	r3, #192	@ 0xc0
 8007848:	d109      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800784a:	4b57      	ldr	r3, [pc, #348]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	08db      	lsrs	r3, r3, #3
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	4a55      	ldr	r2, [pc, #340]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8007856:	fa22 f303 	lsr.w	r3, r2, r3
 800785a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800785c:	e020      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800785e:	4b52      	ldr	r3, [pc, #328]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786a:	d106      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007872:	d102      	bne.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8007874:	4b4e      	ldr	r3, [pc, #312]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8007876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007878:	e012      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800787a:	4b4b      	ldr	r3, [pc, #300]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800787c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b02      	cmp	r3, #2
 8007886:	d107      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800788e:	d103      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8007890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007896:	e003      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800789c:	f000 bccf 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80078a0:	f000 bccd 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80078a4:	4b40      	ldr	r3, [pc, #256]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80078a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078aa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80078ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80078b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80078b6:	f7fe fc7f 	bl	80061b8 <HAL_RCC_GetPCLK3Freq>
 80078ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80078bc:	f000 bcbf 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078c6:	d108      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078c8:	f107 030c 	add.w	r3, r7, #12
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fc17 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80078d6:	f000 bcb2 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80078da:	4b33      	ldr	r3, [pc, #204]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d10d      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80078e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80078ec:	d109      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078ee:	4b2e      	ldr	r3, [pc, #184]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	4a2c      	ldr	r2, [pc, #176]	@ (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80078fa:	fa22 f303 	lsr.w	r3, r2, r3
 80078fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007900:	e020      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007902:	4b29      	ldr	r3, [pc, #164]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800790a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790e:	d106      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007916:	d102      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8007918:	4b25      	ldr	r3, [pc, #148]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800791a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800791c:	e012      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800791e:	4b22      	ldr	r3, [pc, #136]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8007920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b02      	cmp	r3, #2
 800792a:	d107      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007932:	d103      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8007934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007940:	f000 bc7d 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007944:	f000 bc7b 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007948:	4b17      	ldr	r3, [pc, #92]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800794a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800795a:	f7fe fbe5 	bl	8006128 <HAL_RCC_GetHCLKFreq>
 800795e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007960:	f000 bc6d 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	2b01      	cmp	r3, #1
 8007968:	d104      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800796a:	f7fe fab1 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 800796e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8007970:	f000 bc65 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	2b02      	cmp	r3, #2
 8007978:	d108      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797a:	f107 030c 	add.w	r3, r7, #12
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fbbe 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007988:	f000 bc59 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800798c:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007998:	d10e      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	2b03      	cmp	r3, #3
 800799e:	d10b      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80079a0:	4b04      	ldr	r3, [pc, #16]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079a4:	e02c      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80079a6:	bf00      	nop
 80079a8:	44020c00 	.word	0x44020c00
 80079ac:	03d09000 	.word	0x03d09000
 80079b0:	003d0900 	.word	0x003d0900
 80079b4:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80079b8:	4b95      	ldr	r3, [pc, #596]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d10c      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d109      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ca:	4b91      	ldr	r3, [pc, #580]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	08db      	lsrs	r3, r3, #3
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	4a8f      	ldr	r2, [pc, #572]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079d6:	fa22 f303 	lsr.w	r3, r2, r3
 80079da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079dc:	e010      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80079de:	4b8c      	ldr	r3, [pc, #560]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ea:	d105      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80079ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d102      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80079f2:	4b89      	ldr	r3, [pc, #548]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80079f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079f6:	e003      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80079fc:	f000 bc1f 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007a00:	f000 bc1d 	b.w	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007a04:	4b82      	ldr	r3, [pc, #520]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007a10:	4b7f      	ldr	r3, [pc, #508]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d106      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8007a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a2a:	e011      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007a2c:	4b78      	ldr	r3, [pc, #480]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a3a:	d106      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d103      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8007a42:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a48:	e002      	b.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8007a4e:	e3f6      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007a50:	e3f5      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007a52:	4b6f      	ldr	r3, [pc, #444]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d103      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fe fb7c 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007a68:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a6a:	e3e8      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a72:	d107      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff fb41 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007a82:	e3dc      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007a84:	4b62      	ldr	r3, [pc, #392]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d10d      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a96:	d109      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a98:	4b5d      	ldr	r3, [pc, #372]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	08db      	lsrs	r3, r3, #3
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aaa:	e010      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007aac:	4b58      	ldr	r3, [pc, #352]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab8:	d106      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ac0:	d102      	bne.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8007ac2:	4b55      	ldr	r3, [pc, #340]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ac6:	e002      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007acc:	e3b7      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007ace:	e3b6      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ad6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007ada:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ae2:	f7fe fb3d 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007ae6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ae8:	e3a9      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8007aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007af0:	d107      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fb02 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007b00:	e39d      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007b02:	4b43      	ldr	r3, [pc, #268]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d10d      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007b14:	d109      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b16:	4b3e      	ldr	r3, [pc, #248]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	08db      	lsrs	r3, r3, #3
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	4a3c      	ldr	r2, [pc, #240]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b22:	fa22 f303 	lsr.w	r3, r2, r3
 8007b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b28:	e010      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007b2a:	4b39      	ldr	r3, [pc, #228]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b36:	d106      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8007b40:	4b35      	ldr	r3, [pc, #212]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b44:	e002      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007b4a:	e378      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007b4c:	e377      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007b4e:	4b30      	ldr	r3, [pc, #192]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b54:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007b58:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d103      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b60:	f7fe fafe 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007b64:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b66:	e36a      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b70:	f107 030c 	add.w	r3, r7, #12
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fac3 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007b7e:	e35e      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007b80:	4b23      	ldr	r3, [pc, #140]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d10d      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b92:	d109      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b94:	4b1e      	ldr	r3, [pc, #120]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	08db      	lsrs	r3, r3, #3
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007ba6:	e34a      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007bac:	e347      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8007bae:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bb4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007bc0:	f7fe fafa 	bl	80061b8 <HAL_RCC_GetPCLK3Freq>
 8007bc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bc6:	e33a      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8007bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd0:	f107 030c 	add.w	r3, r7, #12
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff fa93 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007bde:	e32e      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8007be0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d10d      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bf2:	d109      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bf4:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	08db      	lsrs	r3, r3, #3
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	4a05      	ldr	r2, [pc, #20]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c06:	e31a      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c0c:	e317      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007c0e:	bf00      	nop
 8007c10:	44020c00 	.word	0x44020c00
 8007c14:	03d09000 	.word	0x03d09000
 8007c18:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007c1c:	4b9b      	ldr	r3, [pc, #620]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007c1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007c2e:	d044      	beq.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007c36:	d879      	bhi.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3e:	d02d      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c46:	d871      	bhi.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c4e:	d017      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c56:	d869      	bhi.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c64:	d004      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8007c66:	e061      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007c68:	f7fe faa6 	bl	80061b8 <HAL_RCC_GetPCLK3Freq>
 8007c6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8007c6e:	e060      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c70:	f107 030c 	add.w	r3, r7, #12
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fa43 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007c7e:	e058      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c80:	4b82      	ldr	r3, [pc, #520]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d103      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8007c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c94:	e04d      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007c9a:	e04a      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007caa:	d103      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8007cac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8007cb2:	e03e      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007cb8:	e03b      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cba:	4b74      	ldr	r3, [pc, #464]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cc0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cc6:	4b71      	ldr	r3, [pc, #452]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d10c      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	08db      	lsrs	r3, r3, #3
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cea:	e01e      	b.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cec:	4b67      	ldr	r3, [pc, #412]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf8:	d106      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d00:	d102      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d02:	4b64      	ldr	r3, [pc, #400]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8007d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d06:	e010      	b.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d08:	4b60      	ldr	r3, [pc, #384]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d14:	d106      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d1c:	d102      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8007d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d22:	e002      	b.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8007d28:	e003      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8007d2a:	e002      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007d30:	bf00      	nop
          }
        }
        break;
 8007d32:	e284      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007d34:	4b55      	ldr	r3, [pc, #340]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007d36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d3a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d46:	d044      	beq.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d4e:	d879      	bhi.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d56:	d02d      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8007d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d5e:	d871      	bhi.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d66:	d017      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d6e:	d869      	bhi.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d7c:	d004      	beq.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007d7e:	e061      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007d80:	f7fe f9ee 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007d84:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8007d86:	e060      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d88:	f107 030c 	add.w	r3, r7, #12
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff f9b7 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007d96:	e058      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d98:	4b3c      	ldr	r3, [pc, #240]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d103      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8007da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dac:	e04d      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007db2:	e04a      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007db4:	4b35      	ldr	r3, [pc, #212]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc2:	d103      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8007dc4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8007dca:	e03e      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007dd0:	e03b      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dd8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dde:	4b2b      	ldr	r3, [pc, #172]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d10c      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007df0:	4b26      	ldr	r3, [pc, #152]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	4a25      	ldr	r2, [pc, #148]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e02:	e01e      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e04:	4b21      	ldr	r3, [pc, #132]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e10:	d106      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e18:	d102      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8007e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e1e:	e010      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e20:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e2c:	d106      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e34:	d102      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e36:	4b18      	ldr	r3, [pc, #96]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8007e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e3a:	e002      	b.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8007e40:	e003      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8007e42:	e002      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007e48:	bf00      	nop
          }
        }
        break;
 8007e4a:	e1f8      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e56:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007e58:	4b0c      	ldr	r3, [pc, #48]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e64:	d105      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8007e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007e70:	e1e5      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e78:	d110      	bne.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7a:	f107 0318 	add.w	r3, r7, #24
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe ffd4 	bl	8006e2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e88:	e1d9      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007e8a:	bf00      	nop
 8007e8c:	44020c00 	.word	0x44020c00
 8007e90:	03d09000 	.word	0x03d09000
 8007e94:	003d0900 	.word	0x003d0900
 8007e98:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea4:	f107 030c 	add.w	r3, r7, #12
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff f929 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007eb2:	e1c4      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007eb8:	e1c1      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007eba:	4b9d      	ldr	r3, [pc, #628]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d859      	bhi.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8007ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	08007ee9 	.word	0x08007ee9
 8007ed8:	08007ef9 	.word	0x08007ef9
 8007edc:	08007f81 	.word	0x08007f81
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f0f 	.word	0x08007f0f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ee8:	f107 0318 	add.w	r3, r7, #24
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe ff9d 	bl	8006e2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007ef6:	e046      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef8:	f107 030c 	add.w	r3, r7, #12
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff f8ff 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007f06:	e03e      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007f08:	4b8a      	ldr	r3, [pc, #552]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007f0c:	e03b      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f0e:	4b88      	ldr	r3, [pc, #544]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f1a:	4b85      	ldr	r3, [pc, #532]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d10c      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f2c:	4b80      	ldr	r3, [pc, #512]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	08db      	lsrs	r3, r3, #3
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	4a80      	ldr	r2, [pc, #512]	@ (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3e:	e01e      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f40:	4b7b      	ldr	r3, [pc, #492]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f4c:	d106      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f54:	d102      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f56:	4b79      	ldr	r3, [pc, #484]	@ (800813c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8007f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f5a:	e010      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f5c:	4b74      	ldr	r3, [pc, #464]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f68:	d106      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f70:	d102      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f72:	4b73      	ldr	r3, [pc, #460]	@ (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f76:	e002      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8007f7c:	e003      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8007f7e:	e002      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007f84:	bf00      	nop
          }
        }
        break;
 8007f86:	e15a      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007f88:	4b69      	ldr	r3, [pc, #420]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d022      	beq.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8007f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	d858      	bhi.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	2b18      	cmp	r3, #24
 8007fa4:	d019      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8007fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa8:	2b18      	cmp	r3, #24
 8007faa:	d852      	bhi.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d008      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007fb8:	e04b      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fba:	f107 0318 	add.w	r3, r7, #24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe ff34 	bl	8006e2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007fc8:	e046      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff f896 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007fd8:	e03e      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007fda:	4b56      	ldr	r3, [pc, #344]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007fde:	e03b      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fe0:	4b53      	ldr	r3, [pc, #332]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fe6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007fea:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fec:	4b50      	ldr	r3, [pc, #320]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d10c      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d109      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	08db      	lsrs	r3, r3, #3
 8008004:	f003 0303 	and.w	r3, r3, #3
 8008008:	4a4b      	ldr	r2, [pc, #300]	@ (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800800a:	fa22 f303 	lsr.w	r3, r2, r3
 800800e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008010:	e01e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008012:	4b47      	ldr	r3, [pc, #284]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800801a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801e:	d106      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008026:	d102      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008028:	4b44      	ldr	r3, [pc, #272]	@ (800813c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800802c:	e010      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800802e:	4b40      	ldr	r3, [pc, #256]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800803a:	d106      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008042:	d102      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008044:	4b3e      	ldr	r3, [pc, #248]	@ (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8008046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008048:	e002      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800804e:	e003      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8008050:	e002      	b.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008056:	bf00      	nop
          }
        }
        break;
 8008058:	e0f1      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800805a:	4b35      	ldr	r3, [pc, #212]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800805c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008060:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806c:	d023      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008074:	d858      	bhi.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	2bc0      	cmp	r3, #192	@ 0xc0
 800807a:	d019      	beq.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 800807c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008080:	d852      	bhi.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8008082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	2b40      	cmp	r3, #64	@ 0x40
 800808c:	d008      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800808e:	e04b      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008090:	f107 0318 	add.w	r3, r7, #24
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe fec9 	bl	8006e2c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800809e:	e046      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a0:	f107 030c 	add.w	r3, r7, #12
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff f82b 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80080ae:	e03e      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80080b0:	4b20      	ldr	r3, [pc, #128]	@ (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80080b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80080b4:	e03b      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80080c0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d10c      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d109      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080d4:	4b16      	ldr	r3, [pc, #88]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	08db      	lsrs	r3, r3, #3
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	4a16      	ldr	r2, [pc, #88]	@ (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
 80080e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080e6:	e01e      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080e8:	4b11      	ldr	r3, [pc, #68]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f4:	d106      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fc:	d102      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80080fe:	4b0f      	ldr	r3, [pc, #60]	@ (800813c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8008100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008102:	e010      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008104:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008110:	d106      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008118:	d102      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800811c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800811e:	e002      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008120:	2300      	movs	r3, #0
 8008122:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8008124:	e003      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008126:	e002      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800812c:	bf00      	nop
          }
        }
        break;
 800812e:	e086      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008130:	44020c00 	.word	0x44020c00
 8008134:	00bb8000 	.word	0x00bb8000
 8008138:	03d09000 	.word	0x03d09000
 800813c:	003d0900 	.word	0x003d0900
 8008140:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008144:	4b40      	ldr	r3, [pc, #256]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800814a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800814e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008150:	4b3d      	ldr	r3, [pc, #244]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800815c:	d105      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8008164:	4b39      	ldr	r3, [pc, #228]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8008166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008168:	e031      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800816a:	4b37      	ldr	r3, [pc, #220]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008176:	d10a      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8008178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817a:	2b10      	cmp	r3, #16
 800817c:	d107      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800817e:	f107 0318 	add.w	r3, r7, #24
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fe52 	bl	8006e2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800818c:	e01f      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800818e:	4b2e      	ldr	r3, [pc, #184]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b02      	cmp	r3, #2
 800819a:	d106      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	2b20      	cmp	r3, #32
 80081a0:	d103      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 80081a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a8:	e011      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80081aa:	4b27      	ldr	r3, [pc, #156]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80081ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081b8:	d106      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	2b30      	cmp	r3, #48	@ 0x30
 80081be:	d103      	bne.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80081c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80081c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081c6:	e002      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80081cc:	e037      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80081ce:	e036      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80081d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80081d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80081da:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80081dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081de:	2b10      	cmp	r3, #16
 80081e0:	d107      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e2:	f107 0318 	add.w	r3, r7, #24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fe20 	bl	8006e2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80081f0:	e025      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80081f2:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081fe:	d10a      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2b20      	cmp	r3, #32
 8008204:	d107      	bne.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 030c 	add.w	r3, r7, #12
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe ff78 	bl	8007100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008214:	e00f      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008216:	4b0c      	ldr	r3, [pc, #48]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800821e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008222:	d105      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	2b30      	cmp	r3, #48	@ 0x30
 8008228:	d102      	bne.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800822a:	4b08      	ldr	r3, [pc, #32]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800822e:	e002      	b.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8008234:	e003      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008236:	e002      	b.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800823c:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800823e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008240:	4618      	mov	r0, r3
 8008242:	3730      	adds	r7, #48	@ 0x30
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	44020c00 	.word	0x44020c00
 800824c:	02dc6c00 	.word	0x02dc6c00

08008250 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008258:	4b48      	ldr	r3, [pc, #288]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a47      	ldr	r2, [pc, #284]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 800825e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008262:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008264:	f7fa f9cc 	bl	8002600 <HAL_GetTick>
 8008268:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800826a:	e008      	b.n	800827e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800826c:	f7fa f9c8 	bl	8002600 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e07a      	b.n	8008374 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800827e:	4b3f      	ldr	r3, [pc, #252]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f0      	bne.n	800826c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800828a:	4b3c      	ldr	r3, [pc, #240]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 800828c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6811      	ldr	r1, [r2, #0]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6852      	ldr	r2, [r2, #4]
 800829e:	0212      	lsls	r2, r2, #8
 80082a0:	430a      	orrs	r2, r1
 80082a2:	4936      	ldr	r1, [pc, #216]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	025b      	lsls	r3, r3, #9
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	041b      	lsls	r3, r3, #16
 80082c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	061b      	lsls	r3, r3, #24
 80082d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082d8:	4928      	ldr	r1, [pc, #160]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80082de:	4b27      	ldr	r3, [pc, #156]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	f023 020c 	bic.w	r2, r3, #12
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	4924      	ldr	r1, [pc, #144]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80082f0:	4b22      	ldr	r3, [pc, #136]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	f023 0220 	bic.w	r2, r3, #32
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	491f      	ldr	r1, [pc, #124]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008302:	4b1e      	ldr	r3, [pc, #120]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	491c      	ldr	r1, [pc, #112]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 800830c:	4313      	orrs	r3, r2
 800830e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008310:	4b1a      	ldr	r3, [pc, #104]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	4a19      	ldr	r2, [pc, #100]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008316:	f023 0310 	bic.w	r3, r3, #16
 800831a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800831c:	4b17      	ldr	r3, [pc, #92]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 800831e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008320:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008324:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6a12      	ldr	r2, [r2, #32]
 800832c:	00d2      	lsls	r2, r2, #3
 800832e:	4913      	ldr	r1, [pc, #76]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008330:	4313      	orrs	r3, r2
 8008332:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008334:	4b11      	ldr	r3, [pc, #68]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	4a10      	ldr	r2, [pc, #64]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 800833a:	f043 0310 	orr.w	r3, r3, #16
 800833e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008340:	4b0e      	ldr	r3, [pc, #56]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a0d      	ldr	r2, [pc, #52]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008346:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800834a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800834c:	f7fa f958 	bl	8002600 <HAL_GetTick>
 8008350:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008352:	e008      	b.n	8008366 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008354:	f7fa f954 	bl	8002600 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e006      	b.n	8008374 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008366:	4b05      	ldr	r3, [pc, #20]	@ (800837c <RCCEx_PLL2_Config+0x12c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f0      	beq.n	8008354 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008372:	2300      	movs	r3, #0

}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	44020c00 	.word	0x44020c00

08008380 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e0e7      	b.n	8008562 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d105      	bne.n	80083ac <HAL_SPI_Init+0x2c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b0f      	cmp	r3, #15
 80083a6:	d901      	bls.n	80083ac <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0da      	b.n	8008562 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fd47 	bl	8008e40 <SPI_GetPacketSize>
 80083b2:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <HAL_SPI_Init+0x42>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d811      	bhi.n	80083e6 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083c6:	4a69      	ldr	r2, [pc, #420]	@ (800856c <HAL_SPI_Init+0x1ec>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d009      	beq.n	80083e0 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a67      	ldr	r2, [pc, #412]	@ (8008570 <HAL_SPI_Init+0x1f0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_SPI_Init+0x60>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a66      	ldr	r2, [pc, #408]	@ (8008574 <HAL_SPI_Init+0x1f4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d104      	bne.n	80083ea <HAL_SPI_Init+0x6a>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b10      	cmp	r3, #16
 80083e4:	d901      	bls.n	80083ea <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e0bb      	b.n	8008562 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7f9 fd5c 	bl	8001ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0201 	bic.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008426:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008430:	d119      	bne.n	8008466 <HAL_SPI_Init+0xe6>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800843a:	d103      	bne.n	8008444 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008440:	2b00      	cmp	r3, #0
 8008442:	d008      	beq.n	8008456 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10c      	bne.n	8008466 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008454:	d107      	bne.n	8008466 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00f      	beq.n	8008492 <HAL_SPI_Init+0x112>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b06      	cmp	r3, #6
 8008478:	d90b      	bls.n	8008492 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	e007      	b.n	80084a2 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69da      	ldr	r2, [r3, #28]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b4:	ea42 0103 	orr.w	r1, r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	431a      	orrs	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800850e:	ea42 0103 	orr.w	r1, r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0201 	bic.w	r2, r2, #1
 800852c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40013000 	.word	0x40013000
 8008570:	40003800 	.word	0x40003800
 8008574:	40003c00 	.word	0x40003c00

08008578 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af02      	add	r7, sp, #8
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	4613      	mov	r3, r2
 8008586:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3320      	adds	r3, #32
 800858e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008590:	f7fa f836 	bl	8002600 <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d001      	beq.n	80085a6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80085a2:	2302      	movs	r3, #2
 80085a4:	e1e5      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_SPI_Transmit+0x3a>
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e1dd      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_SPI_Transmit+0x4c>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e1d6      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2203      	movs	r2, #3
 80085d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	88fa      	ldrh	r2, [r7, #6]
 80085e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	88fa      	ldrh	r2, [r7, #6]
 80085ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800861c:	d108      	bne.n	8008630 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e009      	b.n	8008644 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008642:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	041b      	lsls	r3, r3, #16
 800864e:	88f9      	ldrh	r1, [r7, #6]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	6812      	ldr	r2, [r2, #0]
 8008654:	430b      	orrs	r3, r1
 8008656:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008670:	d107      	bne.n	8008682 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008680:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	2b0f      	cmp	r3, #15
 8008688:	d956      	bls.n	8008738 <HAL_SPI_Transmit+0x1c0>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a8d      	ldr	r2, [pc, #564]	@ (80088c4 <HAL_SPI_Transmit+0x34c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d04a      	beq.n	800872a <HAL_SPI_Transmit+0x1b2>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a8b      	ldr	r2, [pc, #556]	@ (80088c8 <HAL_SPI_Transmit+0x350>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d045      	beq.n	800872a <HAL_SPI_Transmit+0x1b2>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a8a      	ldr	r2, [pc, #552]	@ (80088cc <HAL_SPI_Transmit+0x354>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d147      	bne.n	8008738 <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086a8:	e03f      	b.n	800872a <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d114      	bne.n	80086e2 <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086c8:	1d1a      	adds	r2, r3, #4
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80086e0:	e023      	b.n	800872a <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086e2:	f7f9 ff8d 	bl	8002600 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d803      	bhi.n	80086fa <HAL_SPI_Transmit+0x182>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d102      	bne.n	8008700 <HAL_SPI_Transmit+0x188>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d114      	bne.n	800872a <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 facf 	bl	8008ca4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800870c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e123      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1b9      	bne.n	80086aa <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008736:	e0f6      	b.n	8008926 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	2b07      	cmp	r3, #7
 800873e:	f240 80eb 	bls.w	8008918 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008742:	e05d      	b.n	8008800 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b02      	cmp	r3, #2
 8008750:	d132      	bne.n	80087b8 <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b01      	cmp	r3, #1
 800875c:	d918      	bls.n	8008790 <HAL_SPI_Transmit+0x218>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d014      	beq.n	8008790 <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6812      	ldr	r2, [r2, #0]
 8008770:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008776:	1d1a      	adds	r2, r3, #4
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b02      	subs	r3, #2
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800878e:	e037      	b.n	8008800 <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008794:	881a      	ldrh	r2, [r3, #0]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800879e:	1c9a      	adds	r2, r3, #2
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80087b6:	e023      	b.n	8008800 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b8:	f7f9 ff22 	bl	8002600 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d803      	bhi.n	80087d0 <HAL_SPI_Transmit+0x258>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	d102      	bne.n	80087d6 <HAL_SPI_Transmit+0x25e>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d114      	bne.n	8008800 <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 fa64 	bl	8008ca4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e0b8      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d19b      	bne.n	8008744 <HAL_SPI_Transmit+0x1cc>
 800880c:	e08b      	b.n	8008926 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b02      	cmp	r3, #2
 800881a:	d159      	bne.n	80088d0 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b03      	cmp	r3, #3
 8008826:	d918      	bls.n	800885a <HAL_SPI_Transmit+0x2e2>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	2b40      	cmp	r3, #64	@ 0x40
 800882e:	d914      	bls.n	800885a <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008840:	1d1a      	adds	r2, r3, #4
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b04      	subs	r3, #4
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008858:	e05e      	b.n	8008918 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008860:	b29b      	uxth	r3, r3
 8008862:	2b01      	cmp	r3, #1
 8008864:	d917      	bls.n	8008896 <HAL_SPI_Transmit+0x31e>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d013      	beq.n	8008896 <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008872:	881a      	ldrh	r2, [r3, #0]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800887c:	1c9a      	adds	r2, r3, #2
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b02      	subs	r3, #2
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008894:	e040      	b.n	8008918 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3320      	adds	r3, #32
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088c0:	e02a      	b.n	8008918 <HAL_SPI_Transmit+0x3a0>
 80088c2:	bf00      	nop
 80088c4:	40013000 	.word	0x40013000
 80088c8:	40003800 	.word	0x40003800
 80088cc:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088d0:	f7f9 fe96 	bl	8002600 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d803      	bhi.n	80088e8 <HAL_SPI_Transmit+0x370>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d102      	bne.n	80088ee <HAL_SPI_Transmit+0x376>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d114      	bne.n	8008918 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f9d8 	bl	8008ca4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e02c      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800891e:	b29b      	uxth	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	f47f af74 	bne.w	800880e <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2200      	movs	r2, #0
 800892e:	2108      	movs	r1, #8
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fa57 	bl	8008de4 <SPI_WaitOnFlagUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008942:	f043 0220 	orr.w	r2, r3, #32
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f9a9 	bl	8008ca4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e000      	b.n	8008972 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8008970:	2300      	movs	r3, #0
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop

0800897c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3330      	adds	r3, #48	@ 0x30
 8008992:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008994:	f7f9 fe34 	bl	8002600 <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d001      	beq.n	80089aa <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 80089a6:	2302      	movs	r3, #2
 80089a8:	e172      	b.n	8008c90 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_SPI_Receive+0x3a>
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e16a      	b.n	8008c90 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_SPI_Receive+0x4c>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e163      	b.n	8008c90 <HAL_SPI_Receive+0x314>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2204      	movs	r2, #4
 80089d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008a20:	d108      	bne.n	8008a34 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e009      	b.n	8008a48 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	0c1b      	lsrs	r3, r3, #16
 8008a50:	041b      	lsls	r3, r3, #16
 8008a52:	88f9      	ldrh	r1, [r7, #6]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	6812      	ldr	r2, [r2, #0]
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a74:	d107      	bne.n	8008a86 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d957      	bls.n	8008b3e <HAL_SPI_Receive+0x1c2>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a81      	ldr	r2, [pc, #516]	@ (8008c98 <HAL_SPI_Receive+0x31c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d04b      	beq.n	8008b30 <HAL_SPI_Receive+0x1b4>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a7f      	ldr	r2, [pc, #508]	@ (8008c9c <HAL_SPI_Receive+0x320>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d046      	beq.n	8008b30 <HAL_SPI_Receive+0x1b4>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ca0 <HAL_SPI_Receive+0x324>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d148      	bne.n	8008b3e <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008aac:	e040      	b.n	8008b30 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695a      	ldr	r2, [r3, #20]
 8008ab4:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d014      	beq.n	8008ae8 <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ac8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ace:	1d1a      	adds	r2, r3, #4
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	3b01      	subs	r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008ae6:	e023      	b.n	8008b30 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ae8:	f7f9 fd8a 	bl	8002600 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d803      	bhi.n	8008b00 <HAL_SPI_Receive+0x184>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d102      	bne.n	8008b06 <HAL_SPI_Receive+0x18a>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d114      	bne.n	8008b30 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f8cc 	bl	8008ca4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e0af      	b.n	8008c90 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1b8      	bne.n	8008aae <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008b3c:	e095      	b.n	8008c6a <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	2b07      	cmp	r3, #7
 8008b44:	f240 808b 	bls.w	8008c5e <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b48:	e03f      	b.n	8008bca <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d114      	bne.n	8008b82 <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	8812      	ldrh	r2, [r2, #0]
 8008b60:	b292      	uxth	r2, r2
 8008b62:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b68:	1c9a      	adds	r2, r3, #2
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008b80:	e023      	b.n	8008bca <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b82:	f7f9 fd3d 	bl	8002600 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d803      	bhi.n	8008b9a <HAL_SPI_Receive+0x21e>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d102      	bne.n	8008ba0 <HAL_SPI_Receive+0x224>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d114      	bne.n	8008bca <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f87f 	bl	8008ca4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e062      	b.n	8008c90 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1b9      	bne.n	8008b4a <HAL_SPI_Receive+0x1ce>
 8008bd6:	e048      	b.n	8008c6a <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d117      	bne.n	8008c16 <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008c14:	e023      	b.n	8008c5e <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c16:	f7f9 fcf3 	bl	8002600 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d803      	bhi.n	8008c2e <HAL_SPI_Receive+0x2b2>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d102      	bne.n	8008c34 <HAL_SPI_Receive+0x2b8>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d114      	bne.n	8008c5e <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 f835 	bl	8008ca4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e018      	b.n	8008c90 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1b6      	bne.n	8008bd8 <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f81a 	bl	8008ca4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e000      	b.n	8008c90 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
  }
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40013000 	.word	0x40013000
 8008c9c:	40003800 	.word	0x40003800
 8008ca0:	40003c00 	.word	0x40003c00

08008ca4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699a      	ldr	r2, [r3, #24]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0208 	orr.w	r2, r2, #8
 8008cc2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0210 	orr.w	r2, r2, #16
 8008cd2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008d06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d014      	beq.n	8008d3e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00f      	beq.n	8008d3e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0220 	orr.w	r2, r2, #32
 8008d3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d014      	beq.n	8008d74 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00f      	beq.n	8008d74 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d5a:	f043 0204 	orr.w	r2, r3, #4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699a      	ldr	r2, [r3, #24]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d84:	f043 0201 	orr.w	r2, r3, #1
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00f      	beq.n	8008dc8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dae:	f043 0208 	orr.w	r2, r3, #8
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	699a      	ldr	r2, [r3, #24]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dc6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008dd8:	bf00      	nop
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4613      	mov	r3, r2
 8008df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008df4:	e010      	b.n	8008e18 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df6:	f7f9 fc03 	bl	8002600 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d803      	bhi.n	8008e0e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d102      	bne.n	8008e14 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e00f      	b.n	8008e38 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695a      	ldr	r2, [r3, #20]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4013      	ands	r3, r2
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	bf0c      	ite	eq
 8008e28:	2301      	moveq	r3, #1
 8008e2a:	2300      	movne	r3, #0
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	461a      	mov	r2, r3
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d0df      	beq.n	8008df6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	3307      	adds	r3, #7
 8008e5e:	08db      	lsrs	r3, r3, #3
 8008e60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	fb02 f303 	mul.w	r3, r2, r3
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e049      	b.n	8008f1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7f9 f89b 	bl	8001fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	f000 fb97 	bl	80095e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e049      	b.n	8008fca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d106      	bne.n	8008f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f841 	bl	8008fd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f000 fb40 	bl	80095e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
	...

08008fe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <HAL_TIM_PWM_Start+0x24>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	bf14      	ite	ne
 8009004:	2301      	movne	r3, #1
 8009006:	2300      	moveq	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	e03c      	b.n	8009086 <HAL_TIM_PWM_Start+0x9e>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b04      	cmp	r3, #4
 8009010:	d109      	bne.n	8009026 <HAL_TIM_PWM_Start+0x3e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b01      	cmp	r3, #1
 800901c:	bf14      	ite	ne
 800901e:	2301      	movne	r3, #1
 8009020:	2300      	moveq	r3, #0
 8009022:	b2db      	uxtb	r3, r3
 8009024:	e02f      	b.n	8009086 <HAL_TIM_PWM_Start+0x9e>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d109      	bne.n	8009040 <HAL_TIM_PWM_Start+0x58>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b01      	cmp	r3, #1
 8009036:	bf14      	ite	ne
 8009038:	2301      	movne	r3, #1
 800903a:	2300      	moveq	r3, #0
 800903c:	b2db      	uxtb	r3, r3
 800903e:	e022      	b.n	8009086 <HAL_TIM_PWM_Start+0x9e>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b0c      	cmp	r3, #12
 8009044:	d109      	bne.n	800905a <HAL_TIM_PWM_Start+0x72>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b01      	cmp	r3, #1
 8009050:	bf14      	ite	ne
 8009052:	2301      	movne	r3, #1
 8009054:	2300      	moveq	r3, #0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	e015      	b.n	8009086 <HAL_TIM_PWM_Start+0x9e>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b10      	cmp	r3, #16
 800905e:	d109      	bne.n	8009074 <HAL_TIM_PWM_Start+0x8c>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	bf14      	ite	ne
 800906c:	2301      	movne	r3, #1
 800906e:	2300      	moveq	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	e008      	b.n	8009086 <HAL_TIM_PWM_Start+0x9e>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	bf14      	ite	ne
 8009080:	2301      	movne	r3, #1
 8009082:	2300      	moveq	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e06f      	b.n	800916e <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d104      	bne.n	800909e <HAL_TIM_PWM_Start+0xb6>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800909c:	e023      	b.n	80090e6 <HAL_TIM_PWM_Start+0xfe>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d104      	bne.n	80090ae <HAL_TIM_PWM_Start+0xc6>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090ac:	e01b      	b.n	80090e6 <HAL_TIM_PWM_Start+0xfe>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d104      	bne.n	80090be <HAL_TIM_PWM_Start+0xd6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090bc:	e013      	b.n	80090e6 <HAL_TIM_PWM_Start+0xfe>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d104      	bne.n	80090ce <HAL_TIM_PWM_Start+0xe6>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090cc:	e00b      	b.n	80090e6 <HAL_TIM_PWM_Start+0xfe>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	d104      	bne.n	80090de <HAL_TIM_PWM_Start+0xf6>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090dc:	e003      	b.n	80090e6 <HAL_TIM_PWM_Start+0xfe>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2202      	movs	r2, #2
 80090e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2201      	movs	r2, #1
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fdc6 	bl	8009c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009178 <HAL_TIM_PWM_Start+0x190>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d107      	bne.n	800910e <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800910c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a19      	ldr	r2, [pc, #100]	@ (8009178 <HAL_TIM_PWM_Start+0x190>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_TIM_PWM_Start+0x144>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009120:	d004      	beq.n	800912c <HAL_TIM_PWM_Start+0x144>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a15      	ldr	r2, [pc, #84]	@ (800917c <HAL_TIM_PWM_Start+0x194>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d115      	bne.n	8009158 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	4b13      	ldr	r3, [pc, #76]	@ (8009180 <HAL_TIM_PWM_Start+0x198>)
 8009134:	4013      	ands	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b06      	cmp	r3, #6
 800913c:	d015      	beq.n	800916a <HAL_TIM_PWM_Start+0x182>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009144:	d011      	beq.n	800916a <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0201 	orr.w	r2, r2, #1
 8009154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	e008      	b.n	800916a <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e000      	b.n	800916c <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40000400 	.word	0x40000400
 8009180:	00010007 	.word	0x00010007

08009184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800919e:	2302      	movs	r3, #2
 80091a0:	e0ff      	b.n	80093a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b14      	cmp	r3, #20
 80091ae:	f200 80f0 	bhi.w	8009392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80091b2:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	08009393 	.word	0x08009393
 80091c0:	08009393 	.word	0x08009393
 80091c4:	08009393 	.word	0x08009393
 80091c8:	0800924d 	.word	0x0800924d
 80091cc:	08009393 	.word	0x08009393
 80091d0:	08009393 	.word	0x08009393
 80091d4:	08009393 	.word	0x08009393
 80091d8:	0800928f 	.word	0x0800928f
 80091dc:	08009393 	.word	0x08009393
 80091e0:	08009393 	.word	0x08009393
 80091e4:	08009393 	.word	0x08009393
 80091e8:	080092cf 	.word	0x080092cf
 80091ec:	08009393 	.word	0x08009393
 80091f0:	08009393 	.word	0x08009393
 80091f4:	08009393 	.word	0x08009393
 80091f8:	08009311 	.word	0x08009311
 80091fc:	08009393 	.word	0x08009393
 8009200:	08009393 	.word	0x08009393
 8009204:	08009393 	.word	0x08009393
 8009208:	08009351 	.word	0x08009351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fa4e 	bl	80096b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0208 	orr.w	r2, r2, #8
 8009226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699a      	ldr	r2, [r3, #24]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0204 	bic.w	r2, r2, #4
 8009236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6999      	ldr	r1, [r3, #24]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	691a      	ldr	r2, [r3, #16]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	619a      	str	r2, [r3, #24]
      break;
 800924a:	e0a5      	b.n	8009398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68b9      	ldr	r1, [r7, #8]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fa96 	bl	8009784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699a      	ldr	r2, [r3, #24]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6999      	ldr	r1, [r3, #24]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	021a      	lsls	r2, r3, #8
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	619a      	str	r2, [r3, #24]
      break;
 800928c:	e084      	b.n	8009398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fae3 	bl	8009860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0208 	orr.w	r2, r2, #8
 80092a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69da      	ldr	r2, [r3, #28]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0204 	bic.w	r2, r2, #4
 80092b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69d9      	ldr	r1, [r3, #28]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	61da      	str	r2, [r3, #28]
      break;
 80092cc:	e064      	b.n	8009398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fb2f 	bl	8009938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69da      	ldr	r2, [r3, #28]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69da      	ldr	r2, [r3, #28]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69d9      	ldr	r1, [r3, #28]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	021a      	lsls	r2, r3, #8
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	61da      	str	r2, [r3, #28]
      break;
 800930e:	e043      	b.n	8009398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fb7c 	bl	8009a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0208 	orr.w	r2, r2, #8
 800932a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0204 	bic.w	r2, r2, #4
 800933a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691a      	ldr	r2, [r3, #16]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800934e:	e023      	b.n	8009398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fba8 	bl	8009aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800936a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800937a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	021a      	lsls	r2, r3, #8
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009390:	e002      	b.n	8009398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	75fb      	strb	r3, [r7, #23]
      break;
 8009396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop

080093ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d101      	bne.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c>
 80093c4:	2302      	movs	r3, #2
 80093c6:	e0fe      	b.n	80095c6 <HAL_TIM_ConfigClockSource+0x21a>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80093e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80093ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009404:	f000 80c9 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800940c:	f200 80ce 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009410:	4a6f      	ldr	r2, [pc, #444]	@ (80095d0 <HAL_TIM_ConfigClockSource+0x224>)
 8009412:	4293      	cmp	r3, r2
 8009414:	f000 80c1 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009418:	4a6d      	ldr	r2, [pc, #436]	@ (80095d0 <HAL_TIM_ConfigClockSource+0x224>)
 800941a:	4293      	cmp	r3, r2
 800941c:	f200 80c6 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009420:	4a6c      	ldr	r2, [pc, #432]	@ (80095d4 <HAL_TIM_ConfigClockSource+0x228>)
 8009422:	4293      	cmp	r3, r2
 8009424:	f000 80b9 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009428:	4a6a      	ldr	r2, [pc, #424]	@ (80095d4 <HAL_TIM_ConfigClockSource+0x228>)
 800942a:	4293      	cmp	r3, r2
 800942c:	f200 80be 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009430:	4a69      	ldr	r2, [pc, #420]	@ (80095d8 <HAL_TIM_ConfigClockSource+0x22c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	f000 80b1 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009438:	4a67      	ldr	r2, [pc, #412]	@ (80095d8 <HAL_TIM_ConfigClockSource+0x22c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	f200 80b6 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009440:	4a66      	ldr	r2, [pc, #408]	@ (80095dc <HAL_TIM_ConfigClockSource+0x230>)
 8009442:	4293      	cmp	r3, r2
 8009444:	f000 80a9 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009448:	4a64      	ldr	r2, [pc, #400]	@ (80095dc <HAL_TIM_ConfigClockSource+0x230>)
 800944a:	4293      	cmp	r3, r2
 800944c:	f200 80ae 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009450:	4a63      	ldr	r2, [pc, #396]	@ (80095e0 <HAL_TIM_ConfigClockSource+0x234>)
 8009452:	4293      	cmp	r3, r2
 8009454:	f000 80a1 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009458:	4a61      	ldr	r2, [pc, #388]	@ (80095e0 <HAL_TIM_ConfigClockSource+0x234>)
 800945a:	4293      	cmp	r3, r2
 800945c:	f200 80a6 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009460:	4a60      	ldr	r2, [pc, #384]	@ (80095e4 <HAL_TIM_ConfigClockSource+0x238>)
 8009462:	4293      	cmp	r3, r2
 8009464:	f000 8099 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009468:	4a5e      	ldr	r2, [pc, #376]	@ (80095e4 <HAL_TIM_ConfigClockSource+0x238>)
 800946a:	4293      	cmp	r3, r2
 800946c:	f200 809e 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009470:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009474:	f000 8091 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009478:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800947c:	f200 8096 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009484:	f000 8089 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 8009488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800948c:	f200 808e 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 8009490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009494:	d03e      	beq.n	8009514 <HAL_TIM_ConfigClockSource+0x168>
 8009496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800949a:	f200 8087 	bhi.w	80095ac <HAL_TIM_ConfigClockSource+0x200>
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a2:	f000 8086 	beq.w	80095b2 <HAL_TIM_ConfigClockSource+0x206>
 80094a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094aa:	d87f      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094ac:	2b70      	cmp	r3, #112	@ 0x70
 80094ae:	d01a      	beq.n	80094e6 <HAL_TIM_ConfigClockSource+0x13a>
 80094b0:	2b70      	cmp	r3, #112	@ 0x70
 80094b2:	d87b      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094b4:	2b60      	cmp	r3, #96	@ 0x60
 80094b6:	d050      	beq.n	800955a <HAL_TIM_ConfigClockSource+0x1ae>
 80094b8:	2b60      	cmp	r3, #96	@ 0x60
 80094ba:	d877      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094bc:	2b50      	cmp	r3, #80	@ 0x50
 80094be:	d03c      	beq.n	800953a <HAL_TIM_ConfigClockSource+0x18e>
 80094c0:	2b50      	cmp	r3, #80	@ 0x50
 80094c2:	d873      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094c4:	2b40      	cmp	r3, #64	@ 0x40
 80094c6:	d058      	beq.n	800957a <HAL_TIM_ConfigClockSource+0x1ce>
 80094c8:	2b40      	cmp	r3, #64	@ 0x40
 80094ca:	d86f      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094cc:	2b30      	cmp	r3, #48	@ 0x30
 80094ce:	d064      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 80094d0:	2b30      	cmp	r3, #48	@ 0x30
 80094d2:	d86b      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d060      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 80094d8:	2b20      	cmp	r3, #32
 80094da:	d867      	bhi.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d05c      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 80094e0:	2b10      	cmp	r3, #16
 80094e2:	d05a      	beq.n	800959a <HAL_TIM_ConfigClockSource+0x1ee>
 80094e4:	e062      	b.n	80095ac <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094f6:	f000 fba3 	bl	8009c40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	609a      	str	r2, [r3, #8]
      break;
 8009512:	e04f      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009524:	f000 fb8c 	bl	8009c40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689a      	ldr	r2, [r3, #8]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009536:	609a      	str	r2, [r3, #8]
      break;
 8009538:	e03c      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009546:	461a      	mov	r2, r3
 8009548:	f000 fafe 	bl	8009b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2150      	movs	r1, #80	@ 0x50
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fb57 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 8009558:	e02c      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009566:	461a      	mov	r2, r3
 8009568:	f000 fb1d 	bl	8009ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2160      	movs	r1, #96	@ 0x60
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fb47 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 8009578:	e01c      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009586:	461a      	mov	r2, r3
 8009588:	f000 fade 	bl	8009b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2140      	movs	r1, #64	@ 0x40
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fb37 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 8009598:	e00c      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f000 fb2e 	bl	8009c06 <TIM_ITRx_SetConfig>
      break;
 80095aa:	e003      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	73fb      	strb	r3, [r7, #15]
      break;
 80095b0:	e000      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80095b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	00100070 	.word	0x00100070
 80095d4:	00100060 	.word	0x00100060
 80095d8:	00100050 	.word	0x00100050
 80095dc:	00100040 	.word	0x00100040
 80095e0:	00100030 	.word	0x00100030
 80095e4:	00100020 	.word	0x00100020

080095e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a2c      	ldr	r2, [pc, #176]	@ (80096ac <TIM_Base_SetConfig+0xc4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d007      	beq.n	8009610 <TIM_Base_SetConfig+0x28>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009606:	d003      	beq.n	8009610 <TIM_Base_SetConfig+0x28>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a29      	ldr	r2, [pc, #164]	@ (80096b0 <TIM_Base_SetConfig+0xc8>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d108      	bne.n	8009622 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a21      	ldr	r2, [pc, #132]	@ (80096ac <TIM_Base_SetConfig+0xc4>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d007      	beq.n	800963a <TIM_Base_SetConfig+0x52>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009630:	d003      	beq.n	800963a <TIM_Base_SetConfig+0x52>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a1e      	ldr	r2, [pc, #120]	@ (80096b0 <TIM_Base_SetConfig+0xc8>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d108      	bne.n	800964c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a0e      	ldr	r2, [pc, #56]	@ (80096ac <TIM_Base_SetConfig+0xc4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d103      	bne.n	8009680 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b01      	cmp	r3, #1
 8009690:	d105      	bne.n	800969e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f023 0201 	bic.w	r2, r3, #1
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	611a      	str	r2, [r3, #16]
  }
}
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40012c00 	.word	0x40012c00
 80096b0:	40000400 	.word	0x40000400

080096b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	f023 0201 	bic.w	r2, r3, #1
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f023 0302 	bic.w	r3, r3, #2
 8009700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4313      	orrs	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a1c      	ldr	r2, [pc, #112]	@ (8009780 <TIM_OC1_SetConfig+0xcc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d10c      	bne.n	800972e <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f023 0308 	bic.w	r3, r3, #8
 800971a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f023 0304 	bic.w	r3, r3, #4
 800972c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a13      	ldr	r2, [pc, #76]	@ (8009780 <TIM_OC1_SetConfig+0xcc>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d111      	bne.n	800975a <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800973c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685a      	ldr	r2, [r3, #4]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	621a      	str	r2, [r3, #32]
}
 8009774:	bf00      	nop
 8009776:	371c      	adds	r7, #28
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	40012c00 	.word	0x40012c00

08009784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	f023 0210 	bic.w	r2, r3, #16
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	021b      	lsls	r3, r3, #8
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f023 0320 	bic.w	r3, r3, #32
 80097d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a1e      	ldr	r2, [pc, #120]	@ (800985c <TIM_OC2_SetConfig+0xd8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d10d      	bne.n	8009804 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	011b      	lsls	r3, r3, #4
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a15      	ldr	r2, [pc, #84]	@ (800985c <TIM_OC2_SetConfig+0xd8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d113      	bne.n	8009834 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800981a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	40012c00 	.word	0x40012c00

08009860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800988e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0303 	bic.w	r3, r3, #3
 800989a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009934 <TIM_OC3_SetConfig+0xd4>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d10d      	bne.n	80098de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a14      	ldr	r2, [pc, #80]	@ (8009934 <TIM_OC3_SetConfig+0xd4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d113      	bne.n	800990e <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80098f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	011b      	lsls	r3, r3, #4
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	4313      	orrs	r3, r2
 800990c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	621a      	str	r2, [r3, #32]
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	40012c00 	.word	0x40012c00

08009938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800996a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	031b      	lsls	r3, r3, #12
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a1e      	ldr	r2, [pc, #120]	@ (8009a10 <TIM_OC4_SetConfig+0xd8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d10d      	bne.n	80099b8 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	031b      	lsls	r3, r3, #12
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a15      	ldr	r2, [pc, #84]	@ (8009a10 <TIM_OC4_SetConfig+0xd8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d113      	bne.n	80099e8 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	019b      	lsls	r3, r3, #6
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	019b      	lsls	r3, r3, #6
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	621a      	str	r2, [r3, #32]
}
 8009a02:	bf00      	nop
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	40012c00 	.word	0x40012c00

08009a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	041b      	lsls	r3, r3, #16
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a0f      	ldr	r2, [pc, #60]	@ (8009aa8 <TIM_OC5_SetConfig+0x94>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d109      	bne.n	8009a82 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	021b      	lsls	r3, r3, #8
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	621a      	str	r2, [r3, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40012c00 	.word	0x40012c00

08009aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	051b      	lsls	r3, r3, #20
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a10      	ldr	r2, [pc, #64]	@ (8009b44 <TIM_OC6_SetConfig+0x98>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d109      	bne.n	8009b1c <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	029b      	lsls	r3, r3, #10
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	621a      	str	r2, [r3, #32]
}
 8009b36:	bf00      	nop
 8009b38:	371c      	adds	r7, #28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	40012c00 	.word	0x40012c00

08009b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f023 0201 	bic.w	r2, r3, #1
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f023 030a 	bic.w	r3, r3, #10
 8009b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b087      	sub	sp, #28
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	f023 0210 	bic.w	r2, r3, #16
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	031b      	lsls	r3, r3, #12
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009be2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f043 0307 	orr.w	r3, r3, #7
 8009c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	609a      	str	r2, [r3, #8]
}
 8009c34:	bf00      	nop
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	021a      	lsls	r2, r3, #8
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	431a      	orrs	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	609a      	str	r2, [r3, #8]
}
 8009c74:	bf00      	nop
 8009c76:	371c      	adds	r7, #28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f003 031f 	and.w	r3, r3, #31
 8009c92:	2201      	movs	r2, #1
 8009c94:	fa02 f303 	lsl.w	r3, r2, r3
 8009c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a1a      	ldr	r2, [r3, #32]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a1a      	ldr	r2, [r3, #32]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f003 031f 	and.w	r3, r3, #31
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	621a      	str	r2, [r3, #32]
}
 8009cbe:	bf00      	nop
 8009cc0:	371c      	adds	r7, #28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
	...

08009ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e051      	b.n	8009d88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a22      	ldr	r2, [pc, #136]	@ (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d108      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a14      	ldr	r2, [pc, #80]	@ (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d009      	beq.n	8009d5c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d50:	d004      	beq.n	8009d5c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a10      	ldr	r2, [pc, #64]	@ (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d10c      	bne.n	8009d76 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	40012c00 	.word	0x40012c00
 8009d98:	40000400 	.word	0x40000400

08009d9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d101      	bne.n	8009db8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009db4:	2302      	movs	r3, #2
 8009db6:	e06e      	b.n	8009e96 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	041b      	lsls	r3, r3, #16
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a17      	ldr	r2, [pc, #92]	@ (8009ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d11c      	bne.n	8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e54:	051b      	lsls	r3, r3, #20
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	40012c00 	.word	0x40012c00

08009ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e042      	b.n	8009f40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d106      	bne.n	8009ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7f8 f8e1 	bl	8002094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2224      	movs	r2, #36	@ 0x24
 8009ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0201 	bic.w	r2, r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa44 	bl	800a380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f8c3 	bl	800a084 <UART_SetConfig>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e01b      	b.n	8009f40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0201 	orr.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fac3 	bl	800a4c4 <UART_CheckIdleState>
 8009f3e:	4603      	mov	r3, r0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08a      	sub	sp, #40	@ 0x28
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	4613      	mov	r3, r2
 8009f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	f040 808b 	bne.w	800a07a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <HAL_UART_Transmit+0x28>
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e083      	b.n	800a07c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f7e:	2b80      	cmp	r3, #128	@ 0x80
 8009f80:	d107      	bne.n	8009f92 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f90:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2221      	movs	r2, #33	@ 0x21
 8009f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fa2:	f7f8 fb2d 	bl	8002600 <HAL_GetTick>
 8009fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	88fa      	ldrh	r2, [r7, #6]
 8009fac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc0:	d108      	bne.n	8009fd4 <HAL_UART_Transmit+0x8c>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	61bb      	str	r3, [r7, #24]
 8009fd2:	e003      	b.n	8009fdc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009fdc:	e030      	b.n	800a040 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2180      	movs	r1, #128	@ 0x80
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 fb15 	bl	800a618 <UART_WaitOnFlagUntilTimeout>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e03d      	b.n	800a07c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10b      	bne.n	800a01e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a014:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	3302      	adds	r3, #2
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	e007      	b.n	800a02e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	781a      	ldrb	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	3301      	adds	r3, #1
 800a02c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a034:	b29b      	uxth	r3, r3
 800a036:	3b01      	subs	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a046:	b29b      	uxth	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1c8      	bne.n	8009fde <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2200      	movs	r2, #0
 800a054:	2140      	movs	r1, #64	@ 0x40
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fade 	bl	800a618 <UART_WaitOnFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2220      	movs	r2, #32
 800a066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e006      	b.n	800a07c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2220      	movs	r2, #32
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	e000      	b.n	800a07c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a07a:	2302      	movs	r3, #2
  }
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a088:	b094      	sub	sp, #80	@ 0x50
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	431a      	orrs	r2, r3
 800a09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	498a      	ldr	r1, [pc, #552]	@ (800a2dc <UART_SetConfig+0x258>)
 800a0b4:	4019      	ands	r1, r3
 800a0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0cc:	68d9      	ldr	r1, [r3, #12]
 800a0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	ea40 0301 	orr.w	r3, r0, r1
 800a0d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b7f      	ldr	r3, [pc, #508]	@ (800a2e0 <UART_SetConfig+0x25c>)
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d004      	beq.n	800a0f2 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ea:	6a1a      	ldr	r2, [r3, #32]
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a0fc:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a106:	430b      	orrs	r3, r1
 800a108:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a110:	f023 000f 	bic.w	r0, r3, #15
 800a114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a116:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	ea40 0301 	orr.w	r3, r0, r1
 800a120:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	4b6f      	ldr	r3, [pc, #444]	@ (800a2e4 <UART_SetConfig+0x260>)
 800a128:	429a      	cmp	r2, r3
 800a12a:	d102      	bne.n	800a132 <UART_SetConfig+0xae>
 800a12c:	2301      	movs	r3, #1
 800a12e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a130:	e01a      	b.n	800a168 <UART_SetConfig+0xe4>
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	4b6c      	ldr	r3, [pc, #432]	@ (800a2e8 <UART_SetConfig+0x264>)
 800a138:	429a      	cmp	r2, r3
 800a13a:	d102      	bne.n	800a142 <UART_SetConfig+0xbe>
 800a13c:	2302      	movs	r3, #2
 800a13e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a140:	e012      	b.n	800a168 <UART_SetConfig+0xe4>
 800a142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b69      	ldr	r3, [pc, #420]	@ (800a2ec <UART_SetConfig+0x268>)
 800a148:	429a      	cmp	r2, r3
 800a14a:	d102      	bne.n	800a152 <UART_SetConfig+0xce>
 800a14c:	2304      	movs	r3, #4
 800a14e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a150:	e00a      	b.n	800a168 <UART_SetConfig+0xe4>
 800a152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	4b62      	ldr	r3, [pc, #392]	@ (800a2e0 <UART_SetConfig+0x25c>)
 800a158:	429a      	cmp	r2, r3
 800a15a:	d103      	bne.n	800a164 <UART_SetConfig+0xe0>
 800a15c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a160:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a162:	e001      	b.n	800a168 <UART_SetConfig+0xe4>
 800a164:	2300      	movs	r3, #0
 800a166:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2e0 <UART_SetConfig+0x25c>)
 800a16e:	429a      	cmp	r2, r3
 800a170:	d171      	bne.n	800a256 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a174:	2200      	movs	r2, #0
 800a176:	623b      	str	r3, [r7, #32]
 800a178:	627a      	str	r2, [r7, #36]	@ 0x24
 800a17a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a17e:	f7fd f929 	bl	80073d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a182:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80e2 	beq.w	800a350 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a190:	4a57      	ldr	r2, [pc, #348]	@ (800a2f0 <UART_SetConfig+0x26c>)
 800a192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a196:	461a      	mov	r2, r3
 800a198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a19e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	4413      	add	r3, r2
 800a1aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d305      	bcc.n	800a1bc <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d903      	bls.n	800a1c4 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a1c2:	e0c5      	b.n	800a350 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	61fa      	str	r2, [r7, #28]
 800a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d0:	4a47      	ldr	r2, [pc, #284]	@ (800a2f0 <UART_SetConfig+0x26c>)
 800a1d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	2200      	movs	r2, #0
 800a1da:	613b      	str	r3, [r7, #16]
 800a1dc:	617a      	str	r2, [r7, #20]
 800a1de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a1e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1e6:	f7f6 fd63 	bl	8000cb0 <__aeabi_uldivmod>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	f04f 0300 	mov.w	r3, #0
 800a1fa:	020b      	lsls	r3, r1, #8
 800a1fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a200:	0202      	lsls	r2, r0, #8
 800a202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a204:	6849      	ldr	r1, [r1, #4]
 800a206:	0849      	lsrs	r1, r1, #1
 800a208:	2000      	movs	r0, #0
 800a20a:	460c      	mov	r4, r1
 800a20c:	4605      	mov	r5, r0
 800a20e:	eb12 0804 	adds.w	r8, r2, r4
 800a212:	eb43 0905 	adc.w	r9, r3, r5
 800a216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	60bb      	str	r3, [r7, #8]
 800a21e:	60fa      	str	r2, [r7, #12]
 800a220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a224:	4640      	mov	r0, r8
 800a226:	4649      	mov	r1, r9
 800a228:	f7f6 fd42 	bl	8000cb0 <__aeabi_uldivmod>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4613      	mov	r3, r2
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a23a:	d308      	bcc.n	800a24e <UART_SetConfig+0x1ca>
 800a23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a242:	d204      	bcs.n	800a24e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a24a:	60da      	str	r2, [r3, #12]
 800a24c:	e080      	b.n	800a350 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a254:	e07c      	b.n	800a350 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a25e:	d149      	bne.n	800a2f4 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a262:	2200      	movs	r2, #0
 800a264:	603b      	str	r3, [r7, #0]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a26c:	f7fd f8b2 	bl	80073d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a270:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d06b      	beq.n	800a350 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f0 <UART_SetConfig+0x26c>)
 800a27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a282:	461a      	mov	r2, r3
 800a284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a286:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28a:	005a      	lsls	r2, r3, #1
 800a28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	085b      	lsrs	r3, r3, #1
 800a292:	441a      	add	r2, r3
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a0:	2b0f      	cmp	r3, #15
 800a2a2:	d916      	bls.n	800a2d2 <UART_SetConfig+0x24e>
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2aa:	d212      	bcs.n	800a2d2 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	f023 030f 	bic.w	r3, r3, #15
 800a2b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f003 0307 	and.w	r3, r3, #7
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a2ce:	60da      	str	r2, [r3, #12]
 800a2d0:	e03e      	b.n	800a350 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a2d8:	e03a      	b.n	800a350 <UART_SetConfig+0x2cc>
 800a2da:	bf00      	nop
 800a2dc:	cfff69f3 	.word	0xcfff69f3
 800a2e0:	44002400 	.word	0x44002400
 800a2e4:	40013800 	.word	0x40013800
 800a2e8:	40004400 	.word	0x40004400
 800a2ec:	40004800 	.word	0x40004800
 800a2f0:	0800f168 	.word	0x0800f168
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a2f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	469a      	mov	sl, r3
 800a2fa:	4693      	mov	fp, r2
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	4659      	mov	r1, fp
 800a300:	f7fd f868 	bl	80073d4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a304:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d021      	beq.n	800a350 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a310:	4a1a      	ldr	r2, [pc, #104]	@ (800a37c <UART_SetConfig+0x2f8>)
 800a312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a316:	461a      	mov	r2, r3
 800a318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a31a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	085b      	lsrs	r3, r3, #1
 800a324:	441a      	add	r2, r3
 800a326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a332:	2b0f      	cmp	r3, #15
 800a334:	d909      	bls.n	800a34a <UART_SetConfig+0x2c6>
 800a336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a33c:	d205      	bcs.n	800a34a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	b29a      	uxth	r2, r3
 800a342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60da      	str	r2, [r3, #12]
 800a348:	e002      	b.n	800a350 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	2201      	movs	r2, #1
 800a354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35a:	2201      	movs	r2, #1
 800a35c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	2200      	movs	r2, #0
 800a364:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a368:	2200      	movs	r2, #0
 800a36a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a36c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a370:	4618      	mov	r0, r3
 800a372:	3750      	adds	r7, #80	@ 0x50
 800a374:	46bd      	mov	sp, r7
 800a376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a37a:	bf00      	nop
 800a37c:	0800f168 	.word	0x0800f168

0800a380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38c:	f003 0308 	and.w	r3, r3, #8
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	f003 0310 	and.w	r3, r3, #16
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01a      	beq.n	800a496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a47a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a47e:	d10a      	bne.n	800a496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	605a      	str	r2, [r3, #4]
  }
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b098      	sub	sp, #96	@ 0x60
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4d4:	f7f8 f894 	bl	8002600 <HAL_GetTick>
 800a4d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0308 	and.w	r3, r3, #8
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	d12f      	bne.n	800a548 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f88e 	bl	800a618 <UART_WaitOnFlagUntilTimeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d022      	beq.n	800a548 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	e853 3f00 	ldrex	r3, [r3]
 800a50e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a516:	653b      	str	r3, [r7, #80]	@ 0x50
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a520:	647b      	str	r3, [r7, #68]	@ 0x44
 800a522:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a528:	e841 2300 	strex	r3, r2, [r1]
 800a52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e6      	bne.n	800a502 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e063      	b.n	800a610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0304 	and.w	r3, r3, #4
 800a552:	2b04      	cmp	r3, #4
 800a554:	d149      	bne.n	800a5ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a556:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a55e:	2200      	movs	r2, #0
 800a560:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f857 	bl	800a618 <UART_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d03c      	beq.n	800a5ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	623b      	str	r3, [r7, #32]
   return(result);
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a584:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a58e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a590:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e6      	bne.n	800a570 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f023 0301 	bic.w	r3, r3, #1
 800a5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c2:	61fa      	str	r2, [r7, #28]
 800a5c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	69b9      	ldr	r1, [r7, #24]
 800a5c8:	69fa      	ldr	r2, [r7, #28]
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e5      	bne.n	800a5a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e012      	b.n	800a610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3758      	adds	r7, #88	@ 0x58
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a628:	e04f      	b.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a630:	d04b      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a632:	f7f7 ffe5 	bl	8002600 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d302      	bcc.n	800a648 <UART_WaitOnFlagUntilTimeout+0x30>
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e04e      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	d037      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b80      	cmp	r3, #128	@ 0x80
 800a65e:	d034      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b40      	cmp	r3, #64	@ 0x40
 800a664:	d031      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	2b08      	cmp	r3, #8
 800a672:	d110      	bne.n	800a696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2208      	movs	r2, #8
 800a67a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f838 	bl	800a6f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2208      	movs	r2, #8
 800a686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e029      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6a4:	d111      	bne.n	800a6ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f81e 	bl	800a6f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e00f      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	bf0c      	ite	eq
 800a6da:	2301      	moveq	r3, #1
 800a6dc:	2300      	movne	r3, #0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d0a0      	beq.n	800a62a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b095      	sub	sp, #84	@ 0x54
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a70e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a718:	643b      	str	r3, [r7, #64]	@ 0x40
 800a71a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a71e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e6      	bne.n	800a6fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a742:	f023 0301 	bic.w	r3, r3, #1
 800a746:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3308      	adds	r3, #8
 800a74e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e3      	bne.n	800a72c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d118      	bne.n	800a79e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	60bb      	str	r3, [r7, #8]
   return(result);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f023 0310 	bic.w	r3, r3, #16
 800a780:	647b      	str	r3, [r7, #68]	@ 0x44
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a78a:	61bb      	str	r3, [r7, #24]
 800a78c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6979      	ldr	r1, [r7, #20]
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	613b      	str	r3, [r7, #16]
   return(result);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e6      	bne.n	800a76c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7b2:	bf00      	nop
 800a7b4:	3754      	adds	r7, #84	@ 0x54
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d101      	bne.n	800a7d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e027      	b.n	800a824 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2224      	movs	r2, #36	@ 0x24
 800a7e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0201 	bic.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a802:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e02d      	b.n	800a8a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2224      	movs	r2, #36	@ 0x24
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f84f 	bl	800a928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2220      	movs	r2, #32
 800a896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d101      	bne.n	800a8c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	e02d      	b.n	800a920 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2224      	movs	r2, #36	@ 0x24
 800a8d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0201 	bic.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f811 	bl	800a928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a934:	2b00      	cmp	r3, #0
 800a936:	d108      	bne.n	800a94a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a948:	e031      	b.n	800a9ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a94a:	2308      	movs	r3, #8
 800a94c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a94e:	2308      	movs	r3, #8
 800a950:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	0e5b      	lsrs	r3, r3, #25
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0307 	and.w	r3, r3, #7
 800a960:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	0f5b      	lsrs	r3, r3, #29
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	7b3a      	ldrb	r2, [r7, #12]
 800a976:	4911      	ldr	r1, [pc, #68]	@ (800a9bc <UARTEx_SetNbDataToProcess+0x94>)
 800a978:	5c8a      	ldrb	r2, [r1, r2]
 800a97a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a97e:	7b3a      	ldrb	r2, [r7, #12]
 800a980:	490f      	ldr	r1, [pc, #60]	@ (800a9c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a982:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a984:	fb93 f3f2 	sdiv	r3, r3, r2
 800a988:	b29a      	uxth	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	7b7a      	ldrb	r2, [r7, #13]
 800a994:	4909      	ldr	r1, [pc, #36]	@ (800a9bc <UARTEx_SetNbDataToProcess+0x94>)
 800a996:	5c8a      	ldrb	r2, [r1, r2]
 800a998:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a99c:	7b7a      	ldrb	r2, [r7, #13]
 800a99e:	4908      	ldr	r1, [pc, #32]	@ (800a9c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9ae:	bf00      	nop
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	0800f180 	.word	0x0800f180
 800a9c0:	0800f188 	.word	0x0800f188

0800a9c4 <__cvt>:
 800a9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	ec57 6b10 	vmov	r6, r7, d0
 800a9cc:	2f00      	cmp	r7, #0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	bfb4      	ite	lt
 800a9d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a9da:	2300      	movge	r3, #0
 800a9dc:	4691      	mov	r9, r2
 800a9de:	bfbf      	itttt	lt
 800a9e0:	4632      	movlt	r2, r6
 800a9e2:	461f      	movlt	r7, r3
 800a9e4:	232d      	movlt	r3, #45	@ 0x2d
 800a9e6:	4616      	movlt	r6, r2
 800a9e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a9ec:	700b      	strb	r3, [r1, #0]
 800a9ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9f0:	f023 0820 	bic.w	r8, r3, #32
 800a9f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9f8:	d005      	beq.n	800aa06 <__cvt+0x42>
 800a9fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a9fe:	d100      	bne.n	800aa02 <__cvt+0x3e>
 800aa00:	3401      	adds	r4, #1
 800aa02:	2102      	movs	r1, #2
 800aa04:	e000      	b.n	800aa08 <__cvt+0x44>
 800aa06:	2103      	movs	r1, #3
 800aa08:	ab03      	add	r3, sp, #12
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	ab02      	add	r3, sp, #8
 800aa10:	ec47 6b10 	vmov	d0, r6, r7
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	4653      	mov	r3, sl
 800aa18:	f001 f89a 	bl	800bb50 <_dtoa_r>
 800aa1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa20:	4605      	mov	r5, r0
 800aa22:	d119      	bne.n	800aa58 <__cvt+0x94>
 800aa24:	f019 0f01 	tst.w	r9, #1
 800aa28:	d00e      	beq.n	800aa48 <__cvt+0x84>
 800aa2a:	eb00 0904 	add.w	r9, r0, r4
 800aa2e:	2200      	movs	r2, #0
 800aa30:	2300      	movs	r3, #0
 800aa32:	4630      	mov	r0, r6
 800aa34:	4639      	mov	r1, r7
 800aa36:	f7f6 f85b 	bl	8000af0 <__aeabi_dcmpeq>
 800aa3a:	b108      	cbz	r0, 800aa40 <__cvt+0x7c>
 800aa3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa40:	2230      	movs	r2, #48	@ 0x30
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	454b      	cmp	r3, r9
 800aa46:	d31e      	bcc.n	800aa86 <__cvt+0xc2>
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa4e:	1b5b      	subs	r3, r3, r5
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	b004      	add	sp, #16
 800aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa5c:	eb00 0904 	add.w	r9, r0, r4
 800aa60:	d1e5      	bne.n	800aa2e <__cvt+0x6a>
 800aa62:	7803      	ldrb	r3, [r0, #0]
 800aa64:	2b30      	cmp	r3, #48	@ 0x30
 800aa66:	d10a      	bne.n	800aa7e <__cvt+0xba>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	4639      	mov	r1, r7
 800aa70:	f7f6 f83e 	bl	8000af0 <__aeabi_dcmpeq>
 800aa74:	b918      	cbnz	r0, 800aa7e <__cvt+0xba>
 800aa76:	f1c4 0401 	rsb	r4, r4, #1
 800aa7a:	f8ca 4000 	str.w	r4, [sl]
 800aa7e:	f8da 3000 	ldr.w	r3, [sl]
 800aa82:	4499      	add	r9, r3
 800aa84:	e7d3      	b.n	800aa2e <__cvt+0x6a>
 800aa86:	1c59      	adds	r1, r3, #1
 800aa88:	9103      	str	r1, [sp, #12]
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	e7d9      	b.n	800aa42 <__cvt+0x7e>

0800aa8e <__exponent>:
 800aa8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa90:	2900      	cmp	r1, #0
 800aa92:	7002      	strb	r2, [r0, #0]
 800aa94:	bfba      	itte	lt
 800aa96:	4249      	neglt	r1, r1
 800aa98:	232d      	movlt	r3, #45	@ 0x2d
 800aa9a:	232b      	movge	r3, #43	@ 0x2b
 800aa9c:	2909      	cmp	r1, #9
 800aa9e:	7043      	strb	r3, [r0, #1]
 800aaa0:	dd28      	ble.n	800aaf4 <__exponent+0x66>
 800aaa2:	f10d 0307 	add.w	r3, sp, #7
 800aaa6:	270a      	movs	r7, #10
 800aaa8:	461d      	mov	r5, r3
 800aaaa:	461a      	mov	r2, r3
 800aaac:	3b01      	subs	r3, #1
 800aaae:	fbb1 f6f7 	udiv	r6, r1, r7
 800aab2:	fb07 1416 	mls	r4, r7, r6, r1
 800aab6:	3430      	adds	r4, #48	@ 0x30
 800aab8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aabc:	460c      	mov	r4, r1
 800aabe:	4631      	mov	r1, r6
 800aac0:	2c63      	cmp	r4, #99	@ 0x63
 800aac2:	dcf2      	bgt.n	800aaaa <__exponent+0x1c>
 800aac4:	3130      	adds	r1, #48	@ 0x30
 800aac6:	1e94      	subs	r4, r2, #2
 800aac8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aacc:	1c41      	adds	r1, r0, #1
 800aace:	4623      	mov	r3, r4
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	d30a      	bcc.n	800aaea <__exponent+0x5c>
 800aad4:	f10d 0309 	add.w	r3, sp, #9
 800aad8:	1a9b      	subs	r3, r3, r2
 800aada:	42ac      	cmp	r4, r5
 800aadc:	bf88      	it	hi
 800aade:	2300      	movhi	r3, #0
 800aae0:	3302      	adds	r3, #2
 800aae2:	4403      	add	r3, r0
 800aae4:	1a18      	subs	r0, r3, r0
 800aae6:	b003      	add	sp, #12
 800aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaea:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aaee:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aaf2:	e7ed      	b.n	800aad0 <__exponent+0x42>
 800aaf4:	2330      	movs	r3, #48	@ 0x30
 800aaf6:	3130      	adds	r1, #48	@ 0x30
 800aaf8:	7083      	strb	r3, [r0, #2]
 800aafa:	1d03      	adds	r3, r0, #4
 800aafc:	70c1      	strb	r1, [r0, #3]
 800aafe:	e7f1      	b.n	800aae4 <__exponent+0x56>

0800ab00 <_printf_float>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	b08d      	sub	sp, #52	@ 0x34
 800ab06:	460c      	mov	r4, r1
 800ab08:	4616      	mov	r6, r2
 800ab0a:	461f      	mov	r7, r3
 800ab0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab10:	4605      	mov	r5, r0
 800ab12:	f000 ff03 	bl	800b91c <_localeconv_r>
 800ab16:	6803      	ldr	r3, [r0, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	f7f5 fbbc 	bl	8000298 <strlen>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9005      	str	r0, [sp, #20]
 800ab24:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab26:	f8d8 3000 	ldr.w	r3, [r8]
 800ab2a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab2e:	3307      	adds	r3, #7
 800ab30:	f8d4 b000 	ldr.w	fp, [r4]
 800ab34:	f023 0307 	bic.w	r3, r3, #7
 800ab38:	f103 0208 	add.w	r2, r3, #8
 800ab3c:	f8c8 2000 	str.w	r2, [r8]
 800ab40:	f04f 32ff 	mov.w	r2, #4294967295
 800ab44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab50:	9307      	str	r3, [sp, #28]
 800ab52:	4b9d      	ldr	r3, [pc, #628]	@ (800adc8 <_printf_float+0x2c8>)
 800ab54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab58:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab5c:	f7f5 fffa 	bl	8000b54 <__aeabi_dcmpun>
 800ab60:	bb70      	cbnz	r0, 800abc0 <_printf_float+0xc0>
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295
 800ab66:	4b98      	ldr	r3, [pc, #608]	@ (800adc8 <_printf_float+0x2c8>)
 800ab68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab6c:	f7f5 ffd4 	bl	8000b18 <__aeabi_dcmple>
 800ab70:	bb30      	cbnz	r0, 800abc0 <_printf_float+0xc0>
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	4640      	mov	r0, r8
 800ab78:	4649      	mov	r1, r9
 800ab7a:	f7f5 ffc3 	bl	8000b04 <__aeabi_dcmplt>
 800ab7e:	b110      	cbz	r0, 800ab86 <_printf_float+0x86>
 800ab80:	232d      	movs	r3, #45	@ 0x2d
 800ab82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab86:	4a91      	ldr	r2, [pc, #580]	@ (800adcc <_printf_float+0x2cc>)
 800ab88:	4b91      	ldr	r3, [pc, #580]	@ (800add0 <_printf_float+0x2d0>)
 800ab8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ab8e:	bf94      	ite	ls
 800ab90:	4690      	movls	r8, r2
 800ab92:	4698      	movhi	r8, r3
 800ab94:	2303      	movs	r3, #3
 800ab96:	f04f 0900 	mov.w	r9, #0
 800ab9a:	6123      	str	r3, [r4, #16]
 800ab9c:	f02b 0304 	bic.w	r3, fp, #4
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	4633      	mov	r3, r6
 800aba4:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aba6:	4621      	mov	r1, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	9700      	str	r7, [sp, #0]
 800abac:	f000 f9d2 	bl	800af54 <_printf_common>
 800abb0:	3001      	adds	r0, #1
 800abb2:	f040 808d 	bne.w	800acd0 <_printf_float+0x1d0>
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295
 800abba:	b00d      	add	sp, #52	@ 0x34
 800abbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc0:	4642      	mov	r2, r8
 800abc2:	464b      	mov	r3, r9
 800abc4:	4640      	mov	r0, r8
 800abc6:	4649      	mov	r1, r9
 800abc8:	f7f5 ffc4 	bl	8000b54 <__aeabi_dcmpun>
 800abcc:	b140      	cbz	r0, 800abe0 <_printf_float+0xe0>
 800abce:	464b      	mov	r3, r9
 800abd0:	4a80      	ldr	r2, [pc, #512]	@ (800add4 <_printf_float+0x2d4>)
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	bfbc      	itt	lt
 800abd6:	232d      	movlt	r3, #45	@ 0x2d
 800abd8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800abdc:	4b7e      	ldr	r3, [pc, #504]	@ (800add8 <_printf_float+0x2d8>)
 800abde:	e7d4      	b.n	800ab8a <_printf_float+0x8a>
 800abe0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800abe4:	6863      	ldr	r3, [r4, #4]
 800abe6:	9206      	str	r2, [sp, #24]
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	d13b      	bne.n	800ac64 <_printf_float+0x164>
 800abec:	2306      	movs	r3, #6
 800abee:	6063      	str	r3, [r4, #4]
 800abf0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800abf4:	2300      	movs	r3, #0
 800abf6:	4628      	mov	r0, r5
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	ab0a      	add	r3, sp, #40	@ 0x28
 800abfe:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac02:	ab09      	add	r3, sp, #36	@ 0x24
 800ac04:	ec49 8b10 	vmov	d0, r8, r9
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac0e:	6861      	ldr	r1, [r4, #4]
 800ac10:	f7ff fed8 	bl	800a9c4 <__cvt>
 800ac14:	9b06      	ldr	r3, [sp, #24]
 800ac16:	4680      	mov	r8, r0
 800ac18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac1a:	2b47      	cmp	r3, #71	@ 0x47
 800ac1c:	d129      	bne.n	800ac72 <_printf_float+0x172>
 800ac1e:	1cc8      	adds	r0, r1, #3
 800ac20:	db02      	blt.n	800ac28 <_printf_float+0x128>
 800ac22:	6863      	ldr	r3, [r4, #4]
 800ac24:	4299      	cmp	r1, r3
 800ac26:	dd41      	ble.n	800acac <_printf_float+0x1ac>
 800ac28:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac2c:	fa5f fa8a 	uxtb.w	sl, sl
 800ac30:	3901      	subs	r1, #1
 800ac32:	4652      	mov	r2, sl
 800ac34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac38:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac3a:	f7ff ff28 	bl	800aa8e <__exponent>
 800ac3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac40:	4681      	mov	r9, r0
 800ac42:	1813      	adds	r3, r2, r0
 800ac44:	2a01      	cmp	r2, #1
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	dc02      	bgt.n	800ac50 <_printf_float+0x150>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	07d2      	lsls	r2, r2, #31
 800ac4e:	d501      	bpl.n	800ac54 <_printf_float+0x154>
 800ac50:	3301      	adds	r3, #1
 800ac52:	6123      	str	r3, [r4, #16]
 800ac54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0a2      	beq.n	800aba2 <_printf_float+0xa2>
 800ac5c:	232d      	movs	r3, #45	@ 0x2d
 800ac5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac62:	e79e      	b.n	800aba2 <_printf_float+0xa2>
 800ac64:	9a06      	ldr	r2, [sp, #24]
 800ac66:	2a47      	cmp	r2, #71	@ 0x47
 800ac68:	d1c2      	bne.n	800abf0 <_printf_float+0xf0>
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1c0      	bne.n	800abf0 <_printf_float+0xf0>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e7bd      	b.n	800abee <_printf_float+0xee>
 800ac72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac76:	d9db      	bls.n	800ac30 <_printf_float+0x130>
 800ac78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac7c:	d118      	bne.n	800acb0 <_printf_float+0x1b0>
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	6863      	ldr	r3, [r4, #4]
 800ac82:	dd0b      	ble.n	800ac9c <_printf_float+0x19c>
 800ac84:	6121      	str	r1, [r4, #16]
 800ac86:	b913      	cbnz	r3, 800ac8e <_printf_float+0x18e>
 800ac88:	6822      	ldr	r2, [r4, #0]
 800ac8a:	07d0      	lsls	r0, r2, #31
 800ac8c:	d502      	bpl.n	800ac94 <_printf_float+0x194>
 800ac8e:	3301      	adds	r3, #1
 800ac90:	440b      	add	r3, r1
 800ac92:	6123      	str	r3, [r4, #16]
 800ac94:	f04f 0900 	mov.w	r9, #0
 800ac98:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac9a:	e7db      	b.n	800ac54 <_printf_float+0x154>
 800ac9c:	b913      	cbnz	r3, 800aca4 <_printf_float+0x1a4>
 800ac9e:	6822      	ldr	r2, [r4, #0]
 800aca0:	07d2      	lsls	r2, r2, #31
 800aca2:	d501      	bpl.n	800aca8 <_printf_float+0x1a8>
 800aca4:	3302      	adds	r3, #2
 800aca6:	e7f4      	b.n	800ac92 <_printf_float+0x192>
 800aca8:	2301      	movs	r3, #1
 800acaa:	e7f2      	b.n	800ac92 <_printf_float+0x192>
 800acac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800acb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acb2:	4299      	cmp	r1, r3
 800acb4:	db05      	blt.n	800acc2 <_printf_float+0x1c2>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	6121      	str	r1, [r4, #16]
 800acba:	07d8      	lsls	r0, r3, #31
 800acbc:	d5ea      	bpl.n	800ac94 <_printf_float+0x194>
 800acbe:	1c4b      	adds	r3, r1, #1
 800acc0:	e7e7      	b.n	800ac92 <_printf_float+0x192>
 800acc2:	2900      	cmp	r1, #0
 800acc4:	bfd4      	ite	le
 800acc6:	f1c1 0202 	rsble	r2, r1, #2
 800acca:	2201      	movgt	r2, #1
 800accc:	4413      	add	r3, r2
 800acce:	e7e0      	b.n	800ac92 <_printf_float+0x192>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	055a      	lsls	r2, r3, #21
 800acd4:	d407      	bmi.n	800ace6 <_printf_float+0x1e6>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	4642      	mov	r2, r8
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	d12b      	bne.n	800ad3c <_printf_float+0x23c>
 800ace4:	e767      	b.n	800abb6 <_printf_float+0xb6>
 800ace6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acea:	f240 80dd 	bls.w	800aea8 <_printf_float+0x3a8>
 800acee:	2200      	movs	r2, #0
 800acf0:	2300      	movs	r3, #0
 800acf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acf6:	f7f5 fefb 	bl	8000af0 <__aeabi_dcmpeq>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d033      	beq.n	800ad66 <_printf_float+0x266>
 800acfe:	2301      	movs	r3, #1
 800ad00:	4a36      	ldr	r2, [pc, #216]	@ (800addc <_printf_float+0x2dc>)
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b8      	blx	r7
 800ad08:	3001      	adds	r0, #1
 800ad0a:	f43f af54 	beq.w	800abb6 <_printf_float+0xb6>
 800ad0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad12:	4543      	cmp	r3, r8
 800ad14:	db02      	blt.n	800ad1c <_printf_float+0x21c>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	07d8      	lsls	r0, r3, #31
 800ad1a:	d50f      	bpl.n	800ad3c <_printf_float+0x23c>
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad24:	47b8      	blx	r7
 800ad26:	3001      	adds	r0, #1
 800ad28:	f43f af45 	beq.w	800abb6 <_printf_float+0xb6>
 800ad2c:	f04f 0900 	mov.w	r9, #0
 800ad30:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad34:	f104 0a1a 	add.w	sl, r4, #26
 800ad38:	45c8      	cmp	r8, r9
 800ad3a:	dc09      	bgt.n	800ad50 <_printf_float+0x250>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	079b      	lsls	r3, r3, #30
 800ad40:	f100 8103 	bmi.w	800af4a <_printf_float+0x44a>
 800ad44:	68e0      	ldr	r0, [r4, #12]
 800ad46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad48:	4298      	cmp	r0, r3
 800ad4a:	bfb8      	it	lt
 800ad4c:	4618      	movlt	r0, r3
 800ad4e:	e734      	b.n	800abba <_printf_float+0xba>
 800ad50:	2301      	movs	r3, #1
 800ad52:	4652      	mov	r2, sl
 800ad54:	4631      	mov	r1, r6
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	f43f af2b 	beq.w	800abb6 <_printf_float+0xb6>
 800ad60:	f109 0901 	add.w	r9, r9, #1
 800ad64:	e7e8      	b.n	800ad38 <_printf_float+0x238>
 800ad66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc39      	bgt.n	800ade0 <_printf_float+0x2e0>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	4a1b      	ldr	r2, [pc, #108]	@ (800addc <_printf_float+0x2dc>)
 800ad70:	4631      	mov	r1, r6
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	f43f af1d 	beq.w	800abb6 <_printf_float+0xb6>
 800ad7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad80:	ea59 0303 	orrs.w	r3, r9, r3
 800ad84:	d102      	bne.n	800ad8c <_printf_float+0x28c>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	07d9      	lsls	r1, r3, #31
 800ad8a:	d5d7      	bpl.n	800ad3c <_printf_float+0x23c>
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	f43f af0d 	beq.w	800abb6 <_printf_float+0xb6>
 800ad9c:	f04f 0a00 	mov.w	sl, #0
 800ada0:	f104 0b1a 	add.w	fp, r4, #26
 800ada4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada6:	425b      	negs	r3, r3
 800ada8:	4553      	cmp	r3, sl
 800adaa:	dc01      	bgt.n	800adb0 <_printf_float+0x2b0>
 800adac:	464b      	mov	r3, r9
 800adae:	e793      	b.n	800acd8 <_printf_float+0x1d8>
 800adb0:	2301      	movs	r3, #1
 800adb2:	465a      	mov	r2, fp
 800adb4:	4631      	mov	r1, r6
 800adb6:	4628      	mov	r0, r5
 800adb8:	47b8      	blx	r7
 800adba:	3001      	adds	r0, #1
 800adbc:	f43f aefb 	beq.w	800abb6 <_printf_float+0xb6>
 800adc0:	f10a 0a01 	add.w	sl, sl, #1
 800adc4:	e7ee      	b.n	800ada4 <_printf_float+0x2a4>
 800adc6:	bf00      	nop
 800adc8:	7fefffff 	.word	0x7fefffff
 800adcc:	0800f190 	.word	0x0800f190
 800add0:	0800f194 	.word	0x0800f194
 800add4:	0800f198 	.word	0x0800f198
 800add8:	0800f19c 	.word	0x0800f19c
 800addc:	0800f1a0 	.word	0x0800f1a0
 800ade0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ade2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ade6:	4553      	cmp	r3, sl
 800ade8:	bfa8      	it	ge
 800adea:	4653      	movge	r3, sl
 800adec:	2b00      	cmp	r3, #0
 800adee:	4699      	mov	r9, r3
 800adf0:	dc36      	bgt.n	800ae60 <_printf_float+0x360>
 800adf2:	f04f 0b00 	mov.w	fp, #0
 800adf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adfa:	f104 021a 	add.w	r2, r4, #26
 800adfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae00:	9306      	str	r3, [sp, #24]
 800ae02:	eba3 0309 	sub.w	r3, r3, r9
 800ae06:	455b      	cmp	r3, fp
 800ae08:	dc31      	bgt.n	800ae6e <_printf_float+0x36e>
 800ae0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0c:	459a      	cmp	sl, r3
 800ae0e:	dc3a      	bgt.n	800ae86 <_printf_float+0x386>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	07da      	lsls	r2, r3, #31
 800ae14:	d437      	bmi.n	800ae86 <_printf_float+0x386>
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	ebaa 0903 	sub.w	r9, sl, r3
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	ebaa 0303 	sub.w	r3, sl, r3
 800ae22:	4599      	cmp	r9, r3
 800ae24:	bfa8      	it	ge
 800ae26:	4699      	movge	r9, r3
 800ae28:	f1b9 0f00 	cmp.w	r9, #0
 800ae2c:	dc33      	bgt.n	800ae96 <_printf_float+0x396>
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae36:	f104 0b1a 	add.w	fp, r4, #26
 800ae3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3c:	ebaa 0303 	sub.w	r3, sl, r3
 800ae40:	eba3 0309 	sub.w	r3, r3, r9
 800ae44:	4543      	cmp	r3, r8
 800ae46:	f77f af79 	ble.w	800ad3c <_printf_float+0x23c>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	465a      	mov	r2, fp
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	f43f aeae 	beq.w	800abb6 <_printf_float+0xb6>
 800ae5a:	f108 0801 	add.w	r8, r8, #1
 800ae5e:	e7ec      	b.n	800ae3a <_printf_float+0x33a>
 800ae60:	4642      	mov	r2, r8
 800ae62:	4631      	mov	r1, r6
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d1c2      	bne.n	800adf2 <_printf_float+0x2f2>
 800ae6c:	e6a3      	b.n	800abb6 <_printf_float+0xb6>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	9206      	str	r2, [sp, #24]
 800ae76:	47b8      	blx	r7
 800ae78:	3001      	adds	r0, #1
 800ae7a:	f43f ae9c 	beq.w	800abb6 <_printf_float+0xb6>
 800ae7e:	f10b 0b01 	add.w	fp, fp, #1
 800ae82:	9a06      	ldr	r2, [sp, #24]
 800ae84:	e7bb      	b.n	800adfe <_printf_float+0x2fe>
 800ae86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	d1c0      	bne.n	800ae16 <_printf_float+0x316>
 800ae94:	e68f      	b.n	800abb6 <_printf_float+0xb6>
 800ae96:	9a06      	ldr	r2, [sp, #24]
 800ae98:	464b      	mov	r3, r9
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	4442      	add	r2, r8
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	d1c3      	bne.n	800ae2e <_printf_float+0x32e>
 800aea6:	e686      	b.n	800abb6 <_printf_float+0xb6>
 800aea8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aeac:	f1ba 0f01 	cmp.w	sl, #1
 800aeb0:	dc01      	bgt.n	800aeb6 <_printf_float+0x3b6>
 800aeb2:	07db      	lsls	r3, r3, #31
 800aeb4:	d536      	bpl.n	800af24 <_printf_float+0x424>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4642      	mov	r2, r8
 800aeba:	4631      	mov	r1, r6
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	f43f ae78 	beq.w	800abb6 <_printf_float+0xb6>
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	f43f ae70 	beq.w	800abb6 <_printf_float+0xb6>
 800aed6:	2200      	movs	r2, #0
 800aed8:	2300      	movs	r3, #0
 800aeda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aede:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aee2:	f7f5 fe05 	bl	8000af0 <__aeabi_dcmpeq>
 800aee6:	b9c0      	cbnz	r0, 800af1a <_printf_float+0x41a>
 800aee8:	4653      	mov	r3, sl
 800aeea:	f108 0201 	add.w	r2, r8, #1
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	d10c      	bne.n	800af12 <_printf_float+0x412>
 800aef8:	e65d      	b.n	800abb6 <_printf_float+0xb6>
 800aefa:	2301      	movs	r3, #1
 800aefc:	465a      	mov	r2, fp
 800aefe:	4631      	mov	r1, r6
 800af00:	4628      	mov	r0, r5
 800af02:	47b8      	blx	r7
 800af04:	3001      	adds	r0, #1
 800af06:	f43f ae56 	beq.w	800abb6 <_printf_float+0xb6>
 800af0a:	f108 0801 	add.w	r8, r8, #1
 800af0e:	45d0      	cmp	r8, sl
 800af10:	dbf3      	blt.n	800aefa <_printf_float+0x3fa>
 800af12:	464b      	mov	r3, r9
 800af14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af18:	e6df      	b.n	800acda <_printf_float+0x1da>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	f104 0b1a 	add.w	fp, r4, #26
 800af22:	e7f4      	b.n	800af0e <_printf_float+0x40e>
 800af24:	2301      	movs	r3, #1
 800af26:	4642      	mov	r2, r8
 800af28:	e7e1      	b.n	800aeee <_printf_float+0x3ee>
 800af2a:	2301      	movs	r3, #1
 800af2c:	464a      	mov	r2, r9
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	f43f ae3e 	beq.w	800abb6 <_printf_float+0xb6>
 800af3a:	f108 0801 	add.w	r8, r8, #1
 800af3e:	68e3      	ldr	r3, [r4, #12]
 800af40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af42:	1a5b      	subs	r3, r3, r1
 800af44:	4543      	cmp	r3, r8
 800af46:	dcf0      	bgt.n	800af2a <_printf_float+0x42a>
 800af48:	e6fc      	b.n	800ad44 <_printf_float+0x244>
 800af4a:	f04f 0800 	mov.w	r8, #0
 800af4e:	f104 0919 	add.w	r9, r4, #25
 800af52:	e7f4      	b.n	800af3e <_printf_float+0x43e>

0800af54 <_printf_common>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	4616      	mov	r6, r2
 800af5a:	4698      	mov	r8, r3
 800af5c:	688a      	ldr	r2, [r1, #8]
 800af5e:	4607      	mov	r7, r0
 800af60:	690b      	ldr	r3, [r1, #16]
 800af62:	460c      	mov	r4, r1
 800af64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af68:	4293      	cmp	r3, r2
 800af6a:	bfb8      	it	lt
 800af6c:	4613      	movlt	r3, r2
 800af6e:	6033      	str	r3, [r6, #0]
 800af70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af74:	b10a      	cbz	r2, 800af7a <_printf_common+0x26>
 800af76:	3301      	adds	r3, #1
 800af78:	6033      	str	r3, [r6, #0]
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	0699      	lsls	r1, r3, #26
 800af7e:	bf42      	ittt	mi
 800af80:	6833      	ldrmi	r3, [r6, #0]
 800af82:	3302      	addmi	r3, #2
 800af84:	6033      	strmi	r3, [r6, #0]
 800af86:	6825      	ldr	r5, [r4, #0]
 800af88:	f015 0506 	ands.w	r5, r5, #6
 800af8c:	d106      	bne.n	800af9c <_printf_common+0x48>
 800af8e:	f104 0a19 	add.w	sl, r4, #25
 800af92:	68e3      	ldr	r3, [r4, #12]
 800af94:	6832      	ldr	r2, [r6, #0]
 800af96:	1a9b      	subs	r3, r3, r2
 800af98:	42ab      	cmp	r3, r5
 800af9a:	dc2b      	bgt.n	800aff4 <_printf_common+0xa0>
 800af9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afa0:	6822      	ldr	r2, [r4, #0]
 800afa2:	3b00      	subs	r3, #0
 800afa4:	bf18      	it	ne
 800afa6:	2301      	movne	r3, #1
 800afa8:	0692      	lsls	r2, r2, #26
 800afaa:	d430      	bmi.n	800b00e <_printf_common+0xba>
 800afac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afb0:	4641      	mov	r1, r8
 800afb2:	4638      	mov	r0, r7
 800afb4:	47c8      	blx	r9
 800afb6:	3001      	adds	r0, #1
 800afb8:	d023      	beq.n	800b002 <_printf_common+0xae>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	341a      	adds	r4, #26
 800afbe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800afc2:	f003 0306 	and.w	r3, r3, #6
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	bf0a      	itet	eq
 800afca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800afce:	2500      	movne	r5, #0
 800afd0:	6833      	ldreq	r3, [r6, #0]
 800afd2:	f04f 0600 	mov.w	r6, #0
 800afd6:	bf08      	it	eq
 800afd8:	1aed      	subeq	r5, r5, r3
 800afda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800afde:	bf08      	it	eq
 800afe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe4:	4293      	cmp	r3, r2
 800afe6:	bfc4      	itt	gt
 800afe8:	1a9b      	subgt	r3, r3, r2
 800afea:	18ed      	addgt	r5, r5, r3
 800afec:	42b5      	cmp	r5, r6
 800afee:	d11a      	bne.n	800b026 <_printf_common+0xd2>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e008      	b.n	800b006 <_printf_common+0xb2>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4652      	mov	r2, sl
 800aff8:	4641      	mov	r1, r8
 800affa:	4638      	mov	r0, r7
 800affc:	47c8      	blx	r9
 800affe:	3001      	adds	r0, #1
 800b000:	d103      	bne.n	800b00a <_printf_common+0xb6>
 800b002:	f04f 30ff 	mov.w	r0, #4294967295
 800b006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00a:	3501      	adds	r5, #1
 800b00c:	e7c1      	b.n	800af92 <_printf_common+0x3e>
 800b00e:	18e1      	adds	r1, r4, r3
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	2030      	movs	r0, #48	@ 0x30
 800b014:	3302      	adds	r3, #2
 800b016:	4422      	add	r2, r4
 800b018:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b01c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b024:	e7c2      	b.n	800afac <_printf_common+0x58>
 800b026:	2301      	movs	r3, #1
 800b028:	4622      	mov	r2, r4
 800b02a:	4641      	mov	r1, r8
 800b02c:	4638      	mov	r0, r7
 800b02e:	47c8      	blx	r9
 800b030:	3001      	adds	r0, #1
 800b032:	d0e6      	beq.n	800b002 <_printf_common+0xae>
 800b034:	3601      	adds	r6, #1
 800b036:	e7d9      	b.n	800afec <_printf_common+0x98>

0800b038 <_printf_i>:
 800b038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b03c:	7e0f      	ldrb	r7, [r1, #24]
 800b03e:	4691      	mov	r9, r2
 800b040:	4680      	mov	r8, r0
 800b042:	460c      	mov	r4, r1
 800b044:	2f78      	cmp	r7, #120	@ 0x78
 800b046:	469a      	mov	sl, r3
 800b048:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b04a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b04e:	d807      	bhi.n	800b060 <_printf_i+0x28>
 800b050:	2f62      	cmp	r7, #98	@ 0x62
 800b052:	d80a      	bhi.n	800b06a <_printf_i+0x32>
 800b054:	2f00      	cmp	r7, #0
 800b056:	f000 80d2 	beq.w	800b1fe <_printf_i+0x1c6>
 800b05a:	2f58      	cmp	r7, #88	@ 0x58
 800b05c:	f000 80b9 	beq.w	800b1d2 <_printf_i+0x19a>
 800b060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b068:	e03a      	b.n	800b0e0 <_printf_i+0xa8>
 800b06a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b06e:	2b15      	cmp	r3, #21
 800b070:	d8f6      	bhi.n	800b060 <_printf_i+0x28>
 800b072:	a101      	add	r1, pc, #4	@ (adr r1, 800b078 <_printf_i+0x40>)
 800b074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b078:	0800b0d1 	.word	0x0800b0d1
 800b07c:	0800b0e5 	.word	0x0800b0e5
 800b080:	0800b061 	.word	0x0800b061
 800b084:	0800b061 	.word	0x0800b061
 800b088:	0800b061 	.word	0x0800b061
 800b08c:	0800b061 	.word	0x0800b061
 800b090:	0800b0e5 	.word	0x0800b0e5
 800b094:	0800b061 	.word	0x0800b061
 800b098:	0800b061 	.word	0x0800b061
 800b09c:	0800b061 	.word	0x0800b061
 800b0a0:	0800b061 	.word	0x0800b061
 800b0a4:	0800b1e5 	.word	0x0800b1e5
 800b0a8:	0800b10f 	.word	0x0800b10f
 800b0ac:	0800b19f 	.word	0x0800b19f
 800b0b0:	0800b061 	.word	0x0800b061
 800b0b4:	0800b061 	.word	0x0800b061
 800b0b8:	0800b207 	.word	0x0800b207
 800b0bc:	0800b061 	.word	0x0800b061
 800b0c0:	0800b10f 	.word	0x0800b10f
 800b0c4:	0800b061 	.word	0x0800b061
 800b0c8:	0800b061 	.word	0x0800b061
 800b0cc:	0800b1a7 	.word	0x0800b1a7
 800b0d0:	6833      	ldr	r3, [r6, #0]
 800b0d2:	1d1a      	adds	r2, r3, #4
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6032      	str	r2, [r6, #0]
 800b0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e09d      	b.n	800b220 <_printf_i+0x1e8>
 800b0e4:	6833      	ldr	r3, [r6, #0]
 800b0e6:	6820      	ldr	r0, [r4, #0]
 800b0e8:	1d19      	adds	r1, r3, #4
 800b0ea:	6031      	str	r1, [r6, #0]
 800b0ec:	0606      	lsls	r6, r0, #24
 800b0ee:	d501      	bpl.n	800b0f4 <_printf_i+0xbc>
 800b0f0:	681d      	ldr	r5, [r3, #0]
 800b0f2:	e003      	b.n	800b0fc <_printf_i+0xc4>
 800b0f4:	0645      	lsls	r5, r0, #25
 800b0f6:	d5fb      	bpl.n	800b0f0 <_printf_i+0xb8>
 800b0f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0fc:	2d00      	cmp	r5, #0
 800b0fe:	da03      	bge.n	800b108 <_printf_i+0xd0>
 800b100:	232d      	movs	r3, #45	@ 0x2d
 800b102:	426d      	negs	r5, r5
 800b104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b108:	4859      	ldr	r0, [pc, #356]	@ (800b270 <_printf_i+0x238>)
 800b10a:	230a      	movs	r3, #10
 800b10c:	e011      	b.n	800b132 <_printf_i+0xfa>
 800b10e:	6821      	ldr	r1, [r4, #0]
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	0608      	lsls	r0, r1, #24
 800b114:	f853 5b04 	ldr.w	r5, [r3], #4
 800b118:	d402      	bmi.n	800b120 <_printf_i+0xe8>
 800b11a:	0649      	lsls	r1, r1, #25
 800b11c:	bf48      	it	mi
 800b11e:	b2ad      	uxthmi	r5, r5
 800b120:	2f6f      	cmp	r7, #111	@ 0x6f
 800b122:	6033      	str	r3, [r6, #0]
 800b124:	4852      	ldr	r0, [pc, #328]	@ (800b270 <_printf_i+0x238>)
 800b126:	bf14      	ite	ne
 800b128:	230a      	movne	r3, #10
 800b12a:	2308      	moveq	r3, #8
 800b12c:	2100      	movs	r1, #0
 800b12e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b132:	6866      	ldr	r6, [r4, #4]
 800b134:	2e00      	cmp	r6, #0
 800b136:	60a6      	str	r6, [r4, #8]
 800b138:	bfa2      	ittt	ge
 800b13a:	6821      	ldrge	r1, [r4, #0]
 800b13c:	f021 0104 	bicge.w	r1, r1, #4
 800b140:	6021      	strge	r1, [r4, #0]
 800b142:	b90d      	cbnz	r5, 800b148 <_printf_i+0x110>
 800b144:	2e00      	cmp	r6, #0
 800b146:	d04b      	beq.n	800b1e0 <_printf_i+0x1a8>
 800b148:	4616      	mov	r6, r2
 800b14a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b14e:	fb03 5711 	mls	r7, r3, r1, r5
 800b152:	5dc7      	ldrb	r7, [r0, r7]
 800b154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b158:	462f      	mov	r7, r5
 800b15a:	460d      	mov	r5, r1
 800b15c:	42bb      	cmp	r3, r7
 800b15e:	d9f4      	bls.n	800b14a <_printf_i+0x112>
 800b160:	2b08      	cmp	r3, #8
 800b162:	d10b      	bne.n	800b17c <_printf_i+0x144>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	07df      	lsls	r7, r3, #31
 800b168:	d508      	bpl.n	800b17c <_printf_i+0x144>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	6861      	ldr	r1, [r4, #4]
 800b16e:	4299      	cmp	r1, r3
 800b170:	bfde      	ittt	le
 800b172:	2330      	movle	r3, #48	@ 0x30
 800b174:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b178:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b17c:	1b92      	subs	r2, r2, r6
 800b17e:	6122      	str	r2, [r4, #16]
 800b180:	464b      	mov	r3, r9
 800b182:	aa03      	add	r2, sp, #12
 800b184:	4621      	mov	r1, r4
 800b186:	4640      	mov	r0, r8
 800b188:	f8cd a000 	str.w	sl, [sp]
 800b18c:	f7ff fee2 	bl	800af54 <_printf_common>
 800b190:	3001      	adds	r0, #1
 800b192:	d14a      	bne.n	800b22a <_printf_i+0x1f2>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	b004      	add	sp, #16
 800b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	f043 0320 	orr.w	r3, r3, #32
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	2778      	movs	r7, #120	@ 0x78
 800b1a8:	4832      	ldr	r0, [pc, #200]	@ (800b274 <_printf_i+0x23c>)
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1b0:	061f      	lsls	r7, r3, #24
 800b1b2:	6831      	ldr	r1, [r6, #0]
 800b1b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1b8:	d402      	bmi.n	800b1c0 <_printf_i+0x188>
 800b1ba:	065f      	lsls	r7, r3, #25
 800b1bc:	bf48      	it	mi
 800b1be:	b2ad      	uxthmi	r5, r5
 800b1c0:	6031      	str	r1, [r6, #0]
 800b1c2:	07d9      	lsls	r1, r3, #31
 800b1c4:	bf44      	itt	mi
 800b1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ca:	6023      	strmi	r3, [r4, #0]
 800b1cc:	b11d      	cbz	r5, 800b1d6 <_printf_i+0x19e>
 800b1ce:	2310      	movs	r3, #16
 800b1d0:	e7ac      	b.n	800b12c <_printf_i+0xf4>
 800b1d2:	4827      	ldr	r0, [pc, #156]	@ (800b270 <_printf_i+0x238>)
 800b1d4:	e7e9      	b.n	800b1aa <_printf_i+0x172>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	f023 0320 	bic.w	r3, r3, #32
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	e7f6      	b.n	800b1ce <_printf_i+0x196>
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	e7bd      	b.n	800b160 <_printf_i+0x128>
 800b1e4:	6833      	ldr	r3, [r6, #0]
 800b1e6:	6825      	ldr	r5, [r4, #0]
 800b1e8:	1d18      	adds	r0, r3, #4
 800b1ea:	6961      	ldr	r1, [r4, #20]
 800b1ec:	6030      	str	r0, [r6, #0]
 800b1ee:	062e      	lsls	r6, r5, #24
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	d501      	bpl.n	800b1f8 <_printf_i+0x1c0>
 800b1f4:	6019      	str	r1, [r3, #0]
 800b1f6:	e002      	b.n	800b1fe <_printf_i+0x1c6>
 800b1f8:	0668      	lsls	r0, r5, #25
 800b1fa:	d5fb      	bpl.n	800b1f4 <_printf_i+0x1bc>
 800b1fc:	8019      	strh	r1, [r3, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	4616      	mov	r6, r2
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	e7bc      	b.n	800b180 <_printf_i+0x148>
 800b206:	6833      	ldr	r3, [r6, #0]
 800b208:	2100      	movs	r1, #0
 800b20a:	1d1a      	adds	r2, r3, #4
 800b20c:	6032      	str	r2, [r6, #0]
 800b20e:	681e      	ldr	r6, [r3, #0]
 800b210:	6862      	ldr	r2, [r4, #4]
 800b212:	4630      	mov	r0, r6
 800b214:	f000 fbf9 	bl	800ba0a <memchr>
 800b218:	b108      	cbz	r0, 800b21e <_printf_i+0x1e6>
 800b21a:	1b80      	subs	r0, r0, r6
 800b21c:	6060      	str	r0, [r4, #4]
 800b21e:	6863      	ldr	r3, [r4, #4]
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	2300      	movs	r3, #0
 800b224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b228:	e7aa      	b.n	800b180 <_printf_i+0x148>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	4632      	mov	r2, r6
 800b22e:	4649      	mov	r1, r9
 800b230:	4640      	mov	r0, r8
 800b232:	47d0      	blx	sl
 800b234:	3001      	adds	r0, #1
 800b236:	d0ad      	beq.n	800b194 <_printf_i+0x15c>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	079b      	lsls	r3, r3, #30
 800b23c:	d413      	bmi.n	800b266 <_printf_i+0x22e>
 800b23e:	68e0      	ldr	r0, [r4, #12]
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	4298      	cmp	r0, r3
 800b244:	bfb8      	it	lt
 800b246:	4618      	movlt	r0, r3
 800b248:	e7a6      	b.n	800b198 <_printf_i+0x160>
 800b24a:	2301      	movs	r3, #1
 800b24c:	4632      	mov	r2, r6
 800b24e:	4649      	mov	r1, r9
 800b250:	4640      	mov	r0, r8
 800b252:	47d0      	blx	sl
 800b254:	3001      	adds	r0, #1
 800b256:	d09d      	beq.n	800b194 <_printf_i+0x15c>
 800b258:	3501      	adds	r5, #1
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	9903      	ldr	r1, [sp, #12]
 800b25e:	1a5b      	subs	r3, r3, r1
 800b260:	42ab      	cmp	r3, r5
 800b262:	dcf2      	bgt.n	800b24a <_printf_i+0x212>
 800b264:	e7eb      	b.n	800b23e <_printf_i+0x206>
 800b266:	2500      	movs	r5, #0
 800b268:	f104 0619 	add.w	r6, r4, #25
 800b26c:	e7f5      	b.n	800b25a <_printf_i+0x222>
 800b26e:	bf00      	nop
 800b270:	0800f1a2 	.word	0x0800f1a2
 800b274:	0800f1b3 	.word	0x0800f1b3

0800b278 <_scanf_float>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	b087      	sub	sp, #28
 800b27e:	4617      	mov	r7, r2
 800b280:	4680      	mov	r8, r0
 800b282:	460c      	mov	r4, r1
 800b284:	9303      	str	r3, [sp, #12]
 800b286:	688b      	ldr	r3, [r1, #8]
 800b288:	1e5a      	subs	r2, r3, #1
 800b28a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b28e:	460a      	mov	r2, r1
 800b290:	bf89      	itett	hi
 800b292:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b296:	f04f 0b00 	movls.w	fp, #0
 800b29a:	eb03 0b05 	addhi.w	fp, r3, r5
 800b29e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b2a2:	f04f 0500 	mov.w	r5, #0
 800b2a6:	bf88      	it	hi
 800b2a8:	608b      	strhi	r3, [r1, #8]
 800b2aa:	680b      	ldr	r3, [r1, #0]
 800b2ac:	46aa      	mov	sl, r5
 800b2ae:	46a9      	mov	r9, r5
 800b2b0:	9502      	str	r5, [sp, #8]
 800b2b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b2b6:	f842 3b1c 	str.w	r3, [r2], #28
 800b2ba:	4616      	mov	r6, r2
 800b2bc:	9201      	str	r2, [sp, #4]
 800b2be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b2c2:	68a2      	ldr	r2, [r4, #8]
 800b2c4:	b152      	cbz	r2, 800b2dc <_scanf_float+0x64>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b4e      	cmp	r3, #78	@ 0x4e
 800b2cc:	d864      	bhi.n	800b398 <_scanf_float+0x120>
 800b2ce:	2b40      	cmp	r3, #64	@ 0x40
 800b2d0:	d83c      	bhi.n	800b34c <_scanf_float+0xd4>
 800b2d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b2d6:	b2c8      	uxtb	r0, r1
 800b2d8:	280e      	cmp	r0, #14
 800b2da:	d93a      	bls.n	800b352 <_scanf_float+0xda>
 800b2dc:	f1b9 0f00 	cmp.w	r9, #0
 800b2e0:	d003      	beq.n	800b2ea <_scanf_float+0x72>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2ee:	f1ba 0f01 	cmp.w	sl, #1
 800b2f2:	f200 8117 	bhi.w	800b524 <_scanf_float+0x2ac>
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	429e      	cmp	r6, r3
 800b2fa:	f200 8108 	bhi.w	800b50e <_scanf_float+0x296>
 800b2fe:	2001      	movs	r0, #1
 800b300:	b007      	add	sp, #28
 800b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b306:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b30a:	2a0d      	cmp	r2, #13
 800b30c:	d8e6      	bhi.n	800b2dc <_scanf_float+0x64>
 800b30e:	a101      	add	r1, pc, #4	@ (adr r1, 800b314 <_scanf_float+0x9c>)
 800b310:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b314:	0800b45b 	.word	0x0800b45b
 800b318:	0800b2dd 	.word	0x0800b2dd
 800b31c:	0800b2dd 	.word	0x0800b2dd
 800b320:	0800b2dd 	.word	0x0800b2dd
 800b324:	0800b4bb 	.word	0x0800b4bb
 800b328:	0800b493 	.word	0x0800b493
 800b32c:	0800b2dd 	.word	0x0800b2dd
 800b330:	0800b2dd 	.word	0x0800b2dd
 800b334:	0800b469 	.word	0x0800b469
 800b338:	0800b2dd 	.word	0x0800b2dd
 800b33c:	0800b2dd 	.word	0x0800b2dd
 800b340:	0800b2dd 	.word	0x0800b2dd
 800b344:	0800b2dd 	.word	0x0800b2dd
 800b348:	0800b421 	.word	0x0800b421
 800b34c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b350:	e7db      	b.n	800b30a <_scanf_float+0x92>
 800b352:	290e      	cmp	r1, #14
 800b354:	d8c2      	bhi.n	800b2dc <_scanf_float+0x64>
 800b356:	a001      	add	r0, pc, #4	@ (adr r0, 800b35c <_scanf_float+0xe4>)
 800b358:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b35c:	0800b411 	.word	0x0800b411
 800b360:	0800b2dd 	.word	0x0800b2dd
 800b364:	0800b411 	.word	0x0800b411
 800b368:	0800b4a7 	.word	0x0800b4a7
 800b36c:	0800b2dd 	.word	0x0800b2dd
 800b370:	0800b3b9 	.word	0x0800b3b9
 800b374:	0800b3f7 	.word	0x0800b3f7
 800b378:	0800b3f7 	.word	0x0800b3f7
 800b37c:	0800b3f7 	.word	0x0800b3f7
 800b380:	0800b3f7 	.word	0x0800b3f7
 800b384:	0800b3f7 	.word	0x0800b3f7
 800b388:	0800b3f7 	.word	0x0800b3f7
 800b38c:	0800b3f7 	.word	0x0800b3f7
 800b390:	0800b3f7 	.word	0x0800b3f7
 800b394:	0800b3f7 	.word	0x0800b3f7
 800b398:	2b6e      	cmp	r3, #110	@ 0x6e
 800b39a:	d809      	bhi.n	800b3b0 <_scanf_float+0x138>
 800b39c:	2b60      	cmp	r3, #96	@ 0x60
 800b39e:	d8b2      	bhi.n	800b306 <_scanf_float+0x8e>
 800b3a0:	2b54      	cmp	r3, #84	@ 0x54
 800b3a2:	d07b      	beq.n	800b49c <_scanf_float+0x224>
 800b3a4:	2b59      	cmp	r3, #89	@ 0x59
 800b3a6:	d199      	bne.n	800b2dc <_scanf_float+0x64>
 800b3a8:	2d07      	cmp	r5, #7
 800b3aa:	d197      	bne.n	800b2dc <_scanf_float+0x64>
 800b3ac:	2508      	movs	r5, #8
 800b3ae:	e02c      	b.n	800b40a <_scanf_float+0x192>
 800b3b0:	2b74      	cmp	r3, #116	@ 0x74
 800b3b2:	d073      	beq.n	800b49c <_scanf_float+0x224>
 800b3b4:	2b79      	cmp	r3, #121	@ 0x79
 800b3b6:	e7f6      	b.n	800b3a6 <_scanf_float+0x12e>
 800b3b8:	6821      	ldr	r1, [r4, #0]
 800b3ba:	05c8      	lsls	r0, r1, #23
 800b3bc:	d51b      	bpl.n	800b3f6 <_scanf_float+0x17e>
 800b3be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b3c2:	f109 0901 	add.w	r9, r9, #1
 800b3c6:	6021      	str	r1, [r4, #0]
 800b3c8:	f1bb 0f00 	cmp.w	fp, #0
 800b3cc:	d003      	beq.n	800b3d6 <_scanf_float+0x15e>
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3d4:	60a2      	str	r2, [r4, #8]
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	60a3      	str	r3, [r4, #8]
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	f340 8087 	ble.w	800b4fc <_scanf_float+0x284>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	e765      	b.n	800b2c2 <_scanf_float+0x4a>
 800b3f6:	eb1a 0105 	adds.w	r1, sl, r5
 800b3fa:	f47f af6f 	bne.w	800b2dc <_scanf_float+0x64>
 800b3fe:	6822      	ldr	r2, [r4, #0]
 800b400:	460d      	mov	r5, r1
 800b402:	468a      	mov	sl, r1
 800b404:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b408:	6022      	str	r2, [r4, #0]
 800b40a:	f806 3b01 	strb.w	r3, [r6], #1
 800b40e:	e7e2      	b.n	800b3d6 <_scanf_float+0x15e>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	0610      	lsls	r0, r2, #24
 800b414:	f57f af62 	bpl.w	800b2dc <_scanf_float+0x64>
 800b418:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b41c:	6022      	str	r2, [r4, #0]
 800b41e:	e7f4      	b.n	800b40a <_scanf_float+0x192>
 800b420:	f1ba 0f00 	cmp.w	sl, #0
 800b424:	d10e      	bne.n	800b444 <_scanf_float+0x1cc>
 800b426:	f1b9 0f00 	cmp.w	r9, #0
 800b42a:	d10e      	bne.n	800b44a <_scanf_float+0x1d2>
 800b42c:	6822      	ldr	r2, [r4, #0]
 800b42e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b432:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b436:	d108      	bne.n	800b44a <_scanf_float+0x1d2>
 800b438:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b43c:	f04f 0a01 	mov.w	sl, #1
 800b440:	6022      	str	r2, [r4, #0]
 800b442:	e7e2      	b.n	800b40a <_scanf_float+0x192>
 800b444:	f1ba 0f02 	cmp.w	sl, #2
 800b448:	d055      	beq.n	800b4f6 <_scanf_float+0x27e>
 800b44a:	2d01      	cmp	r5, #1
 800b44c:	d002      	beq.n	800b454 <_scanf_float+0x1dc>
 800b44e:	2d04      	cmp	r5, #4
 800b450:	f47f af44 	bne.w	800b2dc <_scanf_float+0x64>
 800b454:	3501      	adds	r5, #1
 800b456:	b2ed      	uxtb	r5, r5
 800b458:	e7d7      	b.n	800b40a <_scanf_float+0x192>
 800b45a:	f1ba 0f01 	cmp.w	sl, #1
 800b45e:	f47f af3d 	bne.w	800b2dc <_scanf_float+0x64>
 800b462:	f04f 0a02 	mov.w	sl, #2
 800b466:	e7d0      	b.n	800b40a <_scanf_float+0x192>
 800b468:	b97d      	cbnz	r5, 800b48a <_scanf_float+0x212>
 800b46a:	f1b9 0f00 	cmp.w	r9, #0
 800b46e:	f47f af38 	bne.w	800b2e2 <_scanf_float+0x6a>
 800b472:	6822      	ldr	r2, [r4, #0]
 800b474:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b478:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b47c:	f040 8107 	bne.w	800b68e <_scanf_float+0x416>
 800b480:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b484:	2501      	movs	r5, #1
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	e7bf      	b.n	800b40a <_scanf_float+0x192>
 800b48a:	2d03      	cmp	r5, #3
 800b48c:	d0e2      	beq.n	800b454 <_scanf_float+0x1dc>
 800b48e:	2d05      	cmp	r5, #5
 800b490:	e7de      	b.n	800b450 <_scanf_float+0x1d8>
 800b492:	2d02      	cmp	r5, #2
 800b494:	f47f af22 	bne.w	800b2dc <_scanf_float+0x64>
 800b498:	2503      	movs	r5, #3
 800b49a:	e7b6      	b.n	800b40a <_scanf_float+0x192>
 800b49c:	2d06      	cmp	r5, #6
 800b49e:	f47f af1d 	bne.w	800b2dc <_scanf_float+0x64>
 800b4a2:	2507      	movs	r5, #7
 800b4a4:	e7b1      	b.n	800b40a <_scanf_float+0x192>
 800b4a6:	6822      	ldr	r2, [r4, #0]
 800b4a8:	0591      	lsls	r1, r2, #22
 800b4aa:	f57f af17 	bpl.w	800b2dc <_scanf_float+0x64>
 800b4ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b4b2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4b6:	6022      	str	r2, [r4, #0]
 800b4b8:	e7a7      	b.n	800b40a <_scanf_float+0x192>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b4c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b4c4:	d006      	beq.n	800b4d4 <_scanf_float+0x25c>
 800b4c6:	0550      	lsls	r0, r2, #21
 800b4c8:	f57f af08 	bpl.w	800b2dc <_scanf_float+0x64>
 800b4cc:	f1b9 0f00 	cmp.w	r9, #0
 800b4d0:	f000 80dd 	beq.w	800b68e <_scanf_float+0x416>
 800b4d4:	0591      	lsls	r1, r2, #22
 800b4d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4da:	bf58      	it	pl
 800b4dc:	9902      	ldrpl	r1, [sp, #8]
 800b4de:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b4e2:	bf58      	it	pl
 800b4e4:	eba9 0101 	subpl.w	r1, r9, r1
 800b4e8:	6022      	str	r2, [r4, #0]
 800b4ea:	f04f 0900 	mov.w	r9, #0
 800b4ee:	bf58      	it	pl
 800b4f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b4f4:	e789      	b.n	800b40a <_scanf_float+0x192>
 800b4f6:	f04f 0a03 	mov.w	sl, #3
 800b4fa:	e786      	b.n	800b40a <_scanf_float+0x192>
 800b4fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b500:	4639      	mov	r1, r7
 800b502:	4640      	mov	r0, r8
 800b504:	4798      	blx	r3
 800b506:	2800      	cmp	r0, #0
 800b508:	f43f aedb 	beq.w	800b2c2 <_scanf_float+0x4a>
 800b50c:	e6e6      	b.n	800b2dc <_scanf_float+0x64>
 800b50e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b512:	463a      	mov	r2, r7
 800b514:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b518:	4640      	mov	r0, r8
 800b51a:	4798      	blx	r3
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	3b01      	subs	r3, #1
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	e6e8      	b.n	800b2f6 <_scanf_float+0x7e>
 800b524:	1e6b      	subs	r3, r5, #1
 800b526:	2b06      	cmp	r3, #6
 800b528:	d824      	bhi.n	800b574 <_scanf_float+0x2fc>
 800b52a:	2d02      	cmp	r5, #2
 800b52c:	d836      	bhi.n	800b59c <_scanf_float+0x324>
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	429e      	cmp	r6, r3
 800b532:	f67f aee4 	bls.w	800b2fe <_scanf_float+0x86>
 800b536:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b53a:	463a      	mov	r2, r7
 800b53c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b540:	4640      	mov	r0, r8
 800b542:	4798      	blx	r3
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	3b01      	subs	r3, #1
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	e7f0      	b.n	800b52e <_scanf_float+0x2b6>
 800b54c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b550:	463a      	mov	r2, r7
 800b552:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b556:	4640      	mov	r0, r8
 800b558:	4798      	blx	r3
 800b55a:	6923      	ldr	r3, [r4, #16]
 800b55c:	3b01      	subs	r3, #1
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b564:	fa5f fa8a 	uxtb.w	sl, sl
 800b568:	f1ba 0f02 	cmp.w	sl, #2
 800b56c:	d1ee      	bne.n	800b54c <_scanf_float+0x2d4>
 800b56e:	3d03      	subs	r5, #3
 800b570:	b2ed      	uxtb	r5, r5
 800b572:	1b76      	subs	r6, r6, r5
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	05da      	lsls	r2, r3, #23
 800b578:	d52f      	bpl.n	800b5da <_scanf_float+0x362>
 800b57a:	055b      	lsls	r3, r3, #21
 800b57c:	d511      	bpl.n	800b5a2 <_scanf_float+0x32a>
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	429e      	cmp	r6, r3
 800b582:	f67f aebc 	bls.w	800b2fe <_scanf_float+0x86>
 800b586:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b58a:	463a      	mov	r2, r7
 800b58c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b590:	4640      	mov	r0, r8
 800b592:	4798      	blx	r3
 800b594:	6923      	ldr	r3, [r4, #16]
 800b596:	3b01      	subs	r3, #1
 800b598:	6123      	str	r3, [r4, #16]
 800b59a:	e7f0      	b.n	800b57e <_scanf_float+0x306>
 800b59c:	46aa      	mov	sl, r5
 800b59e:	46b3      	mov	fp, r6
 800b5a0:	e7de      	b.n	800b560 <_scanf_float+0x2e8>
 800b5a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b5a6:	1e75      	subs	r5, r6, #1
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	2965      	cmp	r1, #101	@ 0x65
 800b5ac:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5b0:	6123      	str	r3, [r4, #16]
 800b5b2:	d00c      	beq.n	800b5ce <_scanf_float+0x356>
 800b5b4:	2945      	cmp	r1, #69	@ 0x45
 800b5b6:	d00a      	beq.n	800b5ce <_scanf_float+0x356>
 800b5b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5bc:	463a      	mov	r2, r7
 800b5be:	4640      	mov	r0, r8
 800b5c0:	1eb5      	subs	r5, r6, #2
 800b5c2:	4798      	blx	r3
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	6123      	str	r3, [r4, #16]
 800b5ce:	462e      	mov	r6, r5
 800b5d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5d4:	463a      	mov	r2, r7
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4798      	blx	r3
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	f012 0210 	ands.w	r2, r2, #16
 800b5e0:	d001      	beq.n	800b5e6 <_scanf_float+0x36e>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e68c      	b.n	800b300 <_scanf_float+0x88>
 800b5e6:	7032      	strb	r2, [r6, #0]
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b5ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5f2:	d11c      	bne.n	800b62e <_scanf_float+0x3b6>
 800b5f4:	9b02      	ldr	r3, [sp, #8]
 800b5f6:	454b      	cmp	r3, r9
 800b5f8:	eba3 0209 	sub.w	r2, r3, r9
 800b5fc:	d123      	bne.n	800b646 <_scanf_float+0x3ce>
 800b5fe:	2200      	movs	r2, #0
 800b600:	9901      	ldr	r1, [sp, #4]
 800b602:	4640      	mov	r0, r8
 800b604:	f002 fc28 	bl	800de58 <_strtod_r>
 800b608:	6821      	ldr	r1, [r4, #0]
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	f011 0f02 	tst.w	r1, #2
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	ec57 6b10 	vmov	r6, r7, d0
 800b616:	f103 0204 	add.w	r2, r3, #4
 800b61a:	d01f      	beq.n	800b65c <_scanf_float+0x3e4>
 800b61c:	9903      	ldr	r1, [sp, #12]
 800b61e:	600a      	str	r2, [r1, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	e9c3 6700 	strd	r6, r7, [r3]
 800b626:	68e3      	ldr	r3, [r4, #12]
 800b628:	3301      	adds	r3, #1
 800b62a:	60e3      	str	r3, [r4, #12]
 800b62c:	e7d9      	b.n	800b5e2 <_scanf_float+0x36a>
 800b62e:	9b04      	ldr	r3, [sp, #16]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0e4      	beq.n	800b5fe <_scanf_float+0x386>
 800b634:	9905      	ldr	r1, [sp, #20]
 800b636:	230a      	movs	r3, #10
 800b638:	4640      	mov	r0, r8
 800b63a:	3101      	adds	r1, #1
 800b63c:	f002 fc8c 	bl	800df58 <_strtol_r>
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	9e05      	ldr	r6, [sp, #20]
 800b644:	1ac2      	subs	r2, r0, r3
 800b646:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b64a:	4912      	ldr	r1, [pc, #72]	@ (800b694 <_scanf_float+0x41c>)
 800b64c:	429e      	cmp	r6, r3
 800b64e:	bf28      	it	cs
 800b650:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b654:	4630      	mov	r0, r6
 800b656:	f000 f8f5 	bl	800b844 <siprintf>
 800b65a:	e7d0      	b.n	800b5fe <_scanf_float+0x386>
 800b65c:	f011 0f04 	tst.w	r1, #4
 800b660:	9903      	ldr	r1, [sp, #12]
 800b662:	600a      	str	r2, [r1, #0]
 800b664:	d1dc      	bne.n	800b620 <_scanf_float+0x3a8>
 800b666:	681d      	ldr	r5, [r3, #0]
 800b668:	4632      	mov	r2, r6
 800b66a:	463b      	mov	r3, r7
 800b66c:	4630      	mov	r0, r6
 800b66e:	4639      	mov	r1, r7
 800b670:	f7f5 fa70 	bl	8000b54 <__aeabi_dcmpun>
 800b674:	b128      	cbz	r0, 800b682 <_scanf_float+0x40a>
 800b676:	4808      	ldr	r0, [pc, #32]	@ (800b698 <_scanf_float+0x420>)
 800b678:	f000 f9d6 	bl	800ba28 <nanf>
 800b67c:	ed85 0a00 	vstr	s0, [r5]
 800b680:	e7d1      	b.n	800b626 <_scanf_float+0x3ae>
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f5 fac3 	bl	8000c10 <__aeabi_d2f>
 800b68a:	6028      	str	r0, [r5, #0]
 800b68c:	e7cb      	b.n	800b626 <_scanf_float+0x3ae>
 800b68e:	f04f 0900 	mov.w	r9, #0
 800b692:	e62a      	b.n	800b2ea <_scanf_float+0x72>
 800b694:	0800f1c4 	.word	0x0800f1c4
 800b698:	0800f55d 	.word	0x0800f55d

0800b69c <std>:
 800b69c:	2300      	movs	r3, #0
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	6083      	str	r3, [r0, #8]
 800b6a4:	8181      	strh	r1, [r0, #12]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6aa:	81c2      	strh	r2, [r0, #14]
 800b6ac:	2208      	movs	r2, #8
 800b6ae:	6183      	str	r3, [r0, #24]
 800b6b0:	e9c0 3300 	strd	r3, r3, [r0]
 800b6b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6b8:	305c      	adds	r0, #92	@ 0x5c
 800b6ba:	f000 f926 	bl	800b90a <memset>
 800b6be:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f4 <std+0x58>)
 800b6c0:	6224      	str	r4, [r4, #32]
 800b6c2:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f8 <std+0x5c>)
 800b6c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b6fc <std+0x60>)
 800b6ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b700 <std+0x64>)
 800b6ce:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b704 <std+0x68>)
 800b6d2:	429c      	cmp	r4, r3
 800b6d4:	d006      	beq.n	800b6e4 <std+0x48>
 800b6d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6da:	4294      	cmp	r4, r2
 800b6dc:	d002      	beq.n	800b6e4 <std+0x48>
 800b6de:	33d0      	adds	r3, #208	@ 0xd0
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	d105      	bne.n	800b6f0 <std+0x54>
 800b6e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ec:	f000 b98a 	b.w	800ba04 <__retarget_lock_init_recursive>
 800b6f0:	bd10      	pop	{r4, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800b885 	.word	0x0800b885
 800b6f8:	0800b8a7 	.word	0x0800b8a7
 800b6fc:	0800b8df 	.word	0x0800b8df
 800b700:	0800b903 	.word	0x0800b903
 800b704:	200004b8 	.word	0x200004b8

0800b708 <stdio_exit_handler>:
 800b708:	4a02      	ldr	r2, [pc, #8]	@ (800b714 <stdio_exit_handler+0xc>)
 800b70a:	4903      	ldr	r1, [pc, #12]	@ (800b718 <stdio_exit_handler+0x10>)
 800b70c:	4803      	ldr	r0, [pc, #12]	@ (800b71c <stdio_exit_handler+0x14>)
 800b70e:	f000 b869 	b.w	800b7e4 <_fwalk_sglue>
 800b712:	bf00      	nop
 800b714:	2000000c 	.word	0x2000000c
 800b718:	0800e599 	.word	0x0800e599
 800b71c:	2000001c 	.word	0x2000001c

0800b720 <cleanup_stdio>:
 800b720:	6841      	ldr	r1, [r0, #4]
 800b722:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <cleanup_stdio+0x34>)
 800b724:	4299      	cmp	r1, r3
 800b726:	b510      	push	{r4, lr}
 800b728:	4604      	mov	r4, r0
 800b72a:	d001      	beq.n	800b730 <cleanup_stdio+0x10>
 800b72c:	f002 ff34 	bl	800e598 <_fflush_r>
 800b730:	68a1      	ldr	r1, [r4, #8]
 800b732:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <cleanup_stdio+0x38>)
 800b734:	4299      	cmp	r1, r3
 800b736:	d002      	beq.n	800b73e <cleanup_stdio+0x1e>
 800b738:	4620      	mov	r0, r4
 800b73a:	f002 ff2d 	bl	800e598 <_fflush_r>
 800b73e:	68e1      	ldr	r1, [r4, #12]
 800b740:	4b06      	ldr	r3, [pc, #24]	@ (800b75c <cleanup_stdio+0x3c>)
 800b742:	4299      	cmp	r1, r3
 800b744:	d004      	beq.n	800b750 <cleanup_stdio+0x30>
 800b746:	4620      	mov	r0, r4
 800b748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b74c:	f002 bf24 	b.w	800e598 <_fflush_r>
 800b750:	bd10      	pop	{r4, pc}
 800b752:	bf00      	nop
 800b754:	200004b8 	.word	0x200004b8
 800b758:	20000520 	.word	0x20000520
 800b75c:	20000588 	.word	0x20000588

0800b760 <global_stdio_init.part.0>:
 800b760:	b510      	push	{r4, lr}
 800b762:	4b0b      	ldr	r3, [pc, #44]	@ (800b790 <global_stdio_init.part.0+0x30>)
 800b764:	2104      	movs	r1, #4
 800b766:	4c0b      	ldr	r4, [pc, #44]	@ (800b794 <global_stdio_init.part.0+0x34>)
 800b768:	4a0b      	ldr	r2, [pc, #44]	@ (800b798 <global_stdio_init.part.0+0x38>)
 800b76a:	4620      	mov	r0, r4
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	2200      	movs	r2, #0
 800b770:	f7ff ff94 	bl	800b69c <std>
 800b774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b778:	2201      	movs	r2, #1
 800b77a:	2109      	movs	r1, #9
 800b77c:	f7ff ff8e 	bl	800b69c <std>
 800b780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b784:	2202      	movs	r2, #2
 800b786:	2112      	movs	r1, #18
 800b788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b78c:	f7ff bf86 	b.w	800b69c <std>
 800b790:	200005f0 	.word	0x200005f0
 800b794:	200004b8 	.word	0x200004b8
 800b798:	0800b709 	.word	0x0800b709

0800b79c <__sfp_lock_acquire>:
 800b79c:	4801      	ldr	r0, [pc, #4]	@ (800b7a4 <__sfp_lock_acquire+0x8>)
 800b79e:	f000 b932 	b.w	800ba06 <__retarget_lock_acquire_recursive>
 800b7a2:	bf00      	nop
 800b7a4:	200005f9 	.word	0x200005f9

0800b7a8 <__sfp_lock_release>:
 800b7a8:	4801      	ldr	r0, [pc, #4]	@ (800b7b0 <__sfp_lock_release+0x8>)
 800b7aa:	f000 b92d 	b.w	800ba08 <__retarget_lock_release_recursive>
 800b7ae:	bf00      	nop
 800b7b0:	200005f9 	.word	0x200005f9

0800b7b4 <__sinit>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	f7ff fff0 	bl	800b79c <__sfp_lock_acquire>
 800b7bc:	6a23      	ldr	r3, [r4, #32]
 800b7be:	b11b      	cbz	r3, 800b7c8 <__sinit+0x14>
 800b7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c4:	f7ff bff0 	b.w	800b7a8 <__sfp_lock_release>
 800b7c8:	4b04      	ldr	r3, [pc, #16]	@ (800b7dc <__sinit+0x28>)
 800b7ca:	6223      	str	r3, [r4, #32]
 800b7cc:	4b04      	ldr	r3, [pc, #16]	@ (800b7e0 <__sinit+0x2c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1f5      	bne.n	800b7c0 <__sinit+0xc>
 800b7d4:	f7ff ffc4 	bl	800b760 <global_stdio_init.part.0>
 800b7d8:	e7f2      	b.n	800b7c0 <__sinit+0xc>
 800b7da:	bf00      	nop
 800b7dc:	0800b721 	.word	0x0800b721
 800b7e0:	200005f0 	.word	0x200005f0

0800b7e4 <_fwalk_sglue>:
 800b7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	4688      	mov	r8, r1
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	2600      	movs	r6, #0
 800b7f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7f4:	f1b9 0901 	subs.w	r9, r9, #1
 800b7f8:	d505      	bpl.n	800b806 <_fwalk_sglue+0x22>
 800b7fa:	6824      	ldr	r4, [r4, #0]
 800b7fc:	2c00      	cmp	r4, #0
 800b7fe:	d1f7      	bne.n	800b7f0 <_fwalk_sglue+0xc>
 800b800:	4630      	mov	r0, r6
 800b802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b806:	89ab      	ldrh	r3, [r5, #12]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d907      	bls.n	800b81c <_fwalk_sglue+0x38>
 800b80c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b810:	3301      	adds	r3, #1
 800b812:	d003      	beq.n	800b81c <_fwalk_sglue+0x38>
 800b814:	4629      	mov	r1, r5
 800b816:	4638      	mov	r0, r7
 800b818:	47c0      	blx	r8
 800b81a:	4306      	orrs	r6, r0
 800b81c:	3568      	adds	r5, #104	@ 0x68
 800b81e:	e7e9      	b.n	800b7f4 <_fwalk_sglue+0x10>

0800b820 <iprintf>:
 800b820:	b40f      	push	{r0, r1, r2, r3}
 800b822:	b507      	push	{r0, r1, r2, lr}
 800b824:	4906      	ldr	r1, [pc, #24]	@ (800b840 <iprintf+0x20>)
 800b826:	ab04      	add	r3, sp, #16
 800b828:	6808      	ldr	r0, [r1, #0]
 800b82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82e:	6881      	ldr	r1, [r0, #8]
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	f002 fd15 	bl	800e260 <_vfiprintf_r>
 800b836:	b003      	add	sp, #12
 800b838:	f85d eb04 	ldr.w	lr, [sp], #4
 800b83c:	b004      	add	sp, #16
 800b83e:	4770      	bx	lr
 800b840:	20000018 	.word	0x20000018

0800b844 <siprintf>:
 800b844:	b40e      	push	{r1, r2, r3}
 800b846:	b500      	push	{lr}
 800b848:	b09c      	sub	sp, #112	@ 0x70
 800b84a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b84e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b850:	9002      	str	r0, [sp, #8]
 800b852:	9006      	str	r0, [sp, #24]
 800b854:	9107      	str	r1, [sp, #28]
 800b856:	9104      	str	r1, [sp, #16]
 800b858:	4808      	ldr	r0, [pc, #32]	@ (800b87c <siprintf+0x38>)
 800b85a:	4909      	ldr	r1, [pc, #36]	@ (800b880 <siprintf+0x3c>)
 800b85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b860:	9105      	str	r1, [sp, #20]
 800b862:	a902      	add	r1, sp, #8
 800b864:	6800      	ldr	r0, [r0, #0]
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	f002 fbd4 	bl	800e014 <_svfiprintf_r>
 800b86c:	9b02      	ldr	r3, [sp, #8]
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
 800b872:	b01c      	add	sp, #112	@ 0x70
 800b874:	f85d eb04 	ldr.w	lr, [sp], #4
 800b878:	b003      	add	sp, #12
 800b87a:	4770      	bx	lr
 800b87c:	20000018 	.word	0x20000018
 800b880:	ffff0208 	.word	0xffff0208

0800b884 <__sread>:
 800b884:	b510      	push	{r4, lr}
 800b886:	460c      	mov	r4, r1
 800b888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88c:	f000 f86c 	bl	800b968 <_read_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	bfab      	itete	ge
 800b894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b896:	89a3      	ldrhlt	r3, [r4, #12]
 800b898:	181b      	addge	r3, r3, r0
 800b89a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b89e:	bfac      	ite	ge
 800b8a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8a2:	81a3      	strhlt	r3, [r4, #12]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <__swrite>:
 800b8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8aa:	461f      	mov	r7, r3
 800b8ac:	898b      	ldrh	r3, [r1, #12]
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	05db      	lsls	r3, r3, #23
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	d505      	bpl.n	800b8c4 <__swrite+0x1e>
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c0:	f000 f840 	bl	800b944 <_lseek_r>
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8da:	f000 b857 	b.w	800b98c <_write_r>

0800b8de <__sseek>:
 800b8de:	b510      	push	{r4, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e6:	f000 f82d 	bl	800b944 <_lseek_r>
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	bf15      	itete	ne
 800b8f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8fa:	81a3      	strheq	r3, [r4, #12]
 800b8fc:	bf18      	it	ne
 800b8fe:	81a3      	strhne	r3, [r4, #12]
 800b900:	bd10      	pop	{r4, pc}

0800b902 <__sclose>:
 800b902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b906:	f000 b80d 	b.w	800b924 <_close_r>

0800b90a <memset>:
 800b90a:	4402      	add	r2, r0
 800b90c:	4603      	mov	r3, r0
 800b90e:	4293      	cmp	r3, r2
 800b910:	d100      	bne.n	800b914 <memset+0xa>
 800b912:	4770      	bx	lr
 800b914:	f803 1b01 	strb.w	r1, [r3], #1
 800b918:	e7f9      	b.n	800b90e <memset+0x4>
	...

0800b91c <_localeconv_r>:
 800b91c:	4800      	ldr	r0, [pc, #0]	@ (800b920 <_localeconv_r+0x4>)
 800b91e:	4770      	bx	lr
 800b920:	20000158 	.word	0x20000158

0800b924 <_close_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	2300      	movs	r3, #0
 800b928:	4d05      	ldr	r5, [pc, #20]	@ (800b940 <_close_r+0x1c>)
 800b92a:	4604      	mov	r4, r0
 800b92c:	4608      	mov	r0, r1
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	f7f6 fcae 	bl	8002290 <_close>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_close_r+0x1a>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_close_r+0x1a>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	200005f4 	.word	0x200005f4

0800b944 <_lseek_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4604      	mov	r4, r0
 800b948:	4d06      	ldr	r5, [pc, #24]	@ (800b964 <_lseek_r+0x20>)
 800b94a:	4608      	mov	r0, r1
 800b94c:	4611      	mov	r1, r2
 800b94e:	2200      	movs	r2, #0
 800b950:	602a      	str	r2, [r5, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	f7f6 fcc3 	bl	80022de <_lseek>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_lseek_r+0x1e>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_lseek_r+0x1e>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	200005f4 	.word	0x200005f4

0800b968 <_read_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4604      	mov	r4, r0
 800b96c:	4d06      	ldr	r5, [pc, #24]	@ (800b988 <_read_r+0x20>)
 800b96e:	4608      	mov	r0, r1
 800b970:	4611      	mov	r1, r2
 800b972:	2200      	movs	r2, #0
 800b974:	602a      	str	r2, [r5, #0]
 800b976:	461a      	mov	r2, r3
 800b978:	f7f6 fc51 	bl	800221e <_read>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_read_r+0x1e>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_read_r+0x1e>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	200005f4 	.word	0x200005f4

0800b98c <_write_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4604      	mov	r4, r0
 800b990:	4d06      	ldr	r5, [pc, #24]	@ (800b9ac <_write_r+0x20>)
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f6 fc5c 	bl	8002258 <_write>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_write_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_write_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	200005f4 	.word	0x200005f4

0800b9b0 <__errno>:
 800b9b0:	4b01      	ldr	r3, [pc, #4]	@ (800b9b8 <__errno+0x8>)
 800b9b2:	6818      	ldr	r0, [r3, #0]
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20000018 	.word	0x20000018

0800b9bc <__libc_init_array>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	4d0d      	ldr	r5, [pc, #52]	@ (800b9f4 <__libc_init_array+0x38>)
 800b9c0:	2600      	movs	r6, #0
 800b9c2:	4c0d      	ldr	r4, [pc, #52]	@ (800b9f8 <__libc_init_array+0x3c>)
 800b9c4:	1b64      	subs	r4, r4, r5
 800b9c6:	10a4      	asrs	r4, r4, #2
 800b9c8:	42a6      	cmp	r6, r4
 800b9ca:	d109      	bne.n	800b9e0 <__libc_init_array+0x24>
 800b9cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b9fc <__libc_init_array+0x40>)
 800b9ce:	2600      	movs	r6, #0
 800b9d0:	4c0b      	ldr	r4, [pc, #44]	@ (800ba00 <__libc_init_array+0x44>)
 800b9d2:	f003 fb8f 	bl	800f0f4 <_init>
 800b9d6:	1b64      	subs	r4, r4, r5
 800b9d8:	10a4      	asrs	r4, r4, #2
 800b9da:	42a6      	cmp	r6, r4
 800b9dc:	d105      	bne.n	800b9ea <__libc_init_array+0x2e>
 800b9de:	bd70      	pop	{r4, r5, r6, pc}
 800b9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e4:	3601      	adds	r6, #1
 800b9e6:	4798      	blx	r3
 800b9e8:	e7ee      	b.n	800b9c8 <__libc_init_array+0xc>
 800b9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	4798      	blx	r3
 800b9f2:	e7f2      	b.n	800b9da <__libc_init_array+0x1e>
 800b9f4:	0800f5c8 	.word	0x0800f5c8
 800b9f8:	0800f5c8 	.word	0x0800f5c8
 800b9fc:	0800f5c8 	.word	0x0800f5c8
 800ba00:	0800f5cc 	.word	0x0800f5cc

0800ba04 <__retarget_lock_init_recursive>:
 800ba04:	4770      	bx	lr

0800ba06 <__retarget_lock_acquire_recursive>:
 800ba06:	4770      	bx	lr

0800ba08 <__retarget_lock_release_recursive>:
 800ba08:	4770      	bx	lr

0800ba0a <memchr>:
 800ba0a:	b2c9      	uxtb	r1, r1
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	4402      	add	r2, r0
 800ba10:	b510      	push	{r4, lr}
 800ba12:	4293      	cmp	r3, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	d101      	bne.n	800ba1c <memchr+0x12>
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e003      	b.n	800ba24 <memchr+0x1a>
 800ba1c:	7804      	ldrb	r4, [r0, #0]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	428c      	cmp	r4, r1
 800ba22:	d1f6      	bne.n	800ba12 <memchr+0x8>
 800ba24:	bd10      	pop	{r4, pc}
	...

0800ba28 <nanf>:
 800ba28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba30 <nanf+0x8>
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	7fc00000 	.word	0x7fc00000

0800ba34 <quorem>:
 800ba34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	6903      	ldr	r3, [r0, #16]
 800ba3a:	4607      	mov	r7, r0
 800ba3c:	690c      	ldr	r4, [r1, #16]
 800ba3e:	42a3      	cmp	r3, r4
 800ba40:	f2c0 8083 	blt.w	800bb4a <quorem+0x116>
 800ba44:	3c01      	subs	r4, #1
 800ba46:	f100 0514 	add.w	r5, r0, #20
 800ba4a:	f101 0814 	add.w	r8, r1, #20
 800ba4e:	00a3      	lsls	r3, r4, #2
 800ba50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba64:	3301      	adds	r3, #1
 800ba66:	429a      	cmp	r2, r3
 800ba68:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba6c:	d331      	bcc.n	800bad2 <quorem+0x9e>
 800ba6e:	f04f 0a00 	mov.w	sl, #0
 800ba72:	46c4      	mov	ip, r8
 800ba74:	46ae      	mov	lr, r5
 800ba76:	46d3      	mov	fp, sl
 800ba78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba7c:	b298      	uxth	r0, r3
 800ba7e:	45e1      	cmp	r9, ip
 800ba80:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ba84:	fb06 a000 	mla	r0, r6, r0, sl
 800ba88:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ba8c:	b280      	uxth	r0, r0
 800ba8e:	fb06 2303 	mla	r3, r6, r3, r2
 800ba92:	f8de 2000 	ldr.w	r2, [lr]
 800ba96:	b292      	uxth	r2, r2
 800ba98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba9c:	eba2 0200 	sub.w	r2, r2, r0
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	f8de 0000 	ldr.w	r0, [lr]
 800baa6:	445a      	add	r2, fp
 800baa8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800baac:	b292      	uxth	r2, r2
 800baae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bab2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bab6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800baba:	f84e 2b04 	str.w	r2, [lr], #4
 800babe:	d2db      	bcs.n	800ba78 <quorem+0x44>
 800bac0:	9b00      	ldr	r3, [sp, #0]
 800bac2:	58eb      	ldr	r3, [r5, r3]
 800bac4:	b92b      	cbnz	r3, 800bad2 <quorem+0x9e>
 800bac6:	9b01      	ldr	r3, [sp, #4]
 800bac8:	3b04      	subs	r3, #4
 800baca:	429d      	cmp	r5, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	d330      	bcc.n	800bb32 <quorem+0xfe>
 800bad0:	613c      	str	r4, [r7, #16]
 800bad2:	4638      	mov	r0, r7
 800bad4:	f001 f9c6 	bl	800ce64 <__mcmp>
 800bad8:	2800      	cmp	r0, #0
 800bada:	db26      	blt.n	800bb2a <quorem+0xf6>
 800badc:	4629      	mov	r1, r5
 800bade:	2000      	movs	r0, #0
 800bae0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bae4:	f8d1 c000 	ldr.w	ip, [r1]
 800bae8:	fa1f fe82 	uxth.w	lr, r2
 800baec:	45c1      	cmp	r9, r8
 800baee:	fa1f f38c 	uxth.w	r3, ip
 800baf2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800baf6:	eba3 030e 	sub.w	r3, r3, lr
 800bafa:	4403      	add	r3, r0
 800bafc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bb06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb0e:	f841 3b04 	str.w	r3, [r1], #4
 800bb12:	d2e5      	bcs.n	800bae0 <quorem+0xac>
 800bb14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb1c:	b922      	cbnz	r2, 800bb28 <quorem+0xf4>
 800bb1e:	3b04      	subs	r3, #4
 800bb20:	429d      	cmp	r5, r3
 800bb22:	461a      	mov	r2, r3
 800bb24:	d30b      	bcc.n	800bb3e <quorem+0x10a>
 800bb26:	613c      	str	r4, [r7, #16]
 800bb28:	3601      	adds	r6, #1
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	b003      	add	sp, #12
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	6812      	ldr	r2, [r2, #0]
 800bb34:	3b04      	subs	r3, #4
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	d1ca      	bne.n	800bad0 <quorem+0x9c>
 800bb3a:	3c01      	subs	r4, #1
 800bb3c:	e7c5      	b.n	800baca <quorem+0x96>
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	3b04      	subs	r3, #4
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	d1ef      	bne.n	800bb26 <quorem+0xf2>
 800bb46:	3c01      	subs	r4, #1
 800bb48:	e7ea      	b.n	800bb20 <quorem+0xec>
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	e7ee      	b.n	800bb2c <quorem+0xf8>
	...

0800bb50 <_dtoa_r>:
 800bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	69c7      	ldr	r7, [r0, #28]
 800bb56:	b099      	sub	sp, #100	@ 0x64
 800bb58:	4683      	mov	fp, r0
 800bb5a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb5c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb5e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb60:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb62:	ec55 4b10 	vmov	r4, r5, d0
 800bb66:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb6a:	b97f      	cbnz	r7, 800bb8c <_dtoa_r+0x3c>
 800bb6c:	2010      	movs	r0, #16
 800bb6e:	f000 fdfd 	bl	800c76c <malloc>
 800bb72:	4602      	mov	r2, r0
 800bb74:	f8cb 001c 	str.w	r0, [fp, #28]
 800bb78:	b920      	cbnz	r0, 800bb84 <_dtoa_r+0x34>
 800bb7a:	4ba7      	ldr	r3, [pc, #668]	@ (800be18 <_dtoa_r+0x2c8>)
 800bb7c:	21ef      	movs	r1, #239	@ 0xef
 800bb7e:	48a7      	ldr	r0, [pc, #668]	@ (800be1c <_dtoa_r+0x2cc>)
 800bb80:	f002 fe1a 	bl	800e7b8 <__assert_func>
 800bb84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb88:	6007      	str	r7, [r0, #0]
 800bb8a:	60c7      	str	r7, [r0, #12]
 800bb8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb90:	6819      	ldr	r1, [r3, #0]
 800bb92:	b159      	cbz	r1, 800bbac <_dtoa_r+0x5c>
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	2301      	movs	r3, #1
 800bb98:	4658      	mov	r0, fp
 800bb9a:	4093      	lsls	r3, r2
 800bb9c:	604a      	str	r2, [r1, #4]
 800bb9e:	608b      	str	r3, [r1, #8]
 800bba0:	f000 feda 	bl	800c958 <_Bfree>
 800bba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	1e2b      	subs	r3, r5, #0
 800bbae:	bfb7      	itett	lt
 800bbb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bbb4:	2300      	movge	r3, #0
 800bbb6:	2201      	movlt	r2, #1
 800bbb8:	9303      	strlt	r3, [sp, #12]
 800bbba:	bfa8      	it	ge
 800bbbc:	6033      	strge	r3, [r6, #0]
 800bbbe:	9f03      	ldr	r7, [sp, #12]
 800bbc0:	4b97      	ldr	r3, [pc, #604]	@ (800be20 <_dtoa_r+0x2d0>)
 800bbc2:	bfb8      	it	lt
 800bbc4:	6032      	strlt	r2, [r6, #0]
 800bbc6:	43bb      	bics	r3, r7
 800bbc8:	d112      	bne.n	800bbf0 <_dtoa_r+0xa0>
 800bbca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bbce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bbd6:	4323      	orrs	r3, r4
 800bbd8:	f000 854c 	beq.w	800c674 <_dtoa_r+0xb24>
 800bbdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbde:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800be34 <_dtoa_r+0x2e4>
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 854e 	beq.w	800c684 <_dtoa_r+0xb34>
 800bbe8:	f10a 0303 	add.w	r3, sl, #3
 800bbec:	f000 bd48 	b.w	800c680 <_dtoa_r+0xb30>
 800bbf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	ec51 0b17 	vmov	r0, r1, d7
 800bbfc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bc00:	f7f4 ff76 	bl	8000af0 <__aeabi_dcmpeq>
 800bc04:	4680      	mov	r8, r0
 800bc06:	b158      	cbz	r0, 800bc20 <_dtoa_r+0xd0>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc10:	b113      	cbz	r3, 800bc18 <_dtoa_r+0xc8>
 800bc12:	4b84      	ldr	r3, [pc, #528]	@ (800be24 <_dtoa_r+0x2d4>)
 800bc14:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800be38 <_dtoa_r+0x2e8>
 800bc1c:	f000 bd32 	b.w	800c684 <_dtoa_r+0xb34>
 800bc20:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bc24:	aa16      	add	r2, sp, #88	@ 0x58
 800bc26:	a917      	add	r1, sp, #92	@ 0x5c
 800bc28:	4658      	mov	r0, fp
 800bc2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc2e:	f001 fa41 	bl	800d0b4 <__d2b>
 800bc32:	4681      	mov	r9, r0
 800bc34:	2e00      	cmp	r6, #0
 800bc36:	d075      	beq.n	800bd24 <_dtoa_r+0x1d4>
 800bc38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc3a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc3e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bc42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc46:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc4e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc52:	4619      	mov	r1, r3
 800bc54:	2200      	movs	r2, #0
 800bc56:	4b74      	ldr	r3, [pc, #464]	@ (800be28 <_dtoa_r+0x2d8>)
 800bc58:	f7f4 fb2a 	bl	80002b0 <__aeabi_dsub>
 800bc5c:	a368      	add	r3, pc, #416	@ (adr r3, 800be00 <_dtoa_r+0x2b0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f7f4 fcdd 	bl	8000620 <__aeabi_dmul>
 800bc66:	a368      	add	r3, pc, #416	@ (adr r3, 800be08 <_dtoa_r+0x2b8>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 fb22 	bl	80002b4 <__adddf3>
 800bc70:	4604      	mov	r4, r0
 800bc72:	460d      	mov	r5, r1
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7f4 fc69 	bl	800054c <__aeabi_i2d>
 800bc7a:	a365      	add	r3, pc, #404	@ (adr r3, 800be10 <_dtoa_r+0x2c0>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fcce 	bl	8000620 <__aeabi_dmul>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4620      	mov	r0, r4
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	f7f4 fb12 	bl	80002b4 <__adddf3>
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	f7f4 ff74 	bl	8000b80 <__aeabi_d2iz>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 ff2f 	bl	8000b04 <__aeabi_dcmplt>
 800bca6:	b140      	cbz	r0, 800bcba <_dtoa_r+0x16a>
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f7f4 fc4f 	bl	800054c <__aeabi_i2d>
 800bcae:	4622      	mov	r2, r4
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	f7f4 ff1d 	bl	8000af0 <__aeabi_dcmpeq>
 800bcb6:	b900      	cbnz	r0, 800bcba <_dtoa_r+0x16a>
 800bcb8:	3f01      	subs	r7, #1
 800bcba:	2f16      	cmp	r7, #22
 800bcbc:	d851      	bhi.n	800bd62 <_dtoa_r+0x212>
 800bcbe:	4b5b      	ldr	r3, [pc, #364]	@ (800be2c <_dtoa_r+0x2dc>)
 800bcc0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f7f4 ff1a 	bl	8000b04 <__aeabi_dcmplt>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d048      	beq.n	800bd66 <_dtoa_r+0x216>
 800bcd4:	3f01      	subs	r7, #1
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9312      	str	r3, [sp, #72]	@ 0x48
 800bcda:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcdc:	1b9b      	subs	r3, r3, r6
 800bcde:	1e5a      	subs	r2, r3, #1
 800bce0:	bf46      	itte	mi
 800bce2:	f1c3 0801 	rsbmi	r8, r3, #1
 800bce6:	2300      	movmi	r3, #0
 800bce8:	f04f 0800 	movpl.w	r8, #0
 800bcec:	9208      	str	r2, [sp, #32]
 800bcee:	bf48      	it	mi
 800bcf0:	9308      	strmi	r3, [sp, #32]
 800bcf2:	2f00      	cmp	r7, #0
 800bcf4:	db39      	blt.n	800bd6a <_dtoa_r+0x21a>
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bcfa:	443b      	add	r3, r7
 800bcfc:	9308      	str	r3, [sp, #32]
 800bcfe:	2300      	movs	r3, #0
 800bd00:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd04:	2b09      	cmp	r3, #9
 800bd06:	d864      	bhi.n	800bdd2 <_dtoa_r+0x282>
 800bd08:	2b05      	cmp	r3, #5
 800bd0a:	bfc5      	ittet	gt
 800bd0c:	3b04      	subgt	r3, #4
 800bd0e:	2400      	movgt	r4, #0
 800bd10:	2401      	movle	r4, #1
 800bd12:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd16:	3b02      	subs	r3, #2
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d865      	bhi.n	800bde8 <_dtoa_r+0x298>
 800bd1c:	e8df f003 	tbb	[pc, r3]
 800bd20:	5737392c 	.word	0x5737392c
 800bd24:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bd28:	441e      	add	r6, r3
 800bd2a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bd2e:	2b20      	cmp	r3, #32
 800bd30:	bfc9      	itett	gt
 800bd32:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd36:	f1c3 0320 	rsble	r3, r3, #32
 800bd3a:	409f      	lslgt	r7, r3
 800bd3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd40:	bfd8      	it	le
 800bd42:	fa04 f003 	lslle.w	r0, r4, r3
 800bd46:	f106 36ff 	add.w	r6, r6, #4294967295
 800bd4a:	bfc4      	itt	gt
 800bd4c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd50:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd54:	f7f4 fbea 	bl	800052c <__aeabi_ui2d>
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd5e:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd60:	e777      	b.n	800bc52 <_dtoa_r+0x102>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e7b8      	b.n	800bcd8 <_dtoa_r+0x188>
 800bd66:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd68:	e7b7      	b.n	800bcda <_dtoa_r+0x18a>
 800bd6a:	427b      	negs	r3, r7
 800bd6c:	eba8 0807 	sub.w	r8, r8, r7
 800bd70:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd72:	2300      	movs	r3, #0
 800bd74:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd76:	e7c4      	b.n	800bd02 <_dtoa_r+0x1b2>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	dc35      	bgt.n	800bdee <_dtoa_r+0x29e>
 800bd82:	2301      	movs	r3, #1
 800bd84:	461a      	mov	r2, r3
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	9307      	str	r3, [sp, #28]
 800bd8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd8c:	e00b      	b.n	800bda6 <_dtoa_r+0x256>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e7f3      	b.n	800bd7a <_dtoa_r+0x22a>
 800bd92:	2300      	movs	r3, #0
 800bd94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd98:	18fb      	adds	r3, r7, r3
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	9307      	str	r3, [sp, #28]
 800bda2:	bfb8      	it	lt
 800bda4:	2301      	movlt	r3, #1
 800bda6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bdaa:	2100      	movs	r1, #0
 800bdac:	2204      	movs	r2, #4
 800bdae:	f102 0514 	add.w	r5, r2, #20
 800bdb2:	429d      	cmp	r5, r3
 800bdb4:	d91f      	bls.n	800bdf6 <_dtoa_r+0x2a6>
 800bdb6:	6041      	str	r1, [r0, #4]
 800bdb8:	4658      	mov	r0, fp
 800bdba:	f000 fd8d 	bl	800c8d8 <_Balloc>
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d13b      	bne.n	800be3c <_dtoa_r+0x2ec>
 800bdc4:	4b1a      	ldr	r3, [pc, #104]	@ (800be30 <_dtoa_r+0x2e0>)
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	f240 11af 	movw	r1, #431	@ 0x1af
 800bdcc:	e6d7      	b.n	800bb7e <_dtoa_r+0x2e>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e7e0      	b.n	800bd94 <_dtoa_r+0x244>
 800bdd2:	2401      	movs	r4, #1
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bdd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdda:	f04f 33ff 	mov.w	r3, #4294967295
 800bdde:	2200      	movs	r2, #0
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	9307      	str	r3, [sp, #28]
 800bde4:	2312      	movs	r3, #18
 800bde6:	e7d0      	b.n	800bd8a <_dtoa_r+0x23a>
 800bde8:	2301      	movs	r3, #1
 800bdea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdec:	e7f5      	b.n	800bdda <_dtoa_r+0x28a>
 800bdee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	9307      	str	r3, [sp, #28]
 800bdf4:	e7d7      	b.n	800bda6 <_dtoa_r+0x256>
 800bdf6:	3101      	adds	r1, #1
 800bdf8:	0052      	lsls	r2, r2, #1
 800bdfa:	e7d8      	b.n	800bdae <_dtoa_r+0x25e>
 800bdfc:	f3af 8000 	nop.w
 800be00:	636f4361 	.word	0x636f4361
 800be04:	3fd287a7 	.word	0x3fd287a7
 800be08:	8b60c8b3 	.word	0x8b60c8b3
 800be0c:	3fc68a28 	.word	0x3fc68a28
 800be10:	509f79fb 	.word	0x509f79fb
 800be14:	3fd34413 	.word	0x3fd34413
 800be18:	0800f1d6 	.word	0x0800f1d6
 800be1c:	0800f1ed 	.word	0x0800f1ed
 800be20:	7ff00000 	.word	0x7ff00000
 800be24:	0800f1a1 	.word	0x0800f1a1
 800be28:	3ff80000 	.word	0x3ff80000
 800be2c:	0800f2e8 	.word	0x0800f2e8
 800be30:	0800f245 	.word	0x0800f245
 800be34:	0800f1d2 	.word	0x0800f1d2
 800be38:	0800f1a0 	.word	0x0800f1a0
 800be3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be40:	6018      	str	r0, [r3, #0]
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	2b0e      	cmp	r3, #14
 800be46:	f200 80a4 	bhi.w	800bf92 <_dtoa_r+0x442>
 800be4a:	2c00      	cmp	r4, #0
 800be4c:	f000 80a1 	beq.w	800bf92 <_dtoa_r+0x442>
 800be50:	2f00      	cmp	r7, #0
 800be52:	dd33      	ble.n	800bebc <_dtoa_r+0x36c>
 800be54:	f007 020f 	and.w	r2, r7, #15
 800be58:	4bac      	ldr	r3, [pc, #688]	@ (800c10c <_dtoa_r+0x5bc>)
 800be5a:	05f8      	lsls	r0, r7, #23
 800be5c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be64:	ed93 7b00 	vldr	d7, [r3]
 800be68:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be6c:	d516      	bpl.n	800be9c <_dtoa_r+0x34c>
 800be6e:	4ba8      	ldr	r3, [pc, #672]	@ (800c110 <_dtoa_r+0x5c0>)
 800be70:	f004 040f 	and.w	r4, r4, #15
 800be74:	2603      	movs	r6, #3
 800be76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be7e:	f7f4 fcf9 	bl	8000874 <__aeabi_ddiv>
 800be82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be86:	4da2      	ldr	r5, [pc, #648]	@ (800c110 <_dtoa_r+0x5c0>)
 800be88:	b954      	cbnz	r4, 800bea0 <_dtoa_r+0x350>
 800be8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be92:	f7f4 fcef 	bl	8000874 <__aeabi_ddiv>
 800be96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be9a:	e028      	b.n	800beee <_dtoa_r+0x39e>
 800be9c:	2602      	movs	r6, #2
 800be9e:	e7f2      	b.n	800be86 <_dtoa_r+0x336>
 800bea0:	07e1      	lsls	r1, r4, #31
 800bea2:	d508      	bpl.n	800beb6 <_dtoa_r+0x366>
 800bea4:	3601      	adds	r6, #1
 800bea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800beae:	f7f4 fbb7 	bl	8000620 <__aeabi_dmul>
 800beb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beb6:	1064      	asrs	r4, r4, #1
 800beb8:	3508      	adds	r5, #8
 800beba:	e7e5      	b.n	800be88 <_dtoa_r+0x338>
 800bebc:	f000 80d2 	beq.w	800c064 <_dtoa_r+0x514>
 800bec0:	427c      	negs	r4, r7
 800bec2:	4b92      	ldr	r3, [pc, #584]	@ (800c10c <_dtoa_r+0x5bc>)
 800bec4:	4d92      	ldr	r5, [pc, #584]	@ (800c110 <_dtoa_r+0x5c0>)
 800bec6:	2602      	movs	r6, #2
 800bec8:	f004 020f 	and.w	r2, r4, #15
 800becc:	1124      	asrs	r4, r4, #4
 800bece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 fba1 	bl	8000620 <__aeabi_dmul>
 800bede:	2300      	movs	r3, #0
 800bee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bee4:	2c00      	cmp	r4, #0
 800bee6:	f040 80b2 	bne.w	800c04e <_dtoa_r+0x4fe>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1d3      	bne.n	800be96 <_dtoa_r+0x346>
 800beee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bef0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 80b7 	beq.w	800c068 <_dtoa_r+0x518>
 800befa:	2200      	movs	r2, #0
 800befc:	4b85      	ldr	r3, [pc, #532]	@ (800c114 <_dtoa_r+0x5c4>)
 800befe:	4620      	mov	r0, r4
 800bf00:	4629      	mov	r1, r5
 800bf02:	f7f4 fdff 	bl	8000b04 <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f000 80ae 	beq.w	800c068 <_dtoa_r+0x518>
 800bf0c:	9b07      	ldr	r3, [sp, #28]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 80aa 	beq.w	800c068 <_dtoa_r+0x518>
 800bf14:	9b00      	ldr	r3, [sp, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	dd37      	ble.n	800bf8a <_dtoa_r+0x43a>
 800bf1a:	1e7b      	subs	r3, r7, #1
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	2200      	movs	r2, #0
 800bf20:	4629      	mov	r1, r5
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	3601      	adds	r6, #1
 800bf26:	4b7c      	ldr	r3, [pc, #496]	@ (800c118 <_dtoa_r+0x5c8>)
 800bf28:	f7f4 fb7a 	bl	8000620 <__aeabi_dmul>
 800bf2c:	9c00      	ldr	r4, [sp, #0]
 800bf2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7f4 fb0a 	bl	800054c <__aeabi_i2d>
 800bf38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf3c:	f7f4 fb70 	bl	8000620 <__aeabi_dmul>
 800bf40:	2200      	movs	r2, #0
 800bf42:	4b76      	ldr	r3, [pc, #472]	@ (800c11c <_dtoa_r+0x5cc>)
 800bf44:	f7f4 f9b6 	bl	80002b4 <__adddf3>
 800bf48:	4605      	mov	r5, r0
 800bf4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf4e:	2c00      	cmp	r4, #0
 800bf50:	f040 808d 	bne.w	800c06e <_dtoa_r+0x51e>
 800bf54:	2200      	movs	r2, #0
 800bf56:	4b72      	ldr	r3, [pc, #456]	@ (800c120 <_dtoa_r+0x5d0>)
 800bf58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf5c:	f7f4 f9a8 	bl	80002b0 <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf68:	462a      	mov	r2, r5
 800bf6a:	4633      	mov	r3, r6
 800bf6c:	f7f4 fde8 	bl	8000b40 <__aeabi_dcmpgt>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	f040 828b 	bne.w	800c48c <_dtoa_r+0x93c>
 800bf76:	462a      	mov	r2, r5
 800bf78:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf80:	f7f4 fdc0 	bl	8000b04 <__aeabi_dcmplt>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	f040 8128 	bne.w	800c1da <_dtoa_r+0x68a>
 800bf8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bf8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f2c0 815a 	blt.w	800c24e <_dtoa_r+0x6fe>
 800bf9a:	2f0e      	cmp	r7, #14
 800bf9c:	f300 8157 	bgt.w	800c24e <_dtoa_r+0x6fe>
 800bfa0:	4b5a      	ldr	r3, [pc, #360]	@ (800c10c <_dtoa_r+0x5bc>)
 800bfa2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfa6:	ed93 7b00 	vldr	d7, [r3]
 800bfaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	ed8d 7b00 	vstr	d7, [sp]
 800bfb2:	da03      	bge.n	800bfbc <_dtoa_r+0x46c>
 800bfb4:	9b07      	ldr	r3, [sp, #28]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f340 8101 	ble.w	800c1be <_dtoa_r+0x66e>
 800bfbc:	4656      	mov	r6, sl
 800bfbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4629      	mov	r1, r5
 800bfca:	f7f4 fc53 	bl	8000874 <__aeabi_ddiv>
 800bfce:	f7f4 fdd7 	bl	8000b80 <__aeabi_d2iz>
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	f7f4 faba 	bl	800054c <__aeabi_i2d>
 800bfd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfdc:	f7f4 fb20 	bl	8000620 <__aeabi_dmul>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4629      	mov	r1, r5
 800bfec:	f7f4 f960 	bl	80002b0 <__aeabi_dsub>
 800bff0:	9d07      	ldr	r5, [sp, #28]
 800bff2:	f806 4b01 	strb.w	r4, [r6], #1
 800bff6:	eba6 040a 	sub.w	r4, r6, sl
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	42a5      	cmp	r5, r4
 800c000:	f040 8117 	bne.w	800c232 <_dtoa_r+0x6e2>
 800c004:	f7f4 f956 	bl	80002b4 <__adddf3>
 800c008:	4604      	mov	r4, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c010:	f7f4 fd96 	bl	8000b40 <__aeabi_dcmpgt>
 800c014:	2800      	cmp	r0, #0
 800c016:	f040 80f9 	bne.w	800c20c <_dtoa_r+0x6bc>
 800c01a:	4620      	mov	r0, r4
 800c01c:	4629      	mov	r1, r5
 800c01e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c022:	f7f4 fd65 	bl	8000af0 <__aeabi_dcmpeq>
 800c026:	b118      	cbz	r0, 800c030 <_dtoa_r+0x4e0>
 800c028:	f018 0f01 	tst.w	r8, #1
 800c02c:	f040 80ee 	bne.w	800c20c <_dtoa_r+0x6bc>
 800c030:	4649      	mov	r1, r9
 800c032:	4658      	mov	r0, fp
 800c034:	f000 fc90 	bl	800c958 <_Bfree>
 800c038:	2300      	movs	r3, #0
 800c03a:	3701      	adds	r7, #1
 800c03c:	7033      	strb	r3, [r6, #0]
 800c03e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c040:	601f      	str	r7, [r3, #0]
 800c042:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 831d 	beq.w	800c684 <_dtoa_r+0xb34>
 800c04a:	601e      	str	r6, [r3, #0]
 800c04c:	e31a      	b.n	800c684 <_dtoa_r+0xb34>
 800c04e:	07e2      	lsls	r2, r4, #31
 800c050:	d505      	bpl.n	800c05e <_dtoa_r+0x50e>
 800c052:	3601      	adds	r6, #1
 800c054:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c058:	f7f4 fae2 	bl	8000620 <__aeabi_dmul>
 800c05c:	2301      	movs	r3, #1
 800c05e:	1064      	asrs	r4, r4, #1
 800c060:	3508      	adds	r5, #8
 800c062:	e73f      	b.n	800bee4 <_dtoa_r+0x394>
 800c064:	2602      	movs	r6, #2
 800c066:	e742      	b.n	800beee <_dtoa_r+0x39e>
 800c068:	9c07      	ldr	r4, [sp, #28]
 800c06a:	9704      	str	r7, [sp, #16]
 800c06c:	e761      	b.n	800bf32 <_dtoa_r+0x3e2>
 800c06e:	4b27      	ldr	r3, [pc, #156]	@ (800c10c <_dtoa_r+0x5bc>)
 800c070:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c072:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c076:	4454      	add	r4, sl
 800c078:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c07c:	2900      	cmp	r1, #0
 800c07e:	d053      	beq.n	800c128 <_dtoa_r+0x5d8>
 800c080:	2000      	movs	r0, #0
 800c082:	4928      	ldr	r1, [pc, #160]	@ (800c124 <_dtoa_r+0x5d4>)
 800c084:	f7f4 fbf6 	bl	8000874 <__aeabi_ddiv>
 800c088:	4633      	mov	r3, r6
 800c08a:	4656      	mov	r6, sl
 800c08c:	462a      	mov	r2, r5
 800c08e:	f7f4 f90f 	bl	80002b0 <__aeabi_dsub>
 800c092:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c09a:	f7f4 fd71 	bl	8000b80 <__aeabi_d2iz>
 800c09e:	4605      	mov	r5, r0
 800c0a0:	f7f4 fa54 	bl	800054c <__aeabi_i2d>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	3530      	adds	r5, #48	@ 0x30
 800c0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ae:	f7f4 f8ff 	bl	80002b0 <__aeabi_dsub>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	f806 5b01 	strb.w	r5, [r6], #1
 800c0ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0c2:	f7f4 fd1f 	bl	8000b04 <__aeabi_dcmplt>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d171      	bne.n	800c1ae <_dtoa_r+0x65e>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	4911      	ldr	r1, [pc, #68]	@ (800c114 <_dtoa_r+0x5c4>)
 800c0ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0d2:	f7f4 f8ed 	bl	80002b0 <__aeabi_dsub>
 800c0d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0da:	f7f4 fd13 	bl	8000b04 <__aeabi_dcmplt>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f040 8095 	bne.w	800c20e <_dtoa_r+0x6be>
 800c0e4:	42a6      	cmp	r6, r4
 800c0e6:	f43f af50 	beq.w	800bf8a <_dtoa_r+0x43a>
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c118 <_dtoa_r+0x5c8>)
 800c0ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0f2:	f7f4 fa95 	bl	8000620 <__aeabi_dmul>
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4b07      	ldr	r3, [pc, #28]	@ (800c118 <_dtoa_r+0x5c8>)
 800c0fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c102:	f7f4 fa8d 	bl	8000620 <__aeabi_dmul>
 800c106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c10a:	e7c4      	b.n	800c096 <_dtoa_r+0x546>
 800c10c:	0800f2e8 	.word	0x0800f2e8
 800c110:	0800f2c0 	.word	0x0800f2c0
 800c114:	3ff00000 	.word	0x3ff00000
 800c118:	40240000 	.word	0x40240000
 800c11c:	401c0000 	.word	0x401c0000
 800c120:	40140000 	.word	0x40140000
 800c124:	3fe00000 	.word	0x3fe00000
 800c128:	4631      	mov	r1, r6
 800c12a:	4656      	mov	r6, sl
 800c12c:	4628      	mov	r0, r5
 800c12e:	f7f4 fa77 	bl	8000620 <__aeabi_dmul>
 800c132:	9415      	str	r4, [sp, #84]	@ 0x54
 800c134:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13c:	f7f4 fd20 	bl	8000b80 <__aeabi_d2iz>
 800c140:	4605      	mov	r5, r0
 800c142:	f7f4 fa03 	bl	800054c <__aeabi_i2d>
 800c146:	4602      	mov	r2, r0
 800c148:	3530      	adds	r5, #48	@ 0x30
 800c14a:	460b      	mov	r3, r1
 800c14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c150:	f7f4 f8ae 	bl	80002b0 <__aeabi_dsub>
 800c154:	f806 5b01 	strb.w	r5, [r6], #1
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	42a6      	cmp	r6, r4
 800c15e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c162:	f04f 0200 	mov.w	r2, #0
 800c166:	d124      	bne.n	800c1b2 <_dtoa_r+0x662>
 800c168:	4bac      	ldr	r3, [pc, #688]	@ (800c41c <_dtoa_r+0x8cc>)
 800c16a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c16e:	f7f4 f8a1 	bl	80002b4 <__adddf3>
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c17a:	f7f4 fce1 	bl	8000b40 <__aeabi_dcmpgt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d145      	bne.n	800c20e <_dtoa_r+0x6be>
 800c182:	2000      	movs	r0, #0
 800c184:	49a5      	ldr	r1, [pc, #660]	@ (800c41c <_dtoa_r+0x8cc>)
 800c186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c18a:	f7f4 f891 	bl	80002b0 <__aeabi_dsub>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c196:	f7f4 fcb5 	bl	8000b04 <__aeabi_dcmplt>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	f43f aef5 	beq.w	800bf8a <_dtoa_r+0x43a>
 800c1a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c1a2:	1e73      	subs	r3, r6, #1
 800c1a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c1a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1aa:	2b30      	cmp	r3, #48	@ 0x30
 800c1ac:	d0f8      	beq.n	800c1a0 <_dtoa_r+0x650>
 800c1ae:	9f04      	ldr	r7, [sp, #16]
 800c1b0:	e73e      	b.n	800c030 <_dtoa_r+0x4e0>
 800c1b2:	4b9b      	ldr	r3, [pc, #620]	@ (800c420 <_dtoa_r+0x8d0>)
 800c1b4:	f7f4 fa34 	bl	8000620 <__aeabi_dmul>
 800c1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1bc:	e7bc      	b.n	800c138 <_dtoa_r+0x5e8>
 800c1be:	d10c      	bne.n	800c1da <_dtoa_r+0x68a>
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4b98      	ldr	r3, [pc, #608]	@ (800c424 <_dtoa_r+0x8d4>)
 800c1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1c8:	f7f4 fa2a 	bl	8000620 <__aeabi_dmul>
 800c1cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1d0:	f7f4 fcac 	bl	8000b2c <__aeabi_dcmpge>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	f000 8157 	beq.w	800c488 <_dtoa_r+0x938>
 800c1da:	2400      	movs	r4, #0
 800c1dc:	4625      	mov	r5, r4
 800c1de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1e0:	4656      	mov	r6, sl
 800c1e2:	43db      	mvns	r3, r3
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	2700      	movs	r7, #0
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4658      	mov	r0, fp
 800c1ec:	f000 fbb4 	bl	800c958 <_Bfree>
 800c1f0:	2d00      	cmp	r5, #0
 800c1f2:	d0dc      	beq.n	800c1ae <_dtoa_r+0x65e>
 800c1f4:	b12f      	cbz	r7, 800c202 <_dtoa_r+0x6b2>
 800c1f6:	42af      	cmp	r7, r5
 800c1f8:	d003      	beq.n	800c202 <_dtoa_r+0x6b2>
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	4658      	mov	r0, fp
 800c1fe:	f000 fbab 	bl	800c958 <_Bfree>
 800c202:	4629      	mov	r1, r5
 800c204:	4658      	mov	r0, fp
 800c206:	f000 fba7 	bl	800c958 <_Bfree>
 800c20a:	e7d0      	b.n	800c1ae <_dtoa_r+0x65e>
 800c20c:	9704      	str	r7, [sp, #16]
 800c20e:	4633      	mov	r3, r6
 800c210:	461e      	mov	r6, r3
 800c212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c216:	2a39      	cmp	r2, #57	@ 0x39
 800c218:	d107      	bne.n	800c22a <_dtoa_r+0x6da>
 800c21a:	459a      	cmp	sl, r3
 800c21c:	d1f8      	bne.n	800c210 <_dtoa_r+0x6c0>
 800c21e:	9a04      	ldr	r2, [sp, #16]
 800c220:	3201      	adds	r2, #1
 800c222:	9204      	str	r2, [sp, #16]
 800c224:	2230      	movs	r2, #48	@ 0x30
 800c226:	f88a 2000 	strb.w	r2, [sl]
 800c22a:	781a      	ldrb	r2, [r3, #0]
 800c22c:	3201      	adds	r2, #1
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	e7bd      	b.n	800c1ae <_dtoa_r+0x65e>
 800c232:	2200      	movs	r2, #0
 800c234:	4b7a      	ldr	r3, [pc, #488]	@ (800c420 <_dtoa_r+0x8d0>)
 800c236:	f7f4 f9f3 	bl	8000620 <__aeabi_dmul>
 800c23a:	2200      	movs	r2, #0
 800c23c:	2300      	movs	r3, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
 800c242:	f7f4 fc55 	bl	8000af0 <__aeabi_dcmpeq>
 800c246:	2800      	cmp	r0, #0
 800c248:	f43f aebb 	beq.w	800bfc2 <_dtoa_r+0x472>
 800c24c:	e6f0      	b.n	800c030 <_dtoa_r+0x4e0>
 800c24e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c250:	2a00      	cmp	r2, #0
 800c252:	f000 80db 	beq.w	800c40c <_dtoa_r+0x8bc>
 800c256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c258:	2a01      	cmp	r2, #1
 800c25a:	f300 80bf 	bgt.w	800c3dc <_dtoa_r+0x88c>
 800c25e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c260:	2a00      	cmp	r2, #0
 800c262:	f000 80b7 	beq.w	800c3d4 <_dtoa_r+0x884>
 800c266:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c26a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c26c:	4646      	mov	r6, r8
 800c26e:	9a08      	ldr	r2, [sp, #32]
 800c270:	2101      	movs	r1, #1
 800c272:	4658      	mov	r0, fp
 800c274:	4498      	add	r8, r3
 800c276:	441a      	add	r2, r3
 800c278:	9208      	str	r2, [sp, #32]
 800c27a:	f000 fc6d 	bl	800cb58 <__i2b>
 800c27e:	4605      	mov	r5, r0
 800c280:	b15e      	cbz	r6, 800c29a <_dtoa_r+0x74a>
 800c282:	9b08      	ldr	r3, [sp, #32]
 800c284:	2b00      	cmp	r3, #0
 800c286:	dd08      	ble.n	800c29a <_dtoa_r+0x74a>
 800c288:	42b3      	cmp	r3, r6
 800c28a:	9a08      	ldr	r2, [sp, #32]
 800c28c:	bfa8      	it	ge
 800c28e:	4633      	movge	r3, r6
 800c290:	eba8 0803 	sub.w	r8, r8, r3
 800c294:	1af6      	subs	r6, r6, r3
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	9308      	str	r3, [sp, #32]
 800c29a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c29c:	b1f3      	cbz	r3, 800c2dc <_dtoa_r+0x78c>
 800c29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 80b7 	beq.w	800c414 <_dtoa_r+0x8c4>
 800c2a6:	b18c      	cbz	r4, 800c2cc <_dtoa_r+0x77c>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	4622      	mov	r2, r4
 800c2ac:	4658      	mov	r0, fp
 800c2ae:	f000 fd13 	bl	800ccd8 <__pow5mult>
 800c2b2:	464a      	mov	r2, r9
 800c2b4:	4601      	mov	r1, r0
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	4658      	mov	r0, fp
 800c2ba:	f000 fc63 	bl	800cb84 <__multiply>
 800c2be:	4649      	mov	r1, r9
 800c2c0:	9004      	str	r0, [sp, #16]
 800c2c2:	4658      	mov	r0, fp
 800c2c4:	f000 fb48 	bl	800c958 <_Bfree>
 800c2c8:	9b04      	ldr	r3, [sp, #16]
 800c2ca:	4699      	mov	r9, r3
 800c2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ce:	1b1a      	subs	r2, r3, r4
 800c2d0:	d004      	beq.n	800c2dc <_dtoa_r+0x78c>
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	4658      	mov	r0, fp
 800c2d6:	f000 fcff 	bl	800ccd8 <__pow5mult>
 800c2da:	4681      	mov	r9, r0
 800c2dc:	2101      	movs	r1, #1
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f000 fc3a 	bl	800cb58 <__i2b>
 800c2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 81cf 	beq.w	800c68c <_dtoa_r+0xb3c>
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	4658      	mov	r0, fp
 800c2f4:	f000 fcf0 	bl	800ccd8 <__pow5mult>
 800c2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	f300 8095 	bgt.w	800c42c <_dtoa_r+0x8dc>
 800c302:	9b02      	ldr	r3, [sp, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	f040 8087 	bne.w	800c418 <_dtoa_r+0x8c8>
 800c30a:	9b03      	ldr	r3, [sp, #12]
 800c30c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c310:	2b00      	cmp	r3, #0
 800c312:	f040 8089 	bne.w	800c428 <_dtoa_r+0x8d8>
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c31c:	0d1b      	lsrs	r3, r3, #20
 800c31e:	051b      	lsls	r3, r3, #20
 800c320:	b12b      	cbz	r3, 800c32e <_dtoa_r+0x7de>
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	f108 0801 	add.w	r8, r8, #1
 800c328:	3301      	adds	r3, #1
 800c32a:	9308      	str	r3, [sp, #32]
 800c32c:	2301      	movs	r3, #1
 800c32e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 81b0 	beq.w	800c698 <_dtoa_r+0xb48>
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c33e:	6918      	ldr	r0, [r3, #16]
 800c340:	f000 fbbe 	bl	800cac0 <__hi0bits>
 800c344:	f1c0 0020 	rsb	r0, r0, #32
 800c348:	9b08      	ldr	r3, [sp, #32]
 800c34a:	4418      	add	r0, r3
 800c34c:	f010 001f 	ands.w	r0, r0, #31
 800c350:	d077      	beq.n	800c442 <_dtoa_r+0x8f2>
 800c352:	f1c0 0320 	rsb	r3, r0, #32
 800c356:	2b04      	cmp	r3, #4
 800c358:	dd6b      	ble.n	800c432 <_dtoa_r+0x8e2>
 800c35a:	f1c0 001c 	rsb	r0, r0, #28
 800c35e:	9b08      	ldr	r3, [sp, #32]
 800c360:	4480      	add	r8, r0
 800c362:	4403      	add	r3, r0
 800c364:	4406      	add	r6, r0
 800c366:	9308      	str	r3, [sp, #32]
 800c368:	f1b8 0f00 	cmp.w	r8, #0
 800c36c:	dd05      	ble.n	800c37a <_dtoa_r+0x82a>
 800c36e:	4649      	mov	r1, r9
 800c370:	4642      	mov	r2, r8
 800c372:	4658      	mov	r0, fp
 800c374:	f000 fd0a 	bl	800cd8c <__lshift>
 800c378:	4681      	mov	r9, r0
 800c37a:	9b08      	ldr	r3, [sp, #32]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dd05      	ble.n	800c38c <_dtoa_r+0x83c>
 800c380:	4621      	mov	r1, r4
 800c382:	461a      	mov	r2, r3
 800c384:	4658      	mov	r0, fp
 800c386:	f000 fd01 	bl	800cd8c <__lshift>
 800c38a:	4604      	mov	r4, r0
 800c38c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d059      	beq.n	800c446 <_dtoa_r+0x8f6>
 800c392:	4621      	mov	r1, r4
 800c394:	4648      	mov	r0, r9
 800c396:	f000 fd65 	bl	800ce64 <__mcmp>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	da53      	bge.n	800c446 <_dtoa_r+0x8f6>
 800c39e:	1e7b      	subs	r3, r7, #1
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	220a      	movs	r2, #10
 800c3a4:	4658      	mov	r0, fp
 800c3a6:	9304      	str	r3, [sp, #16]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f000 faf7 	bl	800c99c <__multadd>
 800c3ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3b0:	4681      	mov	r9, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 8172 	beq.w	800c69c <_dtoa_r+0xb4c>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	220a      	movs	r2, #10
 800c3be:	4658      	mov	r0, fp
 800c3c0:	f000 faec 	bl	800c99c <__multadd>
 800c3c4:	9b00      	ldr	r3, [sp, #0]
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dc67      	bgt.n	800c49c <_dtoa_r+0x94c>
 800c3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	dc41      	bgt.n	800c456 <_dtoa_r+0x906>
 800c3d2:	e063      	b.n	800c49c <_dtoa_r+0x94c>
 800c3d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c3d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c3da:	e746      	b.n	800c26a <_dtoa_r+0x71a>
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	1e5c      	subs	r4, r3, #1
 800c3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3e2:	42a3      	cmp	r3, r4
 800c3e4:	bfb7      	itett	lt
 800c3e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c3e8:	1b1c      	subge	r4, r3, r4
 800c3ea:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c3ec:	1ae3      	sublt	r3, r4, r3
 800c3ee:	bfbe      	ittt	lt
 800c3f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c3f2:	2400      	movlt	r4, #0
 800c3f4:	18d2      	addlt	r2, r2, r3
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	bfb8      	it	lt
 800c3fa:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	bfb5      	itete	lt
 800c400:	eba8 0603 	sublt.w	r6, r8, r3
 800c404:	4646      	movge	r6, r8
 800c406:	2300      	movlt	r3, #0
 800c408:	9b07      	ldrge	r3, [sp, #28]
 800c40a:	e730      	b.n	800c26e <_dtoa_r+0x71e>
 800c40c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c40e:	4646      	mov	r6, r8
 800c410:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c412:	e735      	b.n	800c280 <_dtoa_r+0x730>
 800c414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c416:	e75c      	b.n	800c2d2 <_dtoa_r+0x782>
 800c418:	2300      	movs	r3, #0
 800c41a:	e788      	b.n	800c32e <_dtoa_r+0x7de>
 800c41c:	3fe00000 	.word	0x3fe00000
 800c420:	40240000 	.word	0x40240000
 800c424:	40140000 	.word	0x40140000
 800c428:	9b02      	ldr	r3, [sp, #8]
 800c42a:	e780      	b.n	800c32e <_dtoa_r+0x7de>
 800c42c:	2300      	movs	r3, #0
 800c42e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c430:	e782      	b.n	800c338 <_dtoa_r+0x7e8>
 800c432:	d099      	beq.n	800c368 <_dtoa_r+0x818>
 800c434:	331c      	adds	r3, #28
 800c436:	9a08      	ldr	r2, [sp, #32]
 800c438:	441a      	add	r2, r3
 800c43a:	4498      	add	r8, r3
 800c43c:	441e      	add	r6, r3
 800c43e:	9208      	str	r2, [sp, #32]
 800c440:	e792      	b.n	800c368 <_dtoa_r+0x818>
 800c442:	4603      	mov	r3, r0
 800c444:	e7f6      	b.n	800c434 <_dtoa_r+0x8e4>
 800c446:	9b07      	ldr	r3, [sp, #28]
 800c448:	9704      	str	r7, [sp, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dc20      	bgt.n	800c490 <_dtoa_r+0x940>
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c452:	2b02      	cmp	r3, #2
 800c454:	dd1e      	ble.n	800c494 <_dtoa_r+0x944>
 800c456:	9b00      	ldr	r3, [sp, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f47f aec0 	bne.w	800c1de <_dtoa_r+0x68e>
 800c45e:	4621      	mov	r1, r4
 800c460:	2205      	movs	r2, #5
 800c462:	4658      	mov	r0, fp
 800c464:	f000 fa9a 	bl	800c99c <__multadd>
 800c468:	4601      	mov	r1, r0
 800c46a:	4604      	mov	r4, r0
 800c46c:	4648      	mov	r0, r9
 800c46e:	f000 fcf9 	bl	800ce64 <__mcmp>
 800c472:	2800      	cmp	r0, #0
 800c474:	f77f aeb3 	ble.w	800c1de <_dtoa_r+0x68e>
 800c478:	2331      	movs	r3, #49	@ 0x31
 800c47a:	4656      	mov	r6, sl
 800c47c:	f806 3b01 	strb.w	r3, [r6], #1
 800c480:	9b04      	ldr	r3, [sp, #16]
 800c482:	3301      	adds	r3, #1
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	e6ae      	b.n	800c1e6 <_dtoa_r+0x696>
 800c488:	9c07      	ldr	r4, [sp, #28]
 800c48a:	9704      	str	r7, [sp, #16]
 800c48c:	4625      	mov	r5, r4
 800c48e:	e7f3      	b.n	800c478 <_dtoa_r+0x928>
 800c490:	9b07      	ldr	r3, [sp, #28]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 8104 	beq.w	800c6a4 <_dtoa_r+0xb54>
 800c49c:	2e00      	cmp	r6, #0
 800c49e:	dd05      	ble.n	800c4ac <_dtoa_r+0x95c>
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4632      	mov	r2, r6
 800c4a4:	4658      	mov	r0, fp
 800c4a6:	f000 fc71 	bl	800cd8c <__lshift>
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d05a      	beq.n	800c568 <_dtoa_r+0xa18>
 800c4b2:	6869      	ldr	r1, [r5, #4]
 800c4b4:	4658      	mov	r0, fp
 800c4b6:	f000 fa0f 	bl	800c8d8 <_Balloc>
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	b928      	cbnz	r0, 800c4ca <_dtoa_r+0x97a>
 800c4be:	4b84      	ldr	r3, [pc, #528]	@ (800c6d0 <_dtoa_r+0xb80>)
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c4c6:	f7ff bb5a 	b.w	800bb7e <_dtoa_r+0x2e>
 800c4ca:	692a      	ldr	r2, [r5, #16]
 800c4cc:	f105 010c 	add.w	r1, r5, #12
 800c4d0:	300c      	adds	r0, #12
 800c4d2:	3202      	adds	r2, #2
 800c4d4:	0092      	lsls	r2, r2, #2
 800c4d6:	f002 f957 	bl	800e788 <memcpy>
 800c4da:	2201      	movs	r2, #1
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4658      	mov	r0, fp
 800c4e0:	f000 fc54 	bl	800cd8c <__lshift>
 800c4e4:	f10a 0301 	add.w	r3, sl, #1
 800c4e8:	462f      	mov	r7, r5
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	9307      	str	r3, [sp, #28]
 800c4ee:	9b00      	ldr	r3, [sp, #0]
 800c4f0:	4453      	add	r3, sl
 800c4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4f4:	9b02      	ldr	r3, [sp, #8]
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	4621      	mov	r1, r4
 800c500:	4648      	mov	r0, r9
 800c502:	3b01      	subs	r3, #1
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	f7ff fa95 	bl	800ba34 <quorem>
 800c50a:	4639      	mov	r1, r7
 800c50c:	9002      	str	r0, [sp, #8]
 800c50e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c512:	4648      	mov	r0, r9
 800c514:	f000 fca6 	bl	800ce64 <__mcmp>
 800c518:	462a      	mov	r2, r5
 800c51a:	9008      	str	r0, [sp, #32]
 800c51c:	4621      	mov	r1, r4
 800c51e:	4658      	mov	r0, fp
 800c520:	f000 fcbc 	bl	800ce9c <__mdiff>
 800c524:	68c2      	ldr	r2, [r0, #12]
 800c526:	4606      	mov	r6, r0
 800c528:	bb02      	cbnz	r2, 800c56c <_dtoa_r+0xa1c>
 800c52a:	4601      	mov	r1, r0
 800c52c:	4648      	mov	r0, r9
 800c52e:	f000 fc99 	bl	800ce64 <__mcmp>
 800c532:	4602      	mov	r2, r0
 800c534:	4631      	mov	r1, r6
 800c536:	4658      	mov	r0, fp
 800c538:	920e      	str	r2, [sp, #56]	@ 0x38
 800c53a:	f000 fa0d 	bl	800c958 <_Bfree>
 800c53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c540:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c542:	9e07      	ldr	r6, [sp, #28]
 800c544:	ea43 0102 	orr.w	r1, r3, r2
 800c548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54a:	4319      	orrs	r1, r3
 800c54c:	d110      	bne.n	800c570 <_dtoa_r+0xa20>
 800c54e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c552:	d029      	beq.n	800c5a8 <_dtoa_r+0xa58>
 800c554:	9b08      	ldr	r3, [sp, #32]
 800c556:	2b00      	cmp	r3, #0
 800c558:	dd02      	ble.n	800c560 <_dtoa_r+0xa10>
 800c55a:	9b02      	ldr	r3, [sp, #8]
 800c55c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c560:	9b00      	ldr	r3, [sp, #0]
 800c562:	f883 8000 	strb.w	r8, [r3]
 800c566:	e63f      	b.n	800c1e8 <_dtoa_r+0x698>
 800c568:	4628      	mov	r0, r5
 800c56a:	e7bb      	b.n	800c4e4 <_dtoa_r+0x994>
 800c56c:	2201      	movs	r2, #1
 800c56e:	e7e1      	b.n	800c534 <_dtoa_r+0x9e4>
 800c570:	9b08      	ldr	r3, [sp, #32]
 800c572:	2b00      	cmp	r3, #0
 800c574:	db04      	blt.n	800c580 <_dtoa_r+0xa30>
 800c576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c578:	430b      	orrs	r3, r1
 800c57a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c57c:	430b      	orrs	r3, r1
 800c57e:	d120      	bne.n	800c5c2 <_dtoa_r+0xa72>
 800c580:	2a00      	cmp	r2, #0
 800c582:	dded      	ble.n	800c560 <_dtoa_r+0xa10>
 800c584:	4649      	mov	r1, r9
 800c586:	2201      	movs	r2, #1
 800c588:	4658      	mov	r0, fp
 800c58a:	f000 fbff 	bl	800cd8c <__lshift>
 800c58e:	4621      	mov	r1, r4
 800c590:	4681      	mov	r9, r0
 800c592:	f000 fc67 	bl	800ce64 <__mcmp>
 800c596:	2800      	cmp	r0, #0
 800c598:	dc03      	bgt.n	800c5a2 <_dtoa_r+0xa52>
 800c59a:	d1e1      	bne.n	800c560 <_dtoa_r+0xa10>
 800c59c:	f018 0f01 	tst.w	r8, #1
 800c5a0:	d0de      	beq.n	800c560 <_dtoa_r+0xa10>
 800c5a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5a6:	d1d8      	bne.n	800c55a <_dtoa_r+0xa0a>
 800c5a8:	2339      	movs	r3, #57	@ 0x39
 800c5aa:	9a00      	ldr	r2, [sp, #0]
 800c5ac:	7013      	strb	r3, [r2, #0]
 800c5ae:	4633      	mov	r3, r6
 800c5b0:	461e      	mov	r6, r3
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c5b8:	2a39      	cmp	r2, #57	@ 0x39
 800c5ba:	d052      	beq.n	800c662 <_dtoa_r+0xb12>
 800c5bc:	3201      	adds	r2, #1
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	e612      	b.n	800c1e8 <_dtoa_r+0x698>
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	dd07      	ble.n	800c5d6 <_dtoa_r+0xa86>
 800c5c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5ca:	d0ed      	beq.n	800c5a8 <_dtoa_r+0xa58>
 800c5cc:	f108 0301 	add.w	r3, r8, #1
 800c5d0:	9a00      	ldr	r2, [sp, #0]
 800c5d2:	7013      	strb	r3, [r2, #0]
 800c5d4:	e608      	b.n	800c1e8 <_dtoa_r+0x698>
 800c5d6:	9b07      	ldr	r3, [sp, #28]
 800c5d8:	9a07      	ldr	r2, [sp, #28]
 800c5da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d028      	beq.n	800c636 <_dtoa_r+0xae6>
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	220a      	movs	r2, #10
 800c5ea:	4658      	mov	r0, fp
 800c5ec:	f000 f9d6 	bl	800c99c <__multadd>
 800c5f0:	42af      	cmp	r7, r5
 800c5f2:	4681      	mov	r9, r0
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	f04f 020a 	mov.w	r2, #10
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	4658      	mov	r0, fp
 800c600:	d107      	bne.n	800c612 <_dtoa_r+0xac2>
 800c602:	f000 f9cb 	bl	800c99c <__multadd>
 800c606:	4607      	mov	r7, r0
 800c608:	4605      	mov	r5, r0
 800c60a:	9b07      	ldr	r3, [sp, #28]
 800c60c:	3301      	adds	r3, #1
 800c60e:	9307      	str	r3, [sp, #28]
 800c610:	e774      	b.n	800c4fc <_dtoa_r+0x9ac>
 800c612:	f000 f9c3 	bl	800c99c <__multadd>
 800c616:	4629      	mov	r1, r5
 800c618:	4607      	mov	r7, r0
 800c61a:	2300      	movs	r3, #0
 800c61c:	220a      	movs	r2, #10
 800c61e:	4658      	mov	r0, fp
 800c620:	f000 f9bc 	bl	800c99c <__multadd>
 800c624:	4605      	mov	r5, r0
 800c626:	e7f0      	b.n	800c60a <_dtoa_r+0xaba>
 800c628:	9b00      	ldr	r3, [sp, #0]
 800c62a:	2700      	movs	r7, #0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	bfcc      	ite	gt
 800c630:	461e      	movgt	r6, r3
 800c632:	2601      	movle	r6, #1
 800c634:	4456      	add	r6, sl
 800c636:	4649      	mov	r1, r9
 800c638:	2201      	movs	r2, #1
 800c63a:	4658      	mov	r0, fp
 800c63c:	f000 fba6 	bl	800cd8c <__lshift>
 800c640:	4621      	mov	r1, r4
 800c642:	4681      	mov	r9, r0
 800c644:	f000 fc0e 	bl	800ce64 <__mcmp>
 800c648:	2800      	cmp	r0, #0
 800c64a:	dcb0      	bgt.n	800c5ae <_dtoa_r+0xa5e>
 800c64c:	d102      	bne.n	800c654 <_dtoa_r+0xb04>
 800c64e:	f018 0f01 	tst.w	r8, #1
 800c652:	d1ac      	bne.n	800c5ae <_dtoa_r+0xa5e>
 800c654:	4633      	mov	r3, r6
 800c656:	461e      	mov	r6, r3
 800c658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c65c:	2a30      	cmp	r2, #48	@ 0x30
 800c65e:	d0fa      	beq.n	800c656 <_dtoa_r+0xb06>
 800c660:	e5c2      	b.n	800c1e8 <_dtoa_r+0x698>
 800c662:	459a      	cmp	sl, r3
 800c664:	d1a4      	bne.n	800c5b0 <_dtoa_r+0xa60>
 800c666:	9b04      	ldr	r3, [sp, #16]
 800c668:	3301      	adds	r3, #1
 800c66a:	9304      	str	r3, [sp, #16]
 800c66c:	2331      	movs	r3, #49	@ 0x31
 800c66e:	f88a 3000 	strb.w	r3, [sl]
 800c672:	e5b9      	b.n	800c1e8 <_dtoa_r+0x698>
 800c674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c676:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c6d4 <_dtoa_r+0xb84>
 800c67a:	b11b      	cbz	r3, 800c684 <_dtoa_r+0xb34>
 800c67c:	f10a 0308 	add.w	r3, sl, #8
 800c680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	4650      	mov	r0, sl
 800c686:	b019      	add	sp, #100	@ 0x64
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68e:	2b01      	cmp	r3, #1
 800c690:	f77f ae37 	ble.w	800c302 <_dtoa_r+0x7b2>
 800c694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c696:	930a      	str	r3, [sp, #40]	@ 0x28
 800c698:	2001      	movs	r0, #1
 800c69a:	e655      	b.n	800c348 <_dtoa_r+0x7f8>
 800c69c:	9b00      	ldr	r3, [sp, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f77f aed6 	ble.w	800c450 <_dtoa_r+0x900>
 800c6a4:	4656      	mov	r6, sl
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4648      	mov	r0, r9
 800c6aa:	f7ff f9c3 	bl	800ba34 <quorem>
 800c6ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6b2:	9b00      	ldr	r3, [sp, #0]
 800c6b4:	f806 8b01 	strb.w	r8, [r6], #1
 800c6b8:	eba6 020a 	sub.w	r2, r6, sl
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	ddb3      	ble.n	800c628 <_dtoa_r+0xad8>
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	4658      	mov	r0, fp
 800c6c8:	f000 f968 	bl	800c99c <__multadd>
 800c6cc:	4681      	mov	r9, r0
 800c6ce:	e7ea      	b.n	800c6a6 <_dtoa_r+0xb56>
 800c6d0:	0800f245 	.word	0x0800f245
 800c6d4:	0800f1c9 	.word	0x0800f1c9

0800c6d8 <_free_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4605      	mov	r5, r0
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	d041      	beq.n	800c764 <_free_r+0x8c>
 800c6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e4:	1f0c      	subs	r4, r1, #4
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	bfb8      	it	lt
 800c6ea:	18e4      	addlt	r4, r4, r3
 800c6ec:	f000 f8e8 	bl	800c8c0 <__malloc_lock>
 800c6f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c768 <_free_r+0x90>)
 800c6f2:	6813      	ldr	r3, [r2, #0]
 800c6f4:	b933      	cbnz	r3, 800c704 <_free_r+0x2c>
 800c6f6:	6063      	str	r3, [r4, #4]
 800c6f8:	6014      	str	r4, [r2, #0]
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c700:	f000 b8e4 	b.w	800c8cc <__malloc_unlock>
 800c704:	42a3      	cmp	r3, r4
 800c706:	d908      	bls.n	800c71a <_free_r+0x42>
 800c708:	6820      	ldr	r0, [r4, #0]
 800c70a:	1821      	adds	r1, r4, r0
 800c70c:	428b      	cmp	r3, r1
 800c70e:	bf01      	itttt	eq
 800c710:	6819      	ldreq	r1, [r3, #0]
 800c712:	685b      	ldreq	r3, [r3, #4]
 800c714:	1809      	addeq	r1, r1, r0
 800c716:	6021      	streq	r1, [r4, #0]
 800c718:	e7ed      	b.n	800c6f6 <_free_r+0x1e>
 800c71a:	461a      	mov	r2, r3
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	b10b      	cbz	r3, 800c724 <_free_r+0x4c>
 800c720:	42a3      	cmp	r3, r4
 800c722:	d9fa      	bls.n	800c71a <_free_r+0x42>
 800c724:	6811      	ldr	r1, [r2, #0]
 800c726:	1850      	adds	r0, r2, r1
 800c728:	42a0      	cmp	r0, r4
 800c72a:	d10b      	bne.n	800c744 <_free_r+0x6c>
 800c72c:	6820      	ldr	r0, [r4, #0]
 800c72e:	4401      	add	r1, r0
 800c730:	1850      	adds	r0, r2, r1
 800c732:	6011      	str	r1, [r2, #0]
 800c734:	4283      	cmp	r3, r0
 800c736:	d1e0      	bne.n	800c6fa <_free_r+0x22>
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	4408      	add	r0, r1
 800c73e:	6053      	str	r3, [r2, #4]
 800c740:	6010      	str	r0, [r2, #0]
 800c742:	e7da      	b.n	800c6fa <_free_r+0x22>
 800c744:	d902      	bls.n	800c74c <_free_r+0x74>
 800c746:	230c      	movs	r3, #12
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	e7d6      	b.n	800c6fa <_free_r+0x22>
 800c74c:	6820      	ldr	r0, [r4, #0]
 800c74e:	1821      	adds	r1, r4, r0
 800c750:	428b      	cmp	r3, r1
 800c752:	bf02      	ittt	eq
 800c754:	6819      	ldreq	r1, [r3, #0]
 800c756:	685b      	ldreq	r3, [r3, #4]
 800c758:	1809      	addeq	r1, r1, r0
 800c75a:	6063      	str	r3, [r4, #4]
 800c75c:	bf08      	it	eq
 800c75e:	6021      	streq	r1, [r4, #0]
 800c760:	6054      	str	r4, [r2, #4]
 800c762:	e7ca      	b.n	800c6fa <_free_r+0x22>
 800c764:	bd38      	pop	{r3, r4, r5, pc}
 800c766:	bf00      	nop
 800c768:	20000600 	.word	0x20000600

0800c76c <malloc>:
 800c76c:	4b02      	ldr	r3, [pc, #8]	@ (800c778 <malloc+0xc>)
 800c76e:	4601      	mov	r1, r0
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	f000 b825 	b.w	800c7c0 <_malloc_r>
 800c776:	bf00      	nop
 800c778:	20000018 	.word	0x20000018

0800c77c <sbrk_aligned>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	4e0f      	ldr	r6, [pc, #60]	@ (800c7bc <sbrk_aligned+0x40>)
 800c780:	460c      	mov	r4, r1
 800c782:	4605      	mov	r5, r0
 800c784:	6831      	ldr	r1, [r6, #0]
 800c786:	b911      	cbnz	r1, 800c78e <sbrk_aligned+0x12>
 800c788:	f001 ffee 	bl	800e768 <_sbrk_r>
 800c78c:	6030      	str	r0, [r6, #0]
 800c78e:	4621      	mov	r1, r4
 800c790:	4628      	mov	r0, r5
 800c792:	f001 ffe9 	bl	800e768 <_sbrk_r>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	d103      	bne.n	800c7a2 <sbrk_aligned+0x26>
 800c79a:	f04f 34ff 	mov.w	r4, #4294967295
 800c79e:	4620      	mov	r0, r4
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}
 800c7a2:	1cc4      	adds	r4, r0, #3
 800c7a4:	f024 0403 	bic.w	r4, r4, #3
 800c7a8:	42a0      	cmp	r0, r4
 800c7aa:	d0f8      	beq.n	800c79e <sbrk_aligned+0x22>
 800c7ac:	1a21      	subs	r1, r4, r0
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f001 ffda 	bl	800e768 <_sbrk_r>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d1f2      	bne.n	800c79e <sbrk_aligned+0x22>
 800c7b8:	e7ef      	b.n	800c79a <sbrk_aligned+0x1e>
 800c7ba:	bf00      	nop
 800c7bc:	200005fc 	.word	0x200005fc

0800c7c0 <_malloc_r>:
 800c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c4:	1ccd      	adds	r5, r1, #3
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	f025 0503 	bic.w	r5, r5, #3
 800c7cc:	3508      	adds	r5, #8
 800c7ce:	2d0c      	cmp	r5, #12
 800c7d0:	bf38      	it	cc
 800c7d2:	250c      	movcc	r5, #12
 800c7d4:	2d00      	cmp	r5, #0
 800c7d6:	db01      	blt.n	800c7dc <_malloc_r+0x1c>
 800c7d8:	42a9      	cmp	r1, r5
 800c7da:	d904      	bls.n	800c7e6 <_malloc_r+0x26>
 800c7dc:	230c      	movs	r3, #12
 800c7de:	6033      	str	r3, [r6, #0]
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8bc <_malloc_r+0xfc>
 800c7ea:	f000 f869 	bl	800c8c0 <__malloc_lock>
 800c7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c7f2:	461c      	mov	r4, r3
 800c7f4:	bb44      	cbnz	r4, 800c848 <_malloc_r+0x88>
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7ff ffbf 	bl	800c77c <sbrk_aligned>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	4604      	mov	r4, r0
 800c802:	d158      	bne.n	800c8b6 <_malloc_r+0xf6>
 800c804:	f8d8 4000 	ldr.w	r4, [r8]
 800c808:	4627      	mov	r7, r4
 800c80a:	2f00      	cmp	r7, #0
 800c80c:	d143      	bne.n	800c896 <_malloc_r+0xd6>
 800c80e:	2c00      	cmp	r4, #0
 800c810:	d04b      	beq.n	800c8aa <_malloc_r+0xea>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	4639      	mov	r1, r7
 800c816:	4630      	mov	r0, r6
 800c818:	eb04 0903 	add.w	r9, r4, r3
 800c81c:	f001 ffa4 	bl	800e768 <_sbrk_r>
 800c820:	4581      	cmp	r9, r0
 800c822:	d142      	bne.n	800c8aa <_malloc_r+0xea>
 800c824:	6821      	ldr	r1, [r4, #0]
 800c826:	4630      	mov	r0, r6
 800c828:	1a6d      	subs	r5, r5, r1
 800c82a:	4629      	mov	r1, r5
 800c82c:	f7ff ffa6 	bl	800c77c <sbrk_aligned>
 800c830:	3001      	adds	r0, #1
 800c832:	d03a      	beq.n	800c8aa <_malloc_r+0xea>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	442b      	add	r3, r5
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	f8d8 3000 	ldr.w	r3, [r8]
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	bb62      	cbnz	r2, 800c89c <_malloc_r+0xdc>
 800c842:	f8c8 7000 	str.w	r7, [r8]
 800c846:	e00f      	b.n	800c868 <_malloc_r+0xa8>
 800c848:	6822      	ldr	r2, [r4, #0]
 800c84a:	1b52      	subs	r2, r2, r5
 800c84c:	d420      	bmi.n	800c890 <_malloc_r+0xd0>
 800c84e:	2a0b      	cmp	r2, #11
 800c850:	d917      	bls.n	800c882 <_malloc_r+0xc2>
 800c852:	1961      	adds	r1, r4, r5
 800c854:	42a3      	cmp	r3, r4
 800c856:	6025      	str	r5, [r4, #0]
 800c858:	bf18      	it	ne
 800c85a:	6059      	strne	r1, [r3, #4]
 800c85c:	6863      	ldr	r3, [r4, #4]
 800c85e:	bf08      	it	eq
 800c860:	f8c8 1000 	streq.w	r1, [r8]
 800c864:	5162      	str	r2, [r4, r5]
 800c866:	604b      	str	r3, [r1, #4]
 800c868:	4630      	mov	r0, r6
 800c86a:	f000 f82f 	bl	800c8cc <__malloc_unlock>
 800c86e:	f104 000b 	add.w	r0, r4, #11
 800c872:	1d23      	adds	r3, r4, #4
 800c874:	f020 0007 	bic.w	r0, r0, #7
 800c878:	1ac2      	subs	r2, r0, r3
 800c87a:	bf1c      	itt	ne
 800c87c:	1a1b      	subne	r3, r3, r0
 800c87e:	50a3      	strne	r3, [r4, r2]
 800c880:	e7af      	b.n	800c7e2 <_malloc_r+0x22>
 800c882:	6862      	ldr	r2, [r4, #4]
 800c884:	42a3      	cmp	r3, r4
 800c886:	bf0c      	ite	eq
 800c888:	f8c8 2000 	streq.w	r2, [r8]
 800c88c:	605a      	strne	r2, [r3, #4]
 800c88e:	e7eb      	b.n	800c868 <_malloc_r+0xa8>
 800c890:	4623      	mov	r3, r4
 800c892:	6864      	ldr	r4, [r4, #4]
 800c894:	e7ae      	b.n	800c7f4 <_malloc_r+0x34>
 800c896:	463c      	mov	r4, r7
 800c898:	687f      	ldr	r7, [r7, #4]
 800c89a:	e7b6      	b.n	800c80a <_malloc_r+0x4a>
 800c89c:	461a      	mov	r2, r3
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d1fb      	bne.n	800c89c <_malloc_r+0xdc>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	6053      	str	r3, [r2, #4]
 800c8a8:	e7de      	b.n	800c868 <_malloc_r+0xa8>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	6033      	str	r3, [r6, #0]
 800c8b0:	f000 f80c 	bl	800c8cc <__malloc_unlock>
 800c8b4:	e794      	b.n	800c7e0 <_malloc_r+0x20>
 800c8b6:	6005      	str	r5, [r0, #0]
 800c8b8:	e7d6      	b.n	800c868 <_malloc_r+0xa8>
 800c8ba:	bf00      	nop
 800c8bc:	20000600 	.word	0x20000600

0800c8c0 <__malloc_lock>:
 800c8c0:	4801      	ldr	r0, [pc, #4]	@ (800c8c8 <__malloc_lock+0x8>)
 800c8c2:	f7ff b8a0 	b.w	800ba06 <__retarget_lock_acquire_recursive>
 800c8c6:	bf00      	nop
 800c8c8:	200005f8 	.word	0x200005f8

0800c8cc <__malloc_unlock>:
 800c8cc:	4801      	ldr	r0, [pc, #4]	@ (800c8d4 <__malloc_unlock+0x8>)
 800c8ce:	f7ff b89b 	b.w	800ba08 <__retarget_lock_release_recursive>
 800c8d2:	bf00      	nop
 800c8d4:	200005f8 	.word	0x200005f8

0800c8d8 <_Balloc>:
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	69c6      	ldr	r6, [r0, #28]
 800c8dc:	4604      	mov	r4, r0
 800c8de:	460d      	mov	r5, r1
 800c8e0:	b976      	cbnz	r6, 800c900 <_Balloc+0x28>
 800c8e2:	2010      	movs	r0, #16
 800c8e4:	f7ff ff42 	bl	800c76c <malloc>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	61e0      	str	r0, [r4, #28]
 800c8ec:	b920      	cbnz	r0, 800c8f8 <_Balloc+0x20>
 800c8ee:	4b18      	ldr	r3, [pc, #96]	@ (800c950 <_Balloc+0x78>)
 800c8f0:	216b      	movs	r1, #107	@ 0x6b
 800c8f2:	4818      	ldr	r0, [pc, #96]	@ (800c954 <_Balloc+0x7c>)
 800c8f4:	f001 ff60 	bl	800e7b8 <__assert_func>
 800c8f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8fc:	6006      	str	r6, [r0, #0]
 800c8fe:	60c6      	str	r6, [r0, #12]
 800c900:	69e6      	ldr	r6, [r4, #28]
 800c902:	68f3      	ldr	r3, [r6, #12]
 800c904:	b183      	cbz	r3, 800c928 <_Balloc+0x50>
 800c906:	69e3      	ldr	r3, [r4, #28]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c90e:	b9b8      	cbnz	r0, 800c940 <_Balloc+0x68>
 800c910:	2101      	movs	r1, #1
 800c912:	4620      	mov	r0, r4
 800c914:	fa01 f605 	lsl.w	r6, r1, r5
 800c918:	1d72      	adds	r2, r6, #5
 800c91a:	0092      	lsls	r2, r2, #2
 800c91c:	f001 ff6a 	bl	800e7f4 <_calloc_r>
 800c920:	b160      	cbz	r0, 800c93c <_Balloc+0x64>
 800c922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c926:	e00e      	b.n	800c946 <_Balloc+0x6e>
 800c928:	2221      	movs	r2, #33	@ 0x21
 800c92a:	2104      	movs	r1, #4
 800c92c:	4620      	mov	r0, r4
 800c92e:	f001 ff61 	bl	800e7f4 <_calloc_r>
 800c932:	69e3      	ldr	r3, [r4, #28]
 800c934:	60f0      	str	r0, [r6, #12]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1e4      	bne.n	800c906 <_Balloc+0x2e>
 800c93c:	2000      	movs	r0, #0
 800c93e:	bd70      	pop	{r4, r5, r6, pc}
 800c940:	6802      	ldr	r2, [r0, #0]
 800c942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c946:	2300      	movs	r3, #0
 800c948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c94c:	e7f7      	b.n	800c93e <_Balloc+0x66>
 800c94e:	bf00      	nop
 800c950:	0800f1d6 	.word	0x0800f1d6
 800c954:	0800f256 	.word	0x0800f256

0800c958 <_Bfree>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	69c6      	ldr	r6, [r0, #28]
 800c95c:	4605      	mov	r5, r0
 800c95e:	460c      	mov	r4, r1
 800c960:	b976      	cbnz	r6, 800c980 <_Bfree+0x28>
 800c962:	2010      	movs	r0, #16
 800c964:	f7ff ff02 	bl	800c76c <malloc>
 800c968:	4602      	mov	r2, r0
 800c96a:	61e8      	str	r0, [r5, #28]
 800c96c:	b920      	cbnz	r0, 800c978 <_Bfree+0x20>
 800c96e:	4b09      	ldr	r3, [pc, #36]	@ (800c994 <_Bfree+0x3c>)
 800c970:	218f      	movs	r1, #143	@ 0x8f
 800c972:	4809      	ldr	r0, [pc, #36]	@ (800c998 <_Bfree+0x40>)
 800c974:	f001 ff20 	bl	800e7b8 <__assert_func>
 800c978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c97c:	6006      	str	r6, [r0, #0]
 800c97e:	60c6      	str	r6, [r0, #12]
 800c980:	b13c      	cbz	r4, 800c992 <_Bfree+0x3a>
 800c982:	69eb      	ldr	r3, [r5, #28]
 800c984:	6862      	ldr	r2, [r4, #4]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c98c:	6021      	str	r1, [r4, #0]
 800c98e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c992:	bd70      	pop	{r4, r5, r6, pc}
 800c994:	0800f1d6 	.word	0x0800f1d6
 800c998:	0800f256 	.word	0x0800f256

0800c99c <__multadd>:
 800c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a0:	f101 0c14 	add.w	ip, r1, #20
 800c9a4:	4607      	mov	r7, r0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	461e      	mov	r6, r3
 800c9aa:	690d      	ldr	r5, [r1, #16]
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	f8dc 3000 	ldr.w	r3, [ip]
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	b299      	uxth	r1, r3
 800c9b6:	4285      	cmp	r5, r0
 800c9b8:	fb02 6101 	mla	r1, r2, r1, r6
 800c9bc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c9c4:	b289      	uxth	r1, r1
 800c9c6:	fb02 3306 	mla	r3, r2, r6, r3
 800c9ca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9d2:	f84c 1b04 	str.w	r1, [ip], #4
 800c9d6:	dcea      	bgt.n	800c9ae <__multadd+0x12>
 800c9d8:	b30e      	cbz	r6, 800ca1e <__multadd+0x82>
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	42ab      	cmp	r3, r5
 800c9de:	dc19      	bgt.n	800ca14 <__multadd+0x78>
 800c9e0:	6861      	ldr	r1, [r4, #4]
 800c9e2:	4638      	mov	r0, r7
 800c9e4:	3101      	adds	r1, #1
 800c9e6:	f7ff ff77 	bl	800c8d8 <_Balloc>
 800c9ea:	4680      	mov	r8, r0
 800c9ec:	b928      	cbnz	r0, 800c9fa <__multadd+0x5e>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800ca24 <__multadd+0x88>)
 800c9f2:	21ba      	movs	r1, #186	@ 0xba
 800c9f4:	480c      	ldr	r0, [pc, #48]	@ (800ca28 <__multadd+0x8c>)
 800c9f6:	f001 fedf 	bl	800e7b8 <__assert_func>
 800c9fa:	6922      	ldr	r2, [r4, #16]
 800c9fc:	f104 010c 	add.w	r1, r4, #12
 800ca00:	300c      	adds	r0, #12
 800ca02:	3202      	adds	r2, #2
 800ca04:	0092      	lsls	r2, r2, #2
 800ca06:	f001 febf 	bl	800e788 <memcpy>
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4644      	mov	r4, r8
 800ca0e:	4638      	mov	r0, r7
 800ca10:	f7ff ffa2 	bl	800c958 <_Bfree>
 800ca14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca18:	3501      	adds	r5, #1
 800ca1a:	615e      	str	r6, [r3, #20]
 800ca1c:	6125      	str	r5, [r4, #16]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca24:	0800f245 	.word	0x0800f245
 800ca28:	0800f256 	.word	0x0800f256

0800ca2c <__s2b>:
 800ca2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca30:	4615      	mov	r5, r2
 800ca32:	461f      	mov	r7, r3
 800ca34:	2209      	movs	r2, #9
 800ca36:	3308      	adds	r3, #8
 800ca38:	460c      	mov	r4, r1
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca42:	2201      	movs	r2, #1
 800ca44:	429a      	cmp	r2, r3
 800ca46:	db09      	blt.n	800ca5c <__s2b+0x30>
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f7ff ff45 	bl	800c8d8 <_Balloc>
 800ca4e:	b940      	cbnz	r0, 800ca62 <__s2b+0x36>
 800ca50:	4602      	mov	r2, r0
 800ca52:	4b19      	ldr	r3, [pc, #100]	@ (800cab8 <__s2b+0x8c>)
 800ca54:	21d3      	movs	r1, #211	@ 0xd3
 800ca56:	4819      	ldr	r0, [pc, #100]	@ (800cabc <__s2b+0x90>)
 800ca58:	f001 feae 	bl	800e7b8 <__assert_func>
 800ca5c:	0052      	lsls	r2, r2, #1
 800ca5e:	3101      	adds	r1, #1
 800ca60:	e7f0      	b.n	800ca44 <__s2b+0x18>
 800ca62:	9b08      	ldr	r3, [sp, #32]
 800ca64:	2d09      	cmp	r5, #9
 800ca66:	6143      	str	r3, [r0, #20]
 800ca68:	f04f 0301 	mov.w	r3, #1
 800ca6c:	6103      	str	r3, [r0, #16]
 800ca6e:	dd16      	ble.n	800ca9e <__s2b+0x72>
 800ca70:	f104 0909 	add.w	r9, r4, #9
 800ca74:	442c      	add	r4, r5
 800ca76:	46c8      	mov	r8, r9
 800ca78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca7c:	4601      	mov	r1, r0
 800ca7e:	220a      	movs	r2, #10
 800ca80:	4630      	mov	r0, r6
 800ca82:	3b30      	subs	r3, #48	@ 0x30
 800ca84:	f7ff ff8a 	bl	800c99c <__multadd>
 800ca88:	45a0      	cmp	r8, r4
 800ca8a:	d1f5      	bne.n	800ca78 <__s2b+0x4c>
 800ca8c:	f1a5 0408 	sub.w	r4, r5, #8
 800ca90:	444c      	add	r4, r9
 800ca92:	1b2d      	subs	r5, r5, r4
 800ca94:	1963      	adds	r3, r4, r5
 800ca96:	42bb      	cmp	r3, r7
 800ca98:	db04      	blt.n	800caa4 <__s2b+0x78>
 800ca9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca9e:	340a      	adds	r4, #10
 800caa0:	2509      	movs	r5, #9
 800caa2:	e7f6      	b.n	800ca92 <__s2b+0x66>
 800caa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800caa8:	4601      	mov	r1, r0
 800caaa:	220a      	movs	r2, #10
 800caac:	4630      	mov	r0, r6
 800caae:	3b30      	subs	r3, #48	@ 0x30
 800cab0:	f7ff ff74 	bl	800c99c <__multadd>
 800cab4:	e7ee      	b.n	800ca94 <__s2b+0x68>
 800cab6:	bf00      	nop
 800cab8:	0800f245 	.word	0x0800f245
 800cabc:	0800f256 	.word	0x0800f256

0800cac0 <__hi0bits>:
 800cac0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cac4:	4603      	mov	r3, r0
 800cac6:	bf36      	itet	cc
 800cac8:	0403      	lslcc	r3, r0, #16
 800caca:	2000      	movcs	r0, #0
 800cacc:	2010      	movcc	r0, #16
 800cace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cad2:	bf3c      	itt	cc
 800cad4:	021b      	lslcc	r3, r3, #8
 800cad6:	3008      	addcc	r0, #8
 800cad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cadc:	bf3c      	itt	cc
 800cade:	011b      	lslcc	r3, r3, #4
 800cae0:	3004      	addcc	r0, #4
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cae6:	bf3c      	itt	cc
 800cae8:	009b      	lslcc	r3, r3, #2
 800caea:	3002      	addcc	r0, #2
 800caec:	2b00      	cmp	r3, #0
 800caee:	db05      	blt.n	800cafc <__hi0bits+0x3c>
 800caf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800caf4:	f100 0001 	add.w	r0, r0, #1
 800caf8:	bf08      	it	eq
 800cafa:	2020      	moveq	r0, #32
 800cafc:	4770      	bx	lr

0800cafe <__lo0bits>:
 800cafe:	6803      	ldr	r3, [r0, #0]
 800cb00:	4602      	mov	r2, r0
 800cb02:	f013 0007 	ands.w	r0, r3, #7
 800cb06:	d00b      	beq.n	800cb20 <__lo0bits+0x22>
 800cb08:	07d9      	lsls	r1, r3, #31
 800cb0a:	d421      	bmi.n	800cb50 <__lo0bits+0x52>
 800cb0c:	0798      	lsls	r0, r3, #30
 800cb0e:	bf47      	ittee	mi
 800cb10:	085b      	lsrmi	r3, r3, #1
 800cb12:	2001      	movmi	r0, #1
 800cb14:	089b      	lsrpl	r3, r3, #2
 800cb16:	2002      	movpl	r0, #2
 800cb18:	bf4c      	ite	mi
 800cb1a:	6013      	strmi	r3, [r2, #0]
 800cb1c:	6013      	strpl	r3, [r2, #0]
 800cb1e:	4770      	bx	lr
 800cb20:	b299      	uxth	r1, r3
 800cb22:	b909      	cbnz	r1, 800cb28 <__lo0bits+0x2a>
 800cb24:	0c1b      	lsrs	r3, r3, #16
 800cb26:	2010      	movs	r0, #16
 800cb28:	b2d9      	uxtb	r1, r3
 800cb2a:	b909      	cbnz	r1, 800cb30 <__lo0bits+0x32>
 800cb2c:	3008      	adds	r0, #8
 800cb2e:	0a1b      	lsrs	r3, r3, #8
 800cb30:	0719      	lsls	r1, r3, #28
 800cb32:	bf04      	itt	eq
 800cb34:	091b      	lsreq	r3, r3, #4
 800cb36:	3004      	addeq	r0, #4
 800cb38:	0799      	lsls	r1, r3, #30
 800cb3a:	bf04      	itt	eq
 800cb3c:	089b      	lsreq	r3, r3, #2
 800cb3e:	3002      	addeq	r0, #2
 800cb40:	07d9      	lsls	r1, r3, #31
 800cb42:	d403      	bmi.n	800cb4c <__lo0bits+0x4e>
 800cb44:	085b      	lsrs	r3, r3, #1
 800cb46:	f100 0001 	add.w	r0, r0, #1
 800cb4a:	d003      	beq.n	800cb54 <__lo0bits+0x56>
 800cb4c:	6013      	str	r3, [r2, #0]
 800cb4e:	4770      	bx	lr
 800cb50:	2000      	movs	r0, #0
 800cb52:	4770      	bx	lr
 800cb54:	2020      	movs	r0, #32
 800cb56:	4770      	bx	lr

0800cb58 <__i2b>:
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	f7ff febb 	bl	800c8d8 <_Balloc>
 800cb62:	4602      	mov	r2, r0
 800cb64:	b928      	cbnz	r0, 800cb72 <__i2b+0x1a>
 800cb66:	4b05      	ldr	r3, [pc, #20]	@ (800cb7c <__i2b+0x24>)
 800cb68:	f240 1145 	movw	r1, #325	@ 0x145
 800cb6c:	4804      	ldr	r0, [pc, #16]	@ (800cb80 <__i2b+0x28>)
 800cb6e:	f001 fe23 	bl	800e7b8 <__assert_func>
 800cb72:	2301      	movs	r3, #1
 800cb74:	6144      	str	r4, [r0, #20]
 800cb76:	6103      	str	r3, [r0, #16]
 800cb78:	bd10      	pop	{r4, pc}
 800cb7a:	bf00      	nop
 800cb7c:	0800f245 	.word	0x0800f245
 800cb80:	0800f256 	.word	0x0800f256

0800cb84 <__multiply>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	4614      	mov	r4, r2
 800cb8a:	690a      	ldr	r2, [r1, #16]
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	b085      	sub	sp, #20
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	bfa2      	ittt	ge
 800cb96:	4623      	movge	r3, r4
 800cb98:	460c      	movge	r4, r1
 800cb9a:	461f      	movge	r7, r3
 800cb9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cba6:	6861      	ldr	r1, [r4, #4]
 800cba8:	eb0a 0609 	add.w	r6, sl, r9
 800cbac:	42b3      	cmp	r3, r6
 800cbae:	bfb8      	it	lt
 800cbb0:	3101      	addlt	r1, #1
 800cbb2:	f7ff fe91 	bl	800c8d8 <_Balloc>
 800cbb6:	b930      	cbnz	r0, 800cbc6 <__multiply+0x42>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	4b45      	ldr	r3, [pc, #276]	@ (800ccd0 <__multiply+0x14c>)
 800cbbc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbc0:	4844      	ldr	r0, [pc, #272]	@ (800ccd4 <__multiply+0x150>)
 800cbc2:	f001 fdf9 	bl	800e7b8 <__assert_func>
 800cbc6:	f100 0514 	add.w	r5, r0, #20
 800cbca:	2200      	movs	r2, #0
 800cbcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbd0:	462b      	mov	r3, r5
 800cbd2:	4543      	cmp	r3, r8
 800cbd4:	d321      	bcc.n	800cc1a <__multiply+0x96>
 800cbd6:	f107 0114 	add.w	r1, r7, #20
 800cbda:	f104 0214 	add.w	r2, r4, #20
 800cbde:	f104 0715 	add.w	r7, r4, #21
 800cbe2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbe6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbea:	9302      	str	r3, [sp, #8]
 800cbec:	1b13      	subs	r3, r2, r4
 800cbee:	3b15      	subs	r3, #21
 800cbf0:	f023 0303 	bic.w	r3, r3, #3
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	42ba      	cmp	r2, r7
 800cbf8:	bf38      	it	cc
 800cbfa:	2304      	movcc	r3, #4
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	9b02      	ldr	r3, [sp, #8]
 800cc00:	9103      	str	r1, [sp, #12]
 800cc02:	428b      	cmp	r3, r1
 800cc04:	d80c      	bhi.n	800cc20 <__multiply+0x9c>
 800cc06:	2e00      	cmp	r6, #0
 800cc08:	dd03      	ble.n	800cc12 <__multiply+0x8e>
 800cc0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d05b      	beq.n	800ccca <__multiply+0x146>
 800cc12:	6106      	str	r6, [r0, #16]
 800cc14:	b005      	add	sp, #20
 800cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1a:	f843 2b04 	str.w	r2, [r3], #4
 800cc1e:	e7d8      	b.n	800cbd2 <__multiply+0x4e>
 800cc20:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc24:	f1ba 0f00 	cmp.w	sl, #0
 800cc28:	d024      	beq.n	800cc74 <__multiply+0xf0>
 800cc2a:	f104 0e14 	add.w	lr, r4, #20
 800cc2e:	46a9      	mov	r9, r5
 800cc30:	f04f 0c00 	mov.w	ip, #0
 800cc34:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc38:	f8d9 3000 	ldr.w	r3, [r9]
 800cc3c:	fa1f fb87 	uxth.w	fp, r7
 800cc40:	4572      	cmp	r2, lr
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc4c:	f8d9 7000 	ldr.w	r7, [r9]
 800cc50:	4463      	add	r3, ip
 800cc52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc56:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc68:	f849 3b04 	str.w	r3, [r9], #4
 800cc6c:	d8e2      	bhi.n	800cc34 <__multiply+0xb0>
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	f845 c003 	str.w	ip, [r5, r3]
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	3104      	adds	r1, #4
 800cc78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc7c:	f1b9 0f00 	cmp.w	r9, #0
 800cc80:	d021      	beq.n	800ccc6 <__multiply+0x142>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	f104 0c14 	add.w	ip, r4, #20
 800cc88:	46ae      	mov	lr, r5
 800cc8a:	f04f 0a00 	mov.w	sl, #0
 800cc8e:	f8bc b000 	ldrh.w	fp, [ip]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cc98:	fb09 770b 	mla	r7, r9, fp, r7
 800cc9c:	4457      	add	r7, sl
 800cc9e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cca2:	f84e 3b04 	str.w	r3, [lr], #4
 800cca6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ccaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccae:	f8be 3000 	ldrh.w	r3, [lr]
 800ccb2:	4562      	cmp	r2, ip
 800ccb4:	fb09 330a 	mla	r3, r9, sl, r3
 800ccb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ccbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccc0:	d8e5      	bhi.n	800cc8e <__multiply+0x10a>
 800ccc2:	9f01      	ldr	r7, [sp, #4]
 800ccc4:	51eb      	str	r3, [r5, r7]
 800ccc6:	3504      	adds	r5, #4
 800ccc8:	e799      	b.n	800cbfe <__multiply+0x7a>
 800ccca:	3e01      	subs	r6, #1
 800cccc:	e79b      	b.n	800cc06 <__multiply+0x82>
 800ccce:	bf00      	nop
 800ccd0:	0800f245 	.word	0x0800f245
 800ccd4:	0800f256 	.word	0x0800f256

0800ccd8 <__pow5mult>:
 800ccd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccdc:	4615      	mov	r5, r2
 800ccde:	f012 0203 	ands.w	r2, r2, #3
 800cce2:	4607      	mov	r7, r0
 800cce4:	460e      	mov	r6, r1
 800cce6:	d007      	beq.n	800ccf8 <__pow5mult+0x20>
 800cce8:	3a01      	subs	r2, #1
 800ccea:	4c25      	ldr	r4, [pc, #148]	@ (800cd80 <__pow5mult+0xa8>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccf2:	f7ff fe53 	bl	800c99c <__multadd>
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	10ad      	asrs	r5, r5, #2
 800ccfa:	d03d      	beq.n	800cd78 <__pow5mult+0xa0>
 800ccfc:	69fc      	ldr	r4, [r7, #28]
 800ccfe:	b97c      	cbnz	r4, 800cd20 <__pow5mult+0x48>
 800cd00:	2010      	movs	r0, #16
 800cd02:	f7ff fd33 	bl	800c76c <malloc>
 800cd06:	4602      	mov	r2, r0
 800cd08:	61f8      	str	r0, [r7, #28]
 800cd0a:	b928      	cbnz	r0, 800cd18 <__pow5mult+0x40>
 800cd0c:	4b1d      	ldr	r3, [pc, #116]	@ (800cd84 <__pow5mult+0xac>)
 800cd0e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd12:	481d      	ldr	r0, [pc, #116]	@ (800cd88 <__pow5mult+0xb0>)
 800cd14:	f001 fd50 	bl	800e7b8 <__assert_func>
 800cd18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd1c:	6004      	str	r4, [r0, #0]
 800cd1e:	60c4      	str	r4, [r0, #12]
 800cd20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd28:	b94c      	cbnz	r4, 800cd3e <__pow5mult+0x66>
 800cd2a:	f240 2171 	movw	r1, #625	@ 0x271
 800cd2e:	4638      	mov	r0, r7
 800cd30:	f7ff ff12 	bl	800cb58 <__i2b>
 800cd34:	2300      	movs	r3, #0
 800cd36:	4604      	mov	r4, r0
 800cd38:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd3c:	6003      	str	r3, [r0, #0]
 800cd3e:	f04f 0900 	mov.w	r9, #0
 800cd42:	07eb      	lsls	r3, r5, #31
 800cd44:	d50a      	bpl.n	800cd5c <__pow5mult+0x84>
 800cd46:	4631      	mov	r1, r6
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	f7ff ff1a 	bl	800cb84 <__multiply>
 800cd50:	4680      	mov	r8, r0
 800cd52:	4631      	mov	r1, r6
 800cd54:	4638      	mov	r0, r7
 800cd56:	4646      	mov	r6, r8
 800cd58:	f7ff fdfe 	bl	800c958 <_Bfree>
 800cd5c:	106d      	asrs	r5, r5, #1
 800cd5e:	d00b      	beq.n	800cd78 <__pow5mult+0xa0>
 800cd60:	6820      	ldr	r0, [r4, #0]
 800cd62:	b938      	cbnz	r0, 800cd74 <__pow5mult+0x9c>
 800cd64:	4622      	mov	r2, r4
 800cd66:	4621      	mov	r1, r4
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f7ff ff0b 	bl	800cb84 <__multiply>
 800cd6e:	6020      	str	r0, [r4, #0]
 800cd70:	f8c0 9000 	str.w	r9, [r0]
 800cd74:	4604      	mov	r4, r0
 800cd76:	e7e4      	b.n	800cd42 <__pow5mult+0x6a>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd7e:	bf00      	nop
 800cd80:	0800f2b0 	.word	0x0800f2b0
 800cd84:	0800f1d6 	.word	0x0800f1d6
 800cd88:	0800f256 	.word	0x0800f256

0800cd8c <__lshift>:
 800cd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd90:	460c      	mov	r4, r1
 800cd92:	4607      	mov	r7, r0
 800cd94:	4691      	mov	r9, r2
 800cd96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	6849      	ldr	r1, [r1, #4]
 800cd9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	f108 0601 	add.w	r6, r8, #1
 800cda8:	42b3      	cmp	r3, r6
 800cdaa:	db0b      	blt.n	800cdc4 <__lshift+0x38>
 800cdac:	4638      	mov	r0, r7
 800cdae:	f7ff fd93 	bl	800c8d8 <_Balloc>
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	b948      	cbnz	r0, 800cdca <__lshift+0x3e>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	4b28      	ldr	r3, [pc, #160]	@ (800ce5c <__lshift+0xd0>)
 800cdba:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cdbe:	4828      	ldr	r0, [pc, #160]	@ (800ce60 <__lshift+0xd4>)
 800cdc0:	f001 fcfa 	bl	800e7b8 <__assert_func>
 800cdc4:	3101      	adds	r1, #1
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	e7ee      	b.n	800cda8 <__lshift+0x1c>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f100 0114 	add.w	r1, r0, #20
 800cdd0:	f100 0210 	add.w	r2, r0, #16
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	4553      	cmp	r3, sl
 800cdd8:	db33      	blt.n	800ce42 <__lshift+0xb6>
 800cdda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdde:	f104 0314 	add.w	r3, r4, #20
 800cde2:	6920      	ldr	r0, [r4, #16]
 800cde4:	f019 091f 	ands.w	r9, r9, #31
 800cde8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdf0:	d02b      	beq.n	800ce4a <__lshift+0xbe>
 800cdf2:	f1c9 0e20 	rsb	lr, r9, #32
 800cdf6:	468a      	mov	sl, r1
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	6818      	ldr	r0, [r3, #0]
 800cdfc:	fa00 f009 	lsl.w	r0, r0, r9
 800ce00:	4310      	orrs	r0, r2
 800ce02:	f84a 0b04 	str.w	r0, [sl], #4
 800ce06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce0a:	459c      	cmp	ip, r3
 800ce0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce10:	d8f3      	bhi.n	800cdfa <__lshift+0x6e>
 800ce12:	ebac 0304 	sub.w	r3, ip, r4
 800ce16:	f104 0015 	add.w	r0, r4, #21
 800ce1a:	3b15      	subs	r3, #21
 800ce1c:	f023 0303 	bic.w	r3, r3, #3
 800ce20:	3304      	adds	r3, #4
 800ce22:	4584      	cmp	ip, r0
 800ce24:	bf38      	it	cc
 800ce26:	2304      	movcc	r3, #4
 800ce28:	50ca      	str	r2, [r1, r3]
 800ce2a:	b10a      	cbz	r2, 800ce30 <__lshift+0xa4>
 800ce2c:	f108 0602 	add.w	r6, r8, #2
 800ce30:	3e01      	subs	r6, #1
 800ce32:	4638      	mov	r0, r7
 800ce34:	4621      	mov	r1, r4
 800ce36:	612e      	str	r6, [r5, #16]
 800ce38:	f7ff fd8e 	bl	800c958 <_Bfree>
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce42:	3301      	adds	r3, #1
 800ce44:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce48:	e7c5      	b.n	800cdd6 <__lshift+0x4a>
 800ce4a:	3904      	subs	r1, #4
 800ce4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce50:	459c      	cmp	ip, r3
 800ce52:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce56:	d8f9      	bhi.n	800ce4c <__lshift+0xc0>
 800ce58:	e7ea      	b.n	800ce30 <__lshift+0xa4>
 800ce5a:	bf00      	nop
 800ce5c:	0800f245 	.word	0x0800f245
 800ce60:	0800f256 	.word	0x0800f256

0800ce64 <__mcmp>:
 800ce64:	4603      	mov	r3, r0
 800ce66:	690a      	ldr	r2, [r1, #16]
 800ce68:	6900      	ldr	r0, [r0, #16]
 800ce6a:	1a80      	subs	r0, r0, r2
 800ce6c:	b530      	push	{r4, r5, lr}
 800ce6e:	d10e      	bne.n	800ce8e <__mcmp+0x2a>
 800ce70:	3314      	adds	r3, #20
 800ce72:	3114      	adds	r1, #20
 800ce74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce84:	4295      	cmp	r5, r2
 800ce86:	d003      	beq.n	800ce90 <__mcmp+0x2c>
 800ce88:	d205      	bcs.n	800ce96 <__mcmp+0x32>
 800ce8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8e:	bd30      	pop	{r4, r5, pc}
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	d3f3      	bcc.n	800ce7c <__mcmp+0x18>
 800ce94:	e7fb      	b.n	800ce8e <__mcmp+0x2a>
 800ce96:	2001      	movs	r0, #1
 800ce98:	e7f9      	b.n	800ce8e <__mcmp+0x2a>
	...

0800ce9c <__mdiff>:
 800ce9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea0:	4689      	mov	r9, r1
 800cea2:	4606      	mov	r6, r0
 800cea4:	4611      	mov	r1, r2
 800cea6:	4614      	mov	r4, r2
 800cea8:	4648      	mov	r0, r9
 800ceaa:	f7ff ffdb 	bl	800ce64 <__mcmp>
 800ceae:	1e05      	subs	r5, r0, #0
 800ceb0:	d112      	bne.n	800ced8 <__mdiff+0x3c>
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f7ff fd0f 	bl	800c8d8 <_Balloc>
 800ceba:	4602      	mov	r2, r0
 800cebc:	b928      	cbnz	r0, 800ceca <__mdiff+0x2e>
 800cebe:	4b41      	ldr	r3, [pc, #260]	@ (800cfc4 <__mdiff+0x128>)
 800cec0:	f240 2137 	movw	r1, #567	@ 0x237
 800cec4:	4840      	ldr	r0, [pc, #256]	@ (800cfc8 <__mdiff+0x12c>)
 800cec6:	f001 fc77 	bl	800e7b8 <__assert_func>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ced0:	4610      	mov	r0, r2
 800ced2:	b003      	add	sp, #12
 800ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced8:	bfbc      	itt	lt
 800ceda:	464b      	movlt	r3, r9
 800cedc:	46a1      	movlt	r9, r4
 800cede:	4630      	mov	r0, r6
 800cee0:	bfb8      	it	lt
 800cee2:	2501      	movlt	r5, #1
 800cee4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cee8:	bfb4      	ite	lt
 800ceea:	461c      	movlt	r4, r3
 800ceec:	2500      	movge	r5, #0
 800ceee:	f7ff fcf3 	bl	800c8d8 <_Balloc>
 800cef2:	4602      	mov	r2, r0
 800cef4:	b918      	cbnz	r0, 800cefe <__mdiff+0x62>
 800cef6:	4b33      	ldr	r3, [pc, #204]	@ (800cfc4 <__mdiff+0x128>)
 800cef8:	f240 2145 	movw	r1, #581	@ 0x245
 800cefc:	e7e2      	b.n	800cec4 <__mdiff+0x28>
 800cefe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf02:	f104 0e14 	add.w	lr, r4, #20
 800cf06:	6926      	ldr	r6, [r4, #16]
 800cf08:	f100 0b14 	add.w	fp, r0, #20
 800cf0c:	60c5      	str	r5, [r0, #12]
 800cf0e:	f109 0514 	add.w	r5, r9, #20
 800cf12:	f109 0310 	add.w	r3, r9, #16
 800cf16:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf1a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf1e:	46d9      	mov	r9, fp
 800cf20:	f04f 0c00 	mov.w	ip, #0
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	9b01      	ldr	r3, [sp, #4]
 800cf28:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf2c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf30:	4576      	cmp	r6, lr
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	fa1f f38a 	uxth.w	r3, sl
 800cf38:	4619      	mov	r1, r3
 800cf3a:	b283      	uxth	r3, r0
 800cf3c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800cf40:	eba1 0303 	sub.w	r3, r1, r3
 800cf44:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf48:	4463      	add	r3, ip
 800cf4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf58:	f849 3b04 	str.w	r3, [r9], #4
 800cf5c:	d8e3      	bhi.n	800cf26 <__mdiff+0x8a>
 800cf5e:	1b33      	subs	r3, r6, r4
 800cf60:	3415      	adds	r4, #21
 800cf62:	3b15      	subs	r3, #21
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3304      	adds	r3, #4
 800cf6a:	42a6      	cmp	r6, r4
 800cf6c:	bf38      	it	cc
 800cf6e:	2304      	movcc	r3, #4
 800cf70:	441d      	add	r5, r3
 800cf72:	445b      	add	r3, fp
 800cf74:	462c      	mov	r4, r5
 800cf76:	461e      	mov	r6, r3
 800cf78:	4544      	cmp	r4, r8
 800cf7a:	d30e      	bcc.n	800cf9a <__mdiff+0xfe>
 800cf7c:	f108 0103 	add.w	r1, r8, #3
 800cf80:	1b49      	subs	r1, r1, r5
 800cf82:	3d03      	subs	r5, #3
 800cf84:	f021 0103 	bic.w	r1, r1, #3
 800cf88:	45a8      	cmp	r8, r5
 800cf8a:	bf38      	it	cc
 800cf8c:	2100      	movcc	r1, #0
 800cf8e:	440b      	add	r3, r1
 800cf90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf94:	b199      	cbz	r1, 800cfbe <__mdiff+0x122>
 800cf96:	6117      	str	r7, [r2, #16]
 800cf98:	e79a      	b.n	800ced0 <__mdiff+0x34>
 800cf9a:	f854 1b04 	ldr.w	r1, [r4], #4
 800cf9e:	46e6      	mov	lr, ip
 800cfa0:	fa1f fc81 	uxth.w	ip, r1
 800cfa4:	0c08      	lsrs	r0, r1, #16
 800cfa6:	4471      	add	r1, lr
 800cfa8:	44f4      	add	ip, lr
 800cfaa:	b289      	uxth	r1, r1
 800cfac:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cfb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfb8:	f846 1b04 	str.w	r1, [r6], #4
 800cfbc:	e7dc      	b.n	800cf78 <__mdiff+0xdc>
 800cfbe:	3f01      	subs	r7, #1
 800cfc0:	e7e6      	b.n	800cf90 <__mdiff+0xf4>
 800cfc2:	bf00      	nop
 800cfc4:	0800f245 	.word	0x0800f245
 800cfc8:	0800f256 	.word	0x0800f256

0800cfcc <__ulp>:
 800cfcc:	b082      	sub	sp, #8
 800cfce:	4b11      	ldr	r3, [pc, #68]	@ (800d014 <__ulp+0x48>)
 800cfd0:	ed8d 0b00 	vstr	d0, [sp]
 800cfd4:	9a01      	ldr	r2, [sp, #4]
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dc08      	bgt.n	800cff2 <__ulp+0x26>
 800cfe0:	425b      	negs	r3, r3
 800cfe2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cfe6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cfea:	da04      	bge.n	800cff6 <__ulp+0x2a>
 800cfec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cff0:	4113      	asrs	r3, r2
 800cff2:	2200      	movs	r2, #0
 800cff4:	e008      	b.n	800d008 <__ulp+0x3c>
 800cff6:	f1a2 0314 	sub.w	r3, r2, #20
 800cffa:	2b1e      	cmp	r3, #30
 800cffc:	bfd6      	itet	le
 800cffe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d002:	2201      	movgt	r2, #1
 800d004:	40da      	lsrle	r2, r3
 800d006:	2300      	movs	r3, #0
 800d008:	4619      	mov	r1, r3
 800d00a:	4610      	mov	r0, r2
 800d00c:	ec41 0b10 	vmov	d0, r0, r1
 800d010:	b002      	add	sp, #8
 800d012:	4770      	bx	lr
 800d014:	7ff00000 	.word	0x7ff00000

0800d018 <__b2d>:
 800d018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01c:	6906      	ldr	r6, [r0, #16]
 800d01e:	f100 0814 	add.w	r8, r0, #20
 800d022:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d026:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d02a:	1f37      	subs	r7, r6, #4
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7ff fd47 	bl	800cac0 <__hi0bits>
 800d032:	f1c0 0320 	rsb	r3, r0, #32
 800d036:	280a      	cmp	r0, #10
 800d038:	600b      	str	r3, [r1, #0]
 800d03a:	491d      	ldr	r1, [pc, #116]	@ (800d0b0 <__b2d+0x98>)
 800d03c:	dc16      	bgt.n	800d06c <__b2d+0x54>
 800d03e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d042:	45b8      	cmp	r8, r7
 800d044:	f100 0015 	add.w	r0, r0, #21
 800d048:	fa22 f30c 	lsr.w	r3, r2, ip
 800d04c:	fa02 f000 	lsl.w	r0, r2, r0
 800d050:	ea43 0501 	orr.w	r5, r3, r1
 800d054:	bf34      	ite	cc
 800d056:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d05a:	2300      	movcs	r3, #0
 800d05c:	fa23 f30c 	lsr.w	r3, r3, ip
 800d060:	4303      	orrs	r3, r0
 800d062:	461c      	mov	r4, r3
 800d064:	ec45 4b10 	vmov	d0, r4, r5
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	45b8      	cmp	r8, r7
 800d06e:	bf3a      	itte	cc
 800d070:	f1a6 0708 	subcc.w	r7, r6, #8
 800d074:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d078:	2300      	movcs	r3, #0
 800d07a:	380b      	subs	r0, #11
 800d07c:	d014      	beq.n	800d0a8 <__b2d+0x90>
 800d07e:	f1c0 0120 	rsb	r1, r0, #32
 800d082:	4082      	lsls	r2, r0
 800d084:	4547      	cmp	r7, r8
 800d086:	fa23 f401 	lsr.w	r4, r3, r1
 800d08a:	fa03 f300 	lsl.w	r3, r3, r0
 800d08e:	ea42 0204 	orr.w	r2, r2, r4
 800d092:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d096:	bf8c      	ite	hi
 800d098:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d09c:	2200      	movls	r2, #0
 800d09e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d0a2:	40ca      	lsrs	r2, r1
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	e7dc      	b.n	800d062 <__b2d+0x4a>
 800d0a8:	ea42 0501 	orr.w	r5, r2, r1
 800d0ac:	e7d9      	b.n	800d062 <__b2d+0x4a>
 800d0ae:	bf00      	nop
 800d0b0:	3ff00000 	.word	0x3ff00000

0800d0b4 <__d2b>:
 800d0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0b8:	460f      	mov	r7, r1
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	4616      	mov	r6, r2
 800d0be:	ec59 8b10 	vmov	r8, r9, d0
 800d0c2:	f7ff fc09 	bl	800c8d8 <_Balloc>
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	b930      	cbnz	r0, 800d0d8 <__d2b+0x24>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	4b23      	ldr	r3, [pc, #140]	@ (800d15c <__d2b+0xa8>)
 800d0ce:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0d2:	4823      	ldr	r0, [pc, #140]	@ (800d160 <__d2b+0xac>)
 800d0d4:	f001 fb70 	bl	800e7b8 <__assert_func>
 800d0d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0e0:	b10d      	cbz	r5, 800d0e6 <__d2b+0x32>
 800d0e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0ec:	d023      	beq.n	800d136 <__d2b+0x82>
 800d0ee:	4668      	mov	r0, sp
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	f7ff fd04 	bl	800cafe <__lo0bits>
 800d0f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0fa:	b1d0      	cbz	r0, 800d132 <__d2b+0x7e>
 800d0fc:	f1c0 0320 	rsb	r3, r0, #32
 800d100:	fa02 f303 	lsl.w	r3, r2, r3
 800d104:	40c2      	lsrs	r2, r0
 800d106:	430b      	orrs	r3, r1
 800d108:	9201      	str	r2, [sp, #4]
 800d10a:	6163      	str	r3, [r4, #20]
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	61a3      	str	r3, [r4, #24]
 800d112:	bf0c      	ite	eq
 800d114:	2201      	moveq	r2, #1
 800d116:	2202      	movne	r2, #2
 800d118:	6122      	str	r2, [r4, #16]
 800d11a:	b1a5      	cbz	r5, 800d146 <__d2b+0x92>
 800d11c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d120:	4405      	add	r5, r0
 800d122:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d126:	603d      	str	r5, [r7, #0]
 800d128:	6030      	str	r0, [r6, #0]
 800d12a:	4620      	mov	r0, r4
 800d12c:	b003      	add	sp, #12
 800d12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d132:	6161      	str	r1, [r4, #20]
 800d134:	e7ea      	b.n	800d10c <__d2b+0x58>
 800d136:	a801      	add	r0, sp, #4
 800d138:	f7ff fce1 	bl	800cafe <__lo0bits>
 800d13c:	9b01      	ldr	r3, [sp, #4]
 800d13e:	3020      	adds	r0, #32
 800d140:	2201      	movs	r2, #1
 800d142:	6163      	str	r3, [r4, #20]
 800d144:	e7e8      	b.n	800d118 <__d2b+0x64>
 800d146:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d14a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d14e:	6038      	str	r0, [r7, #0]
 800d150:	6918      	ldr	r0, [r3, #16]
 800d152:	f7ff fcb5 	bl	800cac0 <__hi0bits>
 800d156:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d15a:	e7e5      	b.n	800d128 <__d2b+0x74>
 800d15c:	0800f245 	.word	0x0800f245
 800d160:	0800f256 	.word	0x0800f256

0800d164 <__ratio>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	b085      	sub	sp, #20
 800d16a:	e9cd 1000 	strd	r1, r0, [sp]
 800d16e:	a902      	add	r1, sp, #8
 800d170:	f7ff ff52 	bl	800d018 <__b2d>
 800d174:	a903      	add	r1, sp, #12
 800d176:	9800      	ldr	r0, [sp, #0]
 800d178:	ec55 4b10 	vmov	r4, r5, d0
 800d17c:	f7ff ff4c 	bl	800d018 <__b2d>
 800d180:	9b01      	ldr	r3, [sp, #4]
 800d182:	462f      	mov	r7, r5
 800d184:	4620      	mov	r0, r4
 800d186:	6919      	ldr	r1, [r3, #16]
 800d188:	9b00      	ldr	r3, [sp, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	1ac9      	subs	r1, r1, r3
 800d18e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d192:	ec5b ab10 	vmov	sl, fp, d0
 800d196:	1a9b      	subs	r3, r3, r2
 800d198:	46d9      	mov	r9, fp
 800d19a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfcd      	iteet	gt
 800d1a2:	462a      	movgt	r2, r5
 800d1a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1a8:	465a      	movle	r2, fp
 800d1aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d1ae:	bfd8      	it	le
 800d1b0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d1b4:	4652      	mov	r2, sl
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	464b      	mov	r3, r9
 800d1ba:	f7f3 fb5b 	bl	8000874 <__aeabi_ddiv>
 800d1be:	ec41 0b10 	vmov	d0, r0, r1
 800d1c2:	b005      	add	sp, #20
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1c8 <__copybits>:
 800d1c8:	3901      	subs	r1, #1
 800d1ca:	f102 0314 	add.w	r3, r2, #20
 800d1ce:	1149      	asrs	r1, r1, #5
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	3101      	adds	r1, #1
 800d1d4:	6914      	ldr	r4, [r2, #16]
 800d1d6:	1f05      	subs	r5, r0, #4
 800d1d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1e0:	42a3      	cmp	r3, r4
 800d1e2:	d30c      	bcc.n	800d1fe <__copybits+0x36>
 800d1e4:	1aa3      	subs	r3, r4, r2
 800d1e6:	3211      	adds	r2, #17
 800d1e8:	3b11      	subs	r3, #17
 800d1ea:	f023 0303 	bic.w	r3, r3, #3
 800d1ee:	42a2      	cmp	r2, r4
 800d1f0:	bf88      	it	hi
 800d1f2:	2300      	movhi	r3, #0
 800d1f4:	4418      	add	r0, r3
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	4288      	cmp	r0, r1
 800d1fa:	d305      	bcc.n	800d208 <__copybits+0x40>
 800d1fc:	bd70      	pop	{r4, r5, r6, pc}
 800d1fe:	f853 6b04 	ldr.w	r6, [r3], #4
 800d202:	f845 6f04 	str.w	r6, [r5, #4]!
 800d206:	e7eb      	b.n	800d1e0 <__copybits+0x18>
 800d208:	f840 3b04 	str.w	r3, [r0], #4
 800d20c:	e7f4      	b.n	800d1f8 <__copybits+0x30>

0800d20e <__any_on>:
 800d20e:	f100 0214 	add.w	r2, r0, #20
 800d212:	114b      	asrs	r3, r1, #5
 800d214:	6900      	ldr	r0, [r0, #16]
 800d216:	4298      	cmp	r0, r3
 800d218:	b510      	push	{r4, lr}
 800d21a:	db11      	blt.n	800d240 <__any_on+0x32>
 800d21c:	dd0a      	ble.n	800d234 <__any_on+0x26>
 800d21e:	f011 011f 	ands.w	r1, r1, #31
 800d222:	d007      	beq.n	800d234 <__any_on+0x26>
 800d224:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d228:	fa24 f001 	lsr.w	r0, r4, r1
 800d22c:	fa00 f101 	lsl.w	r1, r0, r1
 800d230:	428c      	cmp	r4, r1
 800d232:	d10b      	bne.n	800d24c <__any_on+0x3e>
 800d234:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d238:	4293      	cmp	r3, r2
 800d23a:	d803      	bhi.n	800d244 <__any_on+0x36>
 800d23c:	2000      	movs	r0, #0
 800d23e:	bd10      	pop	{r4, pc}
 800d240:	4603      	mov	r3, r0
 800d242:	e7f7      	b.n	800d234 <__any_on+0x26>
 800d244:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d248:	2900      	cmp	r1, #0
 800d24a:	d0f5      	beq.n	800d238 <__any_on+0x2a>
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7f6      	b.n	800d23e <__any_on+0x30>

0800d250 <sulp>:
 800d250:	b570      	push	{r4, r5, r6, lr}
 800d252:	4604      	mov	r4, r0
 800d254:	460d      	mov	r5, r1
 800d256:	4616      	mov	r6, r2
 800d258:	ec45 4b10 	vmov	d0, r4, r5
 800d25c:	f7ff feb6 	bl	800cfcc <__ulp>
 800d260:	ec51 0b10 	vmov	r0, r1, d0
 800d264:	b17e      	cbz	r6, 800d286 <sulp+0x36>
 800d266:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d26a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d26e:	2b00      	cmp	r3, #0
 800d270:	dd09      	ble.n	800d286 <sulp+0x36>
 800d272:	051b      	lsls	r3, r3, #20
 800d274:	2400      	movs	r4, #0
 800d276:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d27a:	4622      	mov	r2, r4
 800d27c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d280:	462b      	mov	r3, r5
 800d282:	f7f3 f9cd 	bl	8000620 <__aeabi_dmul>
 800d286:	ec41 0b10 	vmov	d0, r0, r1
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
 800d28c:	0000      	movs	r0, r0
	...

0800d290 <_strtod_l>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	b09f      	sub	sp, #124	@ 0x7c
 800d296:	460c      	mov	r4, r1
 800d298:	f04f 0a00 	mov.w	sl, #0
 800d29c:	f04f 0b00 	mov.w	fp, #0
 800d2a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	9005      	str	r0, [sp, #20]
 800d2a6:	921a      	str	r2, [sp, #104]	@ 0x68
 800d2a8:	460a      	mov	r2, r1
 800d2aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2ac:	7811      	ldrb	r1, [r2, #0]
 800d2ae:	292b      	cmp	r1, #43	@ 0x2b
 800d2b0:	d04a      	beq.n	800d348 <_strtod_l+0xb8>
 800d2b2:	d838      	bhi.n	800d326 <_strtod_l+0x96>
 800d2b4:	290d      	cmp	r1, #13
 800d2b6:	d832      	bhi.n	800d31e <_strtod_l+0x8e>
 800d2b8:	2908      	cmp	r1, #8
 800d2ba:	d832      	bhi.n	800d322 <_strtod_l+0x92>
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	d03b      	beq.n	800d338 <_strtod_l+0xa8>
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d2c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d2c6:	782a      	ldrb	r2, [r5, #0]
 800d2c8:	2a30      	cmp	r2, #48	@ 0x30
 800d2ca:	f040 80b3 	bne.w	800d434 <_strtod_l+0x1a4>
 800d2ce:	786a      	ldrb	r2, [r5, #1]
 800d2d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2d4:	2a58      	cmp	r2, #88	@ 0x58
 800d2d6:	d16e      	bne.n	800d3b6 <_strtod_l+0x126>
 800d2d8:	9302      	str	r3, [sp, #8]
 800d2da:	a919      	add	r1, sp, #100	@ 0x64
 800d2dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2de:	4a90      	ldr	r2, [pc, #576]	@ (800d520 <_strtod_l+0x290>)
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	ab1a      	add	r3, sp, #104	@ 0x68
 800d2e4:	9805      	ldr	r0, [sp, #20]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d2ea:	f001 fafd 	bl	800e8e8 <__gethex>
 800d2ee:	f010 060f 	ands.w	r6, r0, #15
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	d005      	beq.n	800d302 <_strtod_l+0x72>
 800d2f6:	2e06      	cmp	r6, #6
 800d2f8:	d128      	bne.n	800d34c <_strtod_l+0xbc>
 800d2fa:	3501      	adds	r5, #1
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800d300:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d302:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d304:	2b00      	cmp	r3, #0
 800d306:	f040 858e 	bne.w	800de26 <_strtod_l+0xb96>
 800d30a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d30c:	b1cb      	cbz	r3, 800d342 <_strtod_l+0xb2>
 800d30e:	4652      	mov	r2, sl
 800d310:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d314:	ec43 2b10 	vmov	d0, r2, r3
 800d318:	b01f      	add	sp, #124	@ 0x7c
 800d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31e:	2920      	cmp	r1, #32
 800d320:	d1ce      	bne.n	800d2c0 <_strtod_l+0x30>
 800d322:	3201      	adds	r2, #1
 800d324:	e7c1      	b.n	800d2aa <_strtod_l+0x1a>
 800d326:	292d      	cmp	r1, #45	@ 0x2d
 800d328:	d1ca      	bne.n	800d2c0 <_strtod_l+0x30>
 800d32a:	2101      	movs	r1, #1
 800d32c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d32e:	1c51      	adds	r1, r2, #1
 800d330:	9119      	str	r1, [sp, #100]	@ 0x64
 800d332:	7852      	ldrb	r2, [r2, #1]
 800d334:	2a00      	cmp	r2, #0
 800d336:	d1c5      	bne.n	800d2c4 <_strtod_l+0x34>
 800d338:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d33a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f040 8570 	bne.w	800de22 <_strtod_l+0xb92>
 800d342:	4652      	mov	r2, sl
 800d344:	465b      	mov	r3, fp
 800d346:	e7e5      	b.n	800d314 <_strtod_l+0x84>
 800d348:	2100      	movs	r1, #0
 800d34a:	e7ef      	b.n	800d32c <_strtod_l+0x9c>
 800d34c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d34e:	b13a      	cbz	r2, 800d360 <_strtod_l+0xd0>
 800d350:	2135      	movs	r1, #53	@ 0x35
 800d352:	a81c      	add	r0, sp, #112	@ 0x70
 800d354:	f7ff ff38 	bl	800d1c8 <__copybits>
 800d358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d35a:	9805      	ldr	r0, [sp, #20]
 800d35c:	f7ff fafc 	bl	800c958 <_Bfree>
 800d360:	3e01      	subs	r6, #1
 800d362:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d364:	2e04      	cmp	r6, #4
 800d366:	d806      	bhi.n	800d376 <_strtod_l+0xe6>
 800d368:	e8df f006 	tbb	[pc, r6]
 800d36c:	201d0314 	.word	0x201d0314
 800d370:	14          	.byte	0x14
 800d371:	00          	.byte	0x00
 800d372:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d376:	05e1      	lsls	r1, r4, #23
 800d378:	bf48      	it	mi
 800d37a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d37e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d382:	0d1b      	lsrs	r3, r3, #20
 800d384:	051b      	lsls	r3, r3, #20
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1bb      	bne.n	800d302 <_strtod_l+0x72>
 800d38a:	f7fe fb11 	bl	800b9b0 <__errno>
 800d38e:	2322      	movs	r3, #34	@ 0x22
 800d390:	6003      	str	r3, [r0, #0]
 800d392:	e7b6      	b.n	800d302 <_strtod_l+0x72>
 800d394:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d398:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d39c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d3a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d3a4:	e7e7      	b.n	800d376 <_strtod_l+0xe6>
 800d3a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d528 <_strtod_l+0x298>
 800d3aa:	e7e4      	b.n	800d376 <_strtod_l+0xe6>
 800d3ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d3b0:	f04f 3aff 	mov.w	sl, #4294967295
 800d3b4:	e7df      	b.n	800d376 <_strtod_l+0xe6>
 800d3b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3bc:	785b      	ldrb	r3, [r3, #1]
 800d3be:	2b30      	cmp	r3, #48	@ 0x30
 800d3c0:	d0f9      	beq.n	800d3b6 <_strtod_l+0x126>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d09d      	beq.n	800d302 <_strtod_l+0x72>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ca:	220a      	movs	r2, #10
 800d3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	461f      	mov	r7, r3
 800d3d4:	9308      	str	r3, [sp, #32]
 800d3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d3da:	7805      	ldrb	r5, [r0, #0]
 800d3dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d3e0:	b2d9      	uxtb	r1, r3
 800d3e2:	2909      	cmp	r1, #9
 800d3e4:	d928      	bls.n	800d438 <_strtod_l+0x1a8>
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	494e      	ldr	r1, [pc, #312]	@ (800d524 <_strtod_l+0x294>)
 800d3ea:	f001 f9ab 	bl	800e744 <strncmp>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d033      	beq.n	800d45a <_strtod_l+0x1ca>
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	463d      	mov	r5, r7
 800d3f8:	4681      	mov	r9, r0
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2a65      	cmp	r2, #101	@ 0x65
 800d3fe:	d001      	beq.n	800d404 <_strtod_l+0x174>
 800d400:	2a45      	cmp	r2, #69	@ 0x45
 800d402:	d114      	bne.n	800d42e <_strtod_l+0x19e>
 800d404:	b91d      	cbnz	r5, 800d40e <_strtod_l+0x17e>
 800d406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d408:	4302      	orrs	r2, r0
 800d40a:	d095      	beq.n	800d338 <_strtod_l+0xa8>
 800d40c:	2500      	movs	r5, #0
 800d40e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d410:	1c62      	adds	r2, r4, #1
 800d412:	9219      	str	r2, [sp, #100]	@ 0x64
 800d414:	7862      	ldrb	r2, [r4, #1]
 800d416:	2a2b      	cmp	r2, #43	@ 0x2b
 800d418:	d078      	beq.n	800d50c <_strtod_l+0x27c>
 800d41a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d41c:	d07c      	beq.n	800d518 <_strtod_l+0x288>
 800d41e:	f04f 0c00 	mov.w	ip, #0
 800d422:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d426:	2909      	cmp	r1, #9
 800d428:	f240 8084 	bls.w	800d534 <_strtod_l+0x2a4>
 800d42c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d42e:	f04f 0800 	mov.w	r8, #0
 800d432:	e0a4      	b.n	800d57e <_strtod_l+0x2ee>
 800d434:	2300      	movs	r3, #0
 800d436:	e7c7      	b.n	800d3c8 <_strtod_l+0x138>
 800d438:	2f08      	cmp	r7, #8
 800d43a:	f100 0001 	add.w	r0, r0, #1
 800d43e:	f107 0701 	add.w	r7, r7, #1
 800d442:	bfd5      	itete	le
 800d444:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d446:	9908      	ldrgt	r1, [sp, #32]
 800d448:	fb02 3301 	mlale	r3, r2, r1, r3
 800d44c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d450:	bfd4      	ite	le
 800d452:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d454:	9308      	strgt	r3, [sp, #32]
 800d456:	9019      	str	r0, [sp, #100]	@ 0x64
 800d458:	e7be      	b.n	800d3d8 <_strtod_l+0x148>
 800d45a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d460:	785a      	ldrb	r2, [r3, #1]
 800d462:	b37f      	cbz	r7, 800d4c4 <_strtod_l+0x234>
 800d464:	4681      	mov	r9, r0
 800d466:	463d      	mov	r5, r7
 800d468:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d46c:	2b09      	cmp	r3, #9
 800d46e:	d912      	bls.n	800d496 <_strtod_l+0x206>
 800d470:	2301      	movs	r3, #1
 800d472:	e7c3      	b.n	800d3fc <_strtod_l+0x16c>
 800d474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d476:	3001      	adds	r0, #1
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d47c:	785a      	ldrb	r2, [r3, #1]
 800d47e:	2a30      	cmp	r2, #48	@ 0x30
 800d480:	d0f8      	beq.n	800d474 <_strtod_l+0x1e4>
 800d482:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d486:	2b08      	cmp	r3, #8
 800d488:	f200 84d2 	bhi.w	800de30 <_strtod_l+0xba0>
 800d48c:	4681      	mov	r9, r0
 800d48e:	2000      	movs	r0, #0
 800d490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d492:	4605      	mov	r5, r0
 800d494:	930c      	str	r3, [sp, #48]	@ 0x30
 800d496:	3a30      	subs	r2, #48	@ 0x30
 800d498:	f100 0301 	add.w	r3, r0, #1
 800d49c:	d02a      	beq.n	800d4f4 <_strtod_l+0x264>
 800d49e:	4499      	add	r9, r3
 800d4a0:	eb00 0c05 	add.w	ip, r0, r5
 800d4a4:	462b      	mov	r3, r5
 800d4a6:	210a      	movs	r1, #10
 800d4a8:	4563      	cmp	r3, ip
 800d4aa:	d10d      	bne.n	800d4c8 <_strtod_l+0x238>
 800d4ac:	1c69      	adds	r1, r5, #1
 800d4ae:	4401      	add	r1, r0
 800d4b0:	4428      	add	r0, r5
 800d4b2:	2808      	cmp	r0, #8
 800d4b4:	dc16      	bgt.n	800d4e4 <_strtod_l+0x254>
 800d4b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4b8:	230a      	movs	r3, #10
 800d4ba:	fb03 2300 	mla	r3, r3, r0, r2
 800d4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e018      	b.n	800d4f6 <_strtod_l+0x266>
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	e7da      	b.n	800d47e <_strtod_l+0x1ee>
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	f103 0301 	add.w	r3, r3, #1
 800d4ce:	dc03      	bgt.n	800d4d8 <_strtod_l+0x248>
 800d4d0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d4d2:	434e      	muls	r6, r1
 800d4d4:	960a      	str	r6, [sp, #40]	@ 0x28
 800d4d6:	e7e7      	b.n	800d4a8 <_strtod_l+0x218>
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	bfde      	ittt	le
 800d4dc:	9e08      	ldrle	r6, [sp, #32]
 800d4de:	434e      	mulle	r6, r1
 800d4e0:	9608      	strle	r6, [sp, #32]
 800d4e2:	e7e1      	b.n	800d4a8 <_strtod_l+0x218>
 800d4e4:	280f      	cmp	r0, #15
 800d4e6:	dceb      	bgt.n	800d4c0 <_strtod_l+0x230>
 800d4e8:	9808      	ldr	r0, [sp, #32]
 800d4ea:	230a      	movs	r3, #10
 800d4ec:	fb03 2300 	mla	r3, r3, r0, r2
 800d4f0:	9308      	str	r3, [sp, #32]
 800d4f2:	e7e5      	b.n	800d4c0 <_strtod_l+0x230>
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	1c50      	adds	r0, r2, #1
 800d4fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d4fe:	4618      	mov	r0, r3
 800d500:	7852      	ldrb	r2, [r2, #1]
 800d502:	e7b1      	b.n	800d468 <_strtod_l+0x1d8>
 800d504:	f04f 0900 	mov.w	r9, #0
 800d508:	2301      	movs	r3, #1
 800d50a:	e77c      	b.n	800d406 <_strtod_l+0x176>
 800d50c:	f04f 0c00 	mov.w	ip, #0
 800d510:	1ca2      	adds	r2, r4, #2
 800d512:	9219      	str	r2, [sp, #100]	@ 0x64
 800d514:	78a2      	ldrb	r2, [r4, #2]
 800d516:	e784      	b.n	800d422 <_strtod_l+0x192>
 800d518:	f04f 0c01 	mov.w	ip, #1
 800d51c:	e7f8      	b.n	800d510 <_strtod_l+0x280>
 800d51e:	bf00      	nop
 800d520:	0800f3c8 	.word	0x0800f3c8
 800d524:	0800f3b0 	.word	0x0800f3b0
 800d528:	7ff00000 	.word	0x7ff00000
 800d52c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d52e:	1c51      	adds	r1, r2, #1
 800d530:	9119      	str	r1, [sp, #100]	@ 0x64
 800d532:	7852      	ldrb	r2, [r2, #1]
 800d534:	2a30      	cmp	r2, #48	@ 0x30
 800d536:	d0f9      	beq.n	800d52c <_strtod_l+0x29c>
 800d538:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d53c:	2908      	cmp	r1, #8
 800d53e:	f63f af76 	bhi.w	800d42e <_strtod_l+0x19e>
 800d542:	3a30      	subs	r2, #48	@ 0x30
 800d544:	f04f 080a 	mov.w	r8, #10
 800d548:	920e      	str	r2, [sp, #56]	@ 0x38
 800d54a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d54c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d54e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d550:	1c56      	adds	r6, r2, #1
 800d552:	9619      	str	r6, [sp, #100]	@ 0x64
 800d554:	7852      	ldrb	r2, [r2, #1]
 800d556:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d55a:	f1be 0f09 	cmp.w	lr, #9
 800d55e:	d939      	bls.n	800d5d4 <_strtod_l+0x344>
 800d560:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d562:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d566:	1a76      	subs	r6, r6, r1
 800d568:	2e08      	cmp	r6, #8
 800d56a:	dc03      	bgt.n	800d574 <_strtod_l+0x2e4>
 800d56c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d56e:	4588      	cmp	r8, r1
 800d570:	bfa8      	it	ge
 800d572:	4688      	movge	r8, r1
 800d574:	f1bc 0f00 	cmp.w	ip, #0
 800d578:	d001      	beq.n	800d57e <_strtod_l+0x2ee>
 800d57a:	f1c8 0800 	rsb	r8, r8, #0
 800d57e:	2d00      	cmp	r5, #0
 800d580:	d14e      	bne.n	800d620 <_strtod_l+0x390>
 800d582:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d584:	4308      	orrs	r0, r1
 800d586:	f47f aebc 	bne.w	800d302 <_strtod_l+0x72>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f47f aed4 	bne.w	800d338 <_strtod_l+0xa8>
 800d590:	2a69      	cmp	r2, #105	@ 0x69
 800d592:	d028      	beq.n	800d5e6 <_strtod_l+0x356>
 800d594:	dc25      	bgt.n	800d5e2 <_strtod_l+0x352>
 800d596:	2a49      	cmp	r2, #73	@ 0x49
 800d598:	d025      	beq.n	800d5e6 <_strtod_l+0x356>
 800d59a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d59c:	f47f aecc 	bne.w	800d338 <_strtod_l+0xa8>
 800d5a0:	499b      	ldr	r1, [pc, #620]	@ (800d810 <_strtod_l+0x580>)
 800d5a2:	a819      	add	r0, sp, #100	@ 0x64
 800d5a4:	f001 fbc0 	bl	800ed28 <__match>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	f43f aec5 	beq.w	800d338 <_strtod_l+0xa8>
 800d5ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b28      	cmp	r3, #40	@ 0x28
 800d5b4:	d12e      	bne.n	800d614 <_strtod_l+0x384>
 800d5b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d5b8:	4996      	ldr	r1, [pc, #600]	@ (800d814 <_strtod_l+0x584>)
 800d5ba:	a819      	add	r0, sp, #100	@ 0x64
 800d5bc:	f001 fbc8 	bl	800ed50 <__hexnan>
 800d5c0:	2805      	cmp	r0, #5
 800d5c2:	d127      	bne.n	800d614 <_strtod_l+0x384>
 800d5c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d5c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d5ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d5ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d5d2:	e696      	b.n	800d302 <_strtod_l+0x72>
 800d5d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d5d6:	fb08 2101 	mla	r1, r8, r1, r2
 800d5da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d5de:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5e0:	e7b5      	b.n	800d54e <_strtod_l+0x2be>
 800d5e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d5e4:	e7da      	b.n	800d59c <_strtod_l+0x30c>
 800d5e6:	498c      	ldr	r1, [pc, #560]	@ (800d818 <_strtod_l+0x588>)
 800d5e8:	a819      	add	r0, sp, #100	@ 0x64
 800d5ea:	f001 fb9d 	bl	800ed28 <__match>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f43f aea2 	beq.w	800d338 <_strtod_l+0xa8>
 800d5f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5f6:	a819      	add	r0, sp, #100	@ 0x64
 800d5f8:	4988      	ldr	r1, [pc, #544]	@ (800d81c <_strtod_l+0x58c>)
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5fe:	f001 fb93 	bl	800ed28 <__match>
 800d602:	b910      	cbnz	r0, 800d60a <_strtod_l+0x37a>
 800d604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d606:	3301      	adds	r3, #1
 800d608:	9319      	str	r3, [sp, #100]	@ 0x64
 800d60a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d82c <_strtod_l+0x59c>
 800d60e:	f04f 0a00 	mov.w	sl, #0
 800d612:	e676      	b.n	800d302 <_strtod_l+0x72>
 800d614:	4882      	ldr	r0, [pc, #520]	@ (800d820 <_strtod_l+0x590>)
 800d616:	f001 f8c7 	bl	800e7a8 <nan>
 800d61a:	ec5b ab10 	vmov	sl, fp, d0
 800d61e:	e670      	b.n	800d302 <_strtod_l+0x72>
 800d620:	eba8 0309 	sub.w	r3, r8, r9
 800d624:	2f00      	cmp	r7, #0
 800d626:	bf08      	it	eq
 800d628:	462f      	moveq	r7, r5
 800d62a:	2d10      	cmp	r5, #16
 800d62c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d62e:	462c      	mov	r4, r5
 800d630:	9309      	str	r3, [sp, #36]	@ 0x24
 800d632:	bfa8      	it	ge
 800d634:	2410      	movge	r4, #16
 800d636:	f7f2 ff79 	bl	800052c <__aeabi_ui2d>
 800d63a:	2d09      	cmp	r5, #9
 800d63c:	4682      	mov	sl, r0
 800d63e:	468b      	mov	fp, r1
 800d640:	dc13      	bgt.n	800d66a <_strtod_l+0x3da>
 800d642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d644:	2b00      	cmp	r3, #0
 800d646:	f43f ae5c 	beq.w	800d302 <_strtod_l+0x72>
 800d64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d64c:	dd78      	ble.n	800d740 <_strtod_l+0x4b0>
 800d64e:	2b16      	cmp	r3, #22
 800d650:	dc5f      	bgt.n	800d712 <_strtod_l+0x482>
 800d652:	4974      	ldr	r1, [pc, #464]	@ (800d824 <_strtod_l+0x594>)
 800d654:	4652      	mov	r2, sl
 800d656:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d65a:	465b      	mov	r3, fp
 800d65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d660:	f7f2 ffde 	bl	8000620 <__aeabi_dmul>
 800d664:	4682      	mov	sl, r0
 800d666:	468b      	mov	fp, r1
 800d668:	e64b      	b.n	800d302 <_strtod_l+0x72>
 800d66a:	4b6e      	ldr	r3, [pc, #440]	@ (800d824 <_strtod_l+0x594>)
 800d66c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d670:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d674:	f7f2 ffd4 	bl	8000620 <__aeabi_dmul>
 800d678:	4682      	mov	sl, r0
 800d67a:	468b      	mov	fp, r1
 800d67c:	9808      	ldr	r0, [sp, #32]
 800d67e:	f7f2 ff55 	bl	800052c <__aeabi_ui2d>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4650      	mov	r0, sl
 800d688:	4659      	mov	r1, fp
 800d68a:	f7f2 fe13 	bl	80002b4 <__adddf3>
 800d68e:	2d0f      	cmp	r5, #15
 800d690:	4682      	mov	sl, r0
 800d692:	468b      	mov	fp, r1
 800d694:	ddd5      	ble.n	800d642 <_strtod_l+0x3b2>
 800d696:	1b2c      	subs	r4, r5, r4
 800d698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d69a:	441c      	add	r4, r3
 800d69c:	2c00      	cmp	r4, #0
 800d69e:	f340 8096 	ble.w	800d7ce <_strtod_l+0x53e>
 800d6a2:	f014 030f 	ands.w	r3, r4, #15
 800d6a6:	d00a      	beq.n	800d6be <_strtod_l+0x42e>
 800d6a8:	495e      	ldr	r1, [pc, #376]	@ (800d824 <_strtod_l+0x594>)
 800d6aa:	4652      	mov	r2, sl
 800d6ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d6b0:	465b      	mov	r3, fp
 800d6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6b6:	f7f2 ffb3 	bl	8000620 <__aeabi_dmul>
 800d6ba:	4682      	mov	sl, r0
 800d6bc:	468b      	mov	fp, r1
 800d6be:	f034 040f 	bics.w	r4, r4, #15
 800d6c2:	d073      	beq.n	800d7ac <_strtod_l+0x51c>
 800d6c4:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d6c8:	dd48      	ble.n	800d75c <_strtod_l+0x4cc>
 800d6ca:	2400      	movs	r4, #0
 800d6cc:	46a0      	mov	r8, r4
 800d6ce:	46a1      	mov	r9, r4
 800d6d0:	940a      	str	r4, [sp, #40]	@ 0x28
 800d6d2:	2322      	movs	r3, #34	@ 0x22
 800d6d4:	9a05      	ldr	r2, [sp, #20]
 800d6d6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d82c <_strtod_l+0x59c>
 800d6da:	f04f 0a00 	mov.w	sl, #0
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f43f ae0d 	beq.w	800d302 <_strtod_l+0x72>
 800d6e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6ea:	9805      	ldr	r0, [sp, #20]
 800d6ec:	f7ff f934 	bl	800c958 <_Bfree>
 800d6f0:	4649      	mov	r1, r9
 800d6f2:	9805      	ldr	r0, [sp, #20]
 800d6f4:	f7ff f930 	bl	800c958 <_Bfree>
 800d6f8:	4641      	mov	r1, r8
 800d6fa:	9805      	ldr	r0, [sp, #20]
 800d6fc:	f7ff f92c 	bl	800c958 <_Bfree>
 800d700:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d702:	9805      	ldr	r0, [sp, #20]
 800d704:	f7ff f928 	bl	800c958 <_Bfree>
 800d708:	4621      	mov	r1, r4
 800d70a:	9805      	ldr	r0, [sp, #20]
 800d70c:	f7ff f924 	bl	800c958 <_Bfree>
 800d710:	e5f7      	b.n	800d302 <_strtod_l+0x72>
 800d712:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d718:	4293      	cmp	r3, r2
 800d71a:	dbbc      	blt.n	800d696 <_strtod_l+0x406>
 800d71c:	f1c5 050f 	rsb	r5, r5, #15
 800d720:	4c40      	ldr	r4, [pc, #256]	@ (800d824 <_strtod_l+0x594>)
 800d722:	4652      	mov	r2, sl
 800d724:	465b      	mov	r3, fp
 800d726:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d72a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d72e:	f7f2 ff77 	bl	8000620 <__aeabi_dmul>
 800d732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d734:	1b5d      	subs	r5, r3, r5
 800d736:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d73a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d73e:	e78f      	b.n	800d660 <_strtod_l+0x3d0>
 800d740:	3316      	adds	r3, #22
 800d742:	dba8      	blt.n	800d696 <_strtod_l+0x406>
 800d744:	eba9 0808 	sub.w	r8, r9, r8
 800d748:	4b36      	ldr	r3, [pc, #216]	@ (800d824 <_strtod_l+0x594>)
 800d74a:	4650      	mov	r0, sl
 800d74c:	4659      	mov	r1, fp
 800d74e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d752:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d756:	f7f3 f88d 	bl	8000874 <__aeabi_ddiv>
 800d75a:	e783      	b.n	800d664 <_strtod_l+0x3d4>
 800d75c:	4b32      	ldr	r3, [pc, #200]	@ (800d828 <_strtod_l+0x598>)
 800d75e:	1124      	asrs	r4, r4, #4
 800d760:	4650      	mov	r0, sl
 800d762:	4659      	mov	r1, fp
 800d764:	9308      	str	r3, [sp, #32]
 800d766:	2300      	movs	r3, #0
 800d768:	461e      	mov	r6, r3
 800d76a:	2c01      	cmp	r4, #1
 800d76c:	dc21      	bgt.n	800d7b2 <_strtod_l+0x522>
 800d76e:	b10b      	cbz	r3, 800d774 <_strtod_l+0x4e4>
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	492c      	ldr	r1, [pc, #176]	@ (800d828 <_strtod_l+0x598>)
 800d776:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d77a:	4652      	mov	r2, sl
 800d77c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d780:	465b      	mov	r3, fp
 800d782:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d786:	f7f2 ff4b 	bl	8000620 <__aeabi_dmul>
 800d78a:	4b28      	ldr	r3, [pc, #160]	@ (800d82c <_strtod_l+0x59c>)
 800d78c:	460a      	mov	r2, r1
 800d78e:	4682      	mov	sl, r0
 800d790:	400b      	ands	r3, r1
 800d792:	4927      	ldr	r1, [pc, #156]	@ (800d830 <_strtod_l+0x5a0>)
 800d794:	428b      	cmp	r3, r1
 800d796:	d898      	bhi.n	800d6ca <_strtod_l+0x43a>
 800d798:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d79c:	428b      	cmp	r3, r1
 800d79e:	bf86      	itte	hi
 800d7a0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d834 <_strtod_l+0x5a4>
 800d7a4:	f04f 3aff 	movhi.w	sl, #4294967295
 800d7a8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9308      	str	r3, [sp, #32]
 800d7b0:	e07a      	b.n	800d8a8 <_strtod_l+0x618>
 800d7b2:	07e2      	lsls	r2, r4, #31
 800d7b4:	d505      	bpl.n	800d7c2 <_strtod_l+0x532>
 800d7b6:	9b08      	ldr	r3, [sp, #32]
 800d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7bc:	f7f2 ff30 	bl	8000620 <__aeabi_dmul>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	9a08      	ldr	r2, [sp, #32]
 800d7c4:	3601      	adds	r6, #1
 800d7c6:	1064      	asrs	r4, r4, #1
 800d7c8:	3208      	adds	r2, #8
 800d7ca:	9208      	str	r2, [sp, #32]
 800d7cc:	e7cd      	b.n	800d76a <_strtod_l+0x4da>
 800d7ce:	d0ed      	beq.n	800d7ac <_strtod_l+0x51c>
 800d7d0:	4264      	negs	r4, r4
 800d7d2:	f014 020f 	ands.w	r2, r4, #15
 800d7d6:	d00a      	beq.n	800d7ee <_strtod_l+0x55e>
 800d7d8:	4b12      	ldr	r3, [pc, #72]	@ (800d824 <_strtod_l+0x594>)
 800d7da:	4650      	mov	r0, sl
 800d7dc:	4659      	mov	r1, fp
 800d7de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f7f3 f845 	bl	8000874 <__aeabi_ddiv>
 800d7ea:	4682      	mov	sl, r0
 800d7ec:	468b      	mov	fp, r1
 800d7ee:	1124      	asrs	r4, r4, #4
 800d7f0:	d0dc      	beq.n	800d7ac <_strtod_l+0x51c>
 800d7f2:	2c1f      	cmp	r4, #31
 800d7f4:	dd20      	ble.n	800d838 <_strtod_l+0x5a8>
 800d7f6:	2400      	movs	r4, #0
 800d7f8:	46a0      	mov	r8, r4
 800d7fa:	46a1      	mov	r9, r4
 800d7fc:	940a      	str	r4, [sp, #40]	@ 0x28
 800d7fe:	2322      	movs	r3, #34	@ 0x22
 800d800:	9a05      	ldr	r2, [sp, #20]
 800d802:	f04f 0a00 	mov.w	sl, #0
 800d806:	f04f 0b00 	mov.w	fp, #0
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	e768      	b.n	800d6e0 <_strtod_l+0x450>
 800d80e:	bf00      	nop
 800d810:	0800f19d 	.word	0x0800f19d
 800d814:	0800f3b4 	.word	0x0800f3b4
 800d818:	0800f195 	.word	0x0800f195
 800d81c:	0800f1cc 	.word	0x0800f1cc
 800d820:	0800f55d 	.word	0x0800f55d
 800d824:	0800f2e8 	.word	0x0800f2e8
 800d828:	0800f2c0 	.word	0x0800f2c0
 800d82c:	7ff00000 	.word	0x7ff00000
 800d830:	7ca00000 	.word	0x7ca00000
 800d834:	7fefffff 	.word	0x7fefffff
 800d838:	f014 0310 	ands.w	r3, r4, #16
 800d83c:	4650      	mov	r0, sl
 800d83e:	4659      	mov	r1, fp
 800d840:	4ea9      	ldr	r6, [pc, #676]	@ (800dae8 <_strtod_l+0x858>)
 800d842:	bf18      	it	ne
 800d844:	236a      	movne	r3, #106	@ 0x6a
 800d846:	9308      	str	r3, [sp, #32]
 800d848:	2300      	movs	r3, #0
 800d84a:	07e2      	lsls	r2, r4, #31
 800d84c:	d504      	bpl.n	800d858 <_strtod_l+0x5c8>
 800d84e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d852:	f7f2 fee5 	bl	8000620 <__aeabi_dmul>
 800d856:	2301      	movs	r3, #1
 800d858:	1064      	asrs	r4, r4, #1
 800d85a:	f106 0608 	add.w	r6, r6, #8
 800d85e:	d1f4      	bne.n	800d84a <_strtod_l+0x5ba>
 800d860:	b10b      	cbz	r3, 800d866 <_strtod_l+0x5d6>
 800d862:	4682      	mov	sl, r0
 800d864:	468b      	mov	fp, r1
 800d866:	9b08      	ldr	r3, [sp, #32]
 800d868:	b1b3      	cbz	r3, 800d898 <_strtod_l+0x608>
 800d86a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d86e:	4659      	mov	r1, fp
 800d870:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d874:	2b00      	cmp	r3, #0
 800d876:	dd0f      	ble.n	800d898 <_strtod_l+0x608>
 800d878:	2b1f      	cmp	r3, #31
 800d87a:	dd55      	ble.n	800d928 <_strtod_l+0x698>
 800d87c:	2b34      	cmp	r3, #52	@ 0x34
 800d87e:	f04f 0a00 	mov.w	sl, #0
 800d882:	bfdb      	ittet	le
 800d884:	f04f 33ff 	movle.w	r3, #4294967295
 800d888:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d88c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d890:	4093      	lslle	r3, r2
 800d892:	bfd8      	it	le
 800d894:	ea03 0b01 	andle.w	fp, r3, r1
 800d898:	2200      	movs	r2, #0
 800d89a:	2300      	movs	r3, #0
 800d89c:	4650      	mov	r0, sl
 800d89e:	4659      	mov	r1, fp
 800d8a0:	f7f3 f926 	bl	8000af0 <__aeabi_dcmpeq>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d1a6      	bne.n	800d7f6 <_strtod_l+0x566>
 800d8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8aa:	463a      	mov	r2, r7
 800d8ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	462b      	mov	r3, r5
 800d8b2:	9805      	ldr	r0, [sp, #20]
 800d8b4:	f7ff f8ba 	bl	800ca2c <__s2b>
 800d8b8:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f43f af05 	beq.w	800d6ca <_strtod_l+0x43a>
 800d8c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8c2:	eba9 0308 	sub.w	r3, r9, r8
 800d8c6:	2400      	movs	r4, #0
 800d8c8:	2a00      	cmp	r2, #0
 800d8ca:	46a0      	mov	r8, r4
 800d8cc:	bfa8      	it	ge
 800d8ce:	2300      	movge	r3, #0
 800d8d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d8d2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d8d6:	9316      	str	r3, [sp, #88]	@ 0x58
 800d8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8da:	9805      	ldr	r0, [sp, #20]
 800d8dc:	6859      	ldr	r1, [r3, #4]
 800d8de:	f7fe fffb 	bl	800c8d8 <_Balloc>
 800d8e2:	4681      	mov	r9, r0
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	f43f aef4 	beq.w	800d6d2 <_strtod_l+0x442>
 800d8ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ec:	300c      	adds	r0, #12
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	f103 010c 	add.w	r1, r3, #12
 800d8f4:	3202      	adds	r2, #2
 800d8f6:	0092      	lsls	r2, r2, #2
 800d8f8:	f000 ff46 	bl	800e788 <memcpy>
 800d8fc:	aa1c      	add	r2, sp, #112	@ 0x70
 800d8fe:	a91b      	add	r1, sp, #108	@ 0x6c
 800d900:	9805      	ldr	r0, [sp, #20]
 800d902:	ec4b ab10 	vmov	d0, sl, fp
 800d906:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d90a:	f7ff fbd3 	bl	800d0b4 <__d2b>
 800d90e:	901a      	str	r0, [sp, #104]	@ 0x68
 800d910:	2800      	cmp	r0, #0
 800d912:	f43f aede 	beq.w	800d6d2 <_strtod_l+0x442>
 800d916:	2101      	movs	r1, #1
 800d918:	9805      	ldr	r0, [sp, #20]
 800d91a:	f7ff f91d 	bl	800cb58 <__i2b>
 800d91e:	4680      	mov	r8, r0
 800d920:	b948      	cbnz	r0, 800d936 <_strtod_l+0x6a6>
 800d922:	f04f 0800 	mov.w	r8, #0
 800d926:	e6d4      	b.n	800d6d2 <_strtod_l+0x442>
 800d928:	f04f 32ff 	mov.w	r2, #4294967295
 800d92c:	fa02 f303 	lsl.w	r3, r2, r3
 800d930:	ea03 0a0a 	and.w	sl, r3, sl
 800d934:	e7b0      	b.n	800d898 <_strtod_l+0x608>
 800d936:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d938:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d93a:	2d00      	cmp	r5, #0
 800d93c:	bfa9      	itett	ge
 800d93e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d940:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d942:	18ef      	addge	r7, r5, r3
 800d944:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d946:	bfb8      	it	lt
 800d948:	1b5e      	sublt	r6, r3, r5
 800d94a:	9b08      	ldr	r3, [sp, #32]
 800d94c:	bfb8      	it	lt
 800d94e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d950:	1aed      	subs	r5, r5, r3
 800d952:	4b66      	ldr	r3, [pc, #408]	@ (800daec <_strtod_l+0x85c>)
 800d954:	4415      	add	r5, r2
 800d956:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d95a:	3d01      	subs	r5, #1
 800d95c:	429d      	cmp	r5, r3
 800d95e:	da4f      	bge.n	800da00 <_strtod_l+0x770>
 800d960:	1b5b      	subs	r3, r3, r5
 800d962:	2101      	movs	r1, #1
 800d964:	2b1f      	cmp	r3, #31
 800d966:	eba2 0203 	sub.w	r2, r2, r3
 800d96a:	dc3d      	bgt.n	800d9e8 <_strtod_l+0x758>
 800d96c:	fa01 f303 	lsl.w	r3, r1, r3
 800d970:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d972:	2300      	movs	r3, #0
 800d974:	9310      	str	r3, [sp, #64]	@ 0x40
 800d976:	18bd      	adds	r5, r7, r2
 800d978:	9b08      	ldr	r3, [sp, #32]
 800d97a:	4416      	add	r6, r2
 800d97c:	42af      	cmp	r7, r5
 800d97e:	441e      	add	r6, r3
 800d980:	463b      	mov	r3, r7
 800d982:	bfa8      	it	ge
 800d984:	462b      	movge	r3, r5
 800d986:	42b3      	cmp	r3, r6
 800d988:	bfa8      	it	ge
 800d98a:	4633      	movge	r3, r6
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	bfc2      	ittt	gt
 800d990:	1aed      	subgt	r5, r5, r3
 800d992:	1af6      	subgt	r6, r6, r3
 800d994:	1aff      	subgt	r7, r7, r3
 800d996:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dd16      	ble.n	800d9ca <_strtod_l+0x73a>
 800d99c:	4641      	mov	r1, r8
 800d99e:	461a      	mov	r2, r3
 800d9a0:	9805      	ldr	r0, [sp, #20]
 800d9a2:	f7ff f999 	bl	800ccd8 <__pow5mult>
 800d9a6:	4680      	mov	r8, r0
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d0ba      	beq.n	800d922 <_strtod_l+0x692>
 800d9ac:	4601      	mov	r1, r0
 800d9ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d9b0:	9805      	ldr	r0, [sp, #20]
 800d9b2:	f7ff f8e7 	bl	800cb84 <__multiply>
 800d9b6:	900e      	str	r0, [sp, #56]	@ 0x38
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	f43f ae8a 	beq.w	800d6d2 <_strtod_l+0x442>
 800d9be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9c0:	9805      	ldr	r0, [sp, #20]
 800d9c2:	f7fe ffc9 	bl	800c958 <_Bfree>
 800d9c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9ca:	2d00      	cmp	r5, #0
 800d9cc:	dc1d      	bgt.n	800da0a <_strtod_l+0x77a>
 800d9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	dd23      	ble.n	800da1c <_strtod_l+0x78c>
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d9d8:	9805      	ldr	r0, [sp, #20]
 800d9da:	f7ff f97d 	bl	800ccd8 <__pow5mult>
 800d9de:	4681      	mov	r9, r0
 800d9e0:	b9e0      	cbnz	r0, 800da1c <_strtod_l+0x78c>
 800d9e2:	f04f 0900 	mov.w	r9, #0
 800d9e6:	e674      	b.n	800d6d2 <_strtod_l+0x442>
 800d9e8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d9ec:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d9ee:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d9f2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d9f6:	35e2      	adds	r5, #226	@ 0xe2
 800d9f8:	fa01 f305 	lsl.w	r3, r1, r5
 800d9fc:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9fe:	e7ba      	b.n	800d976 <_strtod_l+0x6e6>
 800da00:	2300      	movs	r3, #0
 800da02:	9310      	str	r3, [sp, #64]	@ 0x40
 800da04:	2301      	movs	r3, #1
 800da06:	9313      	str	r3, [sp, #76]	@ 0x4c
 800da08:	e7b5      	b.n	800d976 <_strtod_l+0x6e6>
 800da0a:	462a      	mov	r2, r5
 800da0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da0e:	9805      	ldr	r0, [sp, #20]
 800da10:	f7ff f9bc 	bl	800cd8c <__lshift>
 800da14:	901a      	str	r0, [sp, #104]	@ 0x68
 800da16:	2800      	cmp	r0, #0
 800da18:	d1d9      	bne.n	800d9ce <_strtod_l+0x73e>
 800da1a:	e65a      	b.n	800d6d2 <_strtod_l+0x442>
 800da1c:	2e00      	cmp	r6, #0
 800da1e:	dd07      	ble.n	800da30 <_strtod_l+0x7a0>
 800da20:	4649      	mov	r1, r9
 800da22:	4632      	mov	r2, r6
 800da24:	9805      	ldr	r0, [sp, #20]
 800da26:	f7ff f9b1 	bl	800cd8c <__lshift>
 800da2a:	4681      	mov	r9, r0
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d0d8      	beq.n	800d9e2 <_strtod_l+0x752>
 800da30:	2f00      	cmp	r7, #0
 800da32:	dd08      	ble.n	800da46 <_strtod_l+0x7b6>
 800da34:	4641      	mov	r1, r8
 800da36:	463a      	mov	r2, r7
 800da38:	9805      	ldr	r0, [sp, #20]
 800da3a:	f7ff f9a7 	bl	800cd8c <__lshift>
 800da3e:	4680      	mov	r8, r0
 800da40:	2800      	cmp	r0, #0
 800da42:	f43f ae46 	beq.w	800d6d2 <_strtod_l+0x442>
 800da46:	464a      	mov	r2, r9
 800da48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da4a:	9805      	ldr	r0, [sp, #20]
 800da4c:	f7ff fa26 	bl	800ce9c <__mdiff>
 800da50:	4604      	mov	r4, r0
 800da52:	2800      	cmp	r0, #0
 800da54:	f43f ae3d 	beq.w	800d6d2 <_strtod_l+0x442>
 800da58:	68c3      	ldr	r3, [r0, #12]
 800da5a:	4641      	mov	r1, r8
 800da5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da5e:	2300      	movs	r3, #0
 800da60:	60c3      	str	r3, [r0, #12]
 800da62:	f7ff f9ff 	bl	800ce64 <__mcmp>
 800da66:	2800      	cmp	r0, #0
 800da68:	da46      	bge.n	800daf8 <_strtod_l+0x868>
 800da6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da6c:	ea53 030a 	orrs.w	r3, r3, sl
 800da70:	d16c      	bne.n	800db4c <_strtod_l+0x8bc>
 800da72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da76:	2b00      	cmp	r3, #0
 800da78:	d168      	bne.n	800db4c <_strtod_l+0x8bc>
 800da7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da7e:	0d1b      	lsrs	r3, r3, #20
 800da80:	051b      	lsls	r3, r3, #20
 800da82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da86:	d961      	bls.n	800db4c <_strtod_l+0x8bc>
 800da88:	6963      	ldr	r3, [r4, #20]
 800da8a:	b913      	cbnz	r3, 800da92 <_strtod_l+0x802>
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	dd5c      	ble.n	800db4c <_strtod_l+0x8bc>
 800da92:	4621      	mov	r1, r4
 800da94:	2201      	movs	r2, #1
 800da96:	9805      	ldr	r0, [sp, #20]
 800da98:	f7ff f978 	bl	800cd8c <__lshift>
 800da9c:	4641      	mov	r1, r8
 800da9e:	4604      	mov	r4, r0
 800daa0:	f7ff f9e0 	bl	800ce64 <__mcmp>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	dd51      	ble.n	800db4c <_strtod_l+0x8bc>
 800daa8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800daac:	9a08      	ldr	r2, [sp, #32]
 800daae:	0d1b      	lsrs	r3, r3, #20
 800dab0:	051b      	lsls	r3, r3, #20
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	d06b      	beq.n	800db8e <_strtod_l+0x8fe>
 800dab6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800daba:	d868      	bhi.n	800db8e <_strtod_l+0x8fe>
 800dabc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dac0:	f67f ae9d 	bls.w	800d7fe <_strtod_l+0x56e>
 800dac4:	4b0a      	ldr	r3, [pc, #40]	@ (800daf0 <_strtod_l+0x860>)
 800dac6:	4650      	mov	r0, sl
 800dac8:	4659      	mov	r1, fp
 800daca:	2200      	movs	r2, #0
 800dacc:	f7f2 fda8 	bl	8000620 <__aeabi_dmul>
 800dad0:	4b08      	ldr	r3, [pc, #32]	@ (800daf4 <_strtod_l+0x864>)
 800dad2:	4682      	mov	sl, r0
 800dad4:	468b      	mov	fp, r1
 800dad6:	400b      	ands	r3, r1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f47f ae05 	bne.w	800d6e8 <_strtod_l+0x458>
 800dade:	2322      	movs	r3, #34	@ 0x22
 800dae0:	9a05      	ldr	r2, [sp, #20]
 800dae2:	6013      	str	r3, [r2, #0]
 800dae4:	e600      	b.n	800d6e8 <_strtod_l+0x458>
 800dae6:	bf00      	nop
 800dae8:	0800f3e0 	.word	0x0800f3e0
 800daec:	fffffc02 	.word	0xfffffc02
 800daf0:	39500000 	.word	0x39500000
 800daf4:	7ff00000 	.word	0x7ff00000
 800daf8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dafc:	d165      	bne.n	800dbca <_strtod_l+0x93a>
 800dafe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800db00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db04:	b35a      	cbz	r2, 800db5e <_strtod_l+0x8ce>
 800db06:	4a9e      	ldr	r2, [pc, #632]	@ (800dd80 <_strtod_l+0xaf0>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d12b      	bne.n	800db64 <_strtod_l+0x8d4>
 800db0c:	9b08      	ldr	r3, [sp, #32]
 800db0e:	4651      	mov	r1, sl
 800db10:	b303      	cbz	r3, 800db54 <_strtod_l+0x8c4>
 800db12:	465a      	mov	r2, fp
 800db14:	4b9b      	ldr	r3, [pc, #620]	@ (800dd84 <_strtod_l+0xaf4>)
 800db16:	4013      	ands	r3, r2
 800db18:	f04f 32ff 	mov.w	r2, #4294967295
 800db1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800db20:	d81b      	bhi.n	800db5a <_strtod_l+0x8ca>
 800db22:	0d1b      	lsrs	r3, r3, #20
 800db24:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800db28:	fa02 f303 	lsl.w	r3, r2, r3
 800db2c:	4299      	cmp	r1, r3
 800db2e:	d119      	bne.n	800db64 <_strtod_l+0x8d4>
 800db30:	4b95      	ldr	r3, [pc, #596]	@ (800dd88 <_strtod_l+0xaf8>)
 800db32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db34:	429a      	cmp	r2, r3
 800db36:	d102      	bne.n	800db3e <_strtod_l+0x8ae>
 800db38:	3101      	adds	r1, #1
 800db3a:	f43f adca 	beq.w	800d6d2 <_strtod_l+0x442>
 800db3e:	4b91      	ldr	r3, [pc, #580]	@ (800dd84 <_strtod_l+0xaf4>)
 800db40:	f04f 0a00 	mov.w	sl, #0
 800db44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db46:	401a      	ands	r2, r3
 800db48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800db4c:	9b08      	ldr	r3, [sp, #32]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1b8      	bne.n	800dac4 <_strtod_l+0x834>
 800db52:	e5c9      	b.n	800d6e8 <_strtod_l+0x458>
 800db54:	f04f 33ff 	mov.w	r3, #4294967295
 800db58:	e7e8      	b.n	800db2c <_strtod_l+0x89c>
 800db5a:	4613      	mov	r3, r2
 800db5c:	e7e6      	b.n	800db2c <_strtod_l+0x89c>
 800db5e:	ea53 030a 	orrs.w	r3, r3, sl
 800db62:	d0a1      	beq.n	800daa8 <_strtod_l+0x818>
 800db64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db66:	b1db      	cbz	r3, 800dba0 <_strtod_l+0x910>
 800db68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db6a:	4213      	tst	r3, r2
 800db6c:	d0ee      	beq.n	800db4c <_strtod_l+0x8bc>
 800db6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db70:	4650      	mov	r0, sl
 800db72:	9a08      	ldr	r2, [sp, #32]
 800db74:	4659      	mov	r1, fp
 800db76:	b1bb      	cbz	r3, 800dba8 <_strtod_l+0x918>
 800db78:	f7ff fb6a 	bl	800d250 <sulp>
 800db7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db80:	ec53 2b10 	vmov	r2, r3, d0
 800db84:	f7f2 fb96 	bl	80002b4 <__adddf3>
 800db88:	4682      	mov	sl, r0
 800db8a:	468b      	mov	fp, r1
 800db8c:	e7de      	b.n	800db4c <_strtod_l+0x8bc>
 800db8e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800db92:	f04f 3aff 	mov.w	sl, #4294967295
 800db96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db9e:	e7d5      	b.n	800db4c <_strtod_l+0x8bc>
 800dba0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dba2:	ea13 0f0a 	tst.w	r3, sl
 800dba6:	e7e1      	b.n	800db6c <_strtod_l+0x8dc>
 800dba8:	f7ff fb52 	bl	800d250 <sulp>
 800dbac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dbb0:	ec53 2b10 	vmov	r2, r3, d0
 800dbb4:	f7f2 fb7c 	bl	80002b0 <__aeabi_dsub>
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2300      	movs	r3, #0
 800dbbc:	4682      	mov	sl, r0
 800dbbe:	468b      	mov	fp, r1
 800dbc0:	f7f2 ff96 	bl	8000af0 <__aeabi_dcmpeq>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d0c1      	beq.n	800db4c <_strtod_l+0x8bc>
 800dbc8:	e619      	b.n	800d7fe <_strtod_l+0x56e>
 800dbca:	4641      	mov	r1, r8
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f7ff fac9 	bl	800d164 <__ratio>
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dbd8:	ec57 6b10 	vmov	r6, r7, d0
 800dbdc:	4630      	mov	r0, r6
 800dbde:	4639      	mov	r1, r7
 800dbe0:	f7f2 ff9a 	bl	8000b18 <__aeabi_dcmple>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d06f      	beq.n	800dcc8 <_strtod_l+0xa38>
 800dbe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d17a      	bne.n	800dce4 <_strtod_l+0xa54>
 800dbee:	f1ba 0f00 	cmp.w	sl, #0
 800dbf2:	d158      	bne.n	800dca6 <_strtod_l+0xa16>
 800dbf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d15a      	bne.n	800dcb4 <_strtod_l+0xa24>
 800dbfe:	2200      	movs	r2, #0
 800dc00:	4b62      	ldr	r3, [pc, #392]	@ (800dd8c <_strtod_l+0xafc>)
 800dc02:	4630      	mov	r0, r6
 800dc04:	4639      	mov	r1, r7
 800dc06:	f7f2 ff7d 	bl	8000b04 <__aeabi_dcmplt>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d159      	bne.n	800dcc2 <_strtod_l+0xa32>
 800dc0e:	4630      	mov	r0, r6
 800dc10:	4639      	mov	r1, r7
 800dc12:	2200      	movs	r2, #0
 800dc14:	4b5e      	ldr	r3, [pc, #376]	@ (800dd90 <_strtod_l+0xb00>)
 800dc16:	f7f2 fd03 	bl	8000620 <__aeabi_dmul>
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	460f      	mov	r7, r1
 800dc1e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dc22:	9606      	str	r6, [sp, #24]
 800dc24:	9307      	str	r3, [sp, #28]
 800dc26:	4d57      	ldr	r5, [pc, #348]	@ (800dd84 <_strtod_l+0xaf4>)
 800dc28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc32:	401d      	ands	r5, r3
 800dc34:	4b57      	ldr	r3, [pc, #348]	@ (800dd94 <_strtod_l+0xb04>)
 800dc36:	429d      	cmp	r5, r3
 800dc38:	f040 80b0 	bne.w	800dd9c <_strtod_l+0xb0c>
 800dc3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc3e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dc42:	ec4b ab10 	vmov	d0, sl, fp
 800dc46:	f7ff f9c1 	bl	800cfcc <__ulp>
 800dc4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc4e:	ec51 0b10 	vmov	r0, r1, d0
 800dc52:	f7f2 fce5 	bl	8000620 <__aeabi_dmul>
 800dc56:	4652      	mov	r2, sl
 800dc58:	465b      	mov	r3, fp
 800dc5a:	f7f2 fb2b 	bl	80002b4 <__adddf3>
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4948      	ldr	r1, [pc, #288]	@ (800dd84 <_strtod_l+0xaf4>)
 800dc62:	4682      	mov	sl, r0
 800dc64:	4a4c      	ldr	r2, [pc, #304]	@ (800dd98 <_strtod_l+0xb08>)
 800dc66:	4019      	ands	r1, r3
 800dc68:	4291      	cmp	r1, r2
 800dc6a:	d942      	bls.n	800dcf2 <_strtod_l+0xa62>
 800dc6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc6e:	4b46      	ldr	r3, [pc, #280]	@ (800dd88 <_strtod_l+0xaf8>)
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d103      	bne.n	800dc7c <_strtod_l+0x9ec>
 800dc74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc76:	3301      	adds	r3, #1
 800dc78:	f43f ad2b 	beq.w	800d6d2 <_strtod_l+0x442>
 800dc7c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800dd88 <_strtod_l+0xaf8>
 800dc80:	f04f 3aff 	mov.w	sl, #4294967295
 800dc84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc86:	9805      	ldr	r0, [sp, #20]
 800dc88:	f7fe fe66 	bl	800c958 <_Bfree>
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	9805      	ldr	r0, [sp, #20]
 800dc90:	f7fe fe62 	bl	800c958 <_Bfree>
 800dc94:	4641      	mov	r1, r8
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	f7fe fe5e 	bl	800c958 <_Bfree>
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	9805      	ldr	r0, [sp, #20]
 800dca0:	f7fe fe5a 	bl	800c958 <_Bfree>
 800dca4:	e618      	b.n	800d8d8 <_strtod_l+0x648>
 800dca6:	f1ba 0f01 	cmp.w	sl, #1
 800dcaa:	d103      	bne.n	800dcb4 <_strtod_l+0xa24>
 800dcac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f43f ada5 	beq.w	800d7fe <_strtod_l+0x56e>
 800dcb4:	2600      	movs	r6, #0
 800dcb6:	4f35      	ldr	r7, [pc, #212]	@ (800dd8c <_strtod_l+0xafc>)
 800dcb8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800dd60 <_strtod_l+0xad0>
 800dcbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcc0:	e7b1      	b.n	800dc26 <_strtod_l+0x996>
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	4f32      	ldr	r7, [pc, #200]	@ (800dd90 <_strtod_l+0xb00>)
 800dcc6:	e7aa      	b.n	800dc1e <_strtod_l+0x98e>
 800dcc8:	4b31      	ldr	r3, [pc, #196]	@ (800dd90 <_strtod_l+0xb00>)
 800dcca:	4630      	mov	r0, r6
 800dccc:	4639      	mov	r1, r7
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f7f2 fca6 	bl	8000620 <__aeabi_dmul>
 800dcd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	460f      	mov	r7, r1
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d09f      	beq.n	800dc1e <_strtod_l+0x98e>
 800dcde:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dce2:	e7a0      	b.n	800dc26 <_strtod_l+0x996>
 800dce4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800dd68 <_strtod_l+0xad8>
 800dce8:	ec57 6b17 	vmov	r6, r7, d7
 800dcec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcf0:	e799      	b.n	800dc26 <_strtod_l+0x996>
 800dcf2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dcf6:	9b08      	ldr	r3, [sp, #32]
 800dcf8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1c1      	bne.n	800dc84 <_strtod_l+0x9f4>
 800dd00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd04:	0d1b      	lsrs	r3, r3, #20
 800dd06:	051b      	lsls	r3, r3, #20
 800dd08:	429d      	cmp	r5, r3
 800dd0a:	d1bb      	bne.n	800dc84 <_strtod_l+0x9f4>
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	4639      	mov	r1, r7
 800dd10:	f7f2 ffe6 	bl	8000ce0 <__aeabi_d2lz>
 800dd14:	f7f2 fc56 	bl	80005c4 <__aeabi_l2d>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	4639      	mov	r1, r7
 800dd20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dd24:	f7f2 fac4 	bl	80002b0 <__aeabi_dsub>
 800dd28:	460b      	mov	r3, r1
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	ea46 060a 	orr.w	r6, r6, sl
 800dd30:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd36:	431e      	orrs	r6, r3
 800dd38:	d06d      	beq.n	800de16 <_strtod_l+0xb86>
 800dd3a:	a30d      	add	r3, pc, #52	@ (adr r3, 800dd70 <_strtod_l+0xae0>)
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	f7f2 fee0 	bl	8000b04 <__aeabi_dcmplt>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	f47f accf 	bne.w	800d6e8 <_strtod_l+0x458>
 800dd4a:	a30b      	add	r3, pc, #44	@ (adr r3, 800dd78 <_strtod_l+0xae8>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd54:	f7f2 fef4 	bl	8000b40 <__aeabi_dcmpgt>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d093      	beq.n	800dc84 <_strtod_l+0x9f4>
 800dd5c:	e4c4      	b.n	800d6e8 <_strtod_l+0x458>
 800dd5e:	bf00      	nop
 800dd60:	00000000 	.word	0x00000000
 800dd64:	bff00000 	.word	0xbff00000
 800dd68:	00000000 	.word	0x00000000
 800dd6c:	3ff00000 	.word	0x3ff00000
 800dd70:	94a03595 	.word	0x94a03595
 800dd74:	3fdfffff 	.word	0x3fdfffff
 800dd78:	35afe535 	.word	0x35afe535
 800dd7c:	3fe00000 	.word	0x3fe00000
 800dd80:	000fffff 	.word	0x000fffff
 800dd84:	7ff00000 	.word	0x7ff00000
 800dd88:	7fefffff 	.word	0x7fefffff
 800dd8c:	3ff00000 	.word	0x3ff00000
 800dd90:	3fe00000 	.word	0x3fe00000
 800dd94:	7fe00000 	.word	0x7fe00000
 800dd98:	7c9fffff 	.word	0x7c9fffff
 800dd9c:	9b08      	ldr	r3, [sp, #32]
 800dd9e:	b323      	cbz	r3, 800ddea <_strtod_l+0xb5a>
 800dda0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dda4:	d821      	bhi.n	800ddea <_strtod_l+0xb5a>
 800dda6:	4630      	mov	r0, r6
 800dda8:	4639      	mov	r1, r7
 800ddaa:	a327      	add	r3, pc, #156	@ (adr r3, 800de48 <_strtod_l+0xbb8>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	f7f2 feb2 	bl	8000b18 <__aeabi_dcmple>
 800ddb4:	b1a0      	cbz	r0, 800dde0 <_strtod_l+0xb50>
 800ddb6:	4639      	mov	r1, r7
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7f2 ff09 	bl	8000bd0 <__aeabi_d2uiz>
 800ddbe:	2801      	cmp	r0, #1
 800ddc0:	bf38      	it	cc
 800ddc2:	2001      	movcc	r0, #1
 800ddc4:	f7f2 fbb2 	bl	800052c <__aeabi_ui2d>
 800ddc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddca:	4606      	mov	r6, r0
 800ddcc:	460f      	mov	r7, r1
 800ddce:	b9fb      	cbnz	r3, 800de10 <_strtod_l+0xb80>
 800ddd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ddd4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ddd6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ddd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dddc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dde0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dde2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dde6:	1b5b      	subs	r3, r3, r5
 800dde8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ddea:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ddee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddf2:	f7ff f8eb 	bl	800cfcc <__ulp>
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	4659      	mov	r1, fp
 800ddfa:	ec53 2b10 	vmov	r2, r3, d0
 800ddfe:	f7f2 fc0f 	bl	8000620 <__aeabi_dmul>
 800de02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800de06:	f7f2 fa55 	bl	80002b4 <__adddf3>
 800de0a:	4682      	mov	sl, r0
 800de0c:	468b      	mov	fp, r1
 800de0e:	e772      	b.n	800dcf6 <_strtod_l+0xa66>
 800de10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800de14:	e7e0      	b.n	800ddd8 <_strtod_l+0xb48>
 800de16:	a30e      	add	r3, pc, #56	@ (adr r3, 800de50 <_strtod_l+0xbc0>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	f7f2 fe72 	bl	8000b04 <__aeabi_dcmplt>
 800de20:	e79a      	b.n	800dd58 <_strtod_l+0xac8>
 800de22:	2300      	movs	r3, #0
 800de24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de28:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800de2a:	6013      	str	r3, [r2, #0]
 800de2c:	f7ff ba6d 	b.w	800d30a <_strtod_l+0x7a>
 800de30:	2a65      	cmp	r2, #101	@ 0x65
 800de32:	f43f ab67 	beq.w	800d504 <_strtod_l+0x274>
 800de36:	2a45      	cmp	r2, #69	@ 0x45
 800de38:	f43f ab64 	beq.w	800d504 <_strtod_l+0x274>
 800de3c:	2301      	movs	r3, #1
 800de3e:	f7ff bba0 	b.w	800d582 <_strtod_l+0x2f2>
 800de42:	bf00      	nop
 800de44:	f3af 8000 	nop.w
 800de48:	ffc00000 	.word	0xffc00000
 800de4c:	41dfffff 	.word	0x41dfffff
 800de50:	94a03595 	.word	0x94a03595
 800de54:	3fcfffff 	.word	0x3fcfffff

0800de58 <_strtod_r>:
 800de58:	4b01      	ldr	r3, [pc, #4]	@ (800de60 <_strtod_r+0x8>)
 800de5a:	f7ff ba19 	b.w	800d290 <_strtod_l>
 800de5e:	bf00      	nop
 800de60:	20000068 	.word	0x20000068

0800de64 <_strtol_l.constprop.0>:
 800de64:	2b24      	cmp	r3, #36	@ 0x24
 800de66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de6a:	4686      	mov	lr, r0
 800de6c:	4690      	mov	r8, r2
 800de6e:	d801      	bhi.n	800de74 <_strtol_l.constprop.0+0x10>
 800de70:	2b01      	cmp	r3, #1
 800de72:	d106      	bne.n	800de82 <_strtol_l.constprop.0+0x1e>
 800de74:	f7fd fd9c 	bl	800b9b0 <__errno>
 800de78:	2316      	movs	r3, #22
 800de7a:	6003      	str	r3, [r0, #0]
 800de7c:	2000      	movs	r0, #0
 800de7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de82:	460d      	mov	r5, r1
 800de84:	4833      	ldr	r0, [pc, #204]	@ (800df54 <_strtol_l.constprop.0+0xf0>)
 800de86:	462a      	mov	r2, r5
 800de88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de8c:	5d06      	ldrb	r6, [r0, r4]
 800de8e:	f016 0608 	ands.w	r6, r6, #8
 800de92:	d1f8      	bne.n	800de86 <_strtol_l.constprop.0+0x22>
 800de94:	2c2d      	cmp	r4, #45	@ 0x2d
 800de96:	d12d      	bne.n	800def4 <_strtol_l.constprop.0+0x90>
 800de98:	782c      	ldrb	r4, [r5, #0]
 800de9a:	2601      	movs	r6, #1
 800de9c:	1c95      	adds	r5, r2, #2
 800de9e:	f033 0210 	bics.w	r2, r3, #16
 800dea2:	d109      	bne.n	800deb8 <_strtol_l.constprop.0+0x54>
 800dea4:	2c30      	cmp	r4, #48	@ 0x30
 800dea6:	d12a      	bne.n	800defe <_strtol_l.constprop.0+0x9a>
 800dea8:	782a      	ldrb	r2, [r5, #0]
 800deaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800deae:	2a58      	cmp	r2, #88	@ 0x58
 800deb0:	d125      	bne.n	800defe <_strtol_l.constprop.0+0x9a>
 800deb2:	786c      	ldrb	r4, [r5, #1]
 800deb4:	2310      	movs	r3, #16
 800deb6:	3502      	adds	r5, #2
 800deb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800debc:	2200      	movs	r2, #0
 800debe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dec2:	4610      	mov	r0, r2
 800dec4:	fbbc f9f3 	udiv	r9, ip, r3
 800dec8:	fb03 ca19 	mls	sl, r3, r9, ip
 800decc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ded0:	2f09      	cmp	r7, #9
 800ded2:	d81b      	bhi.n	800df0c <_strtol_l.constprop.0+0xa8>
 800ded4:	463c      	mov	r4, r7
 800ded6:	42a3      	cmp	r3, r4
 800ded8:	dd27      	ble.n	800df2a <_strtol_l.constprop.0+0xc6>
 800deda:	1c57      	adds	r7, r2, #1
 800dedc:	d007      	beq.n	800deee <_strtol_l.constprop.0+0x8a>
 800dede:	4581      	cmp	r9, r0
 800dee0:	d320      	bcc.n	800df24 <_strtol_l.constprop.0+0xc0>
 800dee2:	d101      	bne.n	800dee8 <_strtol_l.constprop.0+0x84>
 800dee4:	45a2      	cmp	sl, r4
 800dee6:	db1d      	blt.n	800df24 <_strtol_l.constprop.0+0xc0>
 800dee8:	fb00 4003 	mla	r0, r0, r3, r4
 800deec:	2201      	movs	r2, #1
 800deee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800def2:	e7eb      	b.n	800decc <_strtol_l.constprop.0+0x68>
 800def4:	2c2b      	cmp	r4, #43	@ 0x2b
 800def6:	bf04      	itt	eq
 800def8:	782c      	ldrbeq	r4, [r5, #0]
 800defa:	1c95      	addeq	r5, r2, #2
 800defc:	e7cf      	b.n	800de9e <_strtol_l.constprop.0+0x3a>
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1da      	bne.n	800deb8 <_strtol_l.constprop.0+0x54>
 800df02:	2c30      	cmp	r4, #48	@ 0x30
 800df04:	bf0c      	ite	eq
 800df06:	2308      	moveq	r3, #8
 800df08:	230a      	movne	r3, #10
 800df0a:	e7d5      	b.n	800deb8 <_strtol_l.constprop.0+0x54>
 800df0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800df10:	2f19      	cmp	r7, #25
 800df12:	d801      	bhi.n	800df18 <_strtol_l.constprop.0+0xb4>
 800df14:	3c37      	subs	r4, #55	@ 0x37
 800df16:	e7de      	b.n	800ded6 <_strtol_l.constprop.0+0x72>
 800df18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800df1c:	2f19      	cmp	r7, #25
 800df1e:	d804      	bhi.n	800df2a <_strtol_l.constprop.0+0xc6>
 800df20:	3c57      	subs	r4, #87	@ 0x57
 800df22:	e7d8      	b.n	800ded6 <_strtol_l.constprop.0+0x72>
 800df24:	f04f 32ff 	mov.w	r2, #4294967295
 800df28:	e7e1      	b.n	800deee <_strtol_l.constprop.0+0x8a>
 800df2a:	1c53      	adds	r3, r2, #1
 800df2c:	d108      	bne.n	800df40 <_strtol_l.constprop.0+0xdc>
 800df2e:	2322      	movs	r3, #34	@ 0x22
 800df30:	4660      	mov	r0, ip
 800df32:	f8ce 3000 	str.w	r3, [lr]
 800df36:	f1b8 0f00 	cmp.w	r8, #0
 800df3a:	d0a0      	beq.n	800de7e <_strtol_l.constprop.0+0x1a>
 800df3c:	1e69      	subs	r1, r5, #1
 800df3e:	e006      	b.n	800df4e <_strtol_l.constprop.0+0xea>
 800df40:	b106      	cbz	r6, 800df44 <_strtol_l.constprop.0+0xe0>
 800df42:	4240      	negs	r0, r0
 800df44:	f1b8 0f00 	cmp.w	r8, #0
 800df48:	d099      	beq.n	800de7e <_strtol_l.constprop.0+0x1a>
 800df4a:	2a00      	cmp	r2, #0
 800df4c:	d1f6      	bne.n	800df3c <_strtol_l.constprop.0+0xd8>
 800df4e:	f8c8 1000 	str.w	r1, [r8]
 800df52:	e794      	b.n	800de7e <_strtol_l.constprop.0+0x1a>
 800df54:	0800f409 	.word	0x0800f409

0800df58 <_strtol_r>:
 800df58:	f7ff bf84 	b.w	800de64 <_strtol_l.constprop.0>

0800df5c <__ssputs_r>:
 800df5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df60:	461f      	mov	r7, r3
 800df62:	688e      	ldr	r6, [r1, #8]
 800df64:	4682      	mov	sl, r0
 800df66:	460c      	mov	r4, r1
 800df68:	42be      	cmp	r6, r7
 800df6a:	4690      	mov	r8, r2
 800df6c:	680b      	ldr	r3, [r1, #0]
 800df6e:	d82d      	bhi.n	800dfcc <__ssputs_r+0x70>
 800df70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df78:	d026      	beq.n	800dfc8 <__ssputs_r+0x6c>
 800df7a:	6965      	ldr	r5, [r4, #20]
 800df7c:	6909      	ldr	r1, [r1, #16]
 800df7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df82:	eba3 0901 	sub.w	r9, r3, r1
 800df86:	1c7b      	adds	r3, r7, #1
 800df88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df8c:	444b      	add	r3, r9
 800df8e:	106d      	asrs	r5, r5, #1
 800df90:	429d      	cmp	r5, r3
 800df92:	bf38      	it	cc
 800df94:	461d      	movcc	r5, r3
 800df96:	0553      	lsls	r3, r2, #21
 800df98:	d527      	bpl.n	800dfea <__ssputs_r+0x8e>
 800df9a:	4629      	mov	r1, r5
 800df9c:	f7fe fc10 	bl	800c7c0 <_malloc_r>
 800dfa0:	4606      	mov	r6, r0
 800dfa2:	b360      	cbz	r0, 800dffe <__ssputs_r+0xa2>
 800dfa4:	464a      	mov	r2, r9
 800dfa6:	6921      	ldr	r1, [r4, #16]
 800dfa8:	f000 fbee 	bl	800e788 <memcpy>
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfb6:	81a3      	strh	r3, [r4, #12]
 800dfb8:	6126      	str	r6, [r4, #16]
 800dfba:	444e      	add	r6, r9
 800dfbc:	6165      	str	r5, [r4, #20]
 800dfbe:	eba5 0509 	sub.w	r5, r5, r9
 800dfc2:	6026      	str	r6, [r4, #0]
 800dfc4:	463e      	mov	r6, r7
 800dfc6:	60a5      	str	r5, [r4, #8]
 800dfc8:	42be      	cmp	r6, r7
 800dfca:	d900      	bls.n	800dfce <__ssputs_r+0x72>
 800dfcc:	463e      	mov	r6, r7
 800dfce:	4632      	mov	r2, r6
 800dfd0:	4641      	mov	r1, r8
 800dfd2:	6820      	ldr	r0, [r4, #0]
 800dfd4:	f000 fb9c 	bl	800e710 <memmove>
 800dfd8:	68a3      	ldr	r3, [r4, #8]
 800dfda:	2000      	movs	r0, #0
 800dfdc:	1b9b      	subs	r3, r3, r6
 800dfde:	60a3      	str	r3, [r4, #8]
 800dfe0:	6823      	ldr	r3, [r4, #0]
 800dfe2:	4433      	add	r3, r6
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfea:	462a      	mov	r2, r5
 800dfec:	f000 ff5d 	bl	800eeaa <_realloc_r>
 800dff0:	4606      	mov	r6, r0
 800dff2:	2800      	cmp	r0, #0
 800dff4:	d1e0      	bne.n	800dfb8 <__ssputs_r+0x5c>
 800dff6:	6921      	ldr	r1, [r4, #16]
 800dff8:	4650      	mov	r0, sl
 800dffa:	f7fe fb6d 	bl	800c6d8 <_free_r>
 800dffe:	230c      	movs	r3, #12
 800e000:	f04f 30ff 	mov.w	r0, #4294967295
 800e004:	f8ca 3000 	str.w	r3, [sl]
 800e008:	89a3      	ldrh	r3, [r4, #12]
 800e00a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e00e:	81a3      	strh	r3, [r4, #12]
 800e010:	e7e9      	b.n	800dfe6 <__ssputs_r+0x8a>
	...

0800e014 <_svfiprintf_r>:
 800e014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e018:	4698      	mov	r8, r3
 800e01a:	898b      	ldrh	r3, [r1, #12]
 800e01c:	b09d      	sub	sp, #116	@ 0x74
 800e01e:	4607      	mov	r7, r0
 800e020:	061b      	lsls	r3, r3, #24
 800e022:	460d      	mov	r5, r1
 800e024:	4614      	mov	r4, r2
 800e026:	d510      	bpl.n	800e04a <_svfiprintf_r+0x36>
 800e028:	690b      	ldr	r3, [r1, #16]
 800e02a:	b973      	cbnz	r3, 800e04a <_svfiprintf_r+0x36>
 800e02c:	2140      	movs	r1, #64	@ 0x40
 800e02e:	f7fe fbc7 	bl	800c7c0 <_malloc_r>
 800e032:	6028      	str	r0, [r5, #0]
 800e034:	6128      	str	r0, [r5, #16]
 800e036:	b930      	cbnz	r0, 800e046 <_svfiprintf_r+0x32>
 800e038:	230c      	movs	r3, #12
 800e03a:	603b      	str	r3, [r7, #0]
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	b01d      	add	sp, #116	@ 0x74
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	2340      	movs	r3, #64	@ 0x40
 800e048:	616b      	str	r3, [r5, #20]
 800e04a:	2300      	movs	r3, #0
 800e04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e050:	f04f 0901 	mov.w	r9, #1
 800e054:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e1f8 <_svfiprintf_r+0x1e4>
 800e058:	9309      	str	r3, [sp, #36]	@ 0x24
 800e05a:	2320      	movs	r3, #32
 800e05c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e060:	2330      	movs	r3, #48	@ 0x30
 800e062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e066:	4623      	mov	r3, r4
 800e068:	469a      	mov	sl, r3
 800e06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e06e:	b10a      	cbz	r2, 800e074 <_svfiprintf_r+0x60>
 800e070:	2a25      	cmp	r2, #37	@ 0x25
 800e072:	d1f9      	bne.n	800e068 <_svfiprintf_r+0x54>
 800e074:	ebba 0b04 	subs.w	fp, sl, r4
 800e078:	d00b      	beq.n	800e092 <_svfiprintf_r+0x7e>
 800e07a:	465b      	mov	r3, fp
 800e07c:	4622      	mov	r2, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	4638      	mov	r0, r7
 800e082:	f7ff ff6b 	bl	800df5c <__ssputs_r>
 800e086:	3001      	adds	r0, #1
 800e088:	f000 80a7 	beq.w	800e1da <_svfiprintf_r+0x1c6>
 800e08c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e08e:	445a      	add	r2, fp
 800e090:	9209      	str	r2, [sp, #36]	@ 0x24
 800e092:	f89a 3000 	ldrb.w	r3, [sl]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 809f 	beq.w	800e1da <_svfiprintf_r+0x1c6>
 800e09c:	2300      	movs	r3, #0
 800e09e:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a2:	f10a 0a01 	add.w	sl, sl, #1
 800e0a6:	9304      	str	r3, [sp, #16]
 800e0a8:	9307      	str	r3, [sp, #28]
 800e0aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0b4:	4654      	mov	r4, sl
 800e0b6:	2205      	movs	r2, #5
 800e0b8:	484f      	ldr	r0, [pc, #316]	@ (800e1f8 <_svfiprintf_r+0x1e4>)
 800e0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0be:	f7fd fca4 	bl	800ba0a <memchr>
 800e0c2:	9a04      	ldr	r2, [sp, #16]
 800e0c4:	b9d8      	cbnz	r0, 800e0fe <_svfiprintf_r+0xea>
 800e0c6:	06d0      	lsls	r0, r2, #27
 800e0c8:	bf44      	itt	mi
 800e0ca:	2320      	movmi	r3, #32
 800e0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0d0:	0711      	lsls	r1, r2, #28
 800e0d2:	bf44      	itt	mi
 800e0d4:	232b      	movmi	r3, #43	@ 0x2b
 800e0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0da:	f89a 3000 	ldrb.w	r3, [sl]
 800e0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0e0:	d015      	beq.n	800e10e <_svfiprintf_r+0xfa>
 800e0e2:	9a07      	ldr	r2, [sp, #28]
 800e0e4:	4654      	mov	r4, sl
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f04f 0c0a 	mov.w	ip, #10
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0f2:	3b30      	subs	r3, #48	@ 0x30
 800e0f4:	2b09      	cmp	r3, #9
 800e0f6:	d94b      	bls.n	800e190 <_svfiprintf_r+0x17c>
 800e0f8:	b1b0      	cbz	r0, 800e128 <_svfiprintf_r+0x114>
 800e0fa:	9207      	str	r2, [sp, #28]
 800e0fc:	e014      	b.n	800e128 <_svfiprintf_r+0x114>
 800e0fe:	eba0 0308 	sub.w	r3, r0, r8
 800e102:	46a2      	mov	sl, r4
 800e104:	fa09 f303 	lsl.w	r3, r9, r3
 800e108:	4313      	orrs	r3, r2
 800e10a:	9304      	str	r3, [sp, #16]
 800e10c:	e7d2      	b.n	800e0b4 <_svfiprintf_r+0xa0>
 800e10e:	9b03      	ldr	r3, [sp, #12]
 800e110:	1d19      	adds	r1, r3, #4
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	9103      	str	r1, [sp, #12]
 800e118:	bfbb      	ittet	lt
 800e11a:	425b      	neglt	r3, r3
 800e11c:	f042 0202 	orrlt.w	r2, r2, #2
 800e120:	9307      	strge	r3, [sp, #28]
 800e122:	9307      	strlt	r3, [sp, #28]
 800e124:	bfb8      	it	lt
 800e126:	9204      	strlt	r2, [sp, #16]
 800e128:	7823      	ldrb	r3, [r4, #0]
 800e12a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e12c:	d10a      	bne.n	800e144 <_svfiprintf_r+0x130>
 800e12e:	7863      	ldrb	r3, [r4, #1]
 800e130:	2b2a      	cmp	r3, #42	@ 0x2a
 800e132:	d132      	bne.n	800e19a <_svfiprintf_r+0x186>
 800e134:	9b03      	ldr	r3, [sp, #12]
 800e136:	3402      	adds	r4, #2
 800e138:	1d1a      	adds	r2, r3, #4
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e140:	9203      	str	r2, [sp, #12]
 800e142:	9305      	str	r3, [sp, #20]
 800e144:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e208 <_svfiprintf_r+0x1f4>
 800e148:	2203      	movs	r2, #3
 800e14a:	7821      	ldrb	r1, [r4, #0]
 800e14c:	4650      	mov	r0, sl
 800e14e:	f7fd fc5c 	bl	800ba0a <memchr>
 800e152:	b138      	cbz	r0, 800e164 <_svfiprintf_r+0x150>
 800e154:	eba0 000a 	sub.w	r0, r0, sl
 800e158:	2240      	movs	r2, #64	@ 0x40
 800e15a:	9b04      	ldr	r3, [sp, #16]
 800e15c:	3401      	adds	r4, #1
 800e15e:	4082      	lsls	r2, r0
 800e160:	4313      	orrs	r3, r2
 800e162:	9304      	str	r3, [sp, #16]
 800e164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e168:	2206      	movs	r2, #6
 800e16a:	4824      	ldr	r0, [pc, #144]	@ (800e1fc <_svfiprintf_r+0x1e8>)
 800e16c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e170:	f7fd fc4b 	bl	800ba0a <memchr>
 800e174:	2800      	cmp	r0, #0
 800e176:	d036      	beq.n	800e1e6 <_svfiprintf_r+0x1d2>
 800e178:	4b21      	ldr	r3, [pc, #132]	@ (800e200 <_svfiprintf_r+0x1ec>)
 800e17a:	bb1b      	cbnz	r3, 800e1c4 <_svfiprintf_r+0x1b0>
 800e17c:	9b03      	ldr	r3, [sp, #12]
 800e17e:	3307      	adds	r3, #7
 800e180:	f023 0307 	bic.w	r3, r3, #7
 800e184:	3308      	adds	r3, #8
 800e186:	9303      	str	r3, [sp, #12]
 800e188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e18a:	4433      	add	r3, r6
 800e18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e18e:	e76a      	b.n	800e066 <_svfiprintf_r+0x52>
 800e190:	fb0c 3202 	mla	r2, ip, r2, r3
 800e194:	460c      	mov	r4, r1
 800e196:	2001      	movs	r0, #1
 800e198:	e7a8      	b.n	800e0ec <_svfiprintf_r+0xd8>
 800e19a:	2300      	movs	r3, #0
 800e19c:	3401      	adds	r4, #1
 800e19e:	f04f 0c0a 	mov.w	ip, #10
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	9305      	str	r3, [sp, #20]
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ac:	3a30      	subs	r2, #48	@ 0x30
 800e1ae:	2a09      	cmp	r2, #9
 800e1b0:	d903      	bls.n	800e1ba <_svfiprintf_r+0x1a6>
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d0c6      	beq.n	800e144 <_svfiprintf_r+0x130>
 800e1b6:	9105      	str	r1, [sp, #20]
 800e1b8:	e7c4      	b.n	800e144 <_svfiprintf_r+0x130>
 800e1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1be:	4604      	mov	r4, r0
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e7f0      	b.n	800e1a6 <_svfiprintf_r+0x192>
 800e1c4:	ab03      	add	r3, sp, #12
 800e1c6:	462a      	mov	r2, r5
 800e1c8:	a904      	add	r1, sp, #16
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e204 <_svfiprintf_r+0x1f0>)
 800e1d0:	f7fc fc96 	bl	800ab00 <_printf_float>
 800e1d4:	1c42      	adds	r2, r0, #1
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	d1d6      	bne.n	800e188 <_svfiprintf_r+0x174>
 800e1da:	89ab      	ldrh	r3, [r5, #12]
 800e1dc:	065b      	lsls	r3, r3, #25
 800e1de:	f53f af2d 	bmi.w	800e03c <_svfiprintf_r+0x28>
 800e1e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1e4:	e72c      	b.n	800e040 <_svfiprintf_r+0x2c>
 800e1e6:	ab03      	add	r3, sp, #12
 800e1e8:	462a      	mov	r2, r5
 800e1ea:	a904      	add	r1, sp, #16
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	4b04      	ldr	r3, [pc, #16]	@ (800e204 <_svfiprintf_r+0x1f0>)
 800e1f2:	f7fc ff21 	bl	800b038 <_printf_i>
 800e1f6:	e7ed      	b.n	800e1d4 <_svfiprintf_r+0x1c0>
 800e1f8:	0800f509 	.word	0x0800f509
 800e1fc:	0800f513 	.word	0x0800f513
 800e200:	0800ab01 	.word	0x0800ab01
 800e204:	0800df5d 	.word	0x0800df5d
 800e208:	0800f50f 	.word	0x0800f50f

0800e20c <__sfputc_r>:
 800e20c:	6893      	ldr	r3, [r2, #8]
 800e20e:	3b01      	subs	r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	6093      	str	r3, [r2, #8]
 800e214:	b410      	push	{r4}
 800e216:	da08      	bge.n	800e22a <__sfputc_r+0x1e>
 800e218:	6994      	ldr	r4, [r2, #24]
 800e21a:	42a3      	cmp	r3, r4
 800e21c:	db01      	blt.n	800e222 <__sfputc_r+0x16>
 800e21e:	290a      	cmp	r1, #10
 800e220:	d103      	bne.n	800e22a <__sfputc_r+0x1e>
 800e222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e226:	f000 b9df 	b.w	800e5e8 <__swbuf_r>
 800e22a:	6813      	ldr	r3, [r2, #0]
 800e22c:	1c58      	adds	r0, r3, #1
 800e22e:	6010      	str	r0, [r2, #0]
 800e230:	4608      	mov	r0, r1
 800e232:	7019      	strb	r1, [r3, #0]
 800e234:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <__sfputs_r>:
 800e23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23c:	4606      	mov	r6, r0
 800e23e:	460f      	mov	r7, r1
 800e240:	4614      	mov	r4, r2
 800e242:	18d5      	adds	r5, r2, r3
 800e244:	42ac      	cmp	r4, r5
 800e246:	d101      	bne.n	800e24c <__sfputs_r+0x12>
 800e248:	2000      	movs	r0, #0
 800e24a:	e007      	b.n	800e25c <__sfputs_r+0x22>
 800e24c:	463a      	mov	r2, r7
 800e24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e252:	4630      	mov	r0, r6
 800e254:	f7ff ffda 	bl	800e20c <__sfputc_r>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d1f3      	bne.n	800e244 <__sfputs_r+0xa>
 800e25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e260 <_vfiprintf_r>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	460d      	mov	r5, r1
 800e266:	b09d      	sub	sp, #116	@ 0x74
 800e268:	4614      	mov	r4, r2
 800e26a:	4698      	mov	r8, r3
 800e26c:	4606      	mov	r6, r0
 800e26e:	b118      	cbz	r0, 800e278 <_vfiprintf_r+0x18>
 800e270:	6a03      	ldr	r3, [r0, #32]
 800e272:	b90b      	cbnz	r3, 800e278 <_vfiprintf_r+0x18>
 800e274:	f7fd fa9e 	bl	800b7b4 <__sinit>
 800e278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e27a:	07d9      	lsls	r1, r3, #31
 800e27c:	d405      	bmi.n	800e28a <_vfiprintf_r+0x2a>
 800e27e:	89ab      	ldrh	r3, [r5, #12]
 800e280:	059a      	lsls	r2, r3, #22
 800e282:	d402      	bmi.n	800e28a <_vfiprintf_r+0x2a>
 800e284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e286:	f7fd fbbe 	bl	800ba06 <__retarget_lock_acquire_recursive>
 800e28a:	89ab      	ldrh	r3, [r5, #12]
 800e28c:	071b      	lsls	r3, r3, #28
 800e28e:	d501      	bpl.n	800e294 <_vfiprintf_r+0x34>
 800e290:	692b      	ldr	r3, [r5, #16]
 800e292:	b99b      	cbnz	r3, 800e2bc <_vfiprintf_r+0x5c>
 800e294:	4629      	mov	r1, r5
 800e296:	4630      	mov	r0, r6
 800e298:	f000 f9e4 	bl	800e664 <__swsetup_r>
 800e29c:	b170      	cbz	r0, 800e2bc <_vfiprintf_r+0x5c>
 800e29e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2a0:	07dc      	lsls	r4, r3, #31
 800e2a2:	d504      	bpl.n	800e2ae <_vfiprintf_r+0x4e>
 800e2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a8:	b01d      	add	sp, #116	@ 0x74
 800e2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ae:	89ab      	ldrh	r3, [r5, #12]
 800e2b0:	0598      	lsls	r0, r3, #22
 800e2b2:	d4f7      	bmi.n	800e2a4 <_vfiprintf_r+0x44>
 800e2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2b6:	f7fd fba7 	bl	800ba08 <__retarget_lock_release_recursive>
 800e2ba:	e7f3      	b.n	800e2a4 <_vfiprintf_r+0x44>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2c2:	f04f 0901 	mov.w	r9, #1
 800e2c6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800e47c <_vfiprintf_r+0x21c>
 800e2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2cc:	2320      	movs	r3, #32
 800e2ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2d2:	2330      	movs	r3, #48	@ 0x30
 800e2d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2d8:	4623      	mov	r3, r4
 800e2da:	469a      	mov	sl, r3
 800e2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2e0:	b10a      	cbz	r2, 800e2e6 <_vfiprintf_r+0x86>
 800e2e2:	2a25      	cmp	r2, #37	@ 0x25
 800e2e4:	d1f9      	bne.n	800e2da <_vfiprintf_r+0x7a>
 800e2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800e2ea:	d00b      	beq.n	800e304 <_vfiprintf_r+0xa4>
 800e2ec:	465b      	mov	r3, fp
 800e2ee:	4622      	mov	r2, r4
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f7ff ffa1 	bl	800e23a <__sfputs_r>
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	f000 80a7 	beq.w	800e44c <_vfiprintf_r+0x1ec>
 800e2fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e300:	445a      	add	r2, fp
 800e302:	9209      	str	r2, [sp, #36]	@ 0x24
 800e304:	f89a 3000 	ldrb.w	r3, [sl]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 809f 	beq.w	800e44c <_vfiprintf_r+0x1ec>
 800e30e:	2300      	movs	r3, #0
 800e310:	f04f 32ff 	mov.w	r2, #4294967295
 800e314:	f10a 0a01 	add.w	sl, sl, #1
 800e318:	9304      	str	r3, [sp, #16]
 800e31a:	9307      	str	r3, [sp, #28]
 800e31c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e320:	931a      	str	r3, [sp, #104]	@ 0x68
 800e322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e326:	4654      	mov	r4, sl
 800e328:	2205      	movs	r2, #5
 800e32a:	4854      	ldr	r0, [pc, #336]	@ (800e47c <_vfiprintf_r+0x21c>)
 800e32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e330:	f7fd fb6b 	bl	800ba0a <memchr>
 800e334:	9a04      	ldr	r2, [sp, #16]
 800e336:	b9d8      	cbnz	r0, 800e370 <_vfiprintf_r+0x110>
 800e338:	06d1      	lsls	r1, r2, #27
 800e33a:	bf44      	itt	mi
 800e33c:	2320      	movmi	r3, #32
 800e33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e342:	0713      	lsls	r3, r2, #28
 800e344:	bf44      	itt	mi
 800e346:	232b      	movmi	r3, #43	@ 0x2b
 800e348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e34c:	f89a 3000 	ldrb.w	r3, [sl]
 800e350:	2b2a      	cmp	r3, #42	@ 0x2a
 800e352:	d015      	beq.n	800e380 <_vfiprintf_r+0x120>
 800e354:	9a07      	ldr	r2, [sp, #28]
 800e356:	4654      	mov	r4, sl
 800e358:	2000      	movs	r0, #0
 800e35a:	f04f 0c0a 	mov.w	ip, #10
 800e35e:	4621      	mov	r1, r4
 800e360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e364:	3b30      	subs	r3, #48	@ 0x30
 800e366:	2b09      	cmp	r3, #9
 800e368:	d94b      	bls.n	800e402 <_vfiprintf_r+0x1a2>
 800e36a:	b1b0      	cbz	r0, 800e39a <_vfiprintf_r+0x13a>
 800e36c:	9207      	str	r2, [sp, #28]
 800e36e:	e014      	b.n	800e39a <_vfiprintf_r+0x13a>
 800e370:	eba0 0308 	sub.w	r3, r0, r8
 800e374:	46a2      	mov	sl, r4
 800e376:	fa09 f303 	lsl.w	r3, r9, r3
 800e37a:	4313      	orrs	r3, r2
 800e37c:	9304      	str	r3, [sp, #16]
 800e37e:	e7d2      	b.n	800e326 <_vfiprintf_r+0xc6>
 800e380:	9b03      	ldr	r3, [sp, #12]
 800e382:	1d19      	adds	r1, r3, #4
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	9103      	str	r1, [sp, #12]
 800e38a:	bfbb      	ittet	lt
 800e38c:	425b      	neglt	r3, r3
 800e38e:	f042 0202 	orrlt.w	r2, r2, #2
 800e392:	9307      	strge	r3, [sp, #28]
 800e394:	9307      	strlt	r3, [sp, #28]
 800e396:	bfb8      	it	lt
 800e398:	9204      	strlt	r2, [sp, #16]
 800e39a:	7823      	ldrb	r3, [r4, #0]
 800e39c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e39e:	d10a      	bne.n	800e3b6 <_vfiprintf_r+0x156>
 800e3a0:	7863      	ldrb	r3, [r4, #1]
 800e3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3a4:	d132      	bne.n	800e40c <_vfiprintf_r+0x1ac>
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	3402      	adds	r4, #2
 800e3aa:	1d1a      	adds	r2, r3, #4
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3b2:	9203      	str	r2, [sp, #12]
 800e3b4:	9305      	str	r3, [sp, #20]
 800e3b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e48c <_vfiprintf_r+0x22c>
 800e3ba:	2203      	movs	r2, #3
 800e3bc:	7821      	ldrb	r1, [r4, #0]
 800e3be:	4650      	mov	r0, sl
 800e3c0:	f7fd fb23 	bl	800ba0a <memchr>
 800e3c4:	b138      	cbz	r0, 800e3d6 <_vfiprintf_r+0x176>
 800e3c6:	eba0 000a 	sub.w	r0, r0, sl
 800e3ca:	2240      	movs	r2, #64	@ 0x40
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	3401      	adds	r4, #1
 800e3d0:	4082      	lsls	r2, r0
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	9304      	str	r3, [sp, #16]
 800e3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3da:	2206      	movs	r2, #6
 800e3dc:	4828      	ldr	r0, [pc, #160]	@ (800e480 <_vfiprintf_r+0x220>)
 800e3de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3e2:	f7fd fb12 	bl	800ba0a <memchr>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d03f      	beq.n	800e46a <_vfiprintf_r+0x20a>
 800e3ea:	4b26      	ldr	r3, [pc, #152]	@ (800e484 <_vfiprintf_r+0x224>)
 800e3ec:	bb1b      	cbnz	r3, 800e436 <_vfiprintf_r+0x1d6>
 800e3ee:	9b03      	ldr	r3, [sp, #12]
 800e3f0:	3307      	adds	r3, #7
 800e3f2:	f023 0307 	bic.w	r3, r3, #7
 800e3f6:	3308      	adds	r3, #8
 800e3f8:	9303      	str	r3, [sp, #12]
 800e3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3fc:	443b      	add	r3, r7
 800e3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800e400:	e76a      	b.n	800e2d8 <_vfiprintf_r+0x78>
 800e402:	fb0c 3202 	mla	r2, ip, r2, r3
 800e406:	460c      	mov	r4, r1
 800e408:	2001      	movs	r0, #1
 800e40a:	e7a8      	b.n	800e35e <_vfiprintf_r+0xfe>
 800e40c:	2300      	movs	r3, #0
 800e40e:	3401      	adds	r4, #1
 800e410:	f04f 0c0a 	mov.w	ip, #10
 800e414:	4619      	mov	r1, r3
 800e416:	9305      	str	r3, [sp, #20]
 800e418:	4620      	mov	r0, r4
 800e41a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e41e:	3a30      	subs	r2, #48	@ 0x30
 800e420:	2a09      	cmp	r2, #9
 800e422:	d903      	bls.n	800e42c <_vfiprintf_r+0x1cc>
 800e424:	2b00      	cmp	r3, #0
 800e426:	d0c6      	beq.n	800e3b6 <_vfiprintf_r+0x156>
 800e428:	9105      	str	r1, [sp, #20]
 800e42a:	e7c4      	b.n	800e3b6 <_vfiprintf_r+0x156>
 800e42c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e430:	4604      	mov	r4, r0
 800e432:	2301      	movs	r3, #1
 800e434:	e7f0      	b.n	800e418 <_vfiprintf_r+0x1b8>
 800e436:	ab03      	add	r3, sp, #12
 800e438:	462a      	mov	r2, r5
 800e43a:	a904      	add	r1, sp, #16
 800e43c:	4630      	mov	r0, r6
 800e43e:	9300      	str	r3, [sp, #0]
 800e440:	4b11      	ldr	r3, [pc, #68]	@ (800e488 <_vfiprintf_r+0x228>)
 800e442:	f7fc fb5d 	bl	800ab00 <_printf_float>
 800e446:	4607      	mov	r7, r0
 800e448:	1c78      	adds	r0, r7, #1
 800e44a:	d1d6      	bne.n	800e3fa <_vfiprintf_r+0x19a>
 800e44c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e44e:	07d9      	lsls	r1, r3, #31
 800e450:	d405      	bmi.n	800e45e <_vfiprintf_r+0x1fe>
 800e452:	89ab      	ldrh	r3, [r5, #12]
 800e454:	059a      	lsls	r2, r3, #22
 800e456:	d402      	bmi.n	800e45e <_vfiprintf_r+0x1fe>
 800e458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e45a:	f7fd fad5 	bl	800ba08 <__retarget_lock_release_recursive>
 800e45e:	89ab      	ldrh	r3, [r5, #12]
 800e460:	065b      	lsls	r3, r3, #25
 800e462:	f53f af1f 	bmi.w	800e2a4 <_vfiprintf_r+0x44>
 800e466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e468:	e71e      	b.n	800e2a8 <_vfiprintf_r+0x48>
 800e46a:	ab03      	add	r3, sp, #12
 800e46c:	462a      	mov	r2, r5
 800e46e:	a904      	add	r1, sp, #16
 800e470:	4630      	mov	r0, r6
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	4b04      	ldr	r3, [pc, #16]	@ (800e488 <_vfiprintf_r+0x228>)
 800e476:	f7fc fddf 	bl	800b038 <_printf_i>
 800e47a:	e7e4      	b.n	800e446 <_vfiprintf_r+0x1e6>
 800e47c:	0800f509 	.word	0x0800f509
 800e480:	0800f513 	.word	0x0800f513
 800e484:	0800ab01 	.word	0x0800ab01
 800e488:	0800e23b 	.word	0x0800e23b
 800e48c:	0800f50f 	.word	0x0800f50f

0800e490 <__sflush_r>:
 800e490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e498:	0716      	lsls	r6, r2, #28
 800e49a:	4605      	mov	r5, r0
 800e49c:	460c      	mov	r4, r1
 800e49e:	d454      	bmi.n	800e54a <__sflush_r+0xba>
 800e4a0:	684b      	ldr	r3, [r1, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dc02      	bgt.n	800e4ac <__sflush_r+0x1c>
 800e4a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dd48      	ble.n	800e53e <__sflush_r+0xae>
 800e4ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4ae:	2e00      	cmp	r6, #0
 800e4b0:	d045      	beq.n	800e53e <__sflush_r+0xae>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4b8:	682f      	ldr	r7, [r5, #0]
 800e4ba:	6a21      	ldr	r1, [r4, #32]
 800e4bc:	602b      	str	r3, [r5, #0]
 800e4be:	d030      	beq.n	800e522 <__sflush_r+0x92>
 800e4c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	0759      	lsls	r1, r3, #29
 800e4c6:	d505      	bpl.n	800e4d4 <__sflush_r+0x44>
 800e4c8:	6863      	ldr	r3, [r4, #4]
 800e4ca:	1ad2      	subs	r2, r2, r3
 800e4cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4ce:	b10b      	cbz	r3, 800e4d4 <__sflush_r+0x44>
 800e4d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4d2:	1ad2      	subs	r2, r2, r3
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4d8:	6a21      	ldr	r1, [r4, #32]
 800e4da:	4628      	mov	r0, r5
 800e4dc:	47b0      	blx	r6
 800e4de:	1c43      	adds	r3, r0, #1
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	d106      	bne.n	800e4f2 <__sflush_r+0x62>
 800e4e4:	6829      	ldr	r1, [r5, #0]
 800e4e6:	291d      	cmp	r1, #29
 800e4e8:	d82b      	bhi.n	800e542 <__sflush_r+0xb2>
 800e4ea:	4a2a      	ldr	r2, [pc, #168]	@ (800e594 <__sflush_r+0x104>)
 800e4ec:	410a      	asrs	r2, r1
 800e4ee:	07d6      	lsls	r6, r2, #31
 800e4f0:	d427      	bmi.n	800e542 <__sflush_r+0xb2>
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	04d9      	lsls	r1, r3, #19
 800e4f6:	6062      	str	r2, [r4, #4]
 800e4f8:	6922      	ldr	r2, [r4, #16]
 800e4fa:	6022      	str	r2, [r4, #0]
 800e4fc:	d504      	bpl.n	800e508 <__sflush_r+0x78>
 800e4fe:	1c42      	adds	r2, r0, #1
 800e500:	d101      	bne.n	800e506 <__sflush_r+0x76>
 800e502:	682b      	ldr	r3, [r5, #0]
 800e504:	b903      	cbnz	r3, 800e508 <__sflush_r+0x78>
 800e506:	6560      	str	r0, [r4, #84]	@ 0x54
 800e508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e50a:	602f      	str	r7, [r5, #0]
 800e50c:	b1b9      	cbz	r1, 800e53e <__sflush_r+0xae>
 800e50e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e512:	4299      	cmp	r1, r3
 800e514:	d002      	beq.n	800e51c <__sflush_r+0x8c>
 800e516:	4628      	mov	r0, r5
 800e518:	f7fe f8de 	bl	800c6d8 <_free_r>
 800e51c:	2300      	movs	r3, #0
 800e51e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e520:	e00d      	b.n	800e53e <__sflush_r+0xae>
 800e522:	2301      	movs	r3, #1
 800e524:	4628      	mov	r0, r5
 800e526:	47b0      	blx	r6
 800e528:	4602      	mov	r2, r0
 800e52a:	1c50      	adds	r0, r2, #1
 800e52c:	d1c9      	bne.n	800e4c2 <__sflush_r+0x32>
 800e52e:	682b      	ldr	r3, [r5, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d0c6      	beq.n	800e4c2 <__sflush_r+0x32>
 800e534:	2b1d      	cmp	r3, #29
 800e536:	d001      	beq.n	800e53c <__sflush_r+0xac>
 800e538:	2b16      	cmp	r3, #22
 800e53a:	d11d      	bne.n	800e578 <__sflush_r+0xe8>
 800e53c:	602f      	str	r7, [r5, #0]
 800e53e:	2000      	movs	r0, #0
 800e540:	e021      	b.n	800e586 <__sflush_r+0xf6>
 800e542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e546:	b21b      	sxth	r3, r3
 800e548:	e01a      	b.n	800e580 <__sflush_r+0xf0>
 800e54a:	690f      	ldr	r7, [r1, #16]
 800e54c:	2f00      	cmp	r7, #0
 800e54e:	d0f6      	beq.n	800e53e <__sflush_r+0xae>
 800e550:	0793      	lsls	r3, r2, #30
 800e552:	680e      	ldr	r6, [r1, #0]
 800e554:	600f      	str	r7, [r1, #0]
 800e556:	bf0c      	ite	eq
 800e558:	694b      	ldreq	r3, [r1, #20]
 800e55a:	2300      	movne	r3, #0
 800e55c:	eba6 0807 	sub.w	r8, r6, r7
 800e560:	608b      	str	r3, [r1, #8]
 800e562:	f1b8 0f00 	cmp.w	r8, #0
 800e566:	ddea      	ble.n	800e53e <__sflush_r+0xae>
 800e568:	4643      	mov	r3, r8
 800e56a:	463a      	mov	r2, r7
 800e56c:	6a21      	ldr	r1, [r4, #32]
 800e56e:	4628      	mov	r0, r5
 800e570:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e572:	47b0      	blx	r6
 800e574:	2800      	cmp	r0, #0
 800e576:	dc08      	bgt.n	800e58a <__sflush_r+0xfa>
 800e578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e57c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e580:	f04f 30ff 	mov.w	r0, #4294967295
 800e584:	81a3      	strh	r3, [r4, #12]
 800e586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e58a:	4407      	add	r7, r0
 800e58c:	eba8 0800 	sub.w	r8, r8, r0
 800e590:	e7e7      	b.n	800e562 <__sflush_r+0xd2>
 800e592:	bf00      	nop
 800e594:	dfbffffe 	.word	0xdfbffffe

0800e598 <_fflush_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	690b      	ldr	r3, [r1, #16]
 800e59c:	4605      	mov	r5, r0
 800e59e:	460c      	mov	r4, r1
 800e5a0:	b913      	cbnz	r3, 800e5a8 <_fflush_r+0x10>
 800e5a2:	2500      	movs	r5, #0
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
 800e5a8:	b118      	cbz	r0, 800e5b2 <_fflush_r+0x1a>
 800e5aa:	6a03      	ldr	r3, [r0, #32]
 800e5ac:	b90b      	cbnz	r3, 800e5b2 <_fflush_r+0x1a>
 800e5ae:	f7fd f901 	bl	800b7b4 <__sinit>
 800e5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0f3      	beq.n	800e5a2 <_fflush_r+0xa>
 800e5ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5bc:	07d0      	lsls	r0, r2, #31
 800e5be:	d404      	bmi.n	800e5ca <_fflush_r+0x32>
 800e5c0:	0599      	lsls	r1, r3, #22
 800e5c2:	d402      	bmi.n	800e5ca <_fflush_r+0x32>
 800e5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5c6:	f7fd fa1e 	bl	800ba06 <__retarget_lock_acquire_recursive>
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	f7ff ff5f 	bl	800e490 <__sflush_r>
 800e5d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	07da      	lsls	r2, r3, #31
 800e5d8:	d4e4      	bmi.n	800e5a4 <_fflush_r+0xc>
 800e5da:	89a3      	ldrh	r3, [r4, #12]
 800e5dc:	059b      	lsls	r3, r3, #22
 800e5de:	d4e1      	bmi.n	800e5a4 <_fflush_r+0xc>
 800e5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5e2:	f7fd fa11 	bl	800ba08 <__retarget_lock_release_recursive>
 800e5e6:	e7dd      	b.n	800e5a4 <_fflush_r+0xc>

0800e5e8 <__swbuf_r>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	460e      	mov	r6, r1
 800e5ec:	4614      	mov	r4, r2
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	b118      	cbz	r0, 800e5fa <__swbuf_r+0x12>
 800e5f2:	6a03      	ldr	r3, [r0, #32]
 800e5f4:	b90b      	cbnz	r3, 800e5fa <__swbuf_r+0x12>
 800e5f6:	f7fd f8dd 	bl	800b7b4 <__sinit>
 800e5fa:	69a3      	ldr	r3, [r4, #24]
 800e5fc:	60a3      	str	r3, [r4, #8]
 800e5fe:	89a3      	ldrh	r3, [r4, #12]
 800e600:	071a      	lsls	r2, r3, #28
 800e602:	d501      	bpl.n	800e608 <__swbuf_r+0x20>
 800e604:	6923      	ldr	r3, [r4, #16]
 800e606:	b943      	cbnz	r3, 800e61a <__swbuf_r+0x32>
 800e608:	4621      	mov	r1, r4
 800e60a:	4628      	mov	r0, r5
 800e60c:	f000 f82a 	bl	800e664 <__swsetup_r>
 800e610:	b118      	cbz	r0, 800e61a <__swbuf_r+0x32>
 800e612:	f04f 37ff 	mov.w	r7, #4294967295
 800e616:	4638      	mov	r0, r7
 800e618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	b2f6      	uxtb	r6, r6
 800e61e:	6922      	ldr	r2, [r4, #16]
 800e620:	4637      	mov	r7, r6
 800e622:	1a98      	subs	r0, r3, r2
 800e624:	6963      	ldr	r3, [r4, #20]
 800e626:	4283      	cmp	r3, r0
 800e628:	dc05      	bgt.n	800e636 <__swbuf_r+0x4e>
 800e62a:	4621      	mov	r1, r4
 800e62c:	4628      	mov	r0, r5
 800e62e:	f7ff ffb3 	bl	800e598 <_fflush_r>
 800e632:	2800      	cmp	r0, #0
 800e634:	d1ed      	bne.n	800e612 <__swbuf_r+0x2a>
 800e636:	68a3      	ldr	r3, [r4, #8]
 800e638:	3b01      	subs	r3, #1
 800e63a:	60a3      	str	r3, [r4, #8]
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	1c5a      	adds	r2, r3, #1
 800e640:	6022      	str	r2, [r4, #0]
 800e642:	701e      	strb	r6, [r3, #0]
 800e644:	1c43      	adds	r3, r0, #1
 800e646:	6962      	ldr	r2, [r4, #20]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d004      	beq.n	800e656 <__swbuf_r+0x6e>
 800e64c:	89a3      	ldrh	r3, [r4, #12]
 800e64e:	07db      	lsls	r3, r3, #31
 800e650:	d5e1      	bpl.n	800e616 <__swbuf_r+0x2e>
 800e652:	2e0a      	cmp	r6, #10
 800e654:	d1df      	bne.n	800e616 <__swbuf_r+0x2e>
 800e656:	4621      	mov	r1, r4
 800e658:	4628      	mov	r0, r5
 800e65a:	f7ff ff9d 	bl	800e598 <_fflush_r>
 800e65e:	2800      	cmp	r0, #0
 800e660:	d0d9      	beq.n	800e616 <__swbuf_r+0x2e>
 800e662:	e7d6      	b.n	800e612 <__swbuf_r+0x2a>

0800e664 <__swsetup_r>:
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4b29      	ldr	r3, [pc, #164]	@ (800e70c <__swsetup_r+0xa8>)
 800e668:	4605      	mov	r5, r0
 800e66a:	460c      	mov	r4, r1
 800e66c:	6818      	ldr	r0, [r3, #0]
 800e66e:	b118      	cbz	r0, 800e678 <__swsetup_r+0x14>
 800e670:	6a03      	ldr	r3, [r0, #32]
 800e672:	b90b      	cbnz	r3, 800e678 <__swsetup_r+0x14>
 800e674:	f7fd f89e 	bl	800b7b4 <__sinit>
 800e678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e67c:	0719      	lsls	r1, r3, #28
 800e67e:	d422      	bmi.n	800e6c6 <__swsetup_r+0x62>
 800e680:	06da      	lsls	r2, r3, #27
 800e682:	d407      	bmi.n	800e694 <__swsetup_r+0x30>
 800e684:	2209      	movs	r2, #9
 800e686:	602a      	str	r2, [r5, #0]
 800e688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e68c:	f04f 30ff 	mov.w	r0, #4294967295
 800e690:	81a3      	strh	r3, [r4, #12]
 800e692:	e033      	b.n	800e6fc <__swsetup_r+0x98>
 800e694:	0758      	lsls	r0, r3, #29
 800e696:	d512      	bpl.n	800e6be <__swsetup_r+0x5a>
 800e698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e69a:	b141      	cbz	r1, 800e6ae <__swsetup_r+0x4a>
 800e69c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6a0:	4299      	cmp	r1, r3
 800e6a2:	d002      	beq.n	800e6aa <__swsetup_r+0x46>
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	f7fe f817 	bl	800c6d8 <_free_r>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6b4:	81a3      	strh	r3, [r4, #12]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	6923      	ldr	r3, [r4, #16]
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	89a3      	ldrh	r3, [r4, #12]
 800e6c0:	f043 0308 	orr.w	r3, r3, #8
 800e6c4:	81a3      	strh	r3, [r4, #12]
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	b94b      	cbnz	r3, 800e6de <__swsetup_r+0x7a>
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6d4:	d003      	beq.n	800e6de <__swsetup_r+0x7a>
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f000 fc58 	bl	800ef8e <__smakebuf_r>
 800e6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6e2:	f013 0201 	ands.w	r2, r3, #1
 800e6e6:	d00a      	beq.n	800e6fe <__swsetup_r+0x9a>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	60a2      	str	r2, [r4, #8]
 800e6ec:	6962      	ldr	r2, [r4, #20]
 800e6ee:	4252      	negs	r2, r2
 800e6f0:	61a2      	str	r2, [r4, #24]
 800e6f2:	6922      	ldr	r2, [r4, #16]
 800e6f4:	b942      	cbnz	r2, 800e708 <__swsetup_r+0xa4>
 800e6f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6fa:	d1c5      	bne.n	800e688 <__swsetup_r+0x24>
 800e6fc:	bd38      	pop	{r3, r4, r5, pc}
 800e6fe:	0799      	lsls	r1, r3, #30
 800e700:	bf58      	it	pl
 800e702:	6962      	ldrpl	r2, [r4, #20]
 800e704:	60a2      	str	r2, [r4, #8]
 800e706:	e7f4      	b.n	800e6f2 <__swsetup_r+0x8e>
 800e708:	2000      	movs	r0, #0
 800e70a:	e7f7      	b.n	800e6fc <__swsetup_r+0x98>
 800e70c:	20000018 	.word	0x20000018

0800e710 <memmove>:
 800e710:	4288      	cmp	r0, r1
 800e712:	b510      	push	{r4, lr}
 800e714:	eb01 0402 	add.w	r4, r1, r2
 800e718:	d902      	bls.n	800e720 <memmove+0x10>
 800e71a:	4284      	cmp	r4, r0
 800e71c:	4623      	mov	r3, r4
 800e71e:	d807      	bhi.n	800e730 <memmove+0x20>
 800e720:	1e43      	subs	r3, r0, #1
 800e722:	42a1      	cmp	r1, r4
 800e724:	d008      	beq.n	800e738 <memmove+0x28>
 800e726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e72e:	e7f8      	b.n	800e722 <memmove+0x12>
 800e730:	4402      	add	r2, r0
 800e732:	4601      	mov	r1, r0
 800e734:	428a      	cmp	r2, r1
 800e736:	d100      	bne.n	800e73a <memmove+0x2a>
 800e738:	bd10      	pop	{r4, pc}
 800e73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e742:	e7f7      	b.n	800e734 <memmove+0x24>

0800e744 <strncmp>:
 800e744:	b510      	push	{r4, lr}
 800e746:	b16a      	cbz	r2, 800e764 <strncmp+0x20>
 800e748:	3901      	subs	r1, #1
 800e74a:	1884      	adds	r4, r0, r2
 800e74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e750:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e754:	429a      	cmp	r2, r3
 800e756:	d103      	bne.n	800e760 <strncmp+0x1c>
 800e758:	42a0      	cmp	r0, r4
 800e75a:	d001      	beq.n	800e760 <strncmp+0x1c>
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	d1f5      	bne.n	800e74c <strncmp+0x8>
 800e760:	1ad0      	subs	r0, r2, r3
 800e762:	bd10      	pop	{r4, pc}
 800e764:	4610      	mov	r0, r2
 800e766:	e7fc      	b.n	800e762 <strncmp+0x1e>

0800e768 <_sbrk_r>:
 800e768:	b538      	push	{r3, r4, r5, lr}
 800e76a:	2300      	movs	r3, #0
 800e76c:	4d05      	ldr	r5, [pc, #20]	@ (800e784 <_sbrk_r+0x1c>)
 800e76e:	4604      	mov	r4, r0
 800e770:	4608      	mov	r0, r1
 800e772:	602b      	str	r3, [r5, #0]
 800e774:	f7f3 fdc0 	bl	80022f8 <_sbrk>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_sbrk_r+0x1a>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_sbrk_r+0x1a>
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	200005f4 	.word	0x200005f4

0800e788 <memcpy>:
 800e788:	440a      	add	r2, r1
 800e78a:	1e43      	subs	r3, r0, #1
 800e78c:	4291      	cmp	r1, r2
 800e78e:	d100      	bne.n	800e792 <memcpy+0xa>
 800e790:	4770      	bx	lr
 800e792:	b510      	push	{r4, lr}
 800e794:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e798:	4291      	cmp	r1, r2
 800e79a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e79e:	d1f9      	bne.n	800e794 <memcpy+0xc>
 800e7a0:	bd10      	pop	{r4, pc}
 800e7a2:	0000      	movs	r0, r0
 800e7a4:	0000      	movs	r0, r0
	...

0800e7a8 <nan>:
 800e7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e7b0 <nan+0x8>
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	00000000 	.word	0x00000000
 800e7b4:	7ff80000 	.word	0x7ff80000

0800e7b8 <__assert_func>:
 800e7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7ba:	4614      	mov	r4, r2
 800e7bc:	461a      	mov	r2, r3
 800e7be:	4b09      	ldr	r3, [pc, #36]	@ (800e7e4 <__assert_func+0x2c>)
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68d8      	ldr	r0, [r3, #12]
 800e7c6:	b954      	cbnz	r4, 800e7de <__assert_func+0x26>
 800e7c8:	4b07      	ldr	r3, [pc, #28]	@ (800e7e8 <__assert_func+0x30>)
 800e7ca:	461c      	mov	r4, r3
 800e7cc:	9100      	str	r1, [sp, #0]
 800e7ce:	4907      	ldr	r1, [pc, #28]	@ (800e7ec <__assert_func+0x34>)
 800e7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7d4:	462b      	mov	r3, r5
 800e7d6:	f000 fba3 	bl	800ef20 <fiprintf>
 800e7da:	f000 fc37 	bl	800f04c <abort>
 800e7de:	4b04      	ldr	r3, [pc, #16]	@ (800e7f0 <__assert_func+0x38>)
 800e7e0:	e7f4      	b.n	800e7cc <__assert_func+0x14>
 800e7e2:	bf00      	nop
 800e7e4:	20000018 	.word	0x20000018
 800e7e8:	0800f55d 	.word	0x0800f55d
 800e7ec:	0800f52f 	.word	0x0800f52f
 800e7f0:	0800f522 	.word	0x0800f522

0800e7f4 <_calloc_r>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	fba1 5402 	umull	r5, r4, r1, r2
 800e7fa:	b93c      	cbnz	r4, 800e80c <_calloc_r+0x18>
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f7fd ffdf 	bl	800c7c0 <_malloc_r>
 800e802:	4606      	mov	r6, r0
 800e804:	b928      	cbnz	r0, 800e812 <_calloc_r+0x1e>
 800e806:	2600      	movs	r6, #0
 800e808:	4630      	mov	r0, r6
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	220c      	movs	r2, #12
 800e80e:	6002      	str	r2, [r0, #0]
 800e810:	e7f9      	b.n	800e806 <_calloc_r+0x12>
 800e812:	462a      	mov	r2, r5
 800e814:	4621      	mov	r1, r4
 800e816:	f7fd f878 	bl	800b90a <memset>
 800e81a:	e7f5      	b.n	800e808 <_calloc_r+0x14>

0800e81c <rshift>:
 800e81c:	6903      	ldr	r3, [r0, #16]
 800e81e:	114a      	asrs	r2, r1, #5
 800e820:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e828:	f100 0414 	add.w	r4, r0, #20
 800e82c:	dd45      	ble.n	800e8ba <rshift+0x9e>
 800e82e:	f011 011f 	ands.w	r1, r1, #31
 800e832:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e836:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e83a:	d10c      	bne.n	800e856 <rshift+0x3a>
 800e83c:	f100 0710 	add.w	r7, r0, #16
 800e840:	4629      	mov	r1, r5
 800e842:	42b1      	cmp	r1, r6
 800e844:	d334      	bcc.n	800e8b0 <rshift+0x94>
 800e846:	1a9b      	subs	r3, r3, r2
 800e848:	1eea      	subs	r2, r5, #3
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4296      	cmp	r6, r2
 800e84e:	bf38      	it	cc
 800e850:	2300      	movcc	r3, #0
 800e852:	4423      	add	r3, r4
 800e854:	e015      	b.n	800e882 <rshift+0x66>
 800e856:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e85a:	f1c1 0820 	rsb	r8, r1, #32
 800e85e:	f105 0e04 	add.w	lr, r5, #4
 800e862:	46a1      	mov	r9, r4
 800e864:	40cf      	lsrs	r7, r1
 800e866:	4576      	cmp	r6, lr
 800e868:	46f4      	mov	ip, lr
 800e86a:	d815      	bhi.n	800e898 <rshift+0x7c>
 800e86c:	1a9a      	subs	r2, r3, r2
 800e86e:	3501      	adds	r5, #1
 800e870:	0092      	lsls	r2, r2, #2
 800e872:	3a04      	subs	r2, #4
 800e874:	42ae      	cmp	r6, r5
 800e876:	bf38      	it	cc
 800e878:	2200      	movcc	r2, #0
 800e87a:	18a3      	adds	r3, r4, r2
 800e87c:	50a7      	str	r7, [r4, r2]
 800e87e:	b107      	cbz	r7, 800e882 <rshift+0x66>
 800e880:	3304      	adds	r3, #4
 800e882:	1b1a      	subs	r2, r3, r4
 800e884:	42a3      	cmp	r3, r4
 800e886:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e88a:	bf08      	it	eq
 800e88c:	2300      	moveq	r3, #0
 800e88e:	6102      	str	r2, [r0, #16]
 800e890:	bf08      	it	eq
 800e892:	6143      	streq	r3, [r0, #20]
 800e894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e898:	f8dc c000 	ldr.w	ip, [ip]
 800e89c:	fa0c fc08 	lsl.w	ip, ip, r8
 800e8a0:	ea4c 0707 	orr.w	r7, ip, r7
 800e8a4:	f849 7b04 	str.w	r7, [r9], #4
 800e8a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8ac:	40cf      	lsrs	r7, r1
 800e8ae:	e7da      	b.n	800e866 <rshift+0x4a>
 800e8b0:	f851 cb04 	ldr.w	ip, [r1], #4
 800e8b4:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8b8:	e7c3      	b.n	800e842 <rshift+0x26>
 800e8ba:	4623      	mov	r3, r4
 800e8bc:	e7e1      	b.n	800e882 <rshift+0x66>

0800e8be <__hexdig_fun>:
 800e8be:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e8c2:	2b09      	cmp	r3, #9
 800e8c4:	d802      	bhi.n	800e8cc <__hexdig_fun+0xe>
 800e8c6:	3820      	subs	r0, #32
 800e8c8:	b2c0      	uxtb	r0, r0
 800e8ca:	4770      	bx	lr
 800e8cc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e8d0:	2b05      	cmp	r3, #5
 800e8d2:	d801      	bhi.n	800e8d8 <__hexdig_fun+0x1a>
 800e8d4:	3847      	subs	r0, #71	@ 0x47
 800e8d6:	e7f7      	b.n	800e8c8 <__hexdig_fun+0xa>
 800e8d8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e8dc:	2b05      	cmp	r3, #5
 800e8de:	d801      	bhi.n	800e8e4 <__hexdig_fun+0x26>
 800e8e0:	3827      	subs	r0, #39	@ 0x27
 800e8e2:	e7f1      	b.n	800e8c8 <__hexdig_fun+0xa>
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	4770      	bx	lr

0800e8e8 <__gethex>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	b085      	sub	sp, #20
 800e8ee:	468a      	mov	sl, r1
 800e8f0:	4690      	mov	r8, r2
 800e8f2:	9302      	str	r3, [sp, #8]
 800e8f4:	680b      	ldr	r3, [r1, #0]
 800e8f6:	9001      	str	r0, [sp, #4]
 800e8f8:	1c9c      	adds	r4, r3, #2
 800e8fa:	46a1      	mov	r9, r4
 800e8fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e900:	2830      	cmp	r0, #48	@ 0x30
 800e902:	d0fa      	beq.n	800e8fa <__gethex+0x12>
 800e904:	eba9 0303 	sub.w	r3, r9, r3
 800e908:	f1a3 0b02 	sub.w	fp, r3, #2
 800e90c:	f7ff ffd7 	bl	800e8be <__hexdig_fun>
 800e910:	4605      	mov	r5, r0
 800e912:	2800      	cmp	r0, #0
 800e914:	d166      	bne.n	800e9e4 <__gethex+0xfc>
 800e916:	2201      	movs	r2, #1
 800e918:	499e      	ldr	r1, [pc, #632]	@ (800eb94 <__gethex+0x2ac>)
 800e91a:	4648      	mov	r0, r9
 800e91c:	f7ff ff12 	bl	800e744 <strncmp>
 800e920:	4607      	mov	r7, r0
 800e922:	2800      	cmp	r0, #0
 800e924:	d165      	bne.n	800e9f2 <__gethex+0x10a>
 800e926:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e92a:	4626      	mov	r6, r4
 800e92c:	f7ff ffc7 	bl	800e8be <__hexdig_fun>
 800e930:	2800      	cmp	r0, #0
 800e932:	d060      	beq.n	800e9f6 <__gethex+0x10e>
 800e934:	4623      	mov	r3, r4
 800e936:	7818      	ldrb	r0, [r3, #0]
 800e938:	4699      	mov	r9, r3
 800e93a:	3301      	adds	r3, #1
 800e93c:	2830      	cmp	r0, #48	@ 0x30
 800e93e:	d0fa      	beq.n	800e936 <__gethex+0x4e>
 800e940:	f7ff ffbd 	bl	800e8be <__hexdig_fun>
 800e944:	fab0 f580 	clz	r5, r0
 800e948:	f04f 0b01 	mov.w	fp, #1
 800e94c:	096d      	lsrs	r5, r5, #5
 800e94e:	464a      	mov	r2, r9
 800e950:	4616      	mov	r6, r2
 800e952:	3201      	adds	r2, #1
 800e954:	7830      	ldrb	r0, [r6, #0]
 800e956:	f7ff ffb2 	bl	800e8be <__hexdig_fun>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d1f8      	bne.n	800e950 <__gethex+0x68>
 800e95e:	2201      	movs	r2, #1
 800e960:	498c      	ldr	r1, [pc, #560]	@ (800eb94 <__gethex+0x2ac>)
 800e962:	4630      	mov	r0, r6
 800e964:	f7ff feee 	bl	800e744 <strncmp>
 800e968:	2800      	cmp	r0, #0
 800e96a:	d13e      	bne.n	800e9ea <__gethex+0x102>
 800e96c:	b944      	cbnz	r4, 800e980 <__gethex+0x98>
 800e96e:	1c74      	adds	r4, r6, #1
 800e970:	4622      	mov	r2, r4
 800e972:	4616      	mov	r6, r2
 800e974:	3201      	adds	r2, #1
 800e976:	7830      	ldrb	r0, [r6, #0]
 800e978:	f7ff ffa1 	bl	800e8be <__hexdig_fun>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d1f8      	bne.n	800e972 <__gethex+0x8a>
 800e980:	1ba4      	subs	r4, r4, r6
 800e982:	00a7      	lsls	r7, r4, #2
 800e984:	7833      	ldrb	r3, [r6, #0]
 800e986:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e98a:	2b50      	cmp	r3, #80	@ 0x50
 800e98c:	d13d      	bne.n	800ea0a <__gethex+0x122>
 800e98e:	7873      	ldrb	r3, [r6, #1]
 800e990:	2b2b      	cmp	r3, #43	@ 0x2b
 800e992:	d032      	beq.n	800e9fa <__gethex+0x112>
 800e994:	2b2d      	cmp	r3, #45	@ 0x2d
 800e996:	d033      	beq.n	800ea00 <__gethex+0x118>
 800e998:	1c71      	adds	r1, r6, #1
 800e99a:	2400      	movs	r4, #0
 800e99c:	7808      	ldrb	r0, [r1, #0]
 800e99e:	f7ff ff8e 	bl	800e8be <__hexdig_fun>
 800e9a2:	1e43      	subs	r3, r0, #1
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b18      	cmp	r3, #24
 800e9a8:	d82f      	bhi.n	800ea0a <__gethex+0x122>
 800e9aa:	f1a0 0210 	sub.w	r2, r0, #16
 800e9ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9b2:	f7ff ff84 	bl	800e8be <__hexdig_fun>
 800e9b6:	f100 3cff 	add.w	ip, r0, #4294967295
 800e9ba:	230a      	movs	r3, #10
 800e9bc:	fa5f fc8c 	uxtb.w	ip, ip
 800e9c0:	f1bc 0f18 	cmp.w	ip, #24
 800e9c4:	d91e      	bls.n	800ea04 <__gethex+0x11c>
 800e9c6:	b104      	cbz	r4, 800e9ca <__gethex+0xe2>
 800e9c8:	4252      	negs	r2, r2
 800e9ca:	4417      	add	r7, r2
 800e9cc:	f8ca 1000 	str.w	r1, [sl]
 800e9d0:	b1ed      	cbz	r5, 800ea0e <__gethex+0x126>
 800e9d2:	f1bb 0f00 	cmp.w	fp, #0
 800e9d6:	bf0c      	ite	eq
 800e9d8:	2506      	moveq	r5, #6
 800e9da:	2500      	movne	r5, #0
 800e9dc:	4628      	mov	r0, r5
 800e9de:	b005      	add	sp, #20
 800e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e4:	2500      	movs	r5, #0
 800e9e6:	462c      	mov	r4, r5
 800e9e8:	e7b1      	b.n	800e94e <__gethex+0x66>
 800e9ea:	2c00      	cmp	r4, #0
 800e9ec:	d1c8      	bne.n	800e980 <__gethex+0x98>
 800e9ee:	4627      	mov	r7, r4
 800e9f0:	e7c8      	b.n	800e984 <__gethex+0x9c>
 800e9f2:	464e      	mov	r6, r9
 800e9f4:	462f      	mov	r7, r5
 800e9f6:	2501      	movs	r5, #1
 800e9f8:	e7c4      	b.n	800e984 <__gethex+0x9c>
 800e9fa:	2400      	movs	r4, #0
 800e9fc:	1cb1      	adds	r1, r6, #2
 800e9fe:	e7cd      	b.n	800e99c <__gethex+0xb4>
 800ea00:	2401      	movs	r4, #1
 800ea02:	e7fb      	b.n	800e9fc <__gethex+0x114>
 800ea04:	fb03 0002 	mla	r0, r3, r2, r0
 800ea08:	e7cf      	b.n	800e9aa <__gethex+0xc2>
 800ea0a:	4631      	mov	r1, r6
 800ea0c:	e7de      	b.n	800e9cc <__gethex+0xe4>
 800ea0e:	eba6 0309 	sub.w	r3, r6, r9
 800ea12:	4629      	mov	r1, r5
 800ea14:	3b01      	subs	r3, #1
 800ea16:	2b07      	cmp	r3, #7
 800ea18:	dc0a      	bgt.n	800ea30 <__gethex+0x148>
 800ea1a:	9801      	ldr	r0, [sp, #4]
 800ea1c:	f7fd ff5c 	bl	800c8d8 <_Balloc>
 800ea20:	4604      	mov	r4, r0
 800ea22:	b940      	cbnz	r0, 800ea36 <__gethex+0x14e>
 800ea24:	4b5c      	ldr	r3, [pc, #368]	@ (800eb98 <__gethex+0x2b0>)
 800ea26:	4602      	mov	r2, r0
 800ea28:	21e4      	movs	r1, #228	@ 0xe4
 800ea2a:	485c      	ldr	r0, [pc, #368]	@ (800eb9c <__gethex+0x2b4>)
 800ea2c:	f7ff fec4 	bl	800e7b8 <__assert_func>
 800ea30:	3101      	adds	r1, #1
 800ea32:	105b      	asrs	r3, r3, #1
 800ea34:	e7ef      	b.n	800ea16 <__gethex+0x12e>
 800ea36:	f100 0a14 	add.w	sl, r0, #20
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	4655      	mov	r5, sl
 800ea3e:	469b      	mov	fp, r3
 800ea40:	45b1      	cmp	r9, r6
 800ea42:	d337      	bcc.n	800eab4 <__gethex+0x1cc>
 800ea44:	f845 bb04 	str.w	fp, [r5], #4
 800ea48:	eba5 050a 	sub.w	r5, r5, sl
 800ea4c:	4658      	mov	r0, fp
 800ea4e:	10ad      	asrs	r5, r5, #2
 800ea50:	6125      	str	r5, [r4, #16]
 800ea52:	016d      	lsls	r5, r5, #5
 800ea54:	f7fe f834 	bl	800cac0 <__hi0bits>
 800ea58:	f8d8 6000 	ldr.w	r6, [r8]
 800ea5c:	1a2d      	subs	r5, r5, r0
 800ea5e:	42b5      	cmp	r5, r6
 800ea60:	dd54      	ble.n	800eb0c <__gethex+0x224>
 800ea62:	1bad      	subs	r5, r5, r6
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7fe fbd1 	bl	800d20e <__any_on>
 800ea6c:	4681      	mov	r9, r0
 800ea6e:	b178      	cbz	r0, 800ea90 <__gethex+0x1a8>
 800ea70:	1e6b      	subs	r3, r5, #1
 800ea72:	f04f 0901 	mov.w	r9, #1
 800ea76:	1159      	asrs	r1, r3, #5
 800ea78:	f003 021f 	and.w	r2, r3, #31
 800ea7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ea80:	fa09 f202 	lsl.w	r2, r9, r2
 800ea84:	420a      	tst	r2, r1
 800ea86:	d003      	beq.n	800ea90 <__gethex+0x1a8>
 800ea88:	454b      	cmp	r3, r9
 800ea8a:	dc36      	bgt.n	800eafa <__gethex+0x212>
 800ea8c:	f04f 0902 	mov.w	r9, #2
 800ea90:	442f      	add	r7, r5
 800ea92:	4629      	mov	r1, r5
 800ea94:	4620      	mov	r0, r4
 800ea96:	f7ff fec1 	bl	800e81c <rshift>
 800ea9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea9e:	42bb      	cmp	r3, r7
 800eaa0:	da42      	bge.n	800eb28 <__gethex+0x240>
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	9801      	ldr	r0, [sp, #4]
 800eaa6:	f7fd ff57 	bl	800c958 <_Bfree>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaae:	25a3      	movs	r5, #163	@ 0xa3
 800eab0:	6013      	str	r3, [r2, #0]
 800eab2:	e793      	b.n	800e9dc <__gethex+0xf4>
 800eab4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eab8:	2a2e      	cmp	r2, #46	@ 0x2e
 800eaba:	d012      	beq.n	800eae2 <__gethex+0x1fa>
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	d104      	bne.n	800eaca <__gethex+0x1e2>
 800eac0:	f845 bb04 	str.w	fp, [r5], #4
 800eac4:	f04f 0b00 	mov.w	fp, #0
 800eac8:	465b      	mov	r3, fp
 800eaca:	7830      	ldrb	r0, [r6, #0]
 800eacc:	9303      	str	r3, [sp, #12]
 800eace:	f7ff fef6 	bl	800e8be <__hexdig_fun>
 800ead2:	9b03      	ldr	r3, [sp, #12]
 800ead4:	f000 000f 	and.w	r0, r0, #15
 800ead8:	4098      	lsls	r0, r3
 800eada:	3304      	adds	r3, #4
 800eadc:	ea4b 0b00 	orr.w	fp, fp, r0
 800eae0:	e7ae      	b.n	800ea40 <__gethex+0x158>
 800eae2:	45b1      	cmp	r9, r6
 800eae4:	d8ea      	bhi.n	800eabc <__gethex+0x1d4>
 800eae6:	2201      	movs	r2, #1
 800eae8:	492a      	ldr	r1, [pc, #168]	@ (800eb94 <__gethex+0x2ac>)
 800eaea:	4630      	mov	r0, r6
 800eaec:	9303      	str	r3, [sp, #12]
 800eaee:	f7ff fe29 	bl	800e744 <strncmp>
 800eaf2:	9b03      	ldr	r3, [sp, #12]
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d1e1      	bne.n	800eabc <__gethex+0x1d4>
 800eaf8:	e7a2      	b.n	800ea40 <__gethex+0x158>
 800eafa:	1ea9      	subs	r1, r5, #2
 800eafc:	4620      	mov	r0, r4
 800eafe:	f7fe fb86 	bl	800d20e <__any_on>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d0c2      	beq.n	800ea8c <__gethex+0x1a4>
 800eb06:	f04f 0903 	mov.w	r9, #3
 800eb0a:	e7c1      	b.n	800ea90 <__gethex+0x1a8>
 800eb0c:	da09      	bge.n	800eb22 <__gethex+0x23a>
 800eb0e:	1b75      	subs	r5, r6, r5
 800eb10:	4621      	mov	r1, r4
 800eb12:	9801      	ldr	r0, [sp, #4]
 800eb14:	462a      	mov	r2, r5
 800eb16:	1b7f      	subs	r7, r7, r5
 800eb18:	f7fe f938 	bl	800cd8c <__lshift>
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	f100 0a14 	add.w	sl, r0, #20
 800eb22:	f04f 0900 	mov.w	r9, #0
 800eb26:	e7b8      	b.n	800ea9a <__gethex+0x1b2>
 800eb28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eb2c:	42bd      	cmp	r5, r7
 800eb2e:	dd6f      	ble.n	800ec10 <__gethex+0x328>
 800eb30:	1bed      	subs	r5, r5, r7
 800eb32:	42ae      	cmp	r6, r5
 800eb34:	dc34      	bgt.n	800eba0 <__gethex+0x2b8>
 800eb36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d022      	beq.n	800eb84 <__gethex+0x29c>
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	d024      	beq.n	800eb8c <__gethex+0x2a4>
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d115      	bne.n	800eb72 <__gethex+0x28a>
 800eb46:	42ae      	cmp	r6, r5
 800eb48:	d113      	bne.n	800eb72 <__gethex+0x28a>
 800eb4a:	2e01      	cmp	r6, #1
 800eb4c:	d10b      	bne.n	800eb66 <__gethex+0x27e>
 800eb4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb52:	2562      	movs	r5, #98	@ 0x62
 800eb54:	9a02      	ldr	r2, [sp, #8]
 800eb56:	6013      	str	r3, [r2, #0]
 800eb58:	2301      	movs	r3, #1
 800eb5a:	6123      	str	r3, [r4, #16]
 800eb5c:	f8ca 3000 	str.w	r3, [sl]
 800eb60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb62:	601c      	str	r4, [r3, #0]
 800eb64:	e73a      	b.n	800e9dc <__gethex+0xf4>
 800eb66:	1e71      	subs	r1, r6, #1
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f7fe fb50 	bl	800d20e <__any_on>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d1ed      	bne.n	800eb4e <__gethex+0x266>
 800eb72:	4621      	mov	r1, r4
 800eb74:	9801      	ldr	r0, [sp, #4]
 800eb76:	f7fd feef 	bl	800c958 <_Bfree>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb7e:	2550      	movs	r5, #80	@ 0x50
 800eb80:	6013      	str	r3, [r2, #0]
 800eb82:	e72b      	b.n	800e9dc <__gethex+0xf4>
 800eb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1f3      	bne.n	800eb72 <__gethex+0x28a>
 800eb8a:	e7e0      	b.n	800eb4e <__gethex+0x266>
 800eb8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1dd      	bne.n	800eb4e <__gethex+0x266>
 800eb92:	e7ee      	b.n	800eb72 <__gethex+0x28a>
 800eb94:	0800f3b0 	.word	0x0800f3b0
 800eb98:	0800f245 	.word	0x0800f245
 800eb9c:	0800f55e 	.word	0x0800f55e
 800eba0:	1e6f      	subs	r7, r5, #1
 800eba2:	f1b9 0f00 	cmp.w	r9, #0
 800eba6:	d130      	bne.n	800ec0a <__gethex+0x322>
 800eba8:	b127      	cbz	r7, 800ebb4 <__gethex+0x2cc>
 800ebaa:	4639      	mov	r1, r7
 800ebac:	4620      	mov	r0, r4
 800ebae:	f7fe fb2e 	bl	800d20e <__any_on>
 800ebb2:	4681      	mov	r9, r0
 800ebb4:	117a      	asrs	r2, r7, #5
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	f007 071f 	and.w	r7, r7, #31
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	40bb      	lsls	r3, r7
 800ebc6:	1b76      	subs	r6, r6, r5
 800ebc8:	2502      	movs	r5, #2
 800ebca:	4213      	tst	r3, r2
 800ebcc:	bf18      	it	ne
 800ebce:	f049 0902 	orrne.w	r9, r9, #2
 800ebd2:	f7ff fe23 	bl	800e81c <rshift>
 800ebd6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ebda:	f1b9 0f00 	cmp.w	r9, #0
 800ebde:	d047      	beq.n	800ec70 <__gethex+0x388>
 800ebe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d015      	beq.n	800ec14 <__gethex+0x32c>
 800ebe8:	2b03      	cmp	r3, #3
 800ebea:	d017      	beq.n	800ec1c <__gethex+0x334>
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d109      	bne.n	800ec04 <__gethex+0x31c>
 800ebf0:	f019 0f02 	tst.w	r9, #2
 800ebf4:	d006      	beq.n	800ec04 <__gethex+0x31c>
 800ebf6:	f8da 3000 	ldr.w	r3, [sl]
 800ebfa:	ea49 0903 	orr.w	r9, r9, r3
 800ebfe:	f019 0f01 	tst.w	r9, #1
 800ec02:	d10e      	bne.n	800ec22 <__gethex+0x33a>
 800ec04:	f045 0510 	orr.w	r5, r5, #16
 800ec08:	e032      	b.n	800ec70 <__gethex+0x388>
 800ec0a:	f04f 0901 	mov.w	r9, #1
 800ec0e:	e7d1      	b.n	800ebb4 <__gethex+0x2cc>
 800ec10:	2501      	movs	r5, #1
 800ec12:	e7e2      	b.n	800ebda <__gethex+0x2f2>
 800ec14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec16:	f1c3 0301 	rsb	r3, r3, #1
 800ec1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0f0      	beq.n	800ec04 <__gethex+0x31c>
 800ec22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec26:	f104 0314 	add.w	r3, r4, #20
 800ec2a:	f04f 0c00 	mov.w	ip, #0
 800ec2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec36:	4618      	mov	r0, r3
 800ec38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec40:	d01b      	beq.n	800ec7a <__gethex+0x392>
 800ec42:	3201      	adds	r2, #1
 800ec44:	6002      	str	r2, [r0, #0]
 800ec46:	2d02      	cmp	r5, #2
 800ec48:	f104 0314 	add.w	r3, r4, #20
 800ec4c:	d13c      	bne.n	800ecc8 <__gethex+0x3e0>
 800ec4e:	f8d8 2000 	ldr.w	r2, [r8]
 800ec52:	3a01      	subs	r2, #1
 800ec54:	42b2      	cmp	r2, r6
 800ec56:	d109      	bne.n	800ec6c <__gethex+0x384>
 800ec58:	1171      	asrs	r1, r6, #5
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f006 061f 	and.w	r6, r6, #31
 800ec60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec64:	fa02 f606 	lsl.w	r6, r2, r6
 800ec68:	421e      	tst	r6, r3
 800ec6a:	d13a      	bne.n	800ece2 <__gethex+0x3fa>
 800ec6c:	f045 0520 	orr.w	r5, r5, #32
 800ec70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec72:	601c      	str	r4, [r3, #0]
 800ec74:	9b02      	ldr	r3, [sp, #8]
 800ec76:	601f      	str	r7, [r3, #0]
 800ec78:	e6b0      	b.n	800e9dc <__gethex+0xf4>
 800ec7a:	4299      	cmp	r1, r3
 800ec7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec80:	d8d9      	bhi.n	800ec36 <__gethex+0x34e>
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	459b      	cmp	fp, r3
 800ec86:	db17      	blt.n	800ecb8 <__gethex+0x3d0>
 800ec88:	6861      	ldr	r1, [r4, #4]
 800ec8a:	9801      	ldr	r0, [sp, #4]
 800ec8c:	3101      	adds	r1, #1
 800ec8e:	f7fd fe23 	bl	800c8d8 <_Balloc>
 800ec92:	4681      	mov	r9, r0
 800ec94:	b918      	cbnz	r0, 800ec9e <__gethex+0x3b6>
 800ec96:	4b1a      	ldr	r3, [pc, #104]	@ (800ed00 <__gethex+0x418>)
 800ec98:	4602      	mov	r2, r0
 800ec9a:	2184      	movs	r1, #132	@ 0x84
 800ec9c:	e6c5      	b.n	800ea2a <__gethex+0x142>
 800ec9e:	6922      	ldr	r2, [r4, #16]
 800eca0:	f104 010c 	add.w	r1, r4, #12
 800eca4:	300c      	adds	r0, #12
 800eca6:	3202      	adds	r2, #2
 800eca8:	0092      	lsls	r2, r2, #2
 800ecaa:	f7ff fd6d 	bl	800e788 <memcpy>
 800ecae:	4621      	mov	r1, r4
 800ecb0:	464c      	mov	r4, r9
 800ecb2:	9801      	ldr	r0, [sp, #4]
 800ecb4:	f7fd fe50 	bl	800c958 <_Bfree>
 800ecb8:	6923      	ldr	r3, [r4, #16]
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecc0:	6122      	str	r2, [r4, #16]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	615a      	str	r2, [r3, #20]
 800ecc6:	e7be      	b.n	800ec46 <__gethex+0x35e>
 800ecc8:	6922      	ldr	r2, [r4, #16]
 800ecca:	455a      	cmp	r2, fp
 800eccc:	dd0b      	ble.n	800ece6 <__gethex+0x3fe>
 800ecce:	2101      	movs	r1, #1
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f7ff fda3 	bl	800e81c <rshift>
 800ecd6:	3701      	adds	r7, #1
 800ecd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecdc:	42bb      	cmp	r3, r7
 800ecde:	f6ff aee0 	blt.w	800eaa2 <__gethex+0x1ba>
 800ece2:	2501      	movs	r5, #1
 800ece4:	e7c2      	b.n	800ec6c <__gethex+0x384>
 800ece6:	f016 061f 	ands.w	r6, r6, #31
 800ecea:	d0fa      	beq.n	800ece2 <__gethex+0x3fa>
 800ecec:	4453      	add	r3, sl
 800ecee:	f1c6 0620 	rsb	r6, r6, #32
 800ecf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ecf6:	f7fd fee3 	bl	800cac0 <__hi0bits>
 800ecfa:	42b0      	cmp	r0, r6
 800ecfc:	dbe7      	blt.n	800ecce <__gethex+0x3e6>
 800ecfe:	e7f0      	b.n	800ece2 <__gethex+0x3fa>
 800ed00:	0800f245 	.word	0x0800f245

0800ed04 <L_shift>:
 800ed04:	f1c2 0208 	rsb	r2, r2, #8
 800ed08:	0092      	lsls	r2, r2, #2
 800ed0a:	b570      	push	{r4, r5, r6, lr}
 800ed0c:	f1c2 0620 	rsb	r6, r2, #32
 800ed10:	6843      	ldr	r3, [r0, #4]
 800ed12:	6804      	ldr	r4, [r0, #0]
 800ed14:	fa03 f506 	lsl.w	r5, r3, r6
 800ed18:	40d3      	lsrs	r3, r2
 800ed1a:	432c      	orrs	r4, r5
 800ed1c:	6004      	str	r4, [r0, #0]
 800ed1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed22:	4288      	cmp	r0, r1
 800ed24:	d3f4      	bcc.n	800ed10 <L_shift+0xc>
 800ed26:	bd70      	pop	{r4, r5, r6, pc}

0800ed28 <__match>:
 800ed28:	6803      	ldr	r3, [r0, #0]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b530      	push	{r4, r5, lr}
 800ed2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed32:	b914      	cbnz	r4, 800ed3a <__match+0x12>
 800ed34:	6003      	str	r3, [r0, #0]
 800ed36:	2001      	movs	r0, #1
 800ed38:	bd30      	pop	{r4, r5, pc}
 800ed3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ed42:	2d19      	cmp	r5, #25
 800ed44:	bf98      	it	ls
 800ed46:	3220      	addls	r2, #32
 800ed48:	42a2      	cmp	r2, r4
 800ed4a:	d0f0      	beq.n	800ed2e <__match+0x6>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	e7f3      	b.n	800ed38 <__match+0x10>

0800ed50 <__hexnan>:
 800ed50:	680b      	ldr	r3, [r1, #0]
 800ed52:	6801      	ldr	r1, [r0, #0]
 800ed54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed58:	115e      	asrs	r6, r3, #5
 800ed5a:	f013 031f 	ands.w	r3, r3, #31
 800ed5e:	f04f 0500 	mov.w	r5, #0
 800ed62:	b087      	sub	sp, #28
 800ed64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed68:	4682      	mov	sl, r0
 800ed6a:	4690      	mov	r8, r2
 800ed6c:	46ab      	mov	fp, r5
 800ed6e:	bf18      	it	ne
 800ed70:	3604      	addne	r6, #4
 800ed72:	9301      	str	r3, [sp, #4]
 800ed74:	9502      	str	r5, [sp, #8]
 800ed76:	1f37      	subs	r7, r6, #4
 800ed78:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed7c:	46b9      	mov	r9, r7
 800ed7e:	463c      	mov	r4, r7
 800ed80:	1c4b      	adds	r3, r1, #1
 800ed82:	784a      	ldrb	r2, [r1, #1]
 800ed84:	9303      	str	r3, [sp, #12]
 800ed86:	b342      	cbz	r2, 800edda <__hexnan+0x8a>
 800ed88:	4610      	mov	r0, r2
 800ed8a:	9105      	str	r1, [sp, #20]
 800ed8c:	9204      	str	r2, [sp, #16]
 800ed8e:	f7ff fd96 	bl	800e8be <__hexdig_fun>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d151      	bne.n	800ee3a <__hexnan+0xea>
 800ed96:	9a04      	ldr	r2, [sp, #16]
 800ed98:	9905      	ldr	r1, [sp, #20]
 800ed9a:	2a20      	cmp	r2, #32
 800ed9c:	d818      	bhi.n	800edd0 <__hexnan+0x80>
 800ed9e:	9b02      	ldr	r3, [sp, #8]
 800eda0:	459b      	cmp	fp, r3
 800eda2:	dd13      	ble.n	800edcc <__hexnan+0x7c>
 800eda4:	454c      	cmp	r4, r9
 800eda6:	d206      	bcs.n	800edb6 <__hexnan+0x66>
 800eda8:	2d07      	cmp	r5, #7
 800edaa:	dc04      	bgt.n	800edb6 <__hexnan+0x66>
 800edac:	462a      	mov	r2, r5
 800edae:	4649      	mov	r1, r9
 800edb0:	4620      	mov	r0, r4
 800edb2:	f7ff ffa7 	bl	800ed04 <L_shift>
 800edb6:	4544      	cmp	r4, r8
 800edb8:	d951      	bls.n	800ee5e <__hexnan+0x10e>
 800edba:	2300      	movs	r3, #0
 800edbc:	f1a4 0904 	sub.w	r9, r4, #4
 800edc0:	f8cd b008 	str.w	fp, [sp, #8]
 800edc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800edc8:	461d      	mov	r5, r3
 800edca:	464c      	mov	r4, r9
 800edcc:	9903      	ldr	r1, [sp, #12]
 800edce:	e7d7      	b.n	800ed80 <__hexnan+0x30>
 800edd0:	2a29      	cmp	r2, #41	@ 0x29
 800edd2:	d156      	bne.n	800ee82 <__hexnan+0x132>
 800edd4:	3102      	adds	r1, #2
 800edd6:	f8ca 1000 	str.w	r1, [sl]
 800edda:	f1bb 0f00 	cmp.w	fp, #0
 800edde:	d050      	beq.n	800ee82 <__hexnan+0x132>
 800ede0:	454c      	cmp	r4, r9
 800ede2:	d206      	bcs.n	800edf2 <__hexnan+0xa2>
 800ede4:	2d07      	cmp	r5, #7
 800ede6:	dc04      	bgt.n	800edf2 <__hexnan+0xa2>
 800ede8:	462a      	mov	r2, r5
 800edea:	4649      	mov	r1, r9
 800edec:	4620      	mov	r0, r4
 800edee:	f7ff ff89 	bl	800ed04 <L_shift>
 800edf2:	4544      	cmp	r4, r8
 800edf4:	d935      	bls.n	800ee62 <__hexnan+0x112>
 800edf6:	f1a8 0204 	sub.w	r2, r8, #4
 800edfa:	4623      	mov	r3, r4
 800edfc:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee00:	429f      	cmp	r7, r3
 800ee02:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee06:	d2f9      	bcs.n	800edfc <__hexnan+0xac>
 800ee08:	1b3b      	subs	r3, r7, r4
 800ee0a:	3e03      	subs	r6, #3
 800ee0c:	3401      	adds	r4, #1
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f023 0303 	bic.w	r3, r3, #3
 800ee14:	3304      	adds	r3, #4
 800ee16:	42b4      	cmp	r4, r6
 800ee18:	bf88      	it	hi
 800ee1a:	2304      	movhi	r3, #4
 800ee1c:	4443      	add	r3, r8
 800ee1e:	f843 2b04 	str.w	r2, [r3], #4
 800ee22:	429f      	cmp	r7, r3
 800ee24:	d2fb      	bcs.n	800ee1e <__hexnan+0xce>
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	b91b      	cbnz	r3, 800ee32 <__hexnan+0xe2>
 800ee2a:	4547      	cmp	r7, r8
 800ee2c:	d127      	bne.n	800ee7e <__hexnan+0x12e>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	603b      	str	r3, [r7, #0]
 800ee32:	2005      	movs	r0, #5
 800ee34:	b007      	add	sp, #28
 800ee36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3a:	3501      	adds	r5, #1
 800ee3c:	f10b 0b01 	add.w	fp, fp, #1
 800ee40:	2d08      	cmp	r5, #8
 800ee42:	dd05      	ble.n	800ee50 <__hexnan+0x100>
 800ee44:	4544      	cmp	r4, r8
 800ee46:	d9c1      	bls.n	800edcc <__hexnan+0x7c>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	3c04      	subs	r4, #4
 800ee4c:	2501      	movs	r5, #1
 800ee4e:	6023      	str	r3, [r4, #0]
 800ee50:	6822      	ldr	r2, [r4, #0]
 800ee52:	f000 000f 	and.w	r0, r0, #15
 800ee56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ee5a:	6020      	str	r0, [r4, #0]
 800ee5c:	e7b6      	b.n	800edcc <__hexnan+0x7c>
 800ee5e:	2508      	movs	r5, #8
 800ee60:	e7b4      	b.n	800edcc <__hexnan+0x7c>
 800ee62:	9b01      	ldr	r3, [sp, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d0de      	beq.n	800ee26 <__hexnan+0xd6>
 800ee68:	f1c3 0320 	rsb	r3, r3, #32
 800ee6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee70:	40da      	lsrs	r2, r3
 800ee72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ee76:	4013      	ands	r3, r2
 800ee78:	f846 3c04 	str.w	r3, [r6, #-4]
 800ee7c:	e7d3      	b.n	800ee26 <__hexnan+0xd6>
 800ee7e:	3f04      	subs	r7, #4
 800ee80:	e7d1      	b.n	800ee26 <__hexnan+0xd6>
 800ee82:	2004      	movs	r0, #4
 800ee84:	e7d6      	b.n	800ee34 <__hexnan+0xe4>

0800ee86 <__ascii_mbtowc>:
 800ee86:	b082      	sub	sp, #8
 800ee88:	b901      	cbnz	r1, 800ee8c <__ascii_mbtowc+0x6>
 800ee8a:	a901      	add	r1, sp, #4
 800ee8c:	b142      	cbz	r2, 800eea0 <__ascii_mbtowc+0x1a>
 800ee8e:	b14b      	cbz	r3, 800eea4 <__ascii_mbtowc+0x1e>
 800ee90:	7813      	ldrb	r3, [r2, #0]
 800ee92:	600b      	str	r3, [r1, #0]
 800ee94:	7812      	ldrb	r2, [r2, #0]
 800ee96:	1e10      	subs	r0, r2, #0
 800ee98:	bf18      	it	ne
 800ee9a:	2001      	movne	r0, #1
 800ee9c:	b002      	add	sp, #8
 800ee9e:	4770      	bx	lr
 800eea0:	4610      	mov	r0, r2
 800eea2:	e7fb      	b.n	800ee9c <__ascii_mbtowc+0x16>
 800eea4:	f06f 0001 	mvn.w	r0, #1
 800eea8:	e7f8      	b.n	800ee9c <__ascii_mbtowc+0x16>

0800eeaa <_realloc_r>:
 800eeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeae:	4680      	mov	r8, r0
 800eeb0:	4615      	mov	r5, r2
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	b921      	cbnz	r1, 800eec0 <_realloc_r+0x16>
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eebc:	f7fd bc80 	b.w	800c7c0 <_malloc_r>
 800eec0:	b92a      	cbnz	r2, 800eece <_realloc_r+0x24>
 800eec2:	f7fd fc09 	bl	800c6d8 <_free_r>
 800eec6:	2400      	movs	r4, #0
 800eec8:	4620      	mov	r0, r4
 800eeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eece:	f000 f8c4 	bl	800f05a <_malloc_usable_size_r>
 800eed2:	4285      	cmp	r5, r0
 800eed4:	4606      	mov	r6, r0
 800eed6:	d802      	bhi.n	800eede <_realloc_r+0x34>
 800eed8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eedc:	d8f4      	bhi.n	800eec8 <_realloc_r+0x1e>
 800eede:	4629      	mov	r1, r5
 800eee0:	4640      	mov	r0, r8
 800eee2:	f7fd fc6d 	bl	800c7c0 <_malloc_r>
 800eee6:	4607      	mov	r7, r0
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d0ec      	beq.n	800eec6 <_realloc_r+0x1c>
 800eeec:	42b5      	cmp	r5, r6
 800eeee:	462a      	mov	r2, r5
 800eef0:	4621      	mov	r1, r4
 800eef2:	bf28      	it	cs
 800eef4:	4632      	movcs	r2, r6
 800eef6:	f7ff fc47 	bl	800e788 <memcpy>
 800eefa:	4621      	mov	r1, r4
 800eefc:	4640      	mov	r0, r8
 800eefe:	463c      	mov	r4, r7
 800ef00:	f7fd fbea 	bl	800c6d8 <_free_r>
 800ef04:	e7e0      	b.n	800eec8 <_realloc_r+0x1e>

0800ef06 <__ascii_wctomb>:
 800ef06:	4603      	mov	r3, r0
 800ef08:	4608      	mov	r0, r1
 800ef0a:	b141      	cbz	r1, 800ef1e <__ascii_wctomb+0x18>
 800ef0c:	2aff      	cmp	r2, #255	@ 0xff
 800ef0e:	d904      	bls.n	800ef1a <__ascii_wctomb+0x14>
 800ef10:	228a      	movs	r2, #138	@ 0x8a
 800ef12:	f04f 30ff 	mov.w	r0, #4294967295
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	4770      	bx	lr
 800ef1a:	2001      	movs	r0, #1
 800ef1c:	700a      	strb	r2, [r1, #0]
 800ef1e:	4770      	bx	lr

0800ef20 <fiprintf>:
 800ef20:	b40e      	push	{r1, r2, r3}
 800ef22:	b503      	push	{r0, r1, lr}
 800ef24:	ab03      	add	r3, sp, #12
 800ef26:	4601      	mov	r1, r0
 800ef28:	4805      	ldr	r0, [pc, #20]	@ (800ef40 <fiprintf+0x20>)
 800ef2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef2e:	6800      	ldr	r0, [r0, #0]
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	f7ff f995 	bl	800e260 <_vfiprintf_r>
 800ef36:	b002      	add	sp, #8
 800ef38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef3c:	b003      	add	sp, #12
 800ef3e:	4770      	bx	lr
 800ef40:	20000018 	.word	0x20000018

0800ef44 <__swhatbuf_r>:
 800ef44:	b570      	push	{r4, r5, r6, lr}
 800ef46:	460c      	mov	r4, r1
 800ef48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef4c:	b096      	sub	sp, #88	@ 0x58
 800ef4e:	4615      	mov	r5, r2
 800ef50:	2900      	cmp	r1, #0
 800ef52:	461e      	mov	r6, r3
 800ef54:	da0c      	bge.n	800ef70 <__swhatbuf_r+0x2c>
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	2100      	movs	r1, #0
 800ef5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef5e:	bf14      	ite	ne
 800ef60:	2340      	movne	r3, #64	@ 0x40
 800ef62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef66:	2000      	movs	r0, #0
 800ef68:	6031      	str	r1, [r6, #0]
 800ef6a:	602b      	str	r3, [r5, #0]
 800ef6c:	b016      	add	sp, #88	@ 0x58
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}
 800ef70:	466a      	mov	r2, sp
 800ef72:	f000 f849 	bl	800f008 <_fstat_r>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	dbed      	blt.n	800ef56 <__swhatbuf_r+0x12>
 800ef7a:	9901      	ldr	r1, [sp, #4]
 800ef7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef84:	4259      	negs	r1, r3
 800ef86:	4159      	adcs	r1, r3
 800ef88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef8c:	e7eb      	b.n	800ef66 <__swhatbuf_r+0x22>

0800ef8e <__smakebuf_r>:
 800ef8e:	898b      	ldrh	r3, [r1, #12]
 800ef90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef92:	079d      	lsls	r5, r3, #30
 800ef94:	4606      	mov	r6, r0
 800ef96:	460c      	mov	r4, r1
 800ef98:	d507      	bpl.n	800efaa <__smakebuf_r+0x1c>
 800ef9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	6123      	str	r3, [r4, #16]
 800efa2:	2301      	movs	r3, #1
 800efa4:	6163      	str	r3, [r4, #20]
 800efa6:	b003      	add	sp, #12
 800efa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efaa:	ab01      	add	r3, sp, #4
 800efac:	466a      	mov	r2, sp
 800efae:	f7ff ffc9 	bl	800ef44 <__swhatbuf_r>
 800efb2:	9f00      	ldr	r7, [sp, #0]
 800efb4:	4605      	mov	r5, r0
 800efb6:	4630      	mov	r0, r6
 800efb8:	4639      	mov	r1, r7
 800efba:	f7fd fc01 	bl	800c7c0 <_malloc_r>
 800efbe:	b948      	cbnz	r0, 800efd4 <__smakebuf_r+0x46>
 800efc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc4:	059a      	lsls	r2, r3, #22
 800efc6:	d4ee      	bmi.n	800efa6 <__smakebuf_r+0x18>
 800efc8:	f023 0303 	bic.w	r3, r3, #3
 800efcc:	f043 0302 	orr.w	r3, r3, #2
 800efd0:	81a3      	strh	r3, [r4, #12]
 800efd2:	e7e2      	b.n	800ef9a <__smakebuf_r+0xc>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	6020      	str	r0, [r4, #0]
 800efd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800efe4:	b15b      	cbz	r3, 800effe <__smakebuf_r+0x70>
 800efe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efea:	4630      	mov	r0, r6
 800efec:	f000 f81e 	bl	800f02c <_isatty_r>
 800eff0:	b128      	cbz	r0, 800effe <__smakebuf_r+0x70>
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f023 0303 	bic.w	r3, r3, #3
 800eff8:	f043 0301 	orr.w	r3, r3, #1
 800effc:	81a3      	strh	r3, [r4, #12]
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	431d      	orrs	r5, r3
 800f002:	81a5      	strh	r5, [r4, #12]
 800f004:	e7cf      	b.n	800efa6 <__smakebuf_r+0x18>
	...

0800f008 <_fstat_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	2300      	movs	r3, #0
 800f00c:	4d06      	ldr	r5, [pc, #24]	@ (800f028 <_fstat_r+0x20>)
 800f00e:	4604      	mov	r4, r0
 800f010:	4608      	mov	r0, r1
 800f012:	4611      	mov	r1, r2
 800f014:	602b      	str	r3, [r5, #0]
 800f016:	f7f3 f947 	bl	80022a8 <_fstat>
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	d102      	bne.n	800f024 <_fstat_r+0x1c>
 800f01e:	682b      	ldr	r3, [r5, #0]
 800f020:	b103      	cbz	r3, 800f024 <_fstat_r+0x1c>
 800f022:	6023      	str	r3, [r4, #0]
 800f024:	bd38      	pop	{r3, r4, r5, pc}
 800f026:	bf00      	nop
 800f028:	200005f4 	.word	0x200005f4

0800f02c <_isatty_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	2300      	movs	r3, #0
 800f030:	4d05      	ldr	r5, [pc, #20]	@ (800f048 <_isatty_r+0x1c>)
 800f032:	4604      	mov	r4, r0
 800f034:	4608      	mov	r0, r1
 800f036:	602b      	str	r3, [r5, #0]
 800f038:	f7f3 f946 	bl	80022c8 <_isatty>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	d102      	bne.n	800f046 <_isatty_r+0x1a>
 800f040:	682b      	ldr	r3, [r5, #0]
 800f042:	b103      	cbz	r3, 800f046 <_isatty_r+0x1a>
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	200005f4 	.word	0x200005f4

0800f04c <abort>:
 800f04c:	2006      	movs	r0, #6
 800f04e:	b508      	push	{r3, lr}
 800f050:	f000 f834 	bl	800f0bc <raise>
 800f054:	2001      	movs	r0, #1
 800f056:	f7f3 f8d7 	bl	8002208 <_exit>

0800f05a <_malloc_usable_size_r>:
 800f05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f05e:	1f18      	subs	r0, r3, #4
 800f060:	2b00      	cmp	r3, #0
 800f062:	bfbc      	itt	lt
 800f064:	580b      	ldrlt	r3, [r1, r0]
 800f066:	18c0      	addlt	r0, r0, r3
 800f068:	4770      	bx	lr

0800f06a <_raise_r>:
 800f06a:	291f      	cmp	r1, #31
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	4605      	mov	r5, r0
 800f070:	460c      	mov	r4, r1
 800f072:	d904      	bls.n	800f07e <_raise_r+0x14>
 800f074:	2316      	movs	r3, #22
 800f076:	6003      	str	r3, [r0, #0]
 800f078:	f04f 30ff 	mov.w	r0, #4294967295
 800f07c:	bd38      	pop	{r3, r4, r5, pc}
 800f07e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f080:	b112      	cbz	r2, 800f088 <_raise_r+0x1e>
 800f082:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f086:	b94b      	cbnz	r3, 800f09c <_raise_r+0x32>
 800f088:	4628      	mov	r0, r5
 800f08a:	f000 f831 	bl	800f0f0 <_getpid_r>
 800f08e:	4622      	mov	r2, r4
 800f090:	4601      	mov	r1, r0
 800f092:	4628      	mov	r0, r5
 800f094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f098:	f000 b818 	b.w	800f0cc <_kill_r>
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d00a      	beq.n	800f0b6 <_raise_r+0x4c>
 800f0a0:	1c59      	adds	r1, r3, #1
 800f0a2:	d103      	bne.n	800f0ac <_raise_r+0x42>
 800f0a4:	2316      	movs	r3, #22
 800f0a6:	6003      	str	r3, [r0, #0]
 800f0a8:	2001      	movs	r0, #1
 800f0aa:	e7e7      	b.n	800f07c <_raise_r+0x12>
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f0b4:	4798      	blx	r3
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e7e0      	b.n	800f07c <_raise_r+0x12>
	...

0800f0bc <raise>:
 800f0bc:	4b02      	ldr	r3, [pc, #8]	@ (800f0c8 <raise+0xc>)
 800f0be:	4601      	mov	r1, r0
 800f0c0:	6818      	ldr	r0, [r3, #0]
 800f0c2:	f7ff bfd2 	b.w	800f06a <_raise_r>
 800f0c6:	bf00      	nop
 800f0c8:	20000018 	.word	0x20000018

0800f0cc <_kill_r>:
 800f0cc:	b538      	push	{r3, r4, r5, lr}
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	4d06      	ldr	r5, [pc, #24]	@ (800f0ec <_kill_r+0x20>)
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	4608      	mov	r0, r1
 800f0d6:	4611      	mov	r1, r2
 800f0d8:	602b      	str	r3, [r5, #0]
 800f0da:	f7f3 f885 	bl	80021e8 <_kill>
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	d102      	bne.n	800f0e8 <_kill_r+0x1c>
 800f0e2:	682b      	ldr	r3, [r5, #0]
 800f0e4:	b103      	cbz	r3, 800f0e8 <_kill_r+0x1c>
 800f0e6:	6023      	str	r3, [r4, #0]
 800f0e8:	bd38      	pop	{r3, r4, r5, pc}
 800f0ea:	bf00      	nop
 800f0ec:	200005f4 	.word	0x200005f4

0800f0f0 <_getpid_r>:
 800f0f0:	f7f3 b872 	b.w	80021d8 <_getpid>

0800f0f4 <_init>:
 800f0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f6:	bf00      	nop
 800f0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fa:	bc08      	pop	{r3}
 800f0fc:	469e      	mov	lr, r3
 800f0fe:	4770      	bx	lr

0800f100 <_fini>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	bf00      	nop
 800f104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f106:	bc08      	pop	{r3}
 800f108:	469e      	mov	lr, r3
 800f10a:	4770      	bx	lr
