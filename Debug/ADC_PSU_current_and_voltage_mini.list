
ADC_PSU_current_and_voltage_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd0c  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800df68  0800df68  0000ef68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e410  0800e410  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e410  0800e410  0000f410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e418  0800e418  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e418  0800e418  0000f418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e41c  0800e41c  0000f41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e420  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d4  0800e5f4  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800e5f4  00010544  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f4e  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002768  00000000  00000000  00028158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0002a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd1  00000000  00000000  0002bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235c8  00000000  00000000  0002ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018248  00000000  00000000  000502a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e56e9  00000000  00000000  000684e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dbd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e70  00000000  00000000  0014dc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00154a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800df4c 	.word	0x0800df4c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	0800df4c 	.word	0x0800df4c

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:
uint32_t NowMillis, SebelumMillis;
float temperature,voltage1,current1,voltage2,current2,konsumsiEnergi;
float read_data_float, write_value_float,arusFiltered;
int before = 0;

void __io_putchar(char ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	230a      	movs	r3, #10
 8001042:	2201      	movs	r2, #1
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001046:	f007 fea9 	bl	8008d9c <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000334 	.word	0x20000334

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 fa1f 	bl	80024a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f87b 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 faa7 	bl	80015b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800106a:	f000 f8ed 	bl	8001248 <MX_ADC1_Init>
  MX_SPI1_Init();
 800106e:	f000 f951 	bl	8001314 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001072:	f000 fa55 	bl	8001520 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001076:	f000 f9a3 	bl	80013c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001080:	4831      	ldr	r0, [pc, #196]	@ (8001148 <main+0xf0>)
 8001082:	f003 f847 	bl	8004114 <HAL_GPIO_WritePin>
  Beep_Beep();
 8001086:	f000 fe3b 	bl	8001d00 <Beep_Beep>

  uint32_t address = 0x000000;
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 3; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e013      	b.n	80010bc <main+0x64>
	  ReadData(address, sizeof(float));
 8001094:	2104      	movs	r1, #4
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f000 fdce 	bl	8001c38 <ReadData>
	  if (!isnan(read_data_float)) {
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <main+0xf4>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	eef4 7a67 	vcmp.f32	s15, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d601      	bvs.n	80010b0 <main+0x58>
		  break;
 80010ac:	bf00      	nop
 80010ae:	e008      	b.n	80010c2 <main+0x6a>
	  }
	  HAL_Delay(50);
 80010b0:	2032      	movs	r0, #50	@ 0x32
 80010b2:	f001 fab3 	bl	800261c <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	dde8      	ble.n	8001094 <main+0x3c>
  {
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//	  HAL_Delay(200);
	  ReadData(address, sizeof(float));
 80010c2:	2104      	movs	r1, #4
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f000 fdb7 	bl	8001c38 <ReadData>
	  //printf("Read Data: %f |", read_data_float);
	  //Membaca ADC
	  ReadADC_voltage_current();
 80010ca:	f000 faf5 	bl	80016b8 <ReadADC_voltage_current>
	  //printf("volt : %.4f |", voltage1);
	  //printf("Arus : %.4f A |", current1);
	  if(voltage1 <13.1 && before == 0){
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <main+0xf8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa4c 	bl	8000570 <__aeabi_f2d>
 80010d8:	a319      	add	r3, pc, #100	@ (adr r3, 8001140 <main+0xe8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fd11 	bl	8000b04 <__aeabi_dcmplt>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d012      	beq.n	800110e <main+0xb6>
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <main+0xfc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10e      	bne.n	800110e <main+0xb6>
		  write_value(konsumsiEnergi, address);
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <main+0x100>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	f000 fd1a 	bl	8001b34 <write_value>
		  HAL_Delay(50);
 8001100:	2032      	movs	r0, #50	@ 0x32
 8001102:	f001 fa8b 	bl	800261c <HAL_Delay>
		  before = 1;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <main+0xfc>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e013      	b.n	8001136 <main+0xde>
	  }
	  else if(voltage1 > 13.1 && before == 1){
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <main+0xf8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa2c 	bl	8000570 <__aeabi_f2d>
 8001118:	a309      	add	r3, pc, #36	@ (adr r3, 8001140 <main+0xe8>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fd0f 	bl	8000b40 <__aeabi_dcmpgt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <main+0xde>
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <main+0xfc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d102      	bne.n	8001136 <main+0xde>
		  before=0;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <main+0xfc>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
	  }
	  //printf("Consumption: %.4f Ah\n", konsumsiEnergi);
	  HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f001 fa70 	bl	800261c <HAL_Delay>
	  ReadData(address, sizeof(float));
 800113c:	e7c1      	b.n	80010c2 <main+0x6a>
 800113e:	bf00      	nop
 8001140:	33333333 	.word	0x33333333
 8001144:	402a3333 	.word	0x402a3333
 8001148:	42020400 	.word	0x42020400
 800114c:	200003e4 	.word	0x200003e4
 8001150:	200003d0 	.word	0x200003d0
 8001154:	200003ec 	.word	0x200003ec
 8001158:	200003e0 	.word	0x200003e0

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09c      	sub	sp, #112	@ 0x70
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2250      	movs	r2, #80	@ 0x50
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f009 faf7 	bl	800a75e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <SystemClock_Config+0xe4>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	4a2e      	ldr	r2, [pc, #184]	@ (8001240 <SystemClock_Config+0xe4>)
 8001188:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800118c:	6113      	str	r3, [r2, #16]
 800118e:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <SystemClock_Config+0xe4>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800119a:	bf00      	nop
 800119c:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <SystemClock_Config+0xe4>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d1f9      	bne.n	800119c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80011a8:	2312      	movs	r3, #18
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80011b0:	2308      	movs	r3, #8
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	2340      	movs	r3, #64	@ 0x40
 80011b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80011b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80011be:	2320      	movs	r3, #32
 80011c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c2:	2302      	movs	r3, #2
 80011c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80011ce:	2340      	movs	r3, #64	@ 0x40
 80011d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011da:	2302      	movs	r3, #2
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80011de:	2304      	movs	r3, #4
 80011e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 ffa8 	bl	8004144 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011fa:	f000 fdbb 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	231f      	movs	r3, #31
 8001200:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001206:	2308      	movs	r3, #8
 8001208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2101      	movs	r1, #1
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fbc9 	bl	80049b4 <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001228:	f000 fda4 	bl	8001d74 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SystemClock_Config+0xe8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <SystemClock_Config+0xe8>)
 8001232:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	3770      	adds	r7, #112	@ 0x70
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	44020800 	.word	0x44020800
 8001244:	40022000 	.word	0x40022000

08001248 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2220      	movs	r2, #32
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f009 fa82 	bl	800a75e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <MX_ADC1_Init+0xc0>)
 800125c:	4a2b      	ldr	r2, [pc, #172]	@ (800130c <MX_ADC1_Init+0xc4>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <MX_ADC1_Init+0xc0>)
 8001262:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001266:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <MX_ADC1_Init+0xc0>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_ADC1_Init+0xc0>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_ADC1_Init+0xc0>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_ADC1_Init+0xc0>)
 800127c:	2204      	movs	r2, #4
 800127e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_ADC1_Init+0xc0>)
 8001282:	2200      	movs	r2, #0
 8001284:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <MX_ADC1_Init+0xc0>)
 8001288:	2201      	movs	r2, #1
 800128a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_ADC1_Init+0xc0>)
 800128e:	2201      	movs	r2, #1
 8001290:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_ADC1_Init+0xc0>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_ADC1_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c2:	4811      	ldr	r0, [pc, #68]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012c4:	f001 fc52 	bl	8002b6c <HAL_ADC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012ce:	f000 fd51 	bl	8001d74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_ADC1_Init+0xc8>)
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d6:	2306      	movs	r3, #6
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012de:	237f      	movs	r3, #127	@ 0x7f
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e2:	2304      	movs	r3, #4
 80012e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <MX_ADC1_Init+0xc0>)
 80012f0:	f001 febc 	bl	800306c <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012fa:	f000 fd3b 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001f0 	.word	0x200001f0
 800130c:	42028000 	.word	0x42028000
 8001310:	14f00020 	.word	0x14f00020

08001314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800131a:	4a28      	ldr	r2, [pc, #160]	@ (80013bc <MX_SPI1_Init+0xa8>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001320:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800132e:	2203      	movs	r2, #3
 8001330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001338:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001340:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001360:	2207      	movs	r2, #7
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_SPI1_Init+0xa4>)
 80013a4:	f005 ff16 	bl	80071d4 <HAL_SPI_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80013ae:	f000 fce1 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000258 	.word	0x20000258
 80013bc:	40013000 	.word	0x40013000

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09c      	sub	sp, #112	@ 0x70
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2234      	movs	r2, #52	@ 0x34
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 f9af 	bl	800a75e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001400:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <MX_TIM1_Init+0x158>)
 8001402:	4a46      	ldr	r2, [pc, #280]	@ (800151c <MX_TIM1_Init+0x15c>)
 8001404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001406:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <MX_TIM1_Init+0x158>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <MX_TIM1_Init+0x158>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_TIM1_Init+0x158>)
 8001414:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_TIM1_Init+0x158>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001420:	4b3d      	ldr	r3, [pc, #244]	@ (8001518 <MX_TIM1_Init+0x158>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_TIM1_Init+0x158>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142c:	483a      	ldr	r0, [pc, #232]	@ (8001518 <MX_TIM1_Init+0x158>)
 800142e:	f006 fc4c 	bl	8007cca <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001438:	f000 fc9c 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001446:	4619      	mov	r1, r3
 8001448:	4833      	ldr	r0, [pc, #204]	@ (8001518 <MX_TIM1_Init+0x158>)
 800144a:	f006 fed9 	bl	8008200 <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001454:	f000 fc8e 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001458:	482f      	ldr	r0, [pc, #188]	@ (8001518 <MX_TIM1_Init+0x158>)
 800145a:	f006 fc8d 	bl	8007d78 <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001464:	f000 fc86 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001474:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001478:	4619      	mov	r1, r3
 800147a:	4827      	ldr	r0, [pc, #156]	@ (8001518 <MX_TIM1_Init+0x158>)
 800147c:	f007 fb50 	bl	8008b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001486:	f000 fc75 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	@ 0x60
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	481a      	ldr	r0, [pc, #104]	@ (8001518 <MX_TIM1_Init+0x158>)
 80014b0:	f006 fd92 	bl	8007fd8 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014ba:	f000 fc5b 	bl	8001d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4807      	ldr	r0, [pc, #28]	@ (8001518 <MX_TIM1_Init+0x158>)
 80014fc:	f007 fb78 	bl	8008bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001506:	f000 fc35 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800150a:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_TIM1_Init+0x158>)
 800150c:	f000 fd92 	bl	8002034 <HAL_TIM_MspPostInit>

}
 8001510:	bf00      	nop
 8001512:	3770      	adds	r7, #112	@ 0x70
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200002e8 	.word	0x200002e8
 800151c:	40012c00 	.word	0x40012c00

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001526:	4a23      	ldr	r2, [pc, #140]	@ (80015b4 <MX_USART1_UART_Init+0x94>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800156a:	f007 fbc7 	bl	8008cfc <HAL_UART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001574:	f000 fbfe 	bl	8001d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800157c:	f008 f882 	bl	8009684 <HAL_UARTEx_SetTxFifoThreshold>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 fbf5 	bl	8001d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800158e:	f008 f8b7 	bl	8009700 <HAL_UARTEx_SetRxFifoThreshold>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 fbec 	bl	8001d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_USART1_UART_Init+0x90>)
 800159e:	f008 f838 	bl	8009612 <HAL_UARTEx_DisableFifoMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 fbe4 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000334 	.word	0x20000334
 80015b4:	40013800 	.word	0x40013800

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d4:	4a34      	ldr	r2, [pc, #208]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015de:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b2e      	ldr	r3, [pc, #184]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 80015ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f2:	4a2d      	ldr	r2, [pc, #180]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015fc:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 80015fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 800160c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001610:	4a25      	ldr	r2, [pc, #148]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800161a:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <MX_GPIO_Init+0xf0>)
 800161c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	481f      	ldr	r0, [pc, #124]	@ (80016ac <MX_GPIO_Init+0xf4>)
 800162e:	f002 fd71 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BATT1_Pin|BATT2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001638:	481d      	ldr	r0, [pc, #116]	@ (80016b0 <MX_GPIO_Init+0xf8>)
 800163a:	f002 fd6b 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	481c      	ldr	r0, [pc, #112]	@ (80016b4 <MX_GPIO_Init+0xfc>)
 8001644:	f002 fd66 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001648:	2310      	movs	r3, #16
 800164a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4813      	ldr	r0, [pc, #76]	@ (80016ac <MX_GPIO_Init+0xf4>)
 8001660:	f002 fc06 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT1_Pin BATT2_Pin */
  GPIO_InitStruct.Pin = BATT1_Pin|BATT2_Pin;
 8001664:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <MX_GPIO_Init+0xf8>)
 800167e:	f002 fbf7 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_GPIO_Init+0xfc>)
 800169a:	f002 fbe9 	bl	8003e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	44020c00 	.word	0x44020c00
 80016ac:	42020000 	.word	0x42020000
 80016b0:	42020400 	.word	0x42020400
 80016b4:	42020800 	.word	0x42020800

080016b8 <ReadADC_voltage_current>:

/* USER CODE BEGIN 4 */
void ReadADC_voltage_current(void){
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b092      	sub	sp, #72	@ 0x48
 80016bc:	af00      	add	r7, sp, #0
	uint32_t sumADC_voltage1, sumADC_current1,sumADC_voltage2, sumADC_current2;
	uint16_t value_voltage1, value_current1, value_voltage2, value_current2;
	float voltage_current1,voltage_current2;

	ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2220      	movs	r2, #32
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f009 f84a 	bl	800a75e <memset>
	sumADC_voltage1 = sumADC_current1 = sumADC_voltage2 = sumADC_current2 = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80016d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d8:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 500; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80016de:	e077      	b.n	80017d0 <ReadADC_voltage_current+0x118>
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e0:	2306      	movs	r3, #6
 80016e2:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 80016e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80016e8:	60fb      	str	r3, [r7, #12]

		//ADC VOLTAGE BATT1
		sConfig.Channel = ADC_CHANNEL_5;
 80016ea:	4bcb      	ldr	r3, [pc, #812]	@ (8001a18 <ReadADC_voltage_current+0x360>)
 80016ec:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	48ca      	ldr	r0, [pc, #808]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 80016f4:	f001 fcba 	bl	800306c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80016f8:	48c8      	ldr	r0, [pc, #800]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 80016fa:	f001 fb85 	bl	8002e08 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80016fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001702:	48c6      	ldr	r0, [pc, #792]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001704:	f001 fc16 	bl	8002f34 <HAL_ADC_PollForConversion>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <ReadADC_voltage_current+0x64>
			sumADC_voltage1 += HAL_ADC_GetValue(&hadc1);
 800170e:	48c3      	ldr	r0, [pc, #780]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001710:	f001 fc9f 	bl	8003052 <HAL_ADC_GetValue>
 8001714:	4602      	mov	r2, r0
 8001716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001718:	4413      	add	r3, r2
 800171a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		HAL_ADC_Stop(&hadc1);
 800171c:	48bf      	ldr	r0, [pc, #764]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 800171e:	f001 fbd6 	bl	8002ece <HAL_ADC_Stop>

		//ADC VOLTAGE BATT2
		sConfig.Channel = ADC_CHANNEL_4;
 8001722:	4bbf      	ldr	r3, [pc, #764]	@ (8001a20 <ReadADC_voltage_current+0x368>)
 8001724:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	48bc      	ldr	r0, [pc, #752]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 800172c:	f001 fc9e 	bl	800306c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001730:	48ba      	ldr	r0, [pc, #744]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001732:	f001 fb69 	bl	8002e08 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001736:	f04f 31ff 	mov.w	r1, #4294967295
 800173a:	48b8      	ldr	r0, [pc, #736]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 800173c:	f001 fbfa 	bl	8002f34 <HAL_ADC_PollForConversion>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <ReadADC_voltage_current+0x9c>
			sumADC_voltage2 += HAL_ADC_GetValue(&hadc1);
 8001746:	48b5      	ldr	r0, [pc, #724]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001748:	f001 fc83 	bl	8003052 <HAL_ADC_GetValue>
 800174c:	4602      	mov	r2, r0
 800174e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001750:	4413      	add	r3, r2
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		HAL_ADC_Stop(&hadc1);
 8001754:	48b1      	ldr	r0, [pc, #708]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001756:	f001 fbba 	bl	8002ece <HAL_ADC_Stop>

		//ADC CURRENT BATT1
		sConfig.Channel = ADC_CHANNEL_1;
 800175a:	4bb2      	ldr	r3, [pc, #712]	@ (8001a24 <ReadADC_voltage_current+0x36c>)
 800175c:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	48ae      	ldr	r0, [pc, #696]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001764:	f001 fc82 	bl	800306c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001768:	48ac      	ldr	r0, [pc, #688]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 800176a:	f001 fb4d 	bl	8002e08 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800176e:	f04f 31ff 	mov.w	r1, #4294967295
 8001772:	48aa      	ldr	r0, [pc, #680]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001774:	f001 fbde 	bl	8002f34 <HAL_ADC_PollForConversion>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d106      	bne.n	800178c <ReadADC_voltage_current+0xd4>
			sumADC_current1 += HAL_ADC_GetValue(&hadc1);
 800177e:	48a7      	ldr	r0, [pc, #668]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 8001780:	f001 fc67 	bl	8003052 <HAL_ADC_GetValue>
 8001784:	4602      	mov	r2, r0
 8001786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001788:	4413      	add	r3, r2
 800178a:	643b      	str	r3, [r7, #64]	@ 0x40
		}
		HAL_ADC_Stop(&hadc1);
 800178c:	48a3      	ldr	r0, [pc, #652]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 800178e:	f001 fb9e 	bl	8002ece <HAL_ADC_Stop>

//		ADC CURRENT BATT2
		sConfig.Channel = ADC_CHANNEL_10;
 8001792:	4ba5      	ldr	r3, [pc, #660]	@ (8001a28 <ReadADC_voltage_current+0x370>)
 8001794:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	48a0      	ldr	r0, [pc, #640]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 800179c:	f001 fc66 	bl	800306c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80017a0:	489e      	ldr	r0, [pc, #632]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 80017a2:	f001 fb31 	bl	8002e08 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80017a6:	f04f 31ff 	mov.w	r1, #4294967295
 80017aa:	489c      	ldr	r0, [pc, #624]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 80017ac:	f001 fbc2 	bl	8002f34 <HAL_ADC_PollForConversion>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <ReadADC_voltage_current+0x10c>
			sumADC_current2 += HAL_ADC_GetValue(&hadc1);
 80017b6:	4899      	ldr	r0, [pc, #612]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 80017b8:	f001 fc4b 	bl	8003052 <HAL_ADC_GetValue>
 80017bc:	4602      	mov	r2, r0
 80017be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c0:	4413      	add	r3, r2
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		HAL_ADC_Stop(&hadc1);
 80017c4:	4895      	ldr	r0, [pc, #596]	@ (8001a1c <ReadADC_voltage_current+0x364>)
 80017c6:	f001 fb82 	bl	8002ece <HAL_ADC_Stop>
	for (int i = 0; i < 500; i++) {
 80017ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017cc:	3301      	adds	r3, #1
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80017d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017d6:	db83      	blt.n	80016e0 <ReadADC_voltage_current+0x28>
	}
	value_voltage1 = ((sumADC_voltage1 / 500) - 1480) * 2552 / (4032 - 1480);
 80017d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017da:	4a94      	ldr	r2, [pc, #592]	@ (8001a2c <ReadADC_voltage_current+0x374>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	f640 12f8 	movw	r2, #2552	@ 0x9f8
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	f5a3 1366 	sub.w	r3, r3, #3768320	@ 0x398000
 80017ee:	f5a3 5307 	sub.w	r3, r3, #8640	@ 0x21c0
 80017f2:	4a8f      	ldr	r2, [pc, #572]	@ (8001a30 <ReadADC_voltage_current+0x378>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	0adb      	lsrs	r3, r3, #11
 80017fa:	867b      	strh	r3, [r7, #50]	@ 0x32
	value_current1 = ((sumADC_current1 / 500) - 1480) * 2552 / (4032 - 1480);
 80017fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017fe:	4a8b      	ldr	r2, [pc, #556]	@ (8001a2c <ReadADC_voltage_current+0x374>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	f640 12f8 	movw	r2, #2552	@ 0x9f8
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	f5a3 1366 	sub.w	r3, r3, #3768320	@ 0x398000
 8001812:	f5a3 5307 	sub.w	r3, r3, #8640	@ 0x21c0
 8001816:	4a86      	ldr	r2, [pc, #536]	@ (8001a30 <ReadADC_voltage_current+0x378>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0adb      	lsrs	r3, r3, #11
 800181e:	863b      	strh	r3, [r7, #48]	@ 0x30
	value_voltage2 = ((sumADC_voltage2 / 500) - 1480) * 2552 / (4032 - 1480);
 8001820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001822:	4a82      	ldr	r2, [pc, #520]	@ (8001a2c <ReadADC_voltage_current+0x374>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	095b      	lsrs	r3, r3, #5
 800182a:	f640 12f8 	movw	r2, #2552	@ 0x9f8
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	f5a3 1366 	sub.w	r3, r3, #3768320	@ 0x398000
 8001836:	f5a3 5307 	sub.w	r3, r3, #8640	@ 0x21c0
 800183a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a30 <ReadADC_voltage_current+0x378>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	0adb      	lsrs	r3, r3, #11
 8001842:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	value_current2 = ((sumADC_current2 / 500) - 1480) * 2552 / (4032 - 1480);
 8001844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001846:	4a79      	ldr	r2, [pc, #484]	@ (8001a2c <ReadADC_voltage_current+0x374>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	f640 12f8 	movw	r2, #2552	@ 0x9f8
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	f5a3 1366 	sub.w	r3, r3, #3768320	@ 0x398000
 800185a:	f5a3 5307 	sub.w	r3, r3, #8640	@ 0x21c0
 800185e:	4a74      	ldr	r2, [pc, #464]	@ (8001a30 <ReadADC_voltage_current+0x378>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	0adb      	lsrs	r3, r3, #11
 8001866:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	voltage1 = (value_voltage1 * 14.6) / 3816;
 8001868:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe6e 	bl	800054c <__aeabi_i2d>
 8001870:	a355      	add	r3, pc, #340	@ (adr r3, 80019c8 <ReadADC_voltage_current+0x310>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fed3 	bl	8000620 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	a353      	add	r3, pc, #332	@ (adr r3, 80019d0 <ReadADC_voltage_current+0x318>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fff4 	bl	8000874 <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f9bc 	bl	8000c10 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a66      	ldr	r2, [pc, #408]	@ (8001a34 <ReadADC_voltage_current+0x37c>)
 800189c:	6013      	str	r3, [r2, #0]
	voltage_current1 = (value_current1 * 3.31) / 2552;
 800189e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe53 	bl	800054c <__aeabi_i2d>
 80018a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80019d8 <ReadADC_voltage_current+0x320>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe feb8 	bl	8000620 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	a349      	add	r3, pc, #292	@ (adr r3, 80019e0 <ReadADC_voltage_current+0x328>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe ffd9 	bl	8000874 <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f9a1 	bl	8000c10 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	current1 = fabs((voltage_current1 - 2.5305) / 0.10156);
 80018d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018d4:	f7fe fe4c 	bl	8000570 <__aeabi_f2d>
 80018d8:	a343      	add	r3, pc, #268	@ (adr r3, 80019e8 <ReadADC_voltage_current+0x330>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fce7 	bl	80002b0 <__aeabi_dsub>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	a341      	add	r3, pc, #260	@ (adr r3, 80019f0 <ReadADC_voltage_current+0x338>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe ffc0 	bl	8000874 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f988 	bl	8000c10 <__aeabi_d2f>
 8001900:	ee07 0a90 	vmov	s15, r0
 8001904:	eef0 7ae7 	vabs.f32	s15, s15
 8001908:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <ReadADC_voltage_current+0x380>)
 800190a:	edc3 7a00 	vstr	s15, [r3]

	voltage2 = (value_voltage2 * 14.6) / 3816;
 800190e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe1b 	bl	800054c <__aeabi_i2d>
 8001916:	a32c      	add	r3, pc, #176	@ (adr r3, 80019c8 <ReadADC_voltage_current+0x310>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fe80 	bl	8000620 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	a329      	add	r3, pc, #164	@ (adr r3, 80019d0 <ReadADC_voltage_current+0x318>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe ffa1 	bl	8000874 <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f969 	bl	8000c10 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	4a3e      	ldr	r2, [pc, #248]	@ (8001a3c <ReadADC_voltage_current+0x384>)
 8001942:	6013      	str	r3, [r2, #0]
	voltage_current2 = (value_current2 * 3.3) / 4017;
 8001944:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe00 	bl	800054c <__aeabi_i2d>
 800194c:	a32a      	add	r3, pc, #168	@ (adr r3, 80019f8 <ReadADC_voltage_current+0x340>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe65 	bl	8000620 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	a328      	add	r3, pc, #160	@ (adr r3, 8001a00 <ReadADC_voltage_current+0x348>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe ff86 	bl	8000874 <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f94e 	bl	8000c10 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
	current2 = fabs((voltage_current2 - 2.8541) / 0.0373);
 8001978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800197a:	f7fe fdf9 	bl	8000570 <__aeabi_f2d>
 800197e:	a322      	add	r3, pc, #136	@ (adr r3, 8001a08 <ReadADC_voltage_current+0x350>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fc94 	bl	80002b0 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a10 <ReadADC_voltage_current+0x358>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe ff6d 	bl	8000874 <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f935 	bl	8000c10 <__aeabi_d2f>
 80019a6:	ee07 0a90 	vmov	s15, r0
 80019aa:	eef0 7ae7 	vabs.f32	s15, s15
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <ReadADC_voltage_current+0x388>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]

	//Konsumsi Arus Algoritma
	NowMillis = HAL_GetTick();
 80019b4:	f000 fe26 	bl	8002604 <HAL_GetTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <ReadADC_voltage_current+0x38c>)
 80019bc:	6013      	str	r3, [r2, #0]
	if (NowMillis - SebelumMillis >= 1000){
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <ReadADC_voltage_current+0x38c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	e041      	b.n	8001a48 <ReadADC_voltage_current+0x390>
 80019c4:	f3af 8000 	nop.w
 80019c8:	33333333 	.word	0x33333333
 80019cc:	402d3333 	.word	0x402d3333
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40add000 	.word	0x40add000
 80019d8:	47ae147b 	.word	0x47ae147b
 80019dc:	400a7ae1 	.word	0x400a7ae1
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40a3f000 	.word	0x40a3f000
 80019e8:	c8b43958 	.word	0xc8b43958
 80019ec:	40043e76 	.word	0x40043e76
 80019f0:	0e94ee39 	.word	0x0e94ee39
 80019f4:	3fb9ffd6 	.word	0x3fb9ffd6
 80019f8:	66666666 	.word	0x66666666
 80019fc:	400a6666 	.word	0x400a6666
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40af6200 	.word	0x40af6200
 8001a08:	617c1bda 	.word	0x617c1bda
 8001a0c:	4006d532 	.word	0x4006d532
 8001a10:	504816f0 	.word	0x504816f0
 8001a14:	3fa318fc 	.word	0x3fa318fc
 8001a18:	14f00020 	.word	0x14f00020
 8001a1c:	200001f0 	.word	0x200001f0
 8001a20:	10c00010 	.word	0x10c00010
 8001a24:	04300002 	.word	0x04300002
 8001a28:	2a000400 	.word	0x2a000400
 8001a2c:	10624dd3 	.word	0x10624dd3
 8001a30:	cd712753 	.word	0xcd712753
 8001a34:	200003d0 	.word	0x200003d0
 8001a38:	200003d4 	.word	0x200003d4
 8001a3c:	200003d8 	.word	0x200003d8
 8001a40:	200003dc 	.word	0x200003dc
 8001a44:	200003c8 	.word	0x200003c8
 8001a48:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <ReadADC_voltage_current+0x458>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a52:	d339      	bcc.n	8001ac8 <ReadADC_voltage_current+0x410>
		arusFiltered = 0.2 * current1 + 0.8 * arusFiltered;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	@ (8001b14 <ReadADC_voltage_current+0x45c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd89 	bl	8000570 <__aeabi_f2d>
 8001a5e:	a328      	add	r3, pc, #160	@ (adr r3, 8001b00 <ReadADC_voltage_current+0x448>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fddc 	bl	8000620 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <ReadADC_voltage_current+0x460>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd7b 	bl	8000570 <__aeabi_f2d>
 8001a7a:	a323      	add	r3, pc, #140	@ (adr r3, 8001b08 <ReadADC_voltage_current+0x450>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdce 	bl	8000620 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fc12 	bl	80002b4 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f8ba 	bl	8000c10 <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <ReadADC_voltage_current+0x460>)
 8001aa0:	6013      	str	r3, [r2, #0]
		konsumsiEnergi += (arusFiltered / 3600);
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <ReadADC_voltage_current+0x460>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001b1c <ReadADC_voltage_current+0x464>
 8001aac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <ReadADC_voltage_current+0x468>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <ReadADC_voltage_current+0x468>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
		SebelumMillis = NowMillis;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <ReadADC_voltage_current+0x46c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <ReadADC_voltage_current+0x458>)
 8001ac6:	6013      	str	r3, [r2, #0]
	}

	printf("Read data : %d |", value_current1);
 8001ac8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001aca:	4619      	mov	r1, r3
 8001acc:	4816      	ldr	r0, [pc, #88]	@ (8001b28 <ReadADC_voltage_current+0x470>)
 8001ace:	f008 fdd1 	bl	800a674 <iprintf>
	printf("voltage : %.4f |", voltage_current1);
 8001ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ad4:	f7fe fd4c 	bl	8000570 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4813      	ldr	r0, [pc, #76]	@ (8001b2c <ReadADC_voltage_current+0x474>)
 8001ade:	f008 fdc9 	bl	800a674 <iprintf>
	printf("current : %.4f \n", current1);
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <ReadADC_voltage_current+0x45c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd42 	bl	8000570 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <ReadADC_voltage_current+0x478>)
 8001af2:	f008 fdbf 	bl	800a674 <iprintf>
    //printf("Arus : %.5f A |", voltage_current2);
}
 8001af6:	bf00      	nop
 8001af8:	3748      	adds	r7, #72	@ 0x48
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	9999999a 	.word	0x9999999a
 8001b04:	3fc99999 	.word	0x3fc99999
 8001b08:	9999999a 	.word	0x9999999a
 8001b0c:	3fe99999 	.word	0x3fe99999
 8001b10:	200003cc 	.word	0x200003cc
 8001b14:	200003d4 	.word	0x200003d4
 8001b18:	200003e8 	.word	0x200003e8
 8001b1c:	45610000 	.word	0x45610000
 8001b20:	200003e0 	.word	0x200003e0
 8001b24:	200003c8 	.word	0x200003c8
 8001b28:	0800df68 	.word	0x0800df68
 8001b2c:	0800df7c 	.word	0x0800df7c
 8001b30:	0800df90 	.word	0x0800df90

08001b34 <write_value>:

// Fungsi untuk menghapus dan menulis nilai ke flash memory
void write_value(float value, uint32_t address) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b3e:	6038      	str	r0, [r7, #0]
	uint8_t write_enable_cmd = 0x06;
 8001b40:	2306      	movs	r3, #6
 8001b42:	75fb      	strb	r3, [r7, #23]
    uint8_t data[sizeof(value)];
    memcpy(data, &value, sizeof(value));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	613b      	str	r3, [r7, #16]

    // Perintah Erase Sector (4 KB)
    uint8_t erase_cmd[4];
    erase_cmd[0] = 0x20;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	733b      	strb	r3, [r7, #12]
    erase_cmd[1] = (address >> 16) & 0xFF;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	737b      	strb	r3, [r7, #13]
    erase_cmd[2] = (address >> 8) & 0xFF;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	73bb      	strb	r3, [r7, #14]
    erase_cmd[3] = address & 0xFF;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	73fb      	strb	r3, [r7, #15]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	4832      	ldr	r0, [pc, #200]	@ (8001c30 <write_value+0xfc>)
 8001b68:	f002 fad4 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 8001b6c:	f107 0117 	add.w	r1, r7, #23
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	2201      	movs	r2, #1
 8001b76:	482f      	ldr	r0, [pc, #188]	@ (8001c34 <write_value+0x100>)
 8001b78:	f005 fc28 	bl	80073cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2110      	movs	r1, #16
 8001b80:	482b      	ldr	r0, [pc, #172]	@ (8001c30 <write_value+0xfc>)
 8001b82:	f002 fac7 	bl	8004114 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2110      	movs	r1, #16
 8001b8a:	4829      	ldr	r0, [pc, #164]	@ (8001c30 <write_value+0xfc>)
 8001b8c:	f002 fac2 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, erase_cmd, 4, HAL_MAX_DELAY);
 8001b90:	f107 010c 	add.w	r1, r7, #12
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	2204      	movs	r2, #4
 8001b9a:	4826      	ldr	r0, [pc, #152]	@ (8001c34 <write_value+0x100>)
 8001b9c:	f005 fc16 	bl	80073cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2110      	movs	r1, #16
 8001ba4:	4822      	ldr	r0, [pc, #136]	@ (8001c30 <write_value+0xfc>)
 8001ba6:	f002 fab5 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001baa:	2064      	movs	r0, #100	@ 0x64
 8001bac:	f000 fd36 	bl	800261c <HAL_Delay>


    // Perintah Write Data
    uint8_t write_cmd[4];
    write_cmd[0] = 0x02;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	723b      	strb	r3, [r7, #8]
    write_cmd[1] = (address >> 16) & 0xFF;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	727b      	strb	r3, [r7, #9]
    write_cmd[2] = (address >> 8) & 0xFF;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	72bb      	strb	r3, [r7, #10]
    write_cmd[3] = address & 0xFF;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	72fb      	strb	r3, [r7, #11]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	4818      	ldr	r0, [pc, #96]	@ (8001c30 <write_value+0xfc>)
 8001bd0:	f002 faa0 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 8001bd4:	f107 0117 	add.w	r1, r7, #23
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4815      	ldr	r0, [pc, #84]	@ (8001c34 <write_value+0x100>)
 8001be0:	f005 fbf4 	bl	80073cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2110      	movs	r1, #16
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <write_value+0xfc>)
 8001bea:	f002 fa93 	bl	8004114 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2110      	movs	r1, #16
 8001bf2:	480f      	ldr	r0, [pc, #60]	@ (8001c30 <write_value+0xfc>)
 8001bf4:	f002 fa8e 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, write_cmd, 4, HAL_MAX_DELAY);
 8001bf8:	f107 0108 	add.w	r1, r7, #8
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	2204      	movs	r2, #4
 8001c02:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <write_value+0x100>)
 8001c04:	f005 fbe2 	bl	80073cc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 8001c08:	f107 0110 	add.w	r1, r7, #16
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	2204      	movs	r2, #4
 8001c12:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <write_value+0x100>)
 8001c14:	f005 fbda 	bl	80073cc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <write_value+0xfc>)
 8001c1e:	f002 fa79 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001c22:	2032      	movs	r0, #50	@ 0x32
 8001c24:	f000 fcfa 	bl	800261c <HAL_Delay>
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	42020000 	.word	0x42020000
 8001c34:	20000258 	.word	0x20000258

08001c38 <ReadData>:

// Fungsi untuk membaca data dari flash memory
void ReadData(uint32_t address, uint32_t length) {
 8001c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
 8001c44:	466b      	mov	r3, sp
 8001c46:	461e      	mov	r6, r3
    uint8_t cmd[4];
    cmd[0] = 0x03;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]

    uint8_t data[length];
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	460b      	mov	r3, r1
 8001c66:	3b01      	subs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	4688      	mov	r8, r1
 8001c6e:	4699      	mov	r9, r3
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c84:	2300      	movs	r3, #0
 8001c86:	460c      	mov	r4, r1
 8001c88:	461d      	mov	r5, r3
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	00eb      	lsls	r3, r5, #3
 8001c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c98:	00e2      	lsls	r2, r4, #3
 8001c9a:	1dcb      	adds	r3, r1, #7
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	ebad 0d03 	sub.w	sp, sp, r3
 8001ca4:	466b      	mov	r3, sp
 8001ca6:	3300      	adds	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2110      	movs	r1, #16
 8001cae:	4811      	ldr	r0, [pc, #68]	@ (8001cf4 <ReadData+0xbc>)
 8001cb0:	f002 fa30 	bl	8004114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8001cb4:	f107 010c 	add.w	r1, r7, #12
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	480e      	ldr	r0, [pc, #56]	@ (8001cf8 <ReadData+0xc0>)
 8001cc0:	f005 fb84 	bl	80073cc <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	6939      	ldr	r1, [r7, #16]
 8001cce:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <ReadData+0xc0>)
 8001cd0:	f005 fd7e 	bl	80077d0 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <ReadData+0xbc>)
 8001cda:	f002 fa1b 	bl	8004114 <HAL_GPIO_WritePin>

    memcpy(&read_data_float, data, sizeof(read_data_float));
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <ReadData+0xc4>)
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	46b5      	mov	sp, r6
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cf4:	42020000 	.word	0x42020000
 8001cf8:	20000258 	.word	0x20000258
 8001cfc:	200003e4 	.word	0x200003e4

08001d00 <Beep_Beep>:

// Fungsi untuk menghasilkan bunyi beep pada buzzer
void Beep_Beep(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d06:	2100      	movs	r1, #0
 8001d08:	4819      	ldr	r0, [pc, #100]	@ (8001d70 <Beep_Beep+0x70>)
 8001d0a:	f006 f897 	bl	8007e3c <HAL_TIM_PWM_Start>
	for (int i = 0; i < 2; i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	e024      	b.n	8001d5e <Beep_Beep+0x5e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d14:	2100      	movs	r1, #0
 8001d16:	4816      	ldr	r0, [pc, #88]	@ (8001d70 <Beep_Beep+0x70>)
 8001d18:	f006 f890 	bl	8007e3c <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <Beep_Beep+0x70>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d24:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 8001d26:	2064      	movs	r0, #100	@ 0x64
 8001d28:	f000 fc78 	bl	800261c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <Beep_Beep+0x70>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d34:	2032      	movs	r0, #50	@ 0x32
 8001d36:	f000 fc71 	bl	800261c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <Beep_Beep+0x70>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d42:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d44:	2032      	movs	r0, #50	@ 0x32
 8001d46:	f000 fc69 	bl	800261c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <Beep_Beep+0x70>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d52:	2032      	movs	r0, #50	@ 0x32
 8001d54:	f000 fc62 	bl	800261c <HAL_Delay>
	for (int i = 0; i < 2; i++) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	ddd7      	ble.n	8001d14 <Beep_Beep+0x14>
	}
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002e8 	.word	0x200002e8

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0ae      	sub	sp, #184	@ 0xb8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	2288      	movs	r2, #136	@ 0x88
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f008 fcd4 	bl	800a75e <memset>
  if(hadc->Instance==ADC1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a41      	ldr	r2, [pc, #260]	@ (8001ec0 <HAL_ADC_MspInit+0x130>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d17a      	bne.n	8001eb6 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001dc0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f92f 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001de0:	f7ff ffc8 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001de4:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dea:	4a36      	ldr	r2, [pc, #216]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001dec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001df4:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e26:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e30:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <HAL_ADC_MspInit+0x134>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = ACS_BATT2_Pin|ADC_BATT2_Pin;
 8001e5c:	2311      	movs	r3, #17
 8001e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <HAL_ADC_MspInit+0x138>)
 8001e76:	f001 fffb 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACS_BATT1_Pin;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(ACS_BATT1_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e90:	4619      	mov	r1, r3
 8001e92:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <HAL_ADC_MspInit+0x13c>)
 8001e94:	f001 ffec 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_BATT1_Pin;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(ADC_BATT1_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	@ (8001ed0 <HAL_ADC_MspInit+0x140>)
 8001eb2:	f001 ffdd 	bl	8003e70 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eb6:	bf00      	nop
 8001eb8:	37b8      	adds	r7, #184	@ 0xb8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	42028000 	.word	0x42028000
 8001ec4:	44020c00 	.word	0x44020c00
 8001ec8:	42020800 	.word	0x42020800
 8001ecc:	42020000 	.word	0x42020000
 8001ed0:	42020400 	.word	0x42020400

08001ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	2288      	movs	r2, #136	@ 0x88
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f008 fc32 	bl	800a75e <memset>
  if(hspi->Instance==SPI1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a38      	ldr	r2, [pc, #224]	@ (8001fe0 <HAL_SPI_MspInit+0x10c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d169      	bne.n	8001fd8 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f88c 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001f26:	f7ff ff25 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f30:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f36:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f4e:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f76:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_SPI_MspInit+0x110>)
 8001f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f84:	23c0      	movs	r3, #192	@ 0xc0
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f9c:	2305      	movs	r3, #5
 8001f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480f      	ldr	r0, [pc, #60]	@ (8001fe8 <HAL_SPI_MspInit+0x114>)
 8001faa:	f001 ff61 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fae:	2308      	movs	r3, #8
 8001fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4806      	ldr	r0, [pc, #24]	@ (8001fec <HAL_SPI_MspInit+0x118>)
 8001fd4:	f001 ff4c 	bl	8003e70 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001fd8:	bf00      	nop
 8001fda:	37b8      	adds	r7, #184	@ 0xb8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40013000 	.word	0x40013000
 8001fe4:	44020c00 	.word	0x44020c00
 8001fe8:	42020000 	.word	0x42020000
 8001fec:	42020400 	.word	0x42020400

08001ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <HAL_TIM_Base_MspInit+0x3c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_TIM_Base_MspInit+0x40>)
 8002004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002008:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <HAL_TIM_Base_MspInit+0x40>)
 800200a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800200e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <HAL_TIM_Base_MspInit+0x40>)
 8002014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40012c00 	.word	0x40012c00
 8002030:	44020c00 	.word	0x44020c00

08002034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <HAL_TIM_MspPostInit+0x6c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11f      	bne.n	8002096 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_TIM_MspPostInit+0x70>)
 8002058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800205c:	4a11      	ldr	r2, [pc, #68]	@ (80020a4 <HAL_TIM_MspPostInit+0x70>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002066:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_TIM_MspPostInit+0x70>)
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002078:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <HAL_TIM_MspPostInit+0x74>)
 8002092:	f001 feed 	bl	8003e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3720      	adds	r7, #32
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	44020c00 	.word	0x44020c00
 80020a8:	42020000 	.word	0x42020000

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ac      	sub	sp, #176	@ 0xb0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	2288      	movs	r2, #136	@ 0x88
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f008 fb46 	bl	800a75e <memset>
  if(huart->Instance==USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <HAL_UART_MspInit+0xc4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d145      	bne.n	8002168 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020dc:	f04f 0201 	mov.w	r2, #1
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020e8:	2300      	movs	r3, #0
 80020ea:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 ffa1 	bl	8005038 <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80020fc:	f7ff fe3a 	bl	8001d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002100:	4b1c      	ldr	r3, [pc, #112]	@ (8002174 <HAL_UART_MspInit+0xc8>)
 8002102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002106:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_UART_MspInit+0xc8>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <HAL_UART_MspInit+0xc8>)
 8002112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_UART_MspInit+0xc8>)
 8002120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002124:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <HAL_UART_MspInit+0xc8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800212e:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <HAL_UART_MspInit+0xc8>)
 8002130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800213c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002156:	2307      	movs	r3, #7
 8002158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002160:	4619      	mov	r1, r3
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <HAL_UART_MspInit+0xcc>)
 8002164:	f001 fe84 	bl	8003e70 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002168:	bf00      	nop
 800216a:	37b0      	adds	r7, #176	@ 0xb0
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40013800 	.word	0x40013800
 8002174:	44020c00 	.word	0x44020c00
 8002178:	42020000 	.word	0x42020000

0800217c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <NMI_Handler+0x4>

08002184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <MemManage_Handler+0x4>

08002194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d2:	f000 fa03 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}

080021da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return 1;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_kill>:

int _kill(int pid, int sig)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f4:	f008 fb06 	bl	800a804 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2216      	movs	r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
  return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_exit>:

void _exit (int status)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002212:	f04f 31ff 	mov.w	r1, #4294967295
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffe7 	bl	80021ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <_exit+0x12>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	4601      	mov	r1, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf0      	blt.n	8002232 <_read+0x12>
  }

  return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fedd 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf1      	blt.n	800226c <_write+0x12>
  }
  return len;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_close>:

int _close(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ba:	605a      	str	r2, [r3, #4]
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	@ (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f008 fa6a 	bl	800a804 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	@ (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20008000 	.word	0x20008000
 800235c:	00000400 	.word	0x00000400
 8002360:	200003f0 	.word	0x200003f0
 8002364:	20000548 	.word	0x20000548

08002368 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800236e:	4b30      	ldr	r3, [pc, #192]	@ (8002430 <SystemInit+0xc8>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002374:	4a2e      	ldr	r2, [pc, #184]	@ (8002430 <SystemInit+0xc8>)
 8002376:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800237a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800237e:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <SystemInit+0xcc>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002384:	4b2b      	ldr	r3, [pc, #172]	@ (8002434 <SystemInit+0xcc>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800238a:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <SystemInit+0xcc>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002390:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <SystemInit+0xcc>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4927      	ldr	r1, [pc, #156]	@ (8002434 <SystemInit+0xcc>)
 8002396:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <SystemInit+0xd0>)
 8002398:	4013      	ands	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <SystemInit+0xcc>)
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <SystemInit+0xcc>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80023a8:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <SystemInit+0xcc>)
 80023aa:	4a24      	ldr	r2, [pc, #144]	@ (800243c <SystemInit+0xd4>)
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <SystemInit+0xcc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <SystemInit+0xcc>)
 80023b6:	4a21      	ldr	r2, [pc, #132]	@ (800243c <SystemInit+0xd4>)
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <SystemInit+0xcc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <SystemInit+0xcc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002434 <SystemInit+0xcc>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <SystemInit+0xcc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <SystemInit+0xc8>)
 80023d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023d8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <SystemInit+0xd8>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80023e2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80023ea:	d003      	beq.n	80023f4 <SystemInit+0x8c>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023f2:	d117      	bne.n	8002424 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <SystemInit+0xd8>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <SystemInit+0xd8>)
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <SystemInit+0xdc>)
 8002404:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <SystemInit+0xd8>)
 8002408:	4a0f      	ldr	r2, [pc, #60]	@ (8002448 <SystemInit+0xe0>)
 800240a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <SystemInit+0xd8>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <SystemInit+0xd8>)
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <SystemInit+0xd8>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <SystemInit+0xd8>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	61d3      	str	r3, [r2, #28]
  }
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00
 8002434:	44020c00 	.word	0x44020c00
 8002438:	fae2eae3 	.word	0xfae2eae3
 800243c:	01010280 	.word	0x01010280
 8002440:	40022000 	.word	0x40022000
 8002444:	08192a3b 	.word	0x08192a3b
 8002448:	4c5d6e7f 	.word	0x4c5d6e7f

0800244c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002484 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002450:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002452:	e003      	b.n	800245c <LoopCopyDataInit>

08002454 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002456:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002458:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800245a:	3104      	adds	r1, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800245c:	480b      	ldr	r0, [pc, #44]	@ (800248c <LoopForever+0xa>)
	ldr	r3, =_edata
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002460:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002462:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002464:	d3f6      	bcc.n	8002454 <CopyDataInit>
	ldr	r2, =_sbss
 8002466:	4a0b      	ldr	r2, [pc, #44]	@ (8002494 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002468:	e002      	b.n	8002470 <LoopFillZerobss>

0800246a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800246a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800246c:	f842 3b04 	str.w	r3, [r2], #4

08002470 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002470:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <LoopForever+0x16>)
	cmp	r2, r3
 8002472:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002474:	d3f9      	bcc.n	800246a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002476:	f7ff ff77 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f008 f9c9 	bl	800a810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247e:	f7fe fdeb 	bl	8001058 <main>

08002482 <LoopForever>:

LoopForever:
    b LoopForever
 8002482:	e7fe      	b.n	8002482 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002484:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002488:	0800e420 	.word	0x0800e420
	ldr	r0, =_sdata
 800248c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002490:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002494:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002498:	20000544 	.word	0x20000544

0800249c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_IRQHandler>
	...

080024a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f001 fc0e 	bl	8003cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024aa:	f002 fc3b 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_Init+0x44>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	490b      	ldr	r1, [pc, #44]	@ (80024e8 <HAL_Init+0x48>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <HAL_Init+0x4c>)
 80024c2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024c4:	2004      	movs	r0, #4
 80024c6:	f001 fc45 	bl	8003d54 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ca:	200f      	movs	r0, #15
 80024cc:	f000 f810 	bl	80024f0 <HAL_InitTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e002      	b.n	80024e0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024da:	f7ff fc51 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	44020c00 	.word	0x44020c00
 80024e8:	0800dfa4 	.word	0x0800dfa4
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80024fc:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_InitTick+0xdc>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e05c      	b.n	80025c2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002508:	4b31      	ldr	r3, [pc, #196]	@ (80025d0 <HAL_InitTick+0xe0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d10c      	bne.n	800252e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002514:	4b2f      	ldr	r3, [pc, #188]	@ (80025d4 <HAL_InitTick+0xe4>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <HAL_InitTick+0xdc>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e037      	b.n	800259e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800252e:	f001 fc69 	bl	8003e04 <HAL_SYSTICK_GetCLKSourceConfig>
 8002532:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d023      	beq.n	8002582 <HAL_InitTick+0x92>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d82d      	bhi.n	800259c <HAL_InitTick+0xac>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_InitTick+0x5e>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d00d      	beq.n	8002568 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800254c:	e026      	b.n	800259c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800254e:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <HAL_InitTick+0xe4>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <HAL_InitTick+0xdc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800255c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	60fb      	str	r3, [r7, #12]
        break;
 8002566:	e01a      	b.n	800259e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_InitTick+0xdc>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002572:	fbb3 f3f2 	udiv	r3, r3, r2
 8002576:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800257a:	fbb2 f3f3 	udiv	r3, r2, r3
 800257e:	60fb      	str	r3, [r7, #12]
        break;
 8002580:	e00d      	b.n	800259e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0xdc>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002590:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	60fb      	str	r3, [r7, #12]
        break;
 800259a:	e000      	b.n	800259e <HAL_InitTick+0xae>
        break;
 800259c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f001 fbb6 	bl	8003d10 <HAL_SYSTICK_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e009      	b.n	80025c2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ae:	2200      	movs	r2, #0
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	f04f 30ff 	mov.w	r0, #4294967295
 80025b6:	f001 fb91 	bl	8003cdc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80025ba:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <HAL_InitTick+0xe8>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000008 	.word	0x20000008
 80025d0:	e000e010 	.word	0xe000e010
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	200003f4 	.word	0x200003f4

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	200003f4 	.word	0x200003f4

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000008 	.word	0x20000008

08002664 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	609a      	str	r2, [r3, #8]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80026fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	42028000 	.word	0x42028000

08002718 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3360      	adds	r3, #96	@ 0x60
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <LL_ADC_SetOffset+0x44>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	4313      	orrs	r3, r2
 8002748:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	03fff000 	.word	0x03fff000

08002760 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3360      	adds	r3, #96	@ 0x60
 800276e:	461a      	mov	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3360      	adds	r3, #96	@ 0x60
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3360      	adds	r3, #96	@ 0x60
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3360      	adds	r3, #96	@ 0x60
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	615a      	str	r2, [r3, #20]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3330      	adds	r3, #48	@ 0x30
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	211f      	movs	r1, #31
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	f003 011f 	and.w	r1, r3, #31
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3314      	adds	r3, #20
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0e5b      	lsrs	r3, r3, #25
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2107      	movs	r1, #7
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	431a      	orrs	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0318 	and.w	r3, r3, #24
 800294a:	4908      	ldr	r1, [pc, #32]	@ (800296c <LL_ADC_SetChannelSingleDiff+0x44>)
 800294c:	40d9      	lsrs	r1, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	400b      	ands	r3, r1
 8002952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	000fffff 	.word	0x000fffff

08002970 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6093      	str	r3, [r2, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a8:	d101      	bne.n	80029ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029f8:	d101      	bne.n	80029fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_IsDisableOngoing+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_IsDisableOngoing+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ae4:	f043 0210 	orr.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d101      	bne.n	8002b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e131      	b.n	8002dea <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff f8fb 	bl	8001d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fef1 	bl	8002994 <LL_ADC_IsDeepPowerDownEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fed7 	bl	8002970 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff0c 	bl	80029e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fef0 	bl	80029bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bdc:	4b85      	ldr	r3, [pc, #532]	@ (8002df4 <HAL_ADC_Init+0x288>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	4a85      	ldr	r2, [pc, #532]	@ (8002df8 <HAL_ADC_Init+0x28c>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff feee 	bl	80029e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff62 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 80ca 	bne.w	8002dd8 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 80c6 	bne.w	8002dd8 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fefb 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c6c:	4863      	ldr	r0, [pc, #396]	@ (8002dfc <HAL_ADC_Init+0x290>)
 8002c6e:	f7ff fef5 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4860      	ldr	r0, [pc, #384]	@ (8002e00 <HAL_ADC_Init+0x294>)
 8002c80:	f7ff fcf0 	bl	8002664 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e5b      	ldrb	r3, [r3, #25]
 8002c88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	045b      	lsls	r3, r3, #17
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4b48      	ldr	r3, [pc, #288]	@ (8002e04 <HAL_ADC_Init+0x298>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff1b 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8002d10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d13d      	bne.n	8002d94 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d13a      	bne.n	8002d94 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7e1b      	ldrb	r3, [r3, #24]
 8002d22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d3a:	f023 0302 	bic.w	r3, r3, #2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d118      	bne.n	8002d84 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d6e:	4311      	orrs	r1, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d74:	430a      	orrs	r2, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	e007      	b.n	8002d94 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10c      	bne.n	8002db6 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f023 010f 	bic.w	r1, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	1e5a      	subs	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002db4:	e007      	b.n	8002dc6 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 020f 	bic.w	r2, r2, #15
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd6:	e007      	b.n	8002de8 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f043 0210 	orr.w	r2, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000
 8002df8:	053e2d63 	.word	0x053e2d63
 8002dfc:	42028000 	.word	0x42028000
 8002e00:	42028300 	.word	0x42028300
 8002e04:	fff04007 	.word	0xfff04007

08002e08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fe6f 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d14f      	bne.n	8002ec0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Start+0x26>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e04b      	b.n	8002ec6 <HAL_ADC_Start+0xbe>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fdd4 	bl	80039e4 <ADC_Enable>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d137      	bne.n	8002eb6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f023 0206 	bic.w	r2, r3, #6
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	221c      	movs	r2, #28
 8002e82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fdfa 	bl	8002aa8 <LL_ADC_REG_StartConversion>
 8002eb4:	e006      	b.n	8002ec4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002ebe:	e001      	b.n	8002ec4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_Stop+0x16>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e023      	b.n	8002f2c <HAL_ADC_Stop+0x5e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002eec:	2103      	movs	r1, #3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fcbc 	bl	800386c <ADC_ConversionStop>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d111      	bne.n	8002f22 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fdf2 	bl	8003ae8 <ADC_Disable>
 8002f04:	4603      	mov	r3, r0
 8002f06:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d102      	bne.n	8002f4c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f46:	2308      	movs	r3, #8
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e010      	b.n	8002f6e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06f      	b.n	800304a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f6e:	f7ff fb49 	bl	8002604 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f74:	e021      	b.n	8002fba <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d01d      	beq.n	8002fba <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f7e:	f7ff fb41 	bl	8002604 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <HAL_ADC_PollForConversion+0x60>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d112      	bne.n	8002fba <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e047      	b.n	800304a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0d6      	beq.n	8002f76 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fc3b 	bl	8002854 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01c      	beq.n	800301e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e5b      	ldrb	r3, [r3, #25]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d118      	bne.n	800301e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d111      	bne.n	800301e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d104      	bne.n	8003036 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2208      	movs	r2, #8
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e008      	b.n	8003048 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	220c      	movs	r2, #12
 8003046:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0b6      	sub	sp, #216	@ 0xd8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x22>
 800308a:	2302      	movs	r3, #2
 800308c:	e3d8      	b.n	8003840 <HAL_ADC_ConfigChannel+0x7d4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fd2c 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 83bd 	bne.w	8003822 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d104      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fb1b 	bl	80026f0 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f7ff fbd7 	bl	800287a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fd11 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 80030d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fd31 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 80030e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 81d9 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 81d4 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003104:	d10f      	bne.n	8003126 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	4619      	mov	r1, r3
 8003112:	f7ff fbde 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fb85 	bl	800282e <LL_ADC_SetSamplingTimeCommonConfig>
 8003124:	e00e      	b.n	8003144 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	461a      	mov	r2, r3
 8003134:	f7ff fbcd 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fb75 	bl	800282e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	08db      	lsrs	r3, r3, #3
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d022      	beq.n	80031ac <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6919      	ldr	r1, [r3, #16]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003176:	f7ff facf 	bl	8002718 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6919      	ldr	r1, [r3, #16]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	461a      	mov	r2, r3
 8003188:	f7ff fb1b 	bl	80027c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003198:	2b01      	cmp	r3, #1
 800319a:	d102      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x136>
 800319c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031a0:	e000      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x138>
 80031a2:	2300      	movs	r3, #0
 80031a4:	461a      	mov	r2, r3
 80031a6:	f7ff fb27 	bl	80027f8 <LL_ADC_SetOffsetSaturation>
 80031aa:	e17b      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fad4 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x16c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fac9 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	f003 021f 	and.w	r2, r3, #31
 80031d6:	e01e      	b.n	8003216 <HAL_ADC_ConfigChannel+0x1aa>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fabe 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80031f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80031fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e004      	b.n	8003214 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800320a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_ADC_ConfigChannel+0x1c2>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	0e9b      	lsrs	r3, r3, #26
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	e018      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1f4>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800324a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e004      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8003256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003260:	429a      	cmp	r2, r3
 8003262:	d106      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fa8d 	bl	800278c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fa71 	bl	8002760 <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <HAL_ADC_ConfigChannel+0x232>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fa66 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	0e9b      	lsrs	r3, r3, #26
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	e01e      	b.n	80032dc <HAL_ADC_ConfigChannel+0x270>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fa5b 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032b4:	fa93 f3a3 	rbit	r3, r3
 80032b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e004      	b.n	80032da <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80032d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x288>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	e018      	b.n	8003326 <HAL_ADC_ConfigChannel+0x2ba>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003308:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800330c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	e004      	b.n	8003326 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 800331c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003326:	429a      	cmp	r2, r3
 8003328:	d106      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fa2a 	bl	800278c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fa0e 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003344:	4603      	mov	r3, r0
 8003346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x2f8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fa03 	bl	8002760 <LL_ADC_GetOffsetChannel>
 800335a:	4603      	mov	r3, r0
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	f003 021f 	and.w	r2, r3, #31
 8003362:	e01e      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x336>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff f9f8 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003370:	4603      	mov	r3, r0
 8003372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003382:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800338a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8003392:	2320      	movs	r3, #32
 8003394:	e004      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8003396:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x34e>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	e016      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x37c>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e004      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80033de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d106      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f9c9 	bl	800278c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2103      	movs	r1, #3
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f9ad 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x3ba>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2103      	movs	r1, #3
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f9a2 	bl	8002760 <LL_ADC_GetOffsetChannel>
 800341c:	4603      	mov	r3, r0
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	e017      	b.n	8003456 <HAL_ADC_ConfigChannel+0x3ea>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2103      	movs	r1, #3
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f997 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800343e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003440:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003442:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e003      	b.n	8003454 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 800344c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_ADC_ConfigChannel+0x402>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	e011      	b.n	8003492 <HAL_ADC_ConfigChannel+0x426>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800347c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800347e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8003486:	2320      	movs	r3, #32
 8003488:	e003      	b.n	8003492 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800348a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003492:	429a      	cmp	r2, r3
 8003494:	d106      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	2103      	movs	r1, #3
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f974 	bl	800278c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fad7 	bl	8002a5c <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 813f 	bne.w	8003734 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f7ff fa30 	bl	8002928 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003708 <HAL_ADC_ConfigChannel+0x69c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	f040 8130 	bne.w	8003734 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x490>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e019      	b.n	8003530 <HAL_ADC_ConfigChannel+0x4c4>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800350a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800350c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800350e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e003      	b.n	8003520 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2b09      	cmp	r3, #9
 8003528:	bf94      	ite	ls
 800352a:	2301      	movls	r3, #1
 800352c:	2300      	movhi	r3, #0
 800352e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003530:	2b00      	cmp	r3, #0
 8003532:	d079      	beq.n	8003628 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x4e4>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	069b      	lsls	r3, r3, #26
 800354a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800354e:	e015      	b.n	800357c <HAL_ADC_ConfigChannel+0x510>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800355e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003560:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e003      	b.n	8003574 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	069b      	lsls	r3, r3, #26
 8003578:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <HAL_ADC_ConfigChannel+0x530>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	3301      	adds	r3, #1
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	e017      	b.n	80035cc <HAL_ADC_ConfigChannel+0x560>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80035b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2101      	movs	r1, #1
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	ea42 0103 	orr.w	r1, r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x586>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	3301      	adds	r3, #1
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	051b      	lsls	r3, r3, #20
 80035f0:	e018      	b.n	8003624 <HAL_ADC_ConfigChannel+0x5b8>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e003      	b.n	8003616 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800360e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003624:	430b      	orrs	r3, r1
 8003626:	e080      	b.n	800372a <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x5d8>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	3301      	adds	r3, #1
 800363c:	069b      	lsls	r3, r3, #26
 800363e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003642:	e015      	b.n	8003670 <HAL_ADC_ConfigChannel+0x604>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x624>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	e017      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x654>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	61fb      	str	r3, [r7, #28]
  return result;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e003      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	ea42 0103 	orr.w	r1, r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x680>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	3301      	adds	r3, #1
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	3b1e      	subs	r3, #30
 80036e4:	051b      	lsls	r3, r3, #20
 80036e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	e01d      	b.n	8003728 <HAL_ADC_ConfigChannel+0x6bc>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	613b      	str	r3, [r7, #16]
  return result;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e005      	b.n	8003714 <HAL_ADC_ConfigChannel+0x6a8>
 8003708:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f003 021f 	and.w	r2, r3, #31
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	3b1e      	subs	r3, #30
 8003722:	051b      	lsls	r3, r3, #20
 8003724:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003728:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800372e:	4619      	mov	r1, r3
 8003730:	f7ff f8cf 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b43      	ldr	r3, [pc, #268]	@ (8003848 <HAL_ADC_ConfigChannel+0x7dc>)
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d079      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003740:	4842      	ldr	r0, [pc, #264]	@ (800384c <HAL_ADC_ConfigChannel+0x7e0>)
 8003742:	f7fe ffb5 	bl	80026b0 <LL_ADC_GetCommonPathInternalCh>
 8003746:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a40      	ldr	r2, [pc, #256]	@ (8003850 <HAL_ADC_ConfigChannel+0x7e4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d124      	bne.n	800379e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11e      	bne.n	800379e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3b      	ldr	r2, [pc, #236]	@ (8003854 <HAL_ADC_ConfigChannel+0x7e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d164      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800376a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003772:	4619      	mov	r1, r3
 8003774:	4835      	ldr	r0, [pc, #212]	@ (800384c <HAL_ADC_ConfigChannel+0x7e0>)
 8003776:	f7fe ff88 	bl	800268a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800377a:	4b37      	ldr	r3, [pc, #220]	@ (8003858 <HAL_ADC_ConfigChannel+0x7ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	4a36      	ldr	r2, [pc, #216]	@ (800385c <HAL_ADC_ConfigChannel+0x7f0>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	3301      	adds	r3, #1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800378e:	e002      	b.n	8003796 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3b01      	subs	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f9      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800379c:	e04a      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003860 <HAL_ADC_ConfigChannel+0x7f4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d113      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <HAL_ADC_ConfigChannel+0x7e8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d13a      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c6:	4619      	mov	r1, r3
 80037c8:	4820      	ldr	r0, [pc, #128]	@ (800384c <HAL_ADC_ConfigChannel+0x7e0>)
 80037ca:	f7fe ff5e 	bl	800268a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ce:	e031      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_ADC_ConfigChannel+0x7f8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d113      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10d      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <HAL_ADC_ConfigChannel+0x7e8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d121      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037f8:	4619      	mov	r1, r3
 80037fa:	4814      	ldr	r0, [pc, #80]	@ (800384c <HAL_ADC_ConfigChannel+0x7e0>)
 80037fc:	f7fe ff45 	bl	800268a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003800:	e018      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <HAL_ADC_ConfigChannel+0x7fc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d113      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a10      	ldr	r2, [pc, #64]	@ (8003854 <HAL_ADC_ConfigChannel+0x7e8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe ff56 	bl	80026cc <LL_ADC_EnableChannelVDDcore>
 8003820:	e008      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800383c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003840:	4618      	mov	r0, r3
 8003842:	37d8      	adds	r7, #216	@ 0xd8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	80080000 	.word	0x80080000
 800384c:	42028300 	.word	0x42028300
 8003850:	c3210000 	.word	0xc3210000
 8003854:	42028000 	.word	0x42028000
 8003858:	20000000 	.word	0x20000000
 800385c:	053e2d63 	.word	0x053e2d63
 8003860:	88600004 	.word	0x88600004
 8003864:	c7520000 	.word	0xc7520000
 8003868:	99200040 	.word	0x99200040

0800386c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f938 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003888:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff f959 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003894:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8098 	beq.w	80039d4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02a      	beq.n	8003908 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7e5b      	ldrb	r3, [r3, #25]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d126      	bne.n	8003908 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7e1b      	ldrb	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d122      	bne.n	8003908 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038c6:	e014      	b.n	80038f2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4a45      	ldr	r2, [pc, #276]	@ (80039e0 <ADC_ConversionStop+0x174>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d90d      	bls.n	80038ec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	f043 0210 	orr.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e074      	b.n	80039d6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b40      	cmp	r3, #64	@ 0x40
 80038fe:	d1e3      	bne.n	80038c8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2240      	movs	r2, #64	@ 0x40
 8003906:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d014      	beq.n	8003938 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f8f0 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f8ad 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f8cc 	bl	8002ad0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d014      	beq.n	8003968 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff f8ff 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f895 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f8db 	bl	8002b1e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d005      	beq.n	800397a <ADC_ConversionStop+0x10e>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d105      	bne.n	8003980 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003974:	230c      	movs	r3, #12
 8003976:	617b      	str	r3, [r7, #20]
        break;
 8003978:	e005      	b.n	8003986 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800397a:	2308      	movs	r3, #8
 800397c:	617b      	str	r3, [r7, #20]
        break;
 800397e:	e002      	b.n	8003986 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003980:	2304      	movs	r3, #4
 8003982:	617b      	str	r3, [r7, #20]
        break;
 8003984:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003986:	f7fe fe3d 	bl	8002604 <HAL_GetTick>
 800398a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800398c:	e01b      	b.n	80039c6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800398e:	f7fe fe39 	bl	8002604 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b05      	cmp	r3, #5
 800399a:	d914      	bls.n	80039c6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ae:	f043 0210 	orr.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e007      	b.n	80039d6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1dc      	bne.n	800398e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	a33fffff 	.word	0xa33fffff

080039e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff f831 	bl	8002a5c <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d166      	bne.n	8003ace <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <ADC_Enable+0xf4>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f043 0210 	orr.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e052      	b.n	8003ad0 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe ffec 	bl	8002a0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a34:	4829      	ldr	r0, [pc, #164]	@ (8003adc <ADC_Enable+0xf8>)
 8003a36:	f7fe fe3b 	bl	80026b0 <LL_ADC_GetCommonPathInternalCh>
 8003a3a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a44:	4b26      	ldr	r3, [pc, #152]	@ (8003ae0 <ADC_Enable+0xfc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	4a26      	ldr	r2, [pc, #152]	@ (8003ae4 <ADC_Enable+0x100>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a58:	e002      	b.n	8003a60 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f9      	bne.n	8003a5a <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a66:	f7fe fdcd 	bl	8002604 <HAL_GetTick>
 8003a6a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a6c:	e028      	b.n	8003ac0 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fff2 	bl	8002a5c <LL_ADC_IsEnabled>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ffc2 	bl	8002a0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a88:	f7fe fdbc 	bl	8002604 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d914      	bls.n	8003ac0 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d00d      	beq.n	8003ac0 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	f043 0210 	orr.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d1cf      	bne.n	8003a6e <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	8000003f 	.word	0x8000003f
 8003adc:	42028300 	.word	0x42028300
 8003ae0:	20000000 	.word	0x20000000
 8003ae4:	053e2d63 	.word	0x053e2d63

08003ae8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe ffc4 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003afa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe ffab 	bl	8002a5c <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d047      	beq.n	8003b9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d144      	bne.n	8003b9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030d 	and.w	r3, r3, #13
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10c      	bne.n	8003b3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe ff85 	bl	8002a34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b32:	f7fe fd67 	bl	8002604 <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b38:	e029      	b.n	8003b8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e023      	b.n	8003b9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b56:	f7fe fd55 	bl	8002604 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d914      	bls.n	8003b8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e007      	b.n	8003b9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1dc      	bne.n	8003b56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bda:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <__NVIC_SetPriorityGrouping+0x44>)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	60d3      	str	r3, [r2, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf4:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 0307 	and.w	r3, r3, #7
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	db0a      	blt.n	8003c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	490c      	ldr	r1, [pc, #48]	@ (8003c58 <__NVIC_SetPriority+0x4c>)
 8003c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c34:	e00a      	b.n	8003c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <__NVIC_SetPriority+0x50>)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	3b04      	subs	r3, #4
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	440b      	add	r3, r1
 8003c4a:	761a      	strb	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	@ 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f1c3 0307 	rsb	r3, r3, #7
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf28      	it	cs
 8003c7e:	2304      	movcs	r3, #4
 8003c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2b06      	cmp	r3, #6
 8003c88:	d902      	bls.n	8003c90 <NVIC_EncodePriority+0x30>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3b03      	subs	r3, #3
 8003c8e:	e000      	b.n	8003c92 <NVIC_EncodePriority+0x32>
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43d9      	mvns	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	4313      	orrs	r3, r2
         );
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3724      	adds	r7, #36	@ 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ff6a 	bl	8003ba8 <__NVIC_SetPriorityGrouping>
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cea:	f7ff ff81 	bl	8003bf0 <__NVIC_GetPriorityGrouping>
 8003cee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	6978      	ldr	r0, [r7, #20]
 8003cf6:	f7ff ffb3 	bl	8003c60 <NVIC_EncodePriority>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff82 	bl	8003c0c <__NVIC_SetPriority>
}
 8003d08:	bf00      	nop
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d20:	d301      	bcc.n	8003d26 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00d      	b.n	8003d42 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <HAL_SYSTICK_Config+0x40>)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <HAL_SYSTICK_Config+0x40>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_SYSTICK_Config+0x40>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <HAL_SYSTICK_Config+0x40>)
 8003d3a:	f043 0303 	orr.w	r3, r3, #3
 8003d3e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e010 	.word	0xe000e010

08003d54 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d844      	bhi.n	8003dec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003d62:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d8b 	.word	0x08003d8b
 8003d6c:	08003da9 	.word	0x08003da9
 8003d70:	08003dcb 	.word	0x08003dcb
 8003d74:	08003ded 	.word	0x08003ded
 8003d78:	08003d7d 	.word	0x08003d7d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1e      	ldr	r2, [pc, #120]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6013      	str	r3, [r2, #0]
      break;
 8003d88:	e031      	b.n	8003dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d9c:	4a18      	ldr	r2, [pc, #96]	@ (8003e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d9e:	f023 030c 	bic.w	r3, r3, #12
 8003da2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003da6:	e022      	b.n	8003dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003da8:	4b14      	ldr	r3, [pc, #80]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dae:	f023 0304 	bic.w	r3, r3, #4
 8003db2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003db4:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003db6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dba:	f023 030c 	bic.w	r3, r3, #12
 8003dbe:	4a10      	ldr	r2, [pc, #64]	@ (8003e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003dc8:	e011      	b.n	8003dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003dca:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0b      	ldr	r2, [pc, #44]	@ (8003dfc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ddc:	f023 030c 	bic.w	r3, r3, #12
 8003de0:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003de2:	f043 0308 	orr.w	r3, r3, #8
 8003de6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003dea:	e000      	b.n	8003dee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003dec:	bf00      	nop
  }
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010
 8003e00:	44020c00 	.word	0x44020c00

08003e04 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003e0a:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003e16:	2304      	movs	r3, #4
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	e01e      	b.n	8003e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003e1c:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d00f      	beq.n	8003e4e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d80f      	bhi.n	8003e54 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d003      	beq.n	8003e48 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003e40:	e008      	b.n	8003e54 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
        break;
 8003e46:	e008      	b.n	8003e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
        break;
 8003e4c:	e005      	b.n	8003e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	607b      	str	r3, [r7, #4]
        break;
 8003e52:	e002      	b.n	8003e5a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e54:	2300      	movs	r3, #0
 8003e56:	607b      	str	r3, [r7, #4]
        break;
 8003e58:	bf00      	nop
    }
  }
  return systick_source;
 8003e5a:	687b      	ldr	r3, [r7, #4]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e010 	.word	0xe000e010
 8003e6c:	44020c00 	.word	0x44020c00

08003e70 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e7e:	e136      	b.n	80040ee <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2101      	movs	r1, #1
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8128 	beq.w	80040e8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x38>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b12      	cmp	r3, #18
 8003ea6:	d125      	bne.n	8003ef4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d00b      	beq.n	8003f48 <HAL_GPIO_Init+0xd8>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d007      	beq.n	8003f48 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f3c:	2b11      	cmp	r3, #17
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b12      	cmp	r3, #18
 8003f46:	d130      	bne.n	8003faa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7e:	2201      	movs	r2, #1
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0201 	and.w	r2, r3, #1
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d017      	beq.n	8003fe2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d07c      	beq.n	80040e8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003fee:	4a47      	ldr	r2, [pc, #284]	@ (800410c <HAL_GPIO_Init+0x29c>)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4013      	ands	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0a9a      	lsrs	r2, r3, #10
 8004016:	4b3e      	ldr	r3, [pc, #248]	@ (8004110 <HAL_GPIO_Init+0x2a0>)
 8004018:	4013      	ands	r3, r2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	f002 0203 	and.w	r2, r2, #3
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	4093      	lsls	r3, r2
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800402a:	4938      	ldr	r1, [pc, #224]	@ (800410c <HAL_GPIO_Init+0x29c>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3318      	adds	r3, #24
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004038:	4b34      	ldr	r3, [pc, #208]	@ (800410c <HAL_GPIO_Init+0x29c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	43db      	mvns	r3, r3
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4013      	ands	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800405c:	4a2b      	ldr	r2, [pc, #172]	@ (800410c <HAL_GPIO_Init+0x29c>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004062:	4b2a      	ldr	r3, [pc, #168]	@ (800410c <HAL_GPIO_Init+0x29c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	43db      	mvns	r3, r3
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4013      	ands	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004086:	4a21      	ldr	r2, [pc, #132]	@ (800410c <HAL_GPIO_Init+0x29c>)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800408c:	4b1f      	ldr	r3, [pc, #124]	@ (800410c <HAL_GPIO_Init+0x29c>)
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004092:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43db      	mvns	r3, r3
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4013      	ands	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80040b2:	4a16      	ldr	r2, [pc, #88]	@ (800410c <HAL_GPIO_Init+0x29c>)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80040ba:	4b14      	ldr	r3, [pc, #80]	@ (800410c <HAL_GPIO_Init+0x29c>)
 80040bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4013      	ands	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80040e0:	4a0a      	ldr	r2, [pc, #40]	@ (800410c <HAL_GPIO_Init+0x29c>)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3301      	adds	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f aec1 	bne.w	8003e80 <HAL_GPIO_Init+0x10>
  }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	44022000 	.word	0x44022000
 8004110:	002f7f7f 	.word	0x002f7f7f

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004130:	e002      	b.n	8004138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f000 bc28 	b.w	80049a8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004158:	4b94      	ldr	r3, [pc, #592]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 0318 	and.w	r3, r3, #24
 8004160:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004162:	4b92      	ldr	r3, [pc, #584]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d05b      	beq.n	8004230 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b08      	cmp	r3, #8
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x46>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b18      	cmp	r3, #24
 8004182:	d114      	bne.n	80041ae <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d111      	bne.n	80041ae <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f000 bc08 	b.w	80049a8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004198:	4b84      	ldr	r3, [pc, #528]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	4981      	ldr	r1, [pc, #516]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041ac:	e040      	b.n	8004230 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d023      	beq.n	80041fe <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041b6:	4b7d      	ldr	r3, [pc, #500]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a7c      	ldr	r2, [pc, #496]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fe fa1f 	bl	8002604 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041ca:	f7fe fa1b 	bl	8002604 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e3e5      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041dc:	4b73      	ldr	r3, [pc, #460]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80041e8:	4b70      	ldr	r3, [pc, #448]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	496d      	ldr	r1, [pc, #436]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	618b      	str	r3, [r1, #24]
 80041fc:	e018      	b.n	8004230 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041fe:	4b6b      	ldr	r3, [pc, #428]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6a      	ldr	r2, [pc, #424]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fe f9fb 	bl	8002604 <HAL_GetTick>
 800420e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004212:	f7fe f9f7 	bl	8002604 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e3c1      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004224:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80a0 	beq.w	800437e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b10      	cmp	r3, #16
 8004242:	d005      	beq.n	8004250 <HAL_RCC_OscConfig+0x10c>
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b18      	cmp	r3, #24
 8004248:	d109      	bne.n	800425e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f040 8092 	bne.w	800437e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e3a4      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x132>
 8004268:	4b50      	ldr	r3, [pc, #320]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a4f      	ldr	r2, [pc, #316]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e058      	b.n	8004328 <HAL_RCC_OscConfig+0x1e4>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d112      	bne.n	80042a4 <HAL_RCC_OscConfig+0x160>
 800427e:	4b4b      	ldr	r3, [pc, #300]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a4a      	ldr	r2, [pc, #296]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b48      	ldr	r3, [pc, #288]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a47      	ldr	r2, [pc, #284]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004290:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b45      	ldr	r3, [pc, #276]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a44      	ldr	r2, [pc, #272]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800429c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e041      	b.n	8004328 <HAL_RCC_OscConfig+0x1e4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042ac:	d112      	bne.n	80042d4 <HAL_RCC_OscConfig+0x190>
 80042ae:	4b3f      	ldr	r3, [pc, #252]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3e      	ldr	r2, [pc, #248]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b3c      	ldr	r3, [pc, #240]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3b      	ldr	r2, [pc, #236]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b39      	ldr	r3, [pc, #228]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e029      	b.n	8004328 <HAL_RCC_OscConfig+0x1e4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x1c0>
 80042de:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b2d      	ldr	r3, [pc, #180]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2c      	ldr	r2, [pc, #176]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e011      	b.n	8004328 <HAL_RCC_OscConfig+0x1e4>
 8004304:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a28      	ldr	r2, [pc, #160]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800430a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b26      	ldr	r3, [pc, #152]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a25      	ldr	r2, [pc, #148]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004322:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f968 	bl	8002604 <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004338:	f7fe f964 	bl	8002604 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	@ 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e32e      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800434a:	4b18      	ldr	r3, [pc, #96]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x1f4>
 8004356:	e012      	b.n	800437e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe f954 	bl	8002604 <HAL_GetTick>
 800435c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004360:	f7fe f950 	bl	8002604 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e31a      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004372:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_RCC_OscConfig+0x268>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 809a 	beq.w	80044c0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_RCC_OscConfig+0x25a>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2b18      	cmp	r3, #24
 8004396:	d149      	bne.n	800442c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d146      	bne.n	800442c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e2fe      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
 80043aa:	bf00      	nop
 80043ac:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80043b6:	4b9a      	ldr	r3, [pc, #616]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0218 	and.w	r2, r3, #24
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d014      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80043c6:	4b96      	ldr	r3, [pc, #600]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0218 	bic.w	r2, r3, #24
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	4993      	ldr	r1, [pc, #588]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80043d8:	f000 fdd0 	bl	8004f7c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043dc:	4b91      	ldr	r3, [pc, #580]	@ (8004624 <HAL_RCC_OscConfig+0x4e0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe f885 	bl	80024f0 <HAL_InitTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e2db      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe f908 	bl	8002604 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80043f8:	f7fe f904 	bl	8002604 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e2ce      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800440a:	4b85      	ldr	r3, [pc, #532]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004416:	4b82      	ldr	r3, [pc, #520]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	497e      	ldr	r1, [pc, #504]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800442a:	e049      	b.n	80044c0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02c      	beq.n	800448e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004434:	4b7a      	ldr	r3, [pc, #488]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 0218 	bic.w	r2, r3, #24
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4977      	ldr	r1, [pc, #476]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004446:	4b76      	ldr	r3, [pc, #472]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe f8d7 	bl	8002604 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800445a:	f7fe f8d3 	bl	8002604 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e29d      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800446c:	4b6c      	ldr	r3, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004478:	4b69      	ldr	r3, [pc, #420]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	4966      	ldr	r1, [pc, #408]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
 800448c:	e018      	b.n	80044c0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b64      	ldr	r3, [pc, #400]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a63      	ldr	r2, [pc, #396]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fe f8b3 	bl	8002604 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80044a2:	f7fe f8af 	bl	8002604 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e279      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d03c      	beq.n	8004546 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01c      	beq.n	800450e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d4:	4b52      	ldr	r3, [pc, #328]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80044d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044da:	4a51      	ldr	r2, [pc, #324]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80044dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fe f88e 	bl	8002604 <HAL_GetTick>
 80044e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80044ec:	f7fe f88a 	bl	8002604 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e254      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044fe:	4b48      	ldr	r3, [pc, #288]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ef      	beq.n	80044ec <HAL_RCC_OscConfig+0x3a8>
 800450c:	e01b      	b.n	8004546 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800450e:	4b44      	ldr	r3, [pc, #272]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004514:	4a42      	ldr	r2, [pc, #264]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800451a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fe f871 	bl	8002604 <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004526:	f7fe f86d 	bl	8002604 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e237      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004538:	4b39      	ldr	r3, [pc, #228]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 800453a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ef      	bne.n	8004526 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80d2 	beq.w	80046f8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004554:	4b34      	ldr	r3, [pc, #208]	@ (8004628 <HAL_RCC_OscConfig+0x4e4>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d118      	bne.n	8004592 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004560:	4b31      	ldr	r3, [pc, #196]	@ (8004628 <HAL_RCC_OscConfig+0x4e4>)
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	4a30      	ldr	r2, [pc, #192]	@ (8004628 <HAL_RCC_OscConfig+0x4e4>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456c:	f7fe f84a 	bl	8002604 <HAL_GetTick>
 8004570:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004574:	f7fe f846 	bl	8002604 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e210      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004586:	4b28      	ldr	r3, [pc, #160]	@ (8004628 <HAL_RCC_OscConfig+0x4e4>)
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d108      	bne.n	80045ac <HAL_RCC_OscConfig+0x468>
 800459a:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 800459c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045aa:	e074      	b.n	8004696 <HAL_RCC_OscConfig+0x552>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d118      	bne.n	80045e6 <HAL_RCC_OscConfig+0x4a2>
 80045b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ba:	4a19      	ldr	r2, [pc, #100]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045c4:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ca:	4a15      	ldr	r2, [pc, #84]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045d4:	4b12      	ldr	r3, [pc, #72]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045da:	4a11      	ldr	r2, [pc, #68]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045e4:	e057      	b.n	8004696 <HAL_RCC_OscConfig+0x552>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d11e      	bne.n	800462c <HAL_RCC_OscConfig+0x4e8>
 80045ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004604:	4a06      	ldr	r2, [pc, #24]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800460e:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004614:	4a02      	ldr	r2, [pc, #8]	@ (8004620 <HAL_RCC_OscConfig+0x4dc>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800461e:	e03a      	b.n	8004696 <HAL_RCC_OscConfig+0x552>
 8004620:	44020c00 	.word	0x44020c00
 8004624:	20000004 	.word	0x20000004
 8004628:	44020800 	.word	0x44020800
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b85      	cmp	r3, #133	@ 0x85
 8004632:	d118      	bne.n	8004666 <HAL_RCC_OscConfig+0x522>
 8004634:	4ba2      	ldr	r3, [pc, #648]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800463a:	4aa1      	ldr	r2, [pc, #644]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800463c:	f043 0304 	orr.w	r3, r3, #4
 8004640:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004644:	4b9e      	ldr	r3, [pc, #632]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464a:	4a9d      	ldr	r2, [pc, #628]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800464c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004654:	4b9a      	ldr	r3, [pc, #616]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800465a:	4a99      	ldr	r2, [pc, #612]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004664:	e017      	b.n	8004696 <HAL_RCC_OscConfig+0x552>
 8004666:	4b96      	ldr	r3, [pc, #600]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800466c:	4a94      	ldr	r2, [pc, #592]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004676:	4b92      	ldr	r3, [pc, #584]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800467c:	4a90      	ldr	r2, [pc, #576]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800467e:	f023 0304 	bic.w	r3, r3, #4
 8004682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004686:	4b8e      	ldr	r3, [pc, #568]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800468c:	4a8c      	ldr	r2, [pc, #560]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800468e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004692:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fd ffb1 	bl	8002604 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fd ffad 	bl	8002604 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e175      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046bc:	4b80      	ldr	r3, [pc, #512]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 80046be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ed      	beq.n	80046a6 <HAL_RCC_OscConfig+0x562>
 80046ca:	e015      	b.n	80046f8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fd ff9a 	bl	8002604 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fd ff96 	bl	8002604 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e15e      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ea:	4b75      	ldr	r3, [pc, #468]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 80046ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ed      	bne.n	80046d4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d036      	beq.n	8004772 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d019      	beq.n	8004740 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800470c:	4b6c      	ldr	r3, [pc, #432]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a6b      	ldr	r2, [pc, #428]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004712:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004716:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd ff74 	bl	8002604 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004720:	f7fd ff70 	bl	8002604 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e13a      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004732:	4b63      	ldr	r3, [pc, #396]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x5dc>
 800473e:	e018      	b.n	8004772 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004740:	4b5f      	ldr	r3, [pc, #380]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5e      	ldr	r2, [pc, #376]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800474a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fd ff5a 	bl	8002604 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004754:	f7fd ff56 	bl	8002604 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e120      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004766:	4b56      	ldr	r3, [pc, #344]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8115 	beq.w	80049a6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b18      	cmp	r3, #24
 8004780:	f000 80af 	beq.w	80048e2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	2b02      	cmp	r3, #2
 800478a:	f040 8086 	bne.w	800489a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800478e:	4b4c      	ldr	r3, [pc, #304]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a4b      	ldr	r2, [pc, #300]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004794:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fd ff33 	bl	8002604 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80047a2:	f7fd ff2f 	bl	8002604 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0f9      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047b4:	4b42      	ldr	r3, [pc, #264]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f0      	bne.n	80047a2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80047c0:	4b3f      	ldr	r3, [pc, #252]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047c8:	f023 0303 	bic.w	r3, r3, #3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047d4:	0212      	lsls	r2, r2, #8
 80047d6:	430a      	orrs	r2, r1
 80047d8:	4939      	ldr	r1, [pc, #228]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e2:	3b01      	subs	r3, #1
 80047e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	3b01      	subs	r3, #1
 80047ee:	025b      	lsls	r3, r3, #9
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	3b01      	subs	r3, #1
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	3b01      	subs	r3, #1
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800480e:	492c      	ldr	r1, [pc, #176]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004814:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004824:	4a26      	ldr	r2, [pc, #152]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800482a:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	4a24      	ldr	r2, [pc, #144]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004830:	f043 0310 	orr.w	r3, r3, #16
 8004834:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004836:	4b22      	ldr	r3, [pc, #136]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	f023 020c 	bic.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	491f      	ldr	r1, [pc, #124]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004848:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	f023 0220 	bic.w	r2, r3, #32
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004854:	491a      	ldr	r1, [pc, #104]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800485a:	4b19      	ldr	r3, [pc, #100]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004864:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004866:	4b16      	ldr	r3, [pc, #88]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a15      	ldr	r2, [pc, #84]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800486c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fec7 	bl	8002604 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800487a:	f7fd fec3 	bl	8002604 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e08d      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800488c:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x736>
 8004898:	e085      	b.n	80049a6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <HAL_RCC_OscConfig+0x77c>)
 80048a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fd fead 	bl	8002604 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048ae:	f7fd fea9 	bl	8002604 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d903      	bls.n	80048c4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e073      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
 80048c0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048c4:	4b3a      	ldr	r3, [pc, #232]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ee      	bne.n	80048ae <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80048d0:	4b37      	ldr	r3, [pc, #220]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	4a36      	ldr	r2, [pc, #216]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 80048d6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	6293      	str	r3, [r2, #40]	@ 0x28
 80048e0:	e061      	b.n	80049a6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80048e2:	4b33      	ldr	r3, [pc, #204]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048e8:	4b31      	ldr	r3, [pc, #196]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d031      	beq.n	800495a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f003 0203 	and.w	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d12a      	bne.n	800495a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d122      	bne.n	800495a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d11a      	bne.n	800495a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	0a5b      	lsrs	r3, r3, #9
 8004928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d111      	bne.n	800495a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d108      	bne.n	800495a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	0e1b      	lsrs	r3, r3, #24
 800494c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e024      	b.n	80049a8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800495e:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	08db      	lsrs	r3, r3, #3
 8004964:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800496c:	429a      	cmp	r2, r3
 800496e:	d01a      	beq.n	80049a6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004970:	4b0f      	ldr	r3, [pc, #60]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	4a0e      	ldr	r2, [pc, #56]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 8004976:	f023 0310 	bic.w	r3, r3, #16
 800497a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd fe42 	bl	8002604 <HAL_GetTick>
 8004980:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004982:	bf00      	nop
 8004984:	f7fd fe3e 	bl	8002604 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4293      	cmp	r3, r2
 800498e:	d0f9      	beq.n	8004984 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004994:	4a06      	ldr	r2, [pc, #24]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800499a:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	4a04      	ldr	r2, [pc, #16]	@ (80049b0 <HAL_RCC_OscConfig+0x86c>)
 80049a0:	f043 0310 	orr.w	r3, r3, #16
 80049a4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	44020c00 	.word	0x44020c00

080049b4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e19e      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b83      	ldr	r3, [pc, #524]	@ (8004bd8 <HAL_RCC_ClockConfig+0x224>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d910      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b80      	ldr	r3, [pc, #512]	@ (8004bd8 <HAL_RCC_ClockConfig+0x224>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 020f 	bic.w	r2, r3, #15
 80049de:	497e      	ldr	r1, [pc, #504]	@ (8004bd8 <HAL_RCC_ClockConfig+0x224>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b7c      	ldr	r3, [pc, #496]	@ (8004bd8 <HAL_RCC_ClockConfig+0x224>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e186      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	4b74      	ldr	r3, [pc, #464]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d909      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004a16:	4b71      	ldr	r3, [pc, #452]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	496d      	ldr	r1, [pc, #436]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d012      	beq.n	8004a5c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	4b68      	ldr	r3, [pc, #416]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d909      	bls.n	8004a5c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a48:	4b64      	ldr	r3, [pc, #400]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4961      	ldr	r1, [pc, #388]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d908      	bls.n	8004a8a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004a78:	4b58      	ldr	r3, [pc, #352]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4955      	ldr	r1, [pc, #340]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	4b50      	ldr	r3, [pc, #320]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d908      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 020f 	bic.w	r2, r3, #15
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	494a      	ldr	r1, [pc, #296]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8093 	beq.w	8004bec <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ace:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d121      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e113      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d115      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e107      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004afe:	4b37      	ldr	r3, [pc, #220]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e0fb      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b0e:	4b33      	ldr	r3, [pc, #204]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0f3      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f023 0203 	bic.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	492c      	ldr	r1, [pc, #176]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b30:	f7fd fd68 	bl	8002604 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d112      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b40:	f7fd fd60 	bl	8002604 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0d7      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b56:	4b21      	ldr	r3, [pc, #132]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0318 	and.w	r3, r3, #24
 8004b5e:	2b18      	cmp	r3, #24
 8004b60:	d1ee      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x18c>
 8004b62:	e043      	b.n	8004bec <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b6c:	e00a      	b.n	8004b84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6e:	f7fd fd49 	bl	8002604 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0c0      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b84:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f003 0318 	and.w	r3, r3, #24
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d1ee      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x1ba>
 8004b90:	e02c      	b.n	8004bec <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d122      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fd fd32 	bl	8002604 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0a9      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <HAL_RCC_ClockConfig+0x228>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f003 0318 	and.w	r3, r3, #24
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x1e8>
 8004bbe:	e015      	b.n	8004bec <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc0:	f7fd fd20 	bl	8002604 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d906      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e097      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
 8004bd6:	bf00      	nop
 8004bd8:	40022000 	.word	0x40022000
 8004bdc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f003 0318 	and.w	r3, r3, #24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e9      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	4b44      	ldr	r3, [pc, #272]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d208      	bcs.n	8004c1a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004c08:	4b41      	ldr	r3, [pc, #260]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f023 020f 	bic.w	r2, r3, #15
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	493e      	ldr	r1, [pc, #248]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d14 <HAL_RCC_ClockConfig+0x360>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d210      	bcs.n	8004c4a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c28:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_RCC_ClockConfig+0x360>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 020f 	bic.w	r2, r3, #15
 8004c30:	4938      	ldr	r1, [pc, #224]	@ (8004d14 <HAL_RCC_ClockConfig+0x360>)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c38:	4b36      	ldr	r3, [pc, #216]	@ (8004d14 <HAL_RCC_ClockConfig+0x360>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e05d      	b.n	8004d06 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d208      	bcs.n	8004c78 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004c66:	4b2a      	ldr	r3, [pc, #168]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4927      	ldr	r1, [pc, #156]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d012      	beq.n	8004caa <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d209      	bcs.n	8004caa <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004c96:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	491a      	ldr	r1, [pc, #104]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d012      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d209      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	021b      	lsls	r3, r3, #8
 8004cd6:	490e      	ldr	r1, [pc, #56]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cdc:	f000 f822 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <HAL_RCC_ClockConfig+0x35c>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490b      	ldr	r1, [pc, #44]	@ (8004d18 <HAL_RCC_ClockConfig+0x364>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <HAL_RCC_ClockConfig+0x368>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <HAL_RCC_ClockConfig+0x36c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd fbf8 	bl	80024f0 <HAL_InitTick>
 8004d00:	4603      	mov	r3, r0
 8004d02:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004d04:	7afb      	ldrb	r3, [r7, #11]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	44020c00 	.word	0x44020c00
 8004d14:	40022000 	.word	0x40022000
 8004d18:	0800dfa4 	.word	0x0800dfa4
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	@ 0x24
 8004d28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d2a:	4b8c      	ldr	r3, [pc, #560]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f003 0318 	and.w	r3, r3, #24
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d36:	4b8a      	ldr	r3, [pc, #552]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e107      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d3c:	4b87      	ldr	r3, [pc, #540]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f003 0318 	and.w	r3, r3, #24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d112      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d48:	4b84      	ldr	r3, [pc, #528]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d54:	4b81      	ldr	r3, [pc, #516]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	08db      	lsrs	r3, r3, #3
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	4a81      	ldr	r2, [pc, #516]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	e0f1      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004d68:	4b7e      	ldr	r3, [pc, #504]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e0ee      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0318 	and.w	r3, r3, #24
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x244>)
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e0e5      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d80:	4b76      	ldr	r3, [pc, #472]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f003 0318 	and.w	r3, r3, #24
 8004d88:	2b18      	cmp	r3, #24
 8004d8a:	f040 80dd 	bne.w	8004f48 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d8e:	4b73      	ldr	r3, [pc, #460]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004d98:	4b70      	ldr	r3, [pc, #448]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004da4:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004db0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004db4:	08db      	lsrs	r3, r3, #3
 8004db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80b7 	beq.w	8004f42 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d056      	beq.n	8004e8e <HAL_RCC_GetSysClockFreq+0x16a>
 8004de0:	e077      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004de2:	4b5e      	ldr	r3, [pc, #376]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d02d      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dee:	4b5b      	ldr	r3, [pc, #364]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x240>)
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e18:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004f6c <HAL_RCC_GetSysClockFreq+0x248>
 8004e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e44:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004e48:	e065      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e54:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004f70 <HAL_RCC_GetSysClockFreq+0x24c>
 8004e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e70:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004f6c <HAL_RCC_GetSysClockFreq+0x248>
 8004e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e88:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004e8c:	e043      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e98:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004f74 <HAL_RCC_GetSysClockFreq+0x250>
 8004e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004f6c <HAL_RCC_GetSysClockFreq+0x248>
 8004eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ecc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004ed0:	e021      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004edc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f78 <HAL_RCC_GetSysClockFreq+0x254>
 8004ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004f6c <HAL_RCC_GetSysClockFreq+0x248>
 8004efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f10:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004f14:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004f16:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x238>)
 8004f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1a:	0a5b      	lsrs	r3, r3, #9
 8004f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f20:	3301      	adds	r3, #1
 8004f22:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f2e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3a:	ee17 3a90 	vmov	r3, s15
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e004      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	e001      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f4a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3724      	adds	r7, #36	@ 0x24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	44020c00 	.word	0x44020c00
 8004f60:	003d0900 	.word	0x003d0900
 8004f64:	03d09000 	.word	0x03d09000
 8004f68:	017d7840 	.word	0x017d7840
 8004f6c:	46000000 	.word	0x46000000
 8004f70:	4c742400 	.word	0x4c742400
 8004f74:	4bbebc20 	.word	0x4bbebc20
 8004f78:	4a742400 	.word	0x4a742400

08004f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f80:	f7ff fed0 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b08      	ldr	r3, [pc, #32]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f8a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f8e:	4907      	ldr	r1, [pc, #28]	@ (8004fac <HAL_RCC_GetHCLKFreq+0x30>)
 8004f90:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f92:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004f9c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004f9e:	4b04      	ldr	r3, [pc, #16]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x34>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	44020c00 	.word	0x44020c00
 8004fac:	0800dfa4 	.word	0x0800dfa4
 8004fb0:	20000000 	.word	0x20000000

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004fb8:	f7ff ffe0 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	091b      	lsrs	r3, r3, #4
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	44020c00 	.word	0x44020c00
 8004fdc:	0800dfb4 	.word	0x0800dfb4

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004fe4:	f7ff ffca 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4904      	ldr	r1, [pc, #16]	@ (8005008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	44020c00 	.word	0x44020c00
 8005008:	0800dfb4 	.word	0x0800dfb4

0800500c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005010:	f7ff ffb4 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	0b1b      	lsrs	r3, r3, #12
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4904      	ldr	r1, [pc, #16]	@ (8005034 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	44020c00 	.word	0x44020c00
 8005034:	0800dfb4 	.word	0x0800dfb4

08005038 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800503c:	b0aa      	sub	sp, #168	@ 0xa8
 800503e:	af00      	add	r7, sp, #0
 8005040:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005044:	2300      	movs	r3, #0
 8005046:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800504a:	2300      	movs	r3, #0
 800504c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005050:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800505c:	2500      	movs	r5, #0
 800505e:	ea54 0305 	orrs.w	r3, r4, r5
 8005062:	d00b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005064:	4bb8      	ldr	r3, [pc, #736]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800506a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800506e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	4ab4      	ldr	r2, [pc, #720]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005076:	430b      	orrs	r3, r1
 8005078:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800507c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f002 0801 	and.w	r8, r2, #1
 8005088:	f04f 0900 	mov.w	r9, #0
 800508c:	ea58 0309 	orrs.w	r3, r8, r9
 8005090:	d038      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005092:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005098:	2b05      	cmp	r3, #5
 800509a:	d819      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080050bd 	.word	0x080050bd
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050d9 	.word	0x080050d9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050c0:	3308      	adds	r3, #8
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 ffee 	bl	80070a4 <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80050ce:	e004      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10c      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80050e2:	4b99      	ldr	r3, [pc, #612]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050e8:	f023 0107 	bic.w	r1, r3, #7
 80050ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f2:	4a95      	ldr	r2, [pc, #596]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050f4:	430b      	orrs	r3, r1
 80050f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050fa:	e003      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005100:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005104:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f002 0a02 	and.w	sl, r2, #2
 8005110:	f04f 0b00 	mov.w	fp, #0
 8005114:	ea5a 030b 	orrs.w	r3, sl, fp
 8005118:	d03c      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800511a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	2b28      	cmp	r3, #40	@ 0x28
 8005122:	d01b      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005124:	2b28      	cmp	r3, #40	@ 0x28
 8005126:	d815      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d019      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d811      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005130:	2b18      	cmp	r3, #24
 8005132:	d017      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005134:	2b18      	cmp	r3, #24
 8005136:	d80d      	bhi.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d015      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800513c:	2b08      	cmp	r3, #8
 800513e:	d109      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005140:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005144:	3308      	adds	r3, #8
 8005146:	4618      	mov	r0, r3
 8005148:	f001 ffac 	bl	80070a4 <RCCEx_PLL2_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8005152:	e00a      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800515a:	e006      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800515c:	bf00      	nop
 800515e:	e004      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005160:	bf00      	nop
 8005162:	e002      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005164:	bf00      	nop
 8005166:	e000      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800516a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10c      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005172:	4b75      	ldr	r3, [pc, #468]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005178:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800517c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005182:	4a71      	ldr	r2, [pc, #452]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005184:	430b      	orrs	r3, r1
 8005186:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800518a:	e003      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005190:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005194:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f002 0304 	and.w	r3, r2, #4
 80051a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051ae:	460b      	mov	r3, r1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	d040      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80051b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051be:	d01e      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80051c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051c4:	d817      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ca:	d01a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80051cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d0:	d811      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80051d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051d4:	d017      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80051d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051d8:	d80d      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d015      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d109      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051e6:	3308      	adds	r3, #8
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 ff5b 	bl	80070a4 <RCCEx_PLL2_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80051f4:	e00a      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80051fe:	bf00      	nop
 8005200:	e004      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10c      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005214:	4b4c      	ldr	r3, [pc, #304]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005216:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800521a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800521e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005224:	4a48      	ldr	r2, [pc, #288]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005226:	430b      	orrs	r3, r1
 8005228:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005232:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005236:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005246:	2300      	movs	r3, #0
 8005248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800524c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d043      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005256:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005260:	d021      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005262:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005266:	d81a      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800526c:	d01d      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x272>
 800526e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005272:	d814      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005274:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005278:	d019      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x276>
 800527a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800527e:	d80e      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d016      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8005284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005288:	d109      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800528a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800528e:	3308      	adds	r3, #8
 8005290:	4618      	mov	r0, r3
 8005292:	f001 ff07 	bl	80070a4 <RCCEx_PLL2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800529c:	e00a      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052a6:	bf00      	nop
 80052a8:	e004      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052aa:	bf00      	nop
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10c      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80052bc:	4b22      	ldr	r3, [pc, #136]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052c2:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80052c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052ce:	430b      	orrs	r3, r1
 80052d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052da:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80052ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052ec:	2300      	movs	r3, #0
 80052ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052f4:	460b      	mov	r3, r1
 80052f6:	4313      	orrs	r3, r2
 80052f8:	d03e      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80052fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005300:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005304:	d01b      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005306:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800530a:	d814      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800530c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005310:	d017      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005316:	d80e      	bhi.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x314>
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005320:	d109      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005322:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005326:	3308      	adds	r3, #8
 8005328:	4618      	mov	r0, r3
 800532a:	f001 febb 	bl	80070a4 <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005334:	e00b      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800533c:	e007      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800533e:	bf00      	nop
 8005340:	e005      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8005342:	bf00      	nop
 8005344:	e003      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8005346:	bf00      	nop
 8005348:	44020c00 	.word	0x44020c00
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005356:	4ba5      	ldr	r3, [pc, #660]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005358:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800535c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005360:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	4aa1      	ldr	r2, [pc, #644]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005368:	430b      	orrs	r3, r1
 800536a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800536e:	e003      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005370:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005374:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005384:	673b      	str	r3, [r7, #112]	@ 0x70
 8005386:	2300      	movs	r3, #0
 8005388:	677b      	str	r3, [r7, #116]	@ 0x74
 800538a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800538e:	460b      	mov	r3, r1
 8005390:	4313      	orrs	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800539e:	d01b      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80053a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053a4:	d814      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80053a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053aa:	d017      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053b0:	d80e      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d014      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80053b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053ba:	d109      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053c0:	3308      	adds	r3, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fe6e 	bl	80070a4 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80053ce:	e008      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80053d6:	e004      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80053d8:	bf00      	nop
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80053e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80053ea:	4b80      	ldr	r3, [pc, #512]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053f0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80053f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fa:	4a7c      	ldr	r2, [pc, #496]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005408:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800540c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800541a:	2300      	movs	r3, #0
 800541c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800541e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005422:	460b      	mov	r3, r1
 8005424:	4313      	orrs	r3, r2
 8005426:	d033      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800542c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005432:	d015      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005438:	d80e      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d012      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800543e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005442:	d109      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005448:	3308      	adds	r3, #8
 800544a:	4618      	mov	r0, r3
 800544c:	f001 fe2a 	bl	80070a4 <RCCEx_PLL2_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005456:	e006      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800545e:	e002      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8005460:	bf00      	nop
 8005462:	e000      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8005464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005466:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10c      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800546e:	4b5f      	ldr	r3, [pc, #380]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005474:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005478:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	4a5b      	ldr	r2, [pc, #364]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005480:	430b      	orrs	r3, r1
 8005482:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005486:	e003      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800548c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005490:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	2100      	movs	r1, #0
 800549a:	6639      	str	r1, [r7, #96]	@ 0x60
 800549c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80054a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054a6:	460b      	mov	r3, r1
 80054a8:	4313      	orrs	r3, r2
 80054aa:	d033      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80054ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b6:	d015      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80054b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054bc:	d80e      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d012      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80054c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054c6:	d109      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054cc:	3308      	adds	r3, #8
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 fde8 	bl	80070a4 <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80054da:	e006      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80054e2:	e002      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80054e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80054f2:	4b3e      	ldr	r3, [pc, #248]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054f8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005502:	4a3a      	ldr	r2, [pc, #232]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005504:	430b      	orrs	r3, r1
 8005506:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800550a:	e003      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005510:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005514:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	2100      	movs	r1, #0
 800551e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005526:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005530:	4b2e      	ldr	r3, [pc, #184]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	4a2d      	ldr	r2, [pc, #180]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005536:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800553a:	61d3      	str	r3, [r2, #28]
 800553c:	4b2b      	ldr	r3, [pc, #172]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800553e:	69d9      	ldr	r1, [r3, #28]
 8005540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005548:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800554a:	430b      	orrs	r3, r1
 800554c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800554e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800555a:	653b      	str	r3, [r7, #80]	@ 0x50
 800555c:	2300      	movs	r3, #0
 800555e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005560:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d046      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800556a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800556e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005570:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005574:	d021      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005576:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800557a:	d81a      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005580:	d01d      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005586:	d814      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005588:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800558c:	d019      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800558e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005592:	d80e      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d016      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559c:	d109      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800559e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055a2:	3308      	adds	r3, #8
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 fd7d 	bl	80070a4 <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80055b0:	e00a      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055ba:	bf00      	nop
 80055bc:	e004      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055be:	bf00      	nop
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10f      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80055d0:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055d6:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80055da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e0:	4a02      	ldr	r2, [pc, #8]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80055e8:	e006      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055ea:	bf00      	nop
 80055ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005606:	2300      	movs	r3, #0
 8005608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	d043      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005614:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800561e:	d021      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8005620:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005624:	d81a      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800562a:	d01d      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800562c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005630:	d814      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005632:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005636:	d019      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005638:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800563c:	d80e      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x624>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d016      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	d109      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005648:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800564c:	3308      	adds	r3, #8
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fd28 	bl	80070a4 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800565a:	e00a      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005662:	e006      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005664:	bf00      	nop
 8005666:	e004      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005668:	bf00      	nop
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005672:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10c      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800567a:	4bb6      	ldr	r3, [pc, #728]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800567c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005680:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	4ab2      	ldr	r2, [pc, #712]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800568c:	430b      	orrs	r3, r1
 800568e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005692:	e003      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005694:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005698:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800569c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056aa:	2300      	movs	r3, #0
 80056ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d030      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d80f      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d211      	bcs.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d911      	bls.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d109      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056d2:	3308      	adds	r3, #8
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fce5 	bl	80070a4 <RCCEx_PLL2_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80056ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10c      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80056f8:	4b96      	ldr	r3, [pc, #600]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056fe:	f023 0107 	bic.w	r1, r3, #7
 8005702:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005708:	4a92      	ldr	r2, [pc, #584]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800570a:	430b      	orrs	r3, r1
 800570c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005716:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800571a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	2100      	movs	r1, #0
 8005724:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800572c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005730:	460b      	mov	r3, r1
 8005732:	4313      	orrs	r3, r2
 8005734:	d022      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005736:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800573a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8005740:	2b08      	cmp	r3, #8
 8005742:	d005      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800574a:	e002      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005752:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10c      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800575a:	4b7e      	ldr	r3, [pc, #504]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800575c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005760:	f023 0108 	bic.w	r1, r3, #8
 8005764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576a:	4a7a      	ldr	r2, [pc, #488]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800576c:	430b      	orrs	r3, r1
 800576e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005778:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800577c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005788:	633b      	str	r3, [r7, #48]	@ 0x30
 800578a:	2300      	movs	r3, #0
 800578c:	637b      	str	r3, [r7, #52]	@ 0x34
 800578e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	f000 80b0 	beq.w	80058fa <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800579a:	4b6f      	ldr	r3, [pc, #444]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800579c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579e:	4a6e      	ldr	r2, [pc, #440]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057a6:	f7fc ff2d 	bl	8002604 <HAL_GetTick>
 80057aa:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057ae:	e00b      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b0:	f7fc ff28 	bl	8002604 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d903      	bls.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80057c6:	e005      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057c8:	4b63      	ldr	r3, [pc, #396]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ed      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80057d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 808a 	bne.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057de:	4b5d      	ldr	r3, [pc, #372]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80057ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d022      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x802>
 80057f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80057fe:	429a      	cmp	r2, r3
 8005800:	d01b      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005802:	4b54      	ldr	r3, [pc, #336]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005810:	4b50      	ldr	r3, [pc, #320]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005816:	4a4f      	ldr	r2, [pc, #316]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800581c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005820:	4b4c      	ldr	r3, [pc, #304]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005826:	4a4b      	ldr	r2, [pc, #300]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005830:	4a48      	ldr	r2, [pc, #288]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800583a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d019      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc fedd 	bl	8002604 <HAL_GetTick>
 800584a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584e:	e00d      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005850:	f7fc fed8 	bl	8002604 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d903      	bls.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 800586a:	e006      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800586c:	4b39      	ldr	r3, [pc, #228]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800586e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ea      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 800587a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d132      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005882:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005890:	d10f      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8005892:	4b30      	ldr	r3, [pc, #192]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800589a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800589e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80058aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	61d3      	str	r3, [r2, #28]
 80058b0:	e005      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x886>
 80058b2:	4b28      	ldr	r3, [pc, #160]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4a27      	ldr	r2, [pc, #156]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058bc:	61d3      	str	r3, [r2, #28]
 80058be:	4b25      	ldr	r3, [pc, #148]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058c4:	4a23      	ldr	r2, [pc, #140]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058ce:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058d0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80058d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058de:	4a1d      	ldr	r2, [pc, #116]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058e6:	e008      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80058f0:	e003      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058f6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005908:	2300      	movs	r3, #0
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d038      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005916:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800591a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591c:	2b30      	cmp	r3, #48	@ 0x30
 800591e:	d014      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005920:	2b30      	cmp	r3, #48	@ 0x30
 8005922:	d80e      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005924:	2b20      	cmp	r3, #32
 8005926:	d012      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d80a      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005930:	2b10      	cmp	r3, #16
 8005932:	d106      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005934:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	4a06      	ldr	r2, [pc, #24]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800593a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005940:	e00d      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005948:	e009      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800594a:	bf00      	nop
 800594c:	e007      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800594e:	bf00      	nop
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005952:	bf00      	nop
 8005954:	44020c00 	.word	0x44020c00
 8005958:	44020800 	.word	0x44020800
        break;
 800595c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005966:	4bb5      	ldr	r3, [pc, #724]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800596c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005970:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005976:	49b1      	ldr	r1, [pc, #708]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005984:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005988:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	2300      	movs	r3, #0
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
 800599a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800599e:	460b      	mov	r3, r1
 80059a0:	4313      	orrs	r3, r2
 80059a2:	d03c      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80059a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d81d      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80059ae:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059c9 	.word	0x080059c9
 80059b8:	080059d7 	.word	0x080059d7
 80059bc:	080059eb 	.word	0x080059eb
 80059c0:	080059f3 	.word	0x080059f3
 80059c4:	080059f3 	.word	0x080059f3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b9c      	ldr	r3, [pc, #624]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059cc:	4a9b      	ldr	r2, [pc, #620]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80059d4:	e00e      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059da:	3308      	adds	r3, #8
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fb61 	bl	80070a4 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80059f0:	e000      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80059f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10c      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80059fc:	4b8f      	ldr	r3, [pc, #572]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a02:	f023 0207 	bic.w	r2, r3, #7
 8005a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a0c:	498b      	ldr	r1, [pc, #556]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a1a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005a1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d03c      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005a3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d01f      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d819      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a48:	2b18      	cmp	r3, #24
 8005a4a:	d01d      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005a4c:	2b18      	cmp	r3, #24
 8005a4e:	d815      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d007      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005a58:	e010      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5a:	4b78      	ldr	r3, [pc, #480]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	4a77      	ldr	r2, [pc, #476]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a64:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a66:	e010      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fb18 	bl	80070a4 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e006      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a82:	e002      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005a84:	bf00      	nop
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10c      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005a92:	4b6a      	ldr	r3, [pc, #424]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a98:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005a9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	4966      	ldr	r1, [pc, #408]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005aaa:	e003      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ab0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005aca:	460b      	mov	r3, r1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	d03e      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005ad0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ada:	d020      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae0:	d819      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ae4:	d01d      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ae8:	d815      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005aee:	2b40      	cmp	r3, #64	@ 0x40
 8005af0:	d007      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005af2:	e010      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af4:	4b51      	ldr	r3, [pc, #324]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	4a50      	ldr	r2, [pc, #320]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b00:	e010      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b06:	3308      	adds	r3, #8
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 facb 	bl	80070a4 <RCCEx_PLL2_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b14:	e006      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005b1c:	e002      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b2c:	4b43      	ldr	r3, [pc, #268]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b32:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3c:	493f      	ldr	r1, [pc, #252]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b4a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	2100      	movs	r1, #0
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d038      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b74:	d00e      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b7a:	d815      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b84:	d110      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b86:	4b2d      	ldr	r3, [pc, #180]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b90:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b92:	e00e      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b98:	3308      	adds	r3, #8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fa82 	bl	80070a4 <RCCEx_PLL2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005ba6:	e004      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005bba:	4b20      	ldr	r3, [pc, #128]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bca:	491c      	ldr	r1, [pc, #112]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005bd2:	e003      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bd8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	2100      	movs	r1, #0
 8005be6:	6039      	str	r1, [r7, #0]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d039      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bfe:	2b30      	cmp	r3, #48	@ 0x30
 8005c00:	d01e      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005c02:	2b30      	cmp	r3, #48	@ 0x30
 8005c04:	d815      	bhi.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d002      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d007      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005c0e:	e010      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b0a      	ldr	r3, [pc, #40]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	4a09      	ldr	r2, [pc, #36]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c1c:	e011      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c22:	3308      	adds	r3, #8
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fa3d 	bl	80070a4 <RCCEx_PLL2_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c30:	e007      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005c3a:	bf00      	nop
 8005c3c:	44020c00 	.word	0x44020c00
        break;
 8005c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10c      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c5a:	4908      	ldr	r1, [pc, #32]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c62:	e003      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005c6c:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	37a8      	adds	r7, #168	@ 0xa8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	44020c00 	.word	0x44020c00

08005c80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b08b      	sub	sp, #44	@ 0x2c
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005c88:	4bad      	ldr	r3, [pc, #692]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c90:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c92:	4bab      	ldr	r3, [pc, #684]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005c9c:	4ba8      	ldr	r3, [pc, #672]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005ca8:	4ba5      	ldr	r3, [pc, #660]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005cb2:	4ba3      	ldr	r3, [pc, #652]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8126 	beq.w	8005f22 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d053      	beq.n	8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d86f      	bhi.n	8005dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d003      	beq.n	8005cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d02b      	beq.n	8005d46 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005cee:	e068      	b.n	8005dc2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cf0:	4b93      	ldr	r3, [pc, #588]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	4a92      	ldr	r2, [pc, #584]	@ (8005f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d24:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d28:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d44:	e068      	b.n	8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	ee07 3a90 	vmov	s15, r3
 8005d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d50:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005f4c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005d82:	e049      	b.n	8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da0:	ed97 6a04 	vldr	s12, [r7, #16]
 8005da4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005dc0:	e02a      	b.n	8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	08db      	lsrs	r3, r3, #3
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8005f44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005dce:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005dfa:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005f48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e16:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e18:	4b49      	ldr	r3, [pc, #292]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e24:	d121      	bne.n	8005e6a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005e26:	4b46      	ldr	r3, [pc, #280]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d017      	beq.n	8005e62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e32:	4b43      	ldr	r3, [pc, #268]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e36:	0a5b      	lsrs	r3, r3, #9
 8005e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005e44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e48:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e4c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e58:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e70:	4b33      	ldr	r3, [pc, #204]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e7c:	d121      	bne.n	8005ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005e7e:	4b30      	ldr	r3, [pc, #192]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d017      	beq.n	8005eba <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ea4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	605a      	str	r2, [r3, #4]
 8005eb8:	e006      	b.n	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	605a      	str	r2, [r3, #4]
 8005ec0:	e002      	b.n	8005ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ed4:	d121      	bne.n	8005f1a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d017      	beq.n	8005f12 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ee2:	4b17      	ldr	r3, [pc, #92]	@ (8005f40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	0e1b      	lsrs	r3, r3, #24
 8005ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005ef4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005efc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f08:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005f10:	e010      	b.n	8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
}
 8005f18:	e00c      	b.n	8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	609a      	str	r2, [r3, #8]
}
 8005f20:	e008      	b.n	8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	372c      	adds	r7, #44	@ 0x2c
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	44020c00 	.word	0x44020c00
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	46000000 	.word	0x46000000
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4bbebc20 	.word	0x4bbebc20

08005f54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b08b      	sub	sp, #44	@ 0x2c
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005f5c:	4bad      	ldr	r3, [pc, #692]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f64:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005f66:	4bab      	ldr	r3, [pc, #684]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005f70:	4ba8      	ldr	r3, [pc, #672]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	0a1b      	lsrs	r3, r3, #8
 8005f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f7a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005f7c:	4ba5      	ldr	r3, [pc, #660]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005f86:	4ba3      	ldr	r3, [pc, #652]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8126 	beq.w	80061f6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d053      	beq.n	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d86f      	bhi.n	8006096 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d003      	beq.n	8005fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d02b      	beq.n	800601a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005fc2:	e068      	b.n	8006096 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fc4:	4b93      	ldr	r3, [pc, #588]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	08db      	lsrs	r3, r3, #3
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	4a92      	ldr	r2, [pc, #584]	@ (8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ffc:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006014:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006018:	e068      	b.n	80060ec <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006024:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a04 	vldr	s12, [r7, #16]
 800603a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006056:	e049      	b.n	80060ec <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	ee07 3a90 	vmov	s15, r3
 8006070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006074:	ed97 6a04 	vldr	s12, [r7, #16]
 8006078:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800607c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006090:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006094:	e02a      	b.n	80060ec <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006096:	4b5f      	ldr	r3, [pc, #380]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	08db      	lsrs	r3, r3, #3
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	4a5d      	ldr	r2, [pc, #372]	@ (8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80060ce:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80060d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80060ea:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ec:	4b49      	ldr	r3, [pc, #292]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060f8:	d121      	bne.n	800613e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80060fa:	4b46      	ldr	r3, [pc, #280]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d017      	beq.n	8006136 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006106:	4b43      	ldr	r3, [pc, #268]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610a:	0a5b      	lsrs	r3, r3, #9
 800610c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006110:	ee07 3a90 	vmov	s15, r3
 8006114:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006118:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800611c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006120:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e006      	b.n	8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e002      	b.n	8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006144:	4b33      	ldr	r3, [pc, #204]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800614c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006150:	d121      	bne.n	8006196 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006152:	4b30      	ldr	r3, [pc, #192]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d017      	beq.n	800618e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800615e:	4b2d      	ldr	r3, [pc, #180]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006162:	0c1b      	lsrs	r3, r3, #16
 8006164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006174:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006178:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800617c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006184:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	e006      	b.n	800619c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	e002      	b.n	800619c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800619c:	4b1d      	ldr	r3, [pc, #116]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a8:	d121      	bne.n	80061ee <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80061aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d017      	beq.n	80061e6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061b6:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ba:	0e1b      	lsrs	r3, r3, #24
 80061bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80061c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80061d0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061dc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061e4:	e010      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	e00c      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	e008      	b.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	372c      	adds	r7, #44	@ 0x2c
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	44020c00 	.word	0x44020c00
 8006218:	03d09000 	.word	0x03d09000
 800621c:	46000000 	.word	0x46000000
 8006220:	4a742400 	.word	0x4a742400
 8006224:	4bbebc20 	.word	0x4bbebc20

08006228 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08c      	sub	sp, #48	@ 0x30
 800622c:	af00      	add	r7, sp, #0
 800622e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006236:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800623a:	430b      	orrs	r3, r1
 800623c:	d14b      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800623e:	4bc4      	ldr	r3, [pc, #784]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800624a:	4bc1      	ldr	r3, [pc, #772]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800624c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b02      	cmp	r3, #2
 8006256:	d108      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800625e:	d104      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006266:	f000 bf14 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800626a:	4bb9      	ldr	r3, [pc, #740]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006274:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006278:	d108      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006280:	d104      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006282:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006288:	f000 bf03 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800628c:	4bb0      	ldr	r3, [pc, #704]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006298:	d119      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a0:	d115      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062a2:	4bab      	ldr	r3, [pc, #684]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ae:	d30a      	bcc.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80062b0:	4ba7      	ldr	r3, [pc, #668]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062ba:	4aa6      	ldr	r2, [pc, #664]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062c2:	f000 bee6 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062ca:	f000 bee2 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d2:	f000 bede 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80062d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062da:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80062de:	ea52 0301 	orrs.w	r3, r2, r1
 80062e2:	f000 838e 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80062e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80062f0:	f080 86cc 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80062f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f8:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80062fc:	ea52 0301 	orrs.w	r3, r2, r1
 8006300:	f000 82aa 	beq.w	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006308:	2a01      	cmp	r2, #1
 800630a:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800630e:	f080 86bd 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006316:	f1a3 0110 	sub.w	r1, r3, #16
 800631a:	ea52 0301 	orrs.w	r3, r2, r1
 800631e:	f000 8681 	beq.w	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8006322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006326:	2a01      	cmp	r2, #1
 8006328:	f173 0310 	sbcs.w	r3, r3, #16
 800632c:	f080 86ae 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006334:	1f19      	subs	r1, r3, #4
 8006336:	ea52 0301 	orrs.w	r3, r2, r1
 800633a:	f000 84b1 	beq.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800633e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006342:	2a01      	cmp	r2, #1
 8006344:	f173 0304 	sbcs.w	r3, r3, #4
 8006348:	f080 86a0 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800634c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006350:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006354:	430b      	orrs	r3, r1
 8006356:	f000 85aa 	beq.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800635a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635e:	497e      	ldr	r1, [pc, #504]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8006360:	428a      	cmp	r2, r1
 8006362:	f173 0300 	sbcs.w	r3, r3, #0
 8006366:	f080 8691 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800636a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636e:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006372:	430b      	orrs	r3, r1
 8006374:	f000 8532 	beq.w	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637c:	4977      	ldr	r1, [pc, #476]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800637e:	428a      	cmp	r2, r1
 8006380:	f173 0300 	sbcs.w	r3, r3, #0
 8006384:	f080 8682 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006390:	430b      	orrs	r3, r1
 8006392:	f000 84bc 	beq.w	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8006396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639a:	4971      	ldr	r1, [pc, #452]	@ (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800639c:	428a      	cmp	r2, r1
 800639e:	f173 0300 	sbcs.w	r3, r3, #0
 80063a2:	f080 8673 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063aa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80063ae:	430b      	orrs	r3, r1
 80063b0:	f000 85f2 	beq.w	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80063b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b8:	496a      	ldr	r1, [pc, #424]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80063ba:	428a      	cmp	r2, r1
 80063bc:	f173 0300 	sbcs.w	r3, r3, #0
 80063c0:	f080 8664 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80063cc:	430b      	orrs	r3, r1
 80063ce:	f000 81e5 	beq.w	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80063d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d6:	4964      	ldr	r1, [pc, #400]	@ (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80063d8:	428a      	cmp	r2, r1
 80063da:	f173 0300 	sbcs.w	r3, r3, #0
 80063de:	f080 8655 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80063ea:	430b      	orrs	r3, r1
 80063ec:	f000 83cc 	beq.w	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80063f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f4:	495d      	ldr	r1, [pc, #372]	@ (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80063f6:	428a      	cmp	r2, r1
 80063f8:	f173 0300 	sbcs.w	r3, r3, #0
 80063fc:	f080 8646 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006404:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006408:	430b      	orrs	r3, r1
 800640a:	f000 8331 	beq.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800640e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006412:	4957      	ldr	r1, [pc, #348]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006414:	428a      	cmp	r2, r1
 8006416:	f173 0300 	sbcs.w	r3, r3, #0
 800641a:	f080 8637 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800641e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006422:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006426:	430b      	orrs	r3, r1
 8006428:	f000 82bb 	beq.w	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 800642c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006430:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8006434:	f173 0300 	sbcs.w	r3, r3, #0
 8006438:	f080 8628 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800643c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006440:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006444:	430b      	orrs	r3, r1
 8006446:	f000 826d 	beq.w	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800644a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8006452:	428a      	cmp	r2, r1
 8006454:	f173 0300 	sbcs.w	r3, r3, #0
 8006458:	f080 8618 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800645c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006460:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006464:	430b      	orrs	r3, r1
 8006466:	f000 821e 	beq.w	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800646a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646e:	f242 0101 	movw	r1, #8193	@ 0x2001
 8006472:	428a      	cmp	r2, r1
 8006474:	f173 0300 	sbcs.w	r3, r3, #0
 8006478:	f080 8608 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800647c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006480:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006484:	430b      	orrs	r3, r1
 8006486:	f000 8137 	beq.w	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800648a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648e:	f241 0101 	movw	r1, #4097	@ 0x1001
 8006492:	428a      	cmp	r2, r1
 8006494:	f173 0300 	sbcs.w	r3, r3, #0
 8006498:	f080 85f8 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800649c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a0:	1f11      	subs	r1, r2, #4
 80064a2:	430b      	orrs	r3, r1
 80064a4:	f000 80d2 	beq.w	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80064a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ac:	2a05      	cmp	r2, #5
 80064ae:	f173 0300 	sbcs.w	r3, r3, #0
 80064b2:	f080 85eb 	bcs.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ba:	1e51      	subs	r1, r2, #1
 80064bc:	430b      	orrs	r3, r1
 80064be:	d006      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80064c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c4:	1e91      	subs	r1, r2, #2
 80064c6:	430b      	orrs	r3, r1
 80064c8:	d06c      	beq.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80064ca:	f000 bddf 	b.w	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064ce:	4b20      	ldr	r3, [pc, #128]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80064d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80064e0:	f7fe fd7e 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 80064e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80064e6:	f000 bdd4 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80064ea:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064f6:	d10a      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fd26 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800650c:	e048      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800650e:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	2b03      	cmp	r3, #3
 800651e:	d109      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006520:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	08db      	lsrs	r3, r3, #3
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800652c:	fa22 f303 	lsr.w	r3, r2, r3
 8006530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006532:	e035      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800653c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006540:	d11c      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	2b04      	cmp	r3, #4
 8006546:	d119      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8006548:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800654a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800654c:	e028      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800654e:	bf00      	nop
 8006550:	44020c00 	.word	0x44020c00
 8006554:	017d7840 	.word	0x017d7840
 8006558:	20000001 	.word	0x20000001
 800655c:	10000001 	.word	0x10000001
 8006560:	08000001 	.word	0x08000001
 8006564:	04000001 	.word	0x04000001
 8006568:	00200001 	.word	0x00200001
 800656c:	00040001 	.word	0x00040001
 8006570:	00020001 	.word	0x00020001
 8006574:	03d09000 	.word	0x03d09000
 8006578:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800657c:	4b9f      	ldr	r3, [pc, #636]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800657e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b02      	cmp	r3, #2
 8006588:	d106      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	2b05      	cmp	r3, #5
 800658e:	d103      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8006590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006596:	e003      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800659c:	f000 bd79 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80065a0:	f000 bd77 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065a4:	4b95      	ldr	r3, [pc, #596]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b6:	f7fe fcfd 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80065ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80065bc:	f000 bd69 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80065c0:	4b8e      	ldr	r3, [pc, #568]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065cc:	d10a      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d107      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d4:	f107 030c 	add.w	r3, r7, #12
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fcbb 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e2:	e031      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80065e4:	4b85      	ldr	r3, [pc, #532]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d10c      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	2b18      	cmp	r3, #24
 80065f4:	d109      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065f6:	4b81      	ldr	r3, [pc, #516]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	4a7f      	ldr	r2, [pc, #508]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006608:	e01e      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800660a:	4b7c      	ldr	r3, [pc, #496]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006616:	d105      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	2b20      	cmp	r3, #32
 800661c:	d102      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800661e:	4b79      	ldr	r3, [pc, #484]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006622:	e011      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006624:	4b75      	ldr	r3, [pc, #468]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d106      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006634:	2b28      	cmp	r3, #40	@ 0x28
 8006636:	d103      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8006638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663e:	e003      	b.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006644:	f000 bd25 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006648:	f000 bd23 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800664c:	4b6b      	ldr	r3, [pc, #428]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800664e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006652:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006656:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800665e:	f7fe fca9 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006662:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006664:	f000 bd15 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006668:	4b64      	ldr	r3, [pc, #400]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006674:	d10a      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	2b40      	cmp	r3, #64	@ 0x40
 800667a:	d107      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667c:	f107 030c 	add.w	r3, r7, #12
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fc67 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800668a:	e033      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800668c:	4b5b      	ldr	r3, [pc, #364]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d10c      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	2bc0      	cmp	r3, #192	@ 0xc0
 800669c:	d109      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800669e:	4b57      	ldr	r3, [pc, #348]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	08db      	lsrs	r3, r3, #3
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	4a55      	ldr	r2, [pc, #340]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b0:	e020      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80066b2:	4b52      	ldr	r3, [pc, #328]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066be:	d106      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c6:	d102      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80066c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066cc:	e012      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80066ce:	4b4b      	ldr	r3, [pc, #300]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d107      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80066e2:	d103      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 80066e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ea:	e003      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80066f0:	f000 bccf 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80066f4:	f000 bccd 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066f8:	4b40      	ldr	r3, [pc, #256]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066fe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800670a:	f7fe fc7f 	bl	800500c <HAL_RCC_GetPCLK3Freq>
 800670e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006710:	f000 bcbf 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800671a:	d108      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800671c:	f107 030c 	add.w	r3, r7, #12
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fc17 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800672a:	f000 bcb2 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800672e:	4b33      	ldr	r3, [pc, #204]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d10d      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006740:	d109      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006742:	4b2e      	ldr	r3, [pc, #184]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	08db      	lsrs	r3, r3, #3
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	4a2c      	ldr	r2, [pc, #176]	@ (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006754:	e020      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006756:	4b29      	ldr	r3, [pc, #164]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800675e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006762:	d106      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800676a:	d102      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 800676c:	4b25      	ldr	r3, [pc, #148]	@ (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800676e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006770:	e012      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006772:	4b22      	ldr	r3, [pc, #136]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b02      	cmp	r3, #2
 800677e:	d107      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006786:	d103      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8006788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800678c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800678e:	e003      	b.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006794:	f000 bc7d 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006798:	f000 bc7b 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800679c:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800679e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80067ae:	f7fe fbe5 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 80067b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80067b4:	f000 bc6d 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d104      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80067be:	f7fe fab1 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80067c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80067c4:	f000 bc65 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d108      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ce:	f107 030c 	add.w	r3, r7, #12
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fbbe 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067dc:	f000 bc59 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067e0:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ec:	d10e      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d10b      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80067f4:	4b04      	ldr	r3, [pc, #16]	@ (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80067f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067f8:	e02c      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80067fa:	bf00      	nop
 80067fc:	44020c00 	.word	0x44020c00
 8006800:	03d09000 	.word	0x03d09000
 8006804:	003d0900 	.word	0x003d0900
 8006808:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800680c:	4b95      	ldr	r3, [pc, #596]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d10c      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	2b04      	cmp	r3, #4
 800681c:	d109      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800681e:	4b91      	ldr	r3, [pc, #580]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	08db      	lsrs	r3, r3, #3
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	4a8f      	ldr	r2, [pc, #572]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006830:	e010      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006832:	4b8c      	ldr	r3, [pc, #560]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800683a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800683e:	d105      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	2b05      	cmp	r3, #5
 8006844:	d102      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8006846:	4b89      	ldr	r3, [pc, #548]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684a:	e003      	b.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006850:	f000 bc1f 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006854:	f000 bc1d 	b.w	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006858:	4b82      	ldr	r3, [pc, #520]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800685a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006864:	4b7f      	ldr	r3, [pc, #508]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b02      	cmp	r3, #2
 8006870:	d106      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8006878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800687e:	e011      	b.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006880:	4b78      	ldr	r3, [pc, #480]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800688a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800688e:	d106      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	2b08      	cmp	r3, #8
 8006894:	d103      	bne.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8006896:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800689a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80068a2:	e3f6      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80068a4:	e3f5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068b0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d103      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fe fb7c 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80068bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80068be:	e3e8      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c6:	d107      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c8:	f107 030c 	add.w	r3, r7, #12
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fb41 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068d6:	e3dc      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80068d8:	4b62      	ldr	r3, [pc, #392]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d10d      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ea:	d109      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	4a5c      	ldr	r2, [pc, #368]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
 80068fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068fe:	e010      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006900:	4b58      	ldr	r3, [pc, #352]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800690c:	d106      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006914:	d102      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8006916:	4b55      	ldr	r3, [pc, #340]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800691a:	e002      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006920:	e3b7      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006922:	e3b6      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006924:	4b4f      	ldr	r3, [pc, #316]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006926:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800692a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800692e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006936:	f7fe fb3d 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 800693a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800693c:	e3a9      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 030c 	add.w	r3, r7, #12
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fb02 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006954:	e39d      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006956:	4b43      	ldr	r3, [pc, #268]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b02      	cmp	r3, #2
 8006960:	d10d      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800696a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	4a3c      	ldr	r2, [pc, #240]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800697c:	e010      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800697e:	4b39      	ldr	r3, [pc, #228]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8006994:	4b35      	ldr	r3, [pc, #212]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006998:	e002      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800699e:	e378      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80069a0:	e377      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80069a2:	4b30      	ldr	r3, [pc, #192]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069a8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80069ac:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d103      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7fe fafe 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80069b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ba:	e36a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069c2:	d107      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c4:	f107 030c 	add.w	r3, r7, #12
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fac3 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069d2:	e35e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80069d4:	4b23      	ldr	r3, [pc, #140]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d10d      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80069e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e6:	d109      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069fa:	e34a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a00:	e347      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006a02:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a08:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a14:	f7fe fafa 	bl	800500c <HAL_RCC_GetPCLK3Freq>
 8006a18:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a1a:	e33a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a22:	d107      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a24:	f107 030c 	add.w	r3, r7, #12
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fa93 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a32:	e32e      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006a34:	4b0b      	ldr	r3, [pc, #44]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d10d      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a46:	d109      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a48:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	08db      	lsrs	r3, r3, #3
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	4a05      	ldr	r2, [pc, #20]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
 8006a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a5a:	e31a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a60:	e317      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006a62:	bf00      	nop
 8006a64:	44020c00 	.word	0x44020c00
 8006a68:	03d09000 	.word	0x03d09000
 8006a6c:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a70:	4b9b      	ldr	r3, [pc, #620]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006a72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a76:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a82:	d044      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a8a:	d879      	bhi.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a92:	d02d      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a9a:	d871      	bhi.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa2:	d017      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aaa:	d869      	bhi.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab8:	d004      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8006aba:	e061      	b.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006abc:	f7fe faa6 	bl	800500c <HAL_RCC_GetPCLK3Freq>
 8006ac0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006ac2:	e060      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fa43 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ad2:	e058      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ad4:	4b82      	ldr	r3, [pc, #520]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d103      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ae8:	e04d      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006aee:	e04a      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006af0:	4b7b      	ldr	r3, [pc, #492]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006af6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006afa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006afe:	d103      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006b00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b06:	e03e      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b0c:	e03b      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b0e:	4b74      	ldr	r3, [pc, #464]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b14:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b1a:	4b71      	ldr	r3, [pc, #452]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d109      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	08db      	lsrs	r3, r3, #3
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	4a6b      	ldr	r2, [pc, #428]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b3e:	e01e      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b40:	4b67      	ldr	r3, [pc, #412]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b54:	d102      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b56:	4b64      	ldr	r3, [pc, #400]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b5a:	e010      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b5c:	4b60      	ldr	r3, [pc, #384]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b68:	d106      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b70:	d102      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b72:	4b5e      	ldr	r3, [pc, #376]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b76:	e002      	b.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006b7c:	e003      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8006b7e:	e002      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b84:	bf00      	nop
          }
        }
        break;
 8006b86:	e284      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b88:	4b55      	ldr	r3, [pc, #340]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b8e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b9a:	d044      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ba2:	d879      	bhi.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006baa:	d02d      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bb2:	d871      	bhi.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bba:	d017      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bc2:	d869      	bhi.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd0:	d004      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006bd2:	e061      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fe f9ee 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8006bd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006bda:	e060      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff f9b7 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bea:	e058      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bec:	4b3c      	ldr	r3, [pc, #240]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d103      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c00:	e04d      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c06:	e04a      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c08:	4b35      	ldr	r3, [pc, #212]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c16:	d103      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8006c18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c1e:	e03e      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c24:	e03b      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c26:	4b2e      	ldr	r3, [pc, #184]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c2c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c32:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d10c      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c44:	4b26      	ldr	r3, [pc, #152]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	08db      	lsrs	r3, r3, #3
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	4a25      	ldr	r2, [pc, #148]	@ (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
 8006c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c56:	e01e      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c58:	4b21      	ldr	r3, [pc, #132]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c64:	d106      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6c:	d102      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c72:	e010      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c80:	d106      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c88:	d102      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c8a:	4b18      	ldr	r3, [pc, #96]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c8e:	e002      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006c94:	e003      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006c96:	e002      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c9c:	bf00      	nop
          }
        }
        break;
 8006c9e:	e1f8      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006cac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cb8:	d105      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006cc4:	e1e5      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ccc:	d110      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cce:	f107 0318 	add.w	r3, r7, #24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe ffd4 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cdc:	e1d9      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006cde:	bf00      	nop
 8006ce0:	44020c00 	.word	0x44020c00
 8006ce4:	03d09000 	.word	0x03d09000
 8006ce8:	003d0900 	.word	0x003d0900
 8006cec:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cf6:	d107      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff f929 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d06:	e1c4      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d0c:	e1c1      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d0e:	4b9d      	ldr	r3, [pc, #628]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d859      	bhi.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d3d 	.word	0x08006d3d
 8006d2c:	08006d4d 	.word	0x08006d4d
 8006d30:	08006dd5 	.word	0x08006dd5
 8006d34:	08006d5d 	.word	0x08006d5d
 8006d38:	08006d63 	.word	0x08006d63
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d3c:	f107 0318 	add.w	r3, r7, #24
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe ff9d 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d4a:	e046      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff f8ff 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d5a:	e03e      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006d5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d60:	e03b      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d62:	4b88      	ldr	r3, [pc, #544]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d68:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d6e:	4b85      	ldr	r3, [pc, #532]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d10c      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d80:	4b80      	ldr	r3, [pc, #512]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	08db      	lsrs	r3, r3, #3
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	4a80      	ldr	r2, [pc, #512]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d92:	e01e      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d94:	4b7b      	ldr	r3, [pc, #492]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da0:	d106      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da8:	d102      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006daa:	4b79      	ldr	r3, [pc, #484]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dae:	e010      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006db0:	4b74      	ldr	r3, [pc, #464]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbc:	d106      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc4:	d102      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006dc6:	4b73      	ldr	r3, [pc, #460]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dca:	e002      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006dd0:	e003      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8006dd2:	e002      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006dd8:	bf00      	nop
          }
        }
        break;
 8006dda:	e15a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006ddc:	4b69      	ldr	r3, [pc, #420]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d022      	beq.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d858      	bhi.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	2b18      	cmp	r3, #24
 8006df8:	d019      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfc:	2b18      	cmp	r3, #24
 8006dfe:	d852      	bhi.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d008      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006e0c:	e04b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe ff34 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e1c:	e046      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e1e:	f107 030c 	add.w	r3, r7, #12
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff f896 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e2c:	e03e      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e2e:	4b56      	ldr	r3, [pc, #344]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e32:	e03b      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e34:	4b53      	ldr	r3, [pc, #332]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e3a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e40:	4b50      	ldr	r3, [pc, #320]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d10c      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e52:	4b4c      	ldr	r3, [pc, #304]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e64:	e01e      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e66:	4b47      	ldr	r3, [pc, #284]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e72:	d106      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7a:	d102      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e7c:	4b44      	ldr	r3, [pc, #272]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e80:	e010      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e82:	4b40      	ldr	r3, [pc, #256]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e98:	4b3e      	ldr	r3, [pc, #248]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e9c:	e002      	b.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006ea2:	e003      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006eaa:	bf00      	nop
          }
        }
        break;
 8006eac:	e0f1      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006eae:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec0:	d023      	beq.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec8:	d858      	bhi.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ecc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ece:	d019      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed4:	d852      	bhi.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	2b40      	cmp	r3, #64	@ 0x40
 8006ee0:	d008      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006ee2:	e04b      	b.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ee4:	f107 0318 	add.w	r3, r7, #24
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fec9 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ef2:	e046      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff f82b 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f02:	e03e      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f04:	4b20      	ldr	r3, [pc, #128]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f08:	e03b      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f10:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f16:	4b1b      	ldr	r3, [pc, #108]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f28:	4b16      	ldr	r3, [pc, #88]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	08db      	lsrs	r3, r3, #3
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f3a:	e01e      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f48:	d106      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f50:	d102      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f52:	4b0f      	ldr	r3, [pc, #60]	@ (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f56:	e010      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f58:	4b0a      	ldr	r3, [pc, #40]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f64:	d106      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f6c:	d102      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f6e:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f72:	e002      	b.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006f78:	e003      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006f7a:	e002      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f80:	bf00      	nop
          }
        }
        break;
 8006f82:	e086      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006f84:	44020c00 	.word	0x44020c00
 8006f88:	00bb8000 	.word	0x00bb8000
 8006f8c:	03d09000 	.word	0x03d09000
 8006f90:	003d0900 	.word	0x003d0900
 8006f94:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006f98:	4b40      	ldr	r3, [pc, #256]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb0:	d105      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8006fb8:	4b39      	ldr	r3, [pc, #228]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fbc:	e031      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006fbe:	4b37      	ldr	r3, [pc, #220]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fca:	d10a      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fd2:	f107 0318 	add.w	r3, r7, #24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fe52 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe0:	e01f      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d106      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d103      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8006ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ffc:	e011      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006ffe:	4b27      	ldr	r3, [pc, #156]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700c:	d106      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	2b30      	cmp	r3, #48	@ 0x30
 8007012:	d103      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8007014:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8007020:	e037      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007022:	e036      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007024:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007026:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800702a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800702e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	2b10      	cmp	r3, #16
 8007034:	d107      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007036:	f107 0318 	add.w	r3, r7, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fe20 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8007044:	e025      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8007046:	4b15      	ldr	r3, [pc, #84]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800704e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007052:	d10a      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	2b20      	cmp	r3, #32
 8007058:	d107      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe ff78 	bl	8005f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007068:	e00f      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800706a:	4b0c      	ldr	r3, [pc, #48]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007076:	d105      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8007078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707a:	2b30      	cmp	r3, #48	@ 0x30
 800707c:	d102      	bne.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800707e:	4b08      	ldr	r3, [pc, #32]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8007080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007082:	e002      	b.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800708a:	e002      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007090:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007094:	4618      	mov	r0, r3
 8007096:	3730      	adds	r7, #48	@ 0x30
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	44020c00 	.word	0x44020c00
 80070a0:	02dc6c00 	.word	0x02dc6c00

080070a4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80070ac:	4b48      	ldr	r3, [pc, #288]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a47      	ldr	r2, [pc, #284]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 80070b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070b8:	f7fb faa4 	bl	8002604 <HAL_GetTick>
 80070bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070be:	e008      	b.n	80070d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070c0:	f7fb faa0 	bl	8002604 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e07a      	b.n	80071c8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d2:	4b3f      	ldr	r3, [pc, #252]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80070de:	4b3c      	ldr	r3, [pc, #240]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6811      	ldr	r1, [r2, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6852      	ldr	r2, [r2, #4]
 80070f2:	0212      	lsls	r2, r2, #8
 80070f4:	430a      	orrs	r2, r1
 80070f6:	4936      	ldr	r1, [pc, #216]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	3b01      	subs	r3, #1
 8007102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	3b01      	subs	r3, #1
 800710c:	025b      	lsls	r3, r3, #9
 800710e:	b29b      	uxth	r3, r3
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	3b01      	subs	r3, #1
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800711e:	431a      	orrs	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	3b01      	subs	r3, #1
 8007126:	061b      	lsls	r3, r3, #24
 8007128:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800712c:	4928      	ldr	r1, [pc, #160]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 800712e:	4313      	orrs	r3, r2
 8007130:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007132:	4b27      	ldr	r3, [pc, #156]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	f023 020c 	bic.w	r2, r3, #12
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	4924      	ldr	r1, [pc, #144]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007140:	4313      	orrs	r3, r2
 8007142:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007144:	4b22      	ldr	r3, [pc, #136]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007148:	f023 0220 	bic.w	r2, r3, #32
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	491f      	ldr	r1, [pc, #124]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007152:	4313      	orrs	r3, r2
 8007154:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007156:	4b1e      	ldr	r3, [pc, #120]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	491c      	ldr	r1, [pc, #112]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007160:	4313      	orrs	r3, r2
 8007162:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007164:	4b1a      	ldr	r3, [pc, #104]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	4a19      	ldr	r2, [pc, #100]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 800716a:	f023 0310 	bic.w	r3, r3, #16
 800716e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007170:	4b17      	ldr	r3, [pc, #92]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007178:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6a12      	ldr	r2, [r2, #32]
 8007180:	00d2      	lsls	r2, r2, #3
 8007182:	4913      	ldr	r1, [pc, #76]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007184:	4313      	orrs	r3, r2
 8007186:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007188:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	4a10      	ldr	r2, [pc, #64]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 800718e:	f043 0310 	orr.w	r3, r3, #16
 8007192:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007194:	4b0e      	ldr	r3, [pc, #56]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a0d      	ldr	r2, [pc, #52]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 800719a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800719e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071a0:	f7fb fa30 	bl	8002604 <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071a6:	e008      	b.n	80071ba <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071a8:	f7fb fa2c 	bl	8002604 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e006      	b.n	80071c8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ba:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <RCCEx_PLL2_Config+0x12c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0

}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	44020c00 	.word	0x44020c00

080071d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e0e7      	b.n	80073b6 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <HAL_SPI_Init+0x2c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b0f      	cmp	r3, #15
 80071fa:	d901      	bls.n	8007200 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0da      	b.n	80073b6 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fd47 	bl	8007c94 <SPI_GetPacketSize>
 8007206:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <HAL_SPI_Init+0x42>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b08      	cmp	r3, #8
 8007214:	d811      	bhi.n	800723a <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800721a:	4a69      	ldr	r2, [pc, #420]	@ (80073c0 <HAL_SPI_Init+0x1ec>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a67      	ldr	r2, [pc, #412]	@ (80073c4 <HAL_SPI_Init+0x1f0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_SPI_Init+0x60>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a66      	ldr	r2, [pc, #408]	@ (80073c8 <HAL_SPI_Init+0x1f4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d104      	bne.n	800723e <HAL_SPI_Init+0x6a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b10      	cmp	r3, #16
 8007238:	d901      	bls.n	800723e <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e0bb      	b.n	80073b6 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7fa fe3e 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800727a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007284:	d119      	bne.n	80072ba <HAL_SPI_Init+0xe6>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800728e:	d103      	bne.n	8007298 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10c      	bne.n	80072ba <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072a8:	d107      	bne.n	80072ba <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00f      	beq.n	80072e6 <HAL_SPI_Init+0x112>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b06      	cmp	r3, #6
 80072cc:	d90b      	bls.n	80072e6 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e007      	b.n	80072f6 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69da      	ldr	r2, [r3, #28]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	431a      	orrs	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	ea42 0103 	orr.w	r1, r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007362:	ea42 0103 	orr.w	r1, r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40013000 	.word	0x40013000
 80073c4:	40003800 	.word	0x40003800
 80073c8:	40003c00 	.word	0x40003c00

080073cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3320      	adds	r3, #32
 80073e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e4:	f7fb f90e 	bl	8002604 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d001      	beq.n	80073fa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
 80073f8:	e1e5      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Transmit+0x3a>
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e1dd      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_SPI_Transmit+0x4c>
 8007414:	2302      	movs	r3, #2
 8007416:	e1d6      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2203      	movs	r2, #3
 8007424:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007470:	d108      	bne.n	8007484 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e009      	b.n	8007498 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007496:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	88f9      	ldrh	r1, [r7, #6]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074c4:	d107      	bne.n	80074d6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d956      	bls.n	800758c <HAL_SPI_Transmit+0x1c0>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a8d      	ldr	r2, [pc, #564]	@ (8007718 <HAL_SPI_Transmit+0x34c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d04a      	beq.n	800757e <HAL_SPI_Transmit+0x1b2>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a8b      	ldr	r2, [pc, #556]	@ (800771c <HAL_SPI_Transmit+0x350>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d045      	beq.n	800757e <HAL_SPI_Transmit+0x1b2>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a8a      	ldr	r2, [pc, #552]	@ (8007720 <HAL_SPI_Transmit+0x354>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d147      	bne.n	800758c <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80074fc:	e03f      	b.n	800757e <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d114      	bne.n	8007536 <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800751c:	1d1a      	adds	r2, r3, #4
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007534:	e023      	b.n	800757e <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007536:	f7fb f865 	bl	8002604 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d803      	bhi.n	800754e <HAL_SPI_Transmit+0x182>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d102      	bne.n	8007554 <HAL_SPI_Transmit+0x188>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d114      	bne.n	800757e <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 facf 	bl	8007af8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007560:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e123      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1b9      	bne.n	80074fe <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800758a:	e0f6      	b.n	800777a <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b07      	cmp	r3, #7
 8007592:	f240 80eb 	bls.w	800776c <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007596:	e05d      	b.n	8007654 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d132      	bne.n	800760c <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d918      	bls.n	80075e4 <HAL_SPI_Transmit+0x218>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d014      	beq.n	80075e4 <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b02      	subs	r3, #2
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075e2:	e037      	b.n	8007654 <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075f2:	1c9a      	adds	r2, r3, #2
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800760a:	e023      	b.n	8007654 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760c:	f7fa fffa 	bl	8002604 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d803      	bhi.n	8007624 <HAL_SPI_Transmit+0x258>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d102      	bne.n	800762a <HAL_SPI_Transmit+0x25e>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d114      	bne.n	8007654 <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fa64 	bl	8007af8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007636:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e0b8      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d19b      	bne.n	8007598 <HAL_SPI_Transmit+0x1cc>
 8007660:	e08b      	b.n	800777a <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b02      	cmp	r3, #2
 800766e:	d159      	bne.n	8007724 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b03      	cmp	r3, #3
 800767a:	d918      	bls.n	80076ae <HAL_SPI_Transmit+0x2e2>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007680:	2b40      	cmp	r3, #64	@ 0x40
 8007682:	d914      	bls.n	80076ae <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b04      	subs	r3, #4
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076ac:	e05e      	b.n	800776c <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d917      	bls.n	80076ea <HAL_SPI_Transmit+0x31e>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d013      	beq.n	80076ea <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c6:	881a      	ldrh	r2, [r3, #0]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b02      	subs	r3, #2
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076e8:	e040      	b.n	800776c <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3320      	adds	r3, #32
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007714:	e02a      	b.n	800776c <HAL_SPI_Transmit+0x3a0>
 8007716:	bf00      	nop
 8007718:	40013000 	.word	0x40013000
 800771c:	40003800 	.word	0x40003800
 8007720:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007724:	f7fa ff6e 	bl	8002604 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d803      	bhi.n	800773c <HAL_SPI_Transmit+0x370>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d102      	bne.n	8007742 <HAL_SPI_Transmit+0x376>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d114      	bne.n	800776c <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f9d8 	bl	8007af8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800774e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e02c      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	f47f af74 	bne.w	8007662 <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2200      	movs	r2, #0
 8007782:	2108      	movs	r1, #8
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fa57 	bl	8007c38 <SPI_WaitOnFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007796:	f043 0220 	orr.w	r2, r3, #32
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f9a9 	bl	8007af8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
  }
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	4613      	mov	r3, r2
 80077de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3330      	adds	r3, #48	@ 0x30
 80077e6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077e8:	f7fa ff0c 	bl	8002604 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d001      	beq.n	80077fe <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 80077fa:	2302      	movs	r3, #2
 80077fc:	e172      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_SPI_Receive+0x3a>
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e16a      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_SPI_Receive+0x4c>
 8007818:	2302      	movs	r3, #2
 800781a:	e163      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2204      	movs	r2, #4
 8007828:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	88fa      	ldrh	r2, [r7, #6]
 8007846:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007874:	d108      	bne.n	8007888 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e009      	b.n	800789c <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800789a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	041b      	lsls	r3, r3, #16
 80078a6:	88f9      	ldrh	r1, [r7, #6]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078c8:	d107      	bne.n	80078da <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b0f      	cmp	r3, #15
 80078e0:	d957      	bls.n	8007992 <HAL_SPI_Receive+0x1c2>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a81      	ldr	r2, [pc, #516]	@ (8007aec <HAL_SPI_Receive+0x31c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d04b      	beq.n	8007984 <HAL_SPI_Receive+0x1b4>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a7f      	ldr	r2, [pc, #508]	@ (8007af0 <HAL_SPI_Receive+0x320>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d046      	beq.n	8007984 <HAL_SPI_Receive+0x1b4>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a7e      	ldr	r2, [pc, #504]	@ (8007af4 <HAL_SPI_Receive+0x324>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d148      	bne.n	8007992 <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007900:	e040      	b.n	8007984 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	f248 0308 	movw	r3, #32776	@ 0x8008
 800790c:	4013      	ands	r3, r2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d014      	beq.n	800793c <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800791a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800791c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007922:	1d1a      	adds	r2, r3, #4
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800793a:	e023      	b.n	8007984 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800793c:	f7fa fe62 	bl	8002604 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d803      	bhi.n	8007954 <HAL_SPI_Receive+0x184>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007952:	d102      	bne.n	800795a <HAL_SPI_Receive+0x18a>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d114      	bne.n	8007984 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f8cc 	bl	8007af8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007966:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e0af      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1b8      	bne.n	8007902 <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007990:	e095      	b.n	8007abe <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	2b07      	cmp	r3, #7
 8007998:	f240 808b 	bls.w	8007ab2 <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800799c:	e03f      	b.n	8007a1e <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d114      	bne.n	80079d6 <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	8812      	ldrh	r2, [r2, #0]
 80079b4:	b292      	uxth	r2, r2
 80079b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80079d4:	e023      	b.n	8007a1e <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079d6:	f7fa fe15 	bl	8002604 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d803      	bhi.n	80079ee <HAL_SPI_Receive+0x21e>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d102      	bne.n	80079f4 <HAL_SPI_Receive+0x224>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d114      	bne.n	8007a1e <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 f87f 	bl	8007af8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e062      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1b9      	bne.n	800799e <HAL_SPI_Receive+0x1ce>
 8007a2a:	e048      	b.n	8007abe <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d117      	bne.n	8007a6a <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007a68:	e023      	b.n	8007ab2 <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a6a:	f7fa fdcb 	bl	8002604 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d803      	bhi.n	8007a82 <HAL_SPI_Receive+0x2b2>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d102      	bne.n	8007a88 <HAL_SPI_Receive+0x2b8>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d114      	bne.n	8007ab2 <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 f835 	bl	8007af8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e018      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1b6      	bne.n	8007a2c <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f81a 	bl	8007af8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
  }
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40013000 	.word	0x40013000
 8007af0:	40003800 	.word	0x40003800
 8007af4:	40003c00 	.word	0x40003c00

08007af8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0210 	orr.w	r2, r2, #16
 8007b26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6812      	ldr	r2, [r2, #0]
 8007b42:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007b5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d014      	beq.n	8007b92 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00f      	beq.n	8007b92 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699a      	ldr	r2, [r3, #24]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0220 	orr.w	r2, r2, #32
 8007b90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d014      	beq.n	8007bc8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00f      	beq.n	8007bc8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bae:	f043 0204 	orr.w	r2, r3, #4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bc6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00f      	beq.n	8007bf2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bd8:	f043 0201 	orr.w	r2, r3, #1
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699a      	ldr	r2, [r3, #24]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00f      	beq.n	8007c1c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c02:	f043 0208 	orr.w	r2, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c48:	e010      	b.n	8007c6c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c4a:	f7fa fcdb 	bl	8002604 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d803      	bhi.n	8007c62 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c60:	d102      	bne.n	8007c68 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e00f      	b.n	8007c8c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695a      	ldr	r2, [r3, #20]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	4013      	ands	r3, r2
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d0df      	beq.n	8007c4a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	08db      	lsrs	r3, r3, #3
 8007cb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e049      	b.n	8007d70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7fa f97d 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f000 fb97 	bl	800843c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e049      	b.n	8007e1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d106      	bne.n	8007da4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f841 	bl	8007e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f000 fb40 	bl	800843c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <HAL_TIM_PWM_Start+0x24>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	bf14      	ite	ne
 8007e58:	2301      	movne	r3, #1
 8007e5a:	2300      	moveq	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	e03c      	b.n	8007eda <HAL_TIM_PWM_Start+0x9e>
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d109      	bne.n	8007e7a <HAL_TIM_PWM_Start+0x3e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	bf14      	ite	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	2300      	moveq	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	e02f      	b.n	8007eda <HAL_TIM_PWM_Start+0x9e>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d109      	bne.n	8007e94 <HAL_TIM_PWM_Start+0x58>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	bf14      	ite	ne
 8007e8c:	2301      	movne	r3, #1
 8007e8e:	2300      	moveq	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	e022      	b.n	8007eda <HAL_TIM_PWM_Start+0x9e>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b0c      	cmp	r3, #12
 8007e98:	d109      	bne.n	8007eae <HAL_TIM_PWM_Start+0x72>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	bf14      	ite	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	2300      	moveq	r3, #0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	e015      	b.n	8007eda <HAL_TIM_PWM_Start+0x9e>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	d109      	bne.n	8007ec8 <HAL_TIM_PWM_Start+0x8c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	bf14      	ite	ne
 8007ec0:	2301      	movne	r3, #1
 8007ec2:	2300      	moveq	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e008      	b.n	8007eda <HAL_TIM_PWM_Start+0x9e>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	bf14      	ite	ne
 8007ed4:	2301      	movne	r3, #1
 8007ed6:	2300      	moveq	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e06f      	b.n	8007fc2 <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0xb6>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ef0:	e023      	b.n	8007f3a <HAL_TIM_PWM_Start+0xfe>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d104      	bne.n	8007f02 <HAL_TIM_PWM_Start+0xc6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f00:	e01b      	b.n	8007f3a <HAL_TIM_PWM_Start+0xfe>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d104      	bne.n	8007f12 <HAL_TIM_PWM_Start+0xd6>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f10:	e013      	b.n	8007f3a <HAL_TIM_PWM_Start+0xfe>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b0c      	cmp	r3, #12
 8007f16:	d104      	bne.n	8007f22 <HAL_TIM_PWM_Start+0xe6>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f20:	e00b      	b.n	8007f3a <HAL_TIM_PWM_Start+0xfe>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d104      	bne.n	8007f32 <HAL_TIM_PWM_Start+0xf6>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f30:	e003      	b.n	8007f3a <HAL_TIM_PWM_Start+0xfe>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fdc6 	bl	8008ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fcc <HAL_TIM_PWM_Start+0x190>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d107      	bne.n	8007f62 <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a19      	ldr	r2, [pc, #100]	@ (8007fcc <HAL_TIM_PWM_Start+0x190>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_TIM_PWM_Start+0x144>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f74:	d004      	beq.n	8007f80 <HAL_TIM_PWM_Start+0x144>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a15      	ldr	r2, [pc, #84]	@ (8007fd0 <HAL_TIM_PWM_Start+0x194>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d115      	bne.n	8007fac <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	4b13      	ldr	r3, [pc, #76]	@ (8007fd4 <HAL_TIM_PWM_Start+0x198>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b06      	cmp	r3, #6
 8007f90:	d015      	beq.n	8007fbe <HAL_TIM_PWM_Start+0x182>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f98:	d011      	beq.n	8007fbe <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0201 	orr.w	r2, r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	e008      	b.n	8007fbe <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0201 	orr.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e000      	b.n	8007fc0 <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40000400 	.word	0x40000400
 8007fd4:	00010007 	.word	0x00010007

08007fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e0ff      	b.n	80081f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b14      	cmp	r3, #20
 8008002:	f200 80f0 	bhi.w	80081e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008061 	.word	0x08008061
 8008010:	080081e7 	.word	0x080081e7
 8008014:	080081e7 	.word	0x080081e7
 8008018:	080081e7 	.word	0x080081e7
 800801c:	080080a1 	.word	0x080080a1
 8008020:	080081e7 	.word	0x080081e7
 8008024:	080081e7 	.word	0x080081e7
 8008028:	080081e7 	.word	0x080081e7
 800802c:	080080e3 	.word	0x080080e3
 8008030:	080081e7 	.word	0x080081e7
 8008034:	080081e7 	.word	0x080081e7
 8008038:	080081e7 	.word	0x080081e7
 800803c:	08008123 	.word	0x08008123
 8008040:	080081e7 	.word	0x080081e7
 8008044:	080081e7 	.word	0x080081e7
 8008048:	080081e7 	.word	0x080081e7
 800804c:	08008165 	.word	0x08008165
 8008050:	080081e7 	.word	0x080081e7
 8008054:	080081e7 	.word	0x080081e7
 8008058:	080081e7 	.word	0x080081e7
 800805c:	080081a5 	.word	0x080081a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fa4e 	bl	8008508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0208 	orr.w	r2, r2, #8
 800807a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699a      	ldr	r2, [r3, #24]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0204 	bic.w	r2, r2, #4
 800808a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6999      	ldr	r1, [r3, #24]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	619a      	str	r2, [r3, #24]
      break;
 800809e:	e0a5      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68b9      	ldr	r1, [r7, #8]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fa96 	bl	80085d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6999      	ldr	r1, [r3, #24]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	021a      	lsls	r2, r3, #8
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	619a      	str	r2, [r3, #24]
      break;
 80080e0:	e084      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fae3 	bl	80086b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69da      	ldr	r2, [r3, #28]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0208 	orr.w	r2, r2, #8
 80080fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0204 	bic.w	r2, r2, #4
 800810c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69d9      	ldr	r1, [r3, #28]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	61da      	str	r2, [r3, #28]
      break;
 8008120:	e064      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fb2f 	bl	800878c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800813c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800814c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69d9      	ldr	r1, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	021a      	lsls	r2, r3, #8
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	61da      	str	r2, [r3, #28]
      break;
 8008162:	e043      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fb7c 	bl	8008868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0208 	orr.w	r2, r2, #8
 800817e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0204 	bic.w	r2, r2, #4
 800818e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80081a2:	e023      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fba8 	bl	8008900 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	021a      	lsls	r2, r3, #8
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80081e4:	e002      	b.n	80081ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop

08008200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIM_ConfigClockSource+0x1c>
 8008218:	2302      	movs	r3, #2
 800821a:	e0fe      	b.n	800841a <HAL_TIM_ConfigClockSource+0x21a>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800823a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800823e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008258:	f000 80c9 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 800825c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008260:	f200 80ce 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008264:	4a6f      	ldr	r2, [pc, #444]	@ (8008424 <HAL_TIM_ConfigClockSource+0x224>)
 8008266:	4293      	cmp	r3, r2
 8008268:	f000 80c1 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 800826c:	4a6d      	ldr	r2, [pc, #436]	@ (8008424 <HAL_TIM_ConfigClockSource+0x224>)
 800826e:	4293      	cmp	r3, r2
 8008270:	f200 80c6 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008274:	4a6c      	ldr	r2, [pc, #432]	@ (8008428 <HAL_TIM_ConfigClockSource+0x228>)
 8008276:	4293      	cmp	r3, r2
 8008278:	f000 80b9 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 800827c:	4a6a      	ldr	r2, [pc, #424]	@ (8008428 <HAL_TIM_ConfigClockSource+0x228>)
 800827e:	4293      	cmp	r3, r2
 8008280:	f200 80be 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008284:	4a69      	ldr	r2, [pc, #420]	@ (800842c <HAL_TIM_ConfigClockSource+0x22c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	f000 80b1 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 800828c:	4a67      	ldr	r2, [pc, #412]	@ (800842c <HAL_TIM_ConfigClockSource+0x22c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	f200 80b6 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008294:	4a66      	ldr	r2, [pc, #408]	@ (8008430 <HAL_TIM_ConfigClockSource+0x230>)
 8008296:	4293      	cmp	r3, r2
 8008298:	f000 80a9 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 800829c:	4a64      	ldr	r2, [pc, #400]	@ (8008430 <HAL_TIM_ConfigClockSource+0x230>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	f200 80ae 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 80082a4:	4a63      	ldr	r2, [pc, #396]	@ (8008434 <HAL_TIM_ConfigClockSource+0x234>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	f000 80a1 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 80082ac:	4a61      	ldr	r2, [pc, #388]	@ (8008434 <HAL_TIM_ConfigClockSource+0x234>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	f200 80a6 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 80082b4:	4a60      	ldr	r2, [pc, #384]	@ (8008438 <HAL_TIM_ConfigClockSource+0x238>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	f000 8099 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 80082bc:	4a5e      	ldr	r2, [pc, #376]	@ (8008438 <HAL_TIM_ConfigClockSource+0x238>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	f200 809e 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 80082c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082c8:	f000 8091 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 80082cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082d0:	f200 8096 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 80082d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082d8:	f000 8089 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 80082dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e0:	f200 808e 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 80082e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e8:	d03e      	beq.n	8008368 <HAL_TIM_ConfigClockSource+0x168>
 80082ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ee:	f200 8087 	bhi.w	8008400 <HAL_TIM_ConfigClockSource+0x200>
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f6:	f000 8086 	beq.w	8008406 <HAL_TIM_ConfigClockSource+0x206>
 80082fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082fe:	d87f      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008300:	2b70      	cmp	r3, #112	@ 0x70
 8008302:	d01a      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x13a>
 8008304:	2b70      	cmp	r3, #112	@ 0x70
 8008306:	d87b      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008308:	2b60      	cmp	r3, #96	@ 0x60
 800830a:	d050      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x1ae>
 800830c:	2b60      	cmp	r3, #96	@ 0x60
 800830e:	d877      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008310:	2b50      	cmp	r3, #80	@ 0x50
 8008312:	d03c      	beq.n	800838e <HAL_TIM_ConfigClockSource+0x18e>
 8008314:	2b50      	cmp	r3, #80	@ 0x50
 8008316:	d873      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008318:	2b40      	cmp	r3, #64	@ 0x40
 800831a:	d058      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x1ce>
 800831c:	2b40      	cmp	r3, #64	@ 0x40
 800831e:	d86f      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008320:	2b30      	cmp	r3, #48	@ 0x30
 8008322:	d064      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 8008324:	2b30      	cmp	r3, #48	@ 0x30
 8008326:	d86b      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008328:	2b20      	cmp	r3, #32
 800832a:	d060      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 800832c:	2b20      	cmp	r3, #32
 800832e:	d867      	bhi.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d05c      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 8008334:	2b10      	cmp	r3, #16
 8008336:	d05a      	beq.n	80083ee <HAL_TIM_ConfigClockSource+0x1ee>
 8008338:	e062      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800834a:	f000 fba3 	bl	8008a94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800835c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	609a      	str	r2, [r3, #8]
      break;
 8008366:	e04f      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008378:	f000 fb8c 	bl	8008a94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800838a:	609a      	str	r2, [r3, #8]
      break;
 800838c:	e03c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800839a:	461a      	mov	r2, r3
 800839c:	f000 fafe 	bl	800899c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2150      	movs	r1, #80	@ 0x50
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fb57 	bl	8008a5a <TIM_ITRx_SetConfig>
      break;
 80083ac:	e02c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ba:	461a      	mov	r2, r3
 80083bc:	f000 fb1d 	bl	80089fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2160      	movs	r1, #96	@ 0x60
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fb47 	bl	8008a5a <TIM_ITRx_SetConfig>
      break;
 80083cc:	e01c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083da:	461a      	mov	r2, r3
 80083dc:	f000 fade 	bl	800899c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2140      	movs	r1, #64	@ 0x40
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fb37 	bl	8008a5a <TIM_ITRx_SetConfig>
      break;
 80083ec:	e00c      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f000 fb2e 	bl	8008a5a <TIM_ITRx_SetConfig>
      break;
 80083fe:	e003      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
      break;
 8008404:	e000      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8008406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	00100070 	.word	0x00100070
 8008428:	00100060 	.word	0x00100060
 800842c:	00100050 	.word	0x00100050
 8008430:	00100040 	.word	0x00100040
 8008434:	00100030 	.word	0x00100030
 8008438:	00100020 	.word	0x00100020

0800843c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a2c      	ldr	r2, [pc, #176]	@ (8008500 <TIM_Base_SetConfig+0xc4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d007      	beq.n	8008464 <TIM_Base_SetConfig+0x28>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845a:	d003      	beq.n	8008464 <TIM_Base_SetConfig+0x28>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a29      	ldr	r2, [pc, #164]	@ (8008504 <TIM_Base_SetConfig+0xc8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d108      	bne.n	8008476 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a21      	ldr	r2, [pc, #132]	@ (8008500 <TIM_Base_SetConfig+0xc4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d007      	beq.n	800848e <TIM_Base_SetConfig+0x52>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008484:	d003      	beq.n	800848e <TIM_Base_SetConfig+0x52>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a1e      	ldr	r2, [pc, #120]	@ (8008504 <TIM_Base_SetConfig+0xc8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d108      	bne.n	80084a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a0e      	ldr	r2, [pc, #56]	@ (8008500 <TIM_Base_SetConfig+0xc4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d103      	bne.n	80084d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d105      	bne.n	80084f2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f023 0201 	bic.w	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	611a      	str	r2, [r3, #16]
  }
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40012c00 	.word	0x40012c00
 8008504:	40000400 	.word	0x40000400

08008508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	f023 0201 	bic.w	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f023 0302 	bic.w	r3, r3, #2
 8008554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1c      	ldr	r2, [pc, #112]	@ (80085d4 <TIM_OC1_SetConfig+0xcc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d10c      	bne.n	8008582 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f023 0308 	bic.w	r3, r3, #8
 800856e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 0304 	bic.w	r3, r3, #4
 8008580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a13      	ldr	r2, [pc, #76]	@ (80085d4 <TIM_OC1_SetConfig+0xcc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d111      	bne.n	80085ae <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	621a      	str	r2, [r3, #32]
}
 80085c8:	bf00      	nop
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00

080085d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	f023 0210 	bic.w	r2, r3, #16
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800860a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0320 	bic.w	r3, r3, #32
 8008626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a1e      	ldr	r2, [pc, #120]	@ (80086b0 <TIM_OC2_SetConfig+0xd8>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d10d      	bne.n	8008658 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a15      	ldr	r2, [pc, #84]	@ (80086b0 <TIM_OC2_SetConfig+0xd8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d113      	bne.n	8008688 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800866e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40012c00 	.word	0x40012c00

080086b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1d      	ldr	r2, [pc, #116]	@ (8008788 <TIM_OC3_SetConfig+0xd4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10d      	bne.n	8008732 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800871c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a14      	ldr	r2, [pc, #80]	@ (8008788 <TIM_OC3_SetConfig+0xd4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d113      	bne.n	8008762 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	621a      	str	r2, [r3, #32]
}
 800877c:	bf00      	nop
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	40012c00 	.word	0x40012c00

0800878c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	031b      	lsls	r3, r3, #12
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008864 <TIM_OC4_SetConfig+0xd8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d10d      	bne.n	800880c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	031b      	lsls	r3, r3, #12
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800880a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a15      	ldr	r2, [pc, #84]	@ (8008864 <TIM_OC4_SetConfig+0xd8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d113      	bne.n	800883c <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800881a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008822:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	019b      	lsls	r3, r3, #6
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	019b      	lsls	r3, r3, #6
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	4313      	orrs	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	40012c00 	.word	0x40012c00

08008868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80088ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a0f      	ldr	r2, [pc, #60]	@ (80088fc <TIM_OC5_SetConfig+0x94>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d109      	bne.n	80088d6 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	621a      	str	r2, [r3, #32]
}
 80088f0:	bf00      	nop
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40012c00 	.word	0x40012c00

08008900 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800892e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	051b      	lsls	r3, r3, #20
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	4313      	orrs	r3, r2
 8008952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a10      	ldr	r2, [pc, #64]	@ (8008998 <TIM_OC6_SetConfig+0x98>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d109      	bne.n	8008970 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	029b      	lsls	r3, r3, #10
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	40012c00 	.word	0x40012c00

0800899c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0201 	bic.w	r2, r3, #1
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f023 030a 	bic.w	r3, r3, #10
 80089d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	621a      	str	r2, [r3, #32]
}
 80089ee:	bf00      	nop
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b087      	sub	sp, #28
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	f023 0210 	bic.w	r2, r3, #16
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	031b      	lsls	r3, r3, #12
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	621a      	str	r2, [r3, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	f043 0307 	orr.w	r3, r3, #7
 8008a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	609a      	str	r2, [r3, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	021a      	lsls	r2, r3, #8
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	609a      	str	r2, [r3, #8]
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6a1a      	ldr	r2, [r3, #32]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	43db      	mvns	r3, r3
 8008af6:	401a      	ands	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a1a      	ldr	r2, [r3, #32]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	fa01 f303 	lsl.w	r3, r1, r3
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e051      	b.n	8008bdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a22      	ldr	r2, [pc, #136]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d108      	bne.n	8008b74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a14      	ldr	r2, [pc, #80]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d009      	beq.n	8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba4:	d004      	beq.n	8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a10      	ldr	r2, [pc, #64]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d10c      	bne.n	8008bca <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	40012c00 	.word	0x40012c00
 8008bec:	40000400 	.word	0x40000400

08008bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e06e      	b.n	8008cea <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	041b      	lsls	r3, r3, #16
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a17      	ldr	r2, [pc, #92]	@ (8008cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d11c      	bne.n	8008cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca8:	051b      	lsls	r3, r3, #20
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40012c00 	.word	0x40012c00

08008cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e042      	b.n	8008d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7f9 f9c3 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2224      	movs	r2, #36	@ 0x24
 8008d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0201 	bic.w	r2, r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa44 	bl	80091d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f8c3 	bl	8008ed8 <UART_SetConfig>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e01b      	b.n	8008d94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fac3 	bl	8009318 <UART_CheckIdleState>
 8008d92:	4603      	mov	r3, r0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	@ 0x28
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	f040 808b 	bne.w	8008ece <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <HAL_UART_Transmit+0x28>
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e083      	b.n	8008ed0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dd2:	2b80      	cmp	r3, #128	@ 0x80
 8008dd4:	d107      	bne.n	8008de6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008de4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2221      	movs	r2, #33	@ 0x21
 8008df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008df6:	f7f9 fc05 	bl	8002604 <HAL_GetTick>
 8008dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	88fa      	ldrh	r2, [r7, #6]
 8008e00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	88fa      	ldrh	r2, [r7, #6]
 8008e08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e14:	d108      	bne.n	8008e28 <HAL_UART_Transmit+0x8c>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e003      	b.n	8008e30 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e30:	e030      	b.n	8008e94 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2180      	movs	r1, #128	@ 0x80
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fb15 	bl	800946c <UART_WaitOnFlagUntilTimeout>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e03d      	b.n	8008ed0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10b      	bne.n	8008e72 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	61bb      	str	r3, [r7, #24]
 8008e70:	e007      	b.n	8008e82 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	781a      	ldrb	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1c8      	bne.n	8008e32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2140      	movs	r1, #64	@ 0x40
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 fade 	bl	800946c <UART_WaitOnFlagUntilTimeout>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e006      	b.n	8008ed0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e000      	b.n	8008ed0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008ece:	2302      	movs	r3, #2
  }
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3720      	adds	r7, #32
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008edc:	b094      	sub	sp, #80	@ 0x50
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	498a      	ldr	r1, [pc, #552]	@ (8009130 <UART_SetConfig+0x258>)
 8008f08:	4019      	ands	r1, r3
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f10:	430b      	orrs	r3, r1
 8008f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	68d9      	ldr	r1, [r3, #12]
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	ea40 0301 	orr.w	r3, r0, r1
 8008f2a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b7f      	ldr	r3, [pc, #508]	@ (8009134 <UART_SetConfig+0x25c>)
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d004      	beq.n	8008f46 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	6a1a      	ldr	r2, [r3, #32]
 8008f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f42:	4313      	orrs	r3, r2
 8008f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008f50:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f5a:	430b      	orrs	r3, r1
 8008f5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	f023 000f 	bic.w	r0, r3, #15
 8008f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	ea40 0301 	orr.w	r3, r0, r1
 8008f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8009138 <UART_SetConfig+0x260>)
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d102      	bne.n	8008f86 <UART_SetConfig+0xae>
 8008f80:	2301      	movs	r3, #1
 8008f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f84:	e01a      	b.n	8008fbc <UART_SetConfig+0xe4>
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800913c <UART_SetConfig+0x264>)
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d102      	bne.n	8008f96 <UART_SetConfig+0xbe>
 8008f90:	2302      	movs	r3, #2
 8008f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f94:	e012      	b.n	8008fbc <UART_SetConfig+0xe4>
 8008f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4b69      	ldr	r3, [pc, #420]	@ (8009140 <UART_SetConfig+0x268>)
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d102      	bne.n	8008fa6 <UART_SetConfig+0xce>
 8008fa0:	2304      	movs	r3, #4
 8008fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa4:	e00a      	b.n	8008fbc <UART_SetConfig+0xe4>
 8008fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	4b62      	ldr	r3, [pc, #392]	@ (8009134 <UART_SetConfig+0x25c>)
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d103      	bne.n	8008fb8 <UART_SetConfig+0xe0>
 8008fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fb6:	e001      	b.n	8008fbc <UART_SetConfig+0xe4>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8009134 <UART_SetConfig+0x25c>)
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d171      	bne.n	80090aa <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc8:	2200      	movs	r2, #0
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fd2:	f7fd f929 	bl	8006228 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fd6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 80e2 	beq.w	80091a4 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe4:	4a57      	ldr	r2, [pc, #348]	@ (8009144 <UART_SetConfig+0x26c>)
 8008fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fea:	461a      	mov	r2, r3
 8008fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ff2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	4413      	add	r3, r2
 8008ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009000:	429a      	cmp	r2, r3
 8009002:	d305      	bcc.n	8009010 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800900a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800900c:	429a      	cmp	r2, r3
 800900e:	d903      	bls.n	8009018 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009016:	e0c5      	b.n	80091a4 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800901a:	2200      	movs	r2, #0
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	61fa      	str	r2, [r7, #28]
 8009020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009024:	4a47      	ldr	r2, [pc, #284]	@ (8009144 <UART_SetConfig+0x26c>)
 8009026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800902a:	b29b      	uxth	r3, r3
 800902c:	2200      	movs	r2, #0
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	617a      	str	r2, [r7, #20]
 8009032:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009036:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800903a:	f7f7 fe39 	bl	8000cb0 <__aeabi_uldivmod>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	f04f 0300 	mov.w	r3, #0
 800904e:	020b      	lsls	r3, r1, #8
 8009050:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009054:	0202      	lsls	r2, r0, #8
 8009056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009058:	6849      	ldr	r1, [r1, #4]
 800905a:	0849      	lsrs	r1, r1, #1
 800905c:	2000      	movs	r0, #0
 800905e:	460c      	mov	r4, r1
 8009060:	4605      	mov	r5, r0
 8009062:	eb12 0804 	adds.w	r8, r2, r4
 8009066:	eb43 0905 	adc.w	r9, r3, r5
 800906a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	60fa      	str	r2, [r7, #12]
 8009074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 fe18 	bl	8000cb0 <__aeabi_uldivmod>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4613      	mov	r3, r2
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800908e:	d308      	bcc.n	80090a2 <UART_SetConfig+0x1ca>
 8009090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009096:	d204      	bcs.n	80090a2 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8009098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800909e:	60da      	str	r2, [r3, #12]
 80090a0:	e080      	b.n	80091a4 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80090a8:	e07c      	b.n	80091a4 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090b2:	d149      	bne.n	8009148 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b6:	2200      	movs	r2, #0
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090c0:	f7fd f8b2 	bl	8006228 <HAL_RCCEx_GetPeriphCLKFreq>
 80090c4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d06b      	beq.n	80091a4 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009144 <UART_SetConfig+0x26c>)
 80090d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090da:	fbb3 f3f2 	udiv	r3, r3, r2
 80090de:	005a      	lsls	r2, r3, #1
 80090e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	085b      	lsrs	r3, r3, #1
 80090e6:	441a      	add	r2, r3
 80090e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f4:	2b0f      	cmp	r3, #15
 80090f6:	d916      	bls.n	8009126 <UART_SetConfig+0x24e>
 80090f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090fe:	d212      	bcs.n	8009126 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009102:	b29b      	uxth	r3, r3
 8009104:	f023 030f 	bic.w	r3, r3, #15
 8009108:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800910a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800910c:	085b      	lsrs	r3, r3, #1
 800910e:	b29b      	uxth	r3, r3
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	b29a      	uxth	r2, r3
 8009116:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009118:	4313      	orrs	r3, r2
 800911a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009122:	60da      	str	r2, [r3, #12]
 8009124:	e03e      	b.n	80091a4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800912c:	e03a      	b.n	80091a4 <UART_SetConfig+0x2cc>
 800912e:	bf00      	nop
 8009130:	cfff69f3 	.word	0xcfff69f3
 8009134:	44002400 	.word	0x44002400
 8009138:	40013800 	.word	0x40013800
 800913c:	40004400 	.word	0x40004400
 8009140:	40004800 	.word	0x40004800
 8009144:	0800dfbc 	.word	0x0800dfbc
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800914a:	2200      	movs	r2, #0
 800914c:	469a      	mov	sl, r3
 800914e:	4693      	mov	fp, r2
 8009150:	4650      	mov	r0, sl
 8009152:	4659      	mov	r1, fp
 8009154:	f7fd f868 	bl	8006228 <HAL_RCCEx_GetPeriphCLKFreq>
 8009158:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800915a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d021      	beq.n	80091a4 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009164:	4a1a      	ldr	r2, [pc, #104]	@ (80091d0 <UART_SetConfig+0x2f8>)
 8009166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800916a:	461a      	mov	r2, r3
 800916c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800916e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	441a      	add	r2, r3
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d909      	bls.n	800919e <UART_SetConfig+0x2c6>
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009190:	d205      	bcs.n	800919e <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009194:	b29a      	uxth	r2, r3
 8009196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60da      	str	r2, [r3, #12]
 800919c:	e002      	b.n	80091a4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	2201      	movs	r2, #1
 80091a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	2201      	movs	r2, #1
 80091b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b6:	2200      	movs	r2, #0
 80091b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091bc:	2200      	movs	r2, #0
 80091be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3750      	adds	r7, #80	@ 0x50
 80091c8:	46bd      	mov	sp, r7
 80091ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ce:	bf00      	nop
 80091d0:	0800dfbc 	.word	0x0800dfbc

080091d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01a      	beq.n	80092ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092d2:	d10a      	bne.n	80092ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	605a      	str	r2, [r3, #4]
  }
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b098      	sub	sp, #96	@ 0x60
 800931c:	af02      	add	r7, sp, #8
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009328:	f7f9 f96c 	bl	8002604 <HAL_GetTick>
 800932c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0308 	and.w	r3, r3, #8
 8009338:	2b08      	cmp	r3, #8
 800933a:	d12f      	bne.n	800939c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800933c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009344:	2200      	movs	r2, #0
 8009346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f88e 	bl	800946c <UART_WaitOnFlagUntilTimeout>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d022      	beq.n	800939c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800936a:	653b      	str	r3, [r7, #80]	@ 0x50
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009374:	647b      	str	r3, [r7, #68]	@ 0x44
 8009376:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800937a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e6      	bne.n	8009356 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2220      	movs	r2, #32
 800938c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e063      	b.n	8009464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d149      	bne.n	800943e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093b2:	2200      	movs	r2, #0
 80093b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f857 	bl	800946c <UART_WaitOnFlagUntilTimeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d03c      	beq.n	800943e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	623b      	str	r3, [r7, #32]
   return(result);
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80093e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e6      	bne.n	80093c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	60fb      	str	r3, [r7, #12]
   return(result);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009416:	61fa      	str	r2, [r7, #28]
 8009418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	69b9      	ldr	r1, [r7, #24]
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	617b      	str	r3, [r7, #20]
   return(result);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e5      	bne.n	80093f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e012      	b.n	8009464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3758      	adds	r7, #88	@ 0x58
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	4613      	mov	r3, r2
 800947a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947c:	e04f      	b.n	800951e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d04b      	beq.n	800951e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009486:	f7f9 f8bd 	bl	8002604 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	429a      	cmp	r2, r3
 8009494:	d302      	bcc.n	800949c <UART_WaitOnFlagUntilTimeout+0x30>
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e04e      	b.n	800953e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d037      	beq.n	800951e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b80      	cmp	r3, #128	@ 0x80
 80094b2:	d034      	beq.n	800951e <UART_WaitOnFlagUntilTimeout+0xb2>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b40      	cmp	r3, #64	@ 0x40
 80094b8:	d031      	beq.n	800951e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	f003 0308 	and.w	r3, r3, #8
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d110      	bne.n	80094ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2208      	movs	r2, #8
 80094ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f838 	bl	8009546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2208      	movs	r2, #8
 80094da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e029      	b.n	800953e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094f8:	d111      	bne.n	800951e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f81e 	bl	8009546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e00f      	b.n	800953e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69da      	ldr	r2, [r3, #28]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4013      	ands	r3, r2
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	bf0c      	ite	eq
 800952e:	2301      	moveq	r3, #1
 8009530:	2300      	movne	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	429a      	cmp	r2, r3
 800953a:	d0a0      	beq.n	800947e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009546:	b480      	push	{r7}
 8009548:	b095      	sub	sp, #84	@ 0x54
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956c:	643b      	str	r3, [r7, #64]	@ 0x40
 800956e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e6      	bne.n	800954e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3308      	adds	r3, #8
 8009586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009596:	f023 0301 	bic.w	r3, r3, #1
 800959a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095ac:	e841 2300 	strex	r3, r2, [r1]
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1e3      	bne.n	8009580 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d118      	bne.n	80095f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f023 0310 	bic.w	r3, r3, #16
 80095d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095de:	61bb      	str	r3, [r7, #24]
 80095e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	6979      	ldr	r1, [r7, #20]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	613b      	str	r3, [r7, #16]
   return(result);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e6      	bne.n	80095c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009606:	bf00      	nop
 8009608:	3754      	adds	r7, #84	@ 0x54
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009612:	b480      	push	{r7}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <HAL_UARTEx_DisableFifoMode+0x16>
 8009624:	2302      	movs	r3, #2
 8009626:	e027      	b.n	8009678 <HAL_UARTEx_DisableFifoMode+0x66>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2224      	movs	r2, #36	@ 0x24
 8009634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0201 	bic.w	r2, r2, #1
 800964e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009698:	2302      	movs	r3, #2
 800969a:	e02d      	b.n	80096f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2224      	movs	r2, #36	@ 0x24
 80096a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0201 	bic.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f84f 	bl	800977c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009714:	2302      	movs	r3, #2
 8009716:	e02d      	b.n	8009774 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2224      	movs	r2, #36	@ 0x24
 8009724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f022 0201 	bic.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f811 	bl	800977c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2220      	movs	r2, #32
 8009766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009788:	2b00      	cmp	r3, #0
 800978a:	d108      	bne.n	800979e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800979c:	e031      	b.n	8009802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800979e:	2308      	movs	r3, #8
 80097a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097a2:	2308      	movs	r3, #8
 80097a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	0e5b      	lsrs	r3, r3, #25
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 0307 	and.w	r3, r3, #7
 80097b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	0f5b      	lsrs	r3, r3, #29
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	7b3a      	ldrb	r2, [r7, #12]
 80097ca:	4911      	ldr	r1, [pc, #68]	@ (8009810 <UARTEx_SetNbDataToProcess+0x94>)
 80097cc:	5c8a      	ldrb	r2, [r1, r2]
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097d2:	7b3a      	ldrb	r2, [r7, #12]
 80097d4:	490f      	ldr	r1, [pc, #60]	@ (8009814 <UARTEx_SetNbDataToProcess+0x98>)
 80097d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097dc:	b29a      	uxth	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	7b7a      	ldrb	r2, [r7, #13]
 80097e8:	4909      	ldr	r1, [pc, #36]	@ (8009810 <UARTEx_SetNbDataToProcess+0x94>)
 80097ea:	5c8a      	ldrb	r2, [r1, r2]
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097f0:	7b7a      	ldrb	r2, [r7, #13]
 80097f2:	4908      	ldr	r1, [pc, #32]	@ (8009814 <UARTEx_SetNbDataToProcess+0x98>)
 80097f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	0800dfd4 	.word	0x0800dfd4
 8009814:	0800dfdc 	.word	0x0800dfdc

08009818 <__cvt>:
 8009818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	ec57 6b10 	vmov	r6, r7, d0
 8009820:	2f00      	cmp	r7, #0
 8009822:	460c      	mov	r4, r1
 8009824:	4619      	mov	r1, r3
 8009826:	463b      	mov	r3, r7
 8009828:	bfb4      	ite	lt
 800982a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800982e:	2300      	movge	r3, #0
 8009830:	4691      	mov	r9, r2
 8009832:	bfbf      	itttt	lt
 8009834:	4632      	movlt	r2, r6
 8009836:	461f      	movlt	r7, r3
 8009838:	232d      	movlt	r3, #45	@ 0x2d
 800983a:	4616      	movlt	r6, r2
 800983c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009840:	700b      	strb	r3, [r1, #0]
 8009842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009844:	f023 0820 	bic.w	r8, r3, #32
 8009848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800984c:	d005      	beq.n	800985a <__cvt+0x42>
 800984e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009852:	d100      	bne.n	8009856 <__cvt+0x3e>
 8009854:	3401      	adds	r4, #1
 8009856:	2102      	movs	r1, #2
 8009858:	e000      	b.n	800985c <__cvt+0x44>
 800985a:	2103      	movs	r1, #3
 800985c:	ab03      	add	r3, sp, #12
 800985e:	4622      	mov	r2, r4
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	ab02      	add	r3, sp, #8
 8009864:	ec47 6b10 	vmov	d0, r6, r7
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	4653      	mov	r3, sl
 800986c:	f001 f89c 	bl	800a9a8 <_dtoa_r>
 8009870:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009874:	4605      	mov	r5, r0
 8009876:	d119      	bne.n	80098ac <__cvt+0x94>
 8009878:	f019 0f01 	tst.w	r9, #1
 800987c:	d00e      	beq.n	800989c <__cvt+0x84>
 800987e:	eb00 0904 	add.w	r9, r0, r4
 8009882:	2200      	movs	r2, #0
 8009884:	2300      	movs	r3, #0
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	f7f7 f931 	bl	8000af0 <__aeabi_dcmpeq>
 800988e:	b108      	cbz	r0, 8009894 <__cvt+0x7c>
 8009890:	f8cd 900c 	str.w	r9, [sp, #12]
 8009894:	2230      	movs	r2, #48	@ 0x30
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	454b      	cmp	r3, r9
 800989a:	d31e      	bcc.n	80098da <__cvt+0xc2>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	4628      	mov	r0, r5
 80098a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098a2:	1b5b      	subs	r3, r3, r5
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	b004      	add	sp, #16
 80098a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098b0:	eb00 0904 	add.w	r9, r0, r4
 80098b4:	d1e5      	bne.n	8009882 <__cvt+0x6a>
 80098b6:	7803      	ldrb	r3, [r0, #0]
 80098b8:	2b30      	cmp	r3, #48	@ 0x30
 80098ba:	d10a      	bne.n	80098d2 <__cvt+0xba>
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f7 f914 	bl	8000af0 <__aeabi_dcmpeq>
 80098c8:	b918      	cbnz	r0, 80098d2 <__cvt+0xba>
 80098ca:	f1c4 0401 	rsb	r4, r4, #1
 80098ce:	f8ca 4000 	str.w	r4, [sl]
 80098d2:	f8da 3000 	ldr.w	r3, [sl]
 80098d6:	4499      	add	r9, r3
 80098d8:	e7d3      	b.n	8009882 <__cvt+0x6a>
 80098da:	1c59      	adds	r1, r3, #1
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	701a      	strb	r2, [r3, #0]
 80098e0:	e7d9      	b.n	8009896 <__cvt+0x7e>

080098e2 <__exponent>:
 80098e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098e4:	2900      	cmp	r1, #0
 80098e6:	7002      	strb	r2, [r0, #0]
 80098e8:	bfba      	itte	lt
 80098ea:	4249      	neglt	r1, r1
 80098ec:	232d      	movlt	r3, #45	@ 0x2d
 80098ee:	232b      	movge	r3, #43	@ 0x2b
 80098f0:	2909      	cmp	r1, #9
 80098f2:	7043      	strb	r3, [r0, #1]
 80098f4:	dd28      	ble.n	8009948 <__exponent+0x66>
 80098f6:	f10d 0307 	add.w	r3, sp, #7
 80098fa:	270a      	movs	r7, #10
 80098fc:	461d      	mov	r5, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	3b01      	subs	r3, #1
 8009902:	fbb1 f6f7 	udiv	r6, r1, r7
 8009906:	fb07 1416 	mls	r4, r7, r6, r1
 800990a:	3430      	adds	r4, #48	@ 0x30
 800990c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009910:	460c      	mov	r4, r1
 8009912:	4631      	mov	r1, r6
 8009914:	2c63      	cmp	r4, #99	@ 0x63
 8009916:	dcf2      	bgt.n	80098fe <__exponent+0x1c>
 8009918:	3130      	adds	r1, #48	@ 0x30
 800991a:	1e94      	subs	r4, r2, #2
 800991c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009920:	1c41      	adds	r1, r0, #1
 8009922:	4623      	mov	r3, r4
 8009924:	42ab      	cmp	r3, r5
 8009926:	d30a      	bcc.n	800993e <__exponent+0x5c>
 8009928:	f10d 0309 	add.w	r3, sp, #9
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	42ac      	cmp	r4, r5
 8009930:	bf88      	it	hi
 8009932:	2300      	movhi	r3, #0
 8009934:	3302      	adds	r3, #2
 8009936:	4403      	add	r3, r0
 8009938:	1a18      	subs	r0, r3, r0
 800993a:	b003      	add	sp, #12
 800993c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009942:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009946:	e7ed      	b.n	8009924 <__exponent+0x42>
 8009948:	2330      	movs	r3, #48	@ 0x30
 800994a:	3130      	adds	r1, #48	@ 0x30
 800994c:	7083      	strb	r3, [r0, #2]
 800994e:	1d03      	adds	r3, r0, #4
 8009950:	70c1      	strb	r1, [r0, #3]
 8009952:	e7f1      	b.n	8009938 <__exponent+0x56>

08009954 <_printf_float>:
 8009954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	b08d      	sub	sp, #52	@ 0x34
 800995a:	460c      	mov	r4, r1
 800995c:	4616      	mov	r6, r2
 800995e:	461f      	mov	r7, r3
 8009960:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009964:	4605      	mov	r5, r0
 8009966:	f000 ff03 	bl	800a770 <_localeconv_r>
 800996a:	6803      	ldr	r3, [r0, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	f7f6 fc92 	bl	8000298 <strlen>
 8009974:	2300      	movs	r3, #0
 8009976:	9005      	str	r0, [sp, #20]
 8009978:	930a      	str	r3, [sp, #40]	@ 0x28
 800997a:	f8d8 3000 	ldr.w	r3, [r8]
 800997e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009982:	3307      	adds	r3, #7
 8009984:	f8d4 b000 	ldr.w	fp, [r4]
 8009988:	f023 0307 	bic.w	r3, r3, #7
 800998c:	f103 0208 	add.w	r2, r3, #8
 8009990:	f8c8 2000 	str.w	r2, [r8]
 8009994:	f04f 32ff 	mov.w	r2, #4294967295
 8009998:	e9d3 8900 	ldrd	r8, r9, [r3]
 800999c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80099a4:	9307      	str	r3, [sp, #28]
 80099a6:	4b9d      	ldr	r3, [pc, #628]	@ (8009c1c <_printf_float+0x2c8>)
 80099a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80099b0:	f7f7 f8d0 	bl	8000b54 <__aeabi_dcmpun>
 80099b4:	bb70      	cbnz	r0, 8009a14 <_printf_float+0xc0>
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	4b98      	ldr	r3, [pc, #608]	@ (8009c1c <_printf_float+0x2c8>)
 80099bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099c0:	f7f7 f8aa 	bl	8000b18 <__aeabi_dcmple>
 80099c4:	bb30      	cbnz	r0, 8009a14 <_printf_float+0xc0>
 80099c6:	2200      	movs	r2, #0
 80099c8:	2300      	movs	r3, #0
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f7 f899 	bl	8000b04 <__aeabi_dcmplt>
 80099d2:	b110      	cbz	r0, 80099da <_printf_float+0x86>
 80099d4:	232d      	movs	r3, #45	@ 0x2d
 80099d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099da:	4a91      	ldr	r2, [pc, #580]	@ (8009c20 <_printf_float+0x2cc>)
 80099dc:	4b91      	ldr	r3, [pc, #580]	@ (8009c24 <_printf_float+0x2d0>)
 80099de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099e2:	bf94      	ite	ls
 80099e4:	4690      	movls	r8, r2
 80099e6:	4698      	movhi	r8, r3
 80099e8:	2303      	movs	r3, #3
 80099ea:	f04f 0900 	mov.w	r9, #0
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	f02b 0304 	bic.w	r3, fp, #4
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	4633      	mov	r3, r6
 80099f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	9700      	str	r7, [sp, #0]
 8009a00:	f000 f9d2 	bl	8009da8 <_printf_common>
 8009a04:	3001      	adds	r0, #1
 8009a06:	f040 808d 	bne.w	8009b24 <_printf_float+0x1d0>
 8009a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0e:	b00d      	add	sp, #52	@ 0x34
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	4642      	mov	r2, r8
 8009a16:	464b      	mov	r3, r9
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f89a 	bl	8000b54 <__aeabi_dcmpun>
 8009a20:	b140      	cbz	r0, 8009a34 <_printf_float+0xe0>
 8009a22:	464b      	mov	r3, r9
 8009a24:	4a80      	ldr	r2, [pc, #512]	@ (8009c28 <_printf_float+0x2d4>)
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bfbc      	itt	lt
 8009a2a:	232d      	movlt	r3, #45	@ 0x2d
 8009a2c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a30:	4b7e      	ldr	r3, [pc, #504]	@ (8009c2c <_printf_float+0x2d8>)
 8009a32:	e7d4      	b.n	80099de <_printf_float+0x8a>
 8009a34:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a38:	6863      	ldr	r3, [r4, #4]
 8009a3a:	9206      	str	r2, [sp, #24]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	d13b      	bne.n	8009ab8 <_printf_float+0x164>
 8009a40:	2306      	movs	r3, #6
 8009a42:	6063      	str	r3, [r4, #4]
 8009a44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a52:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a56:	ab09      	add	r3, sp, #36	@ 0x24
 8009a58:	ec49 8b10 	vmov	d0, r8, r9
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a62:	6861      	ldr	r1, [r4, #4]
 8009a64:	f7ff fed8 	bl	8009818 <__cvt>
 8009a68:	9b06      	ldr	r3, [sp, #24]
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a6e:	2b47      	cmp	r3, #71	@ 0x47
 8009a70:	d129      	bne.n	8009ac6 <_printf_float+0x172>
 8009a72:	1cc8      	adds	r0, r1, #3
 8009a74:	db02      	blt.n	8009a7c <_printf_float+0x128>
 8009a76:	6863      	ldr	r3, [r4, #4]
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	dd41      	ble.n	8009b00 <_printf_float+0x1ac>
 8009a7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a80:	fa5f fa8a 	uxtb.w	sl, sl
 8009a84:	3901      	subs	r1, #1
 8009a86:	4652      	mov	r2, sl
 8009a88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a8e:	f7ff ff28 	bl	80098e2 <__exponent>
 8009a92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a94:	4681      	mov	r9, r0
 8009a96:	1813      	adds	r3, r2, r0
 8009a98:	2a01      	cmp	r2, #1
 8009a9a:	6123      	str	r3, [r4, #16]
 8009a9c:	dc02      	bgt.n	8009aa4 <_printf_float+0x150>
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	07d2      	lsls	r2, r2, #31
 8009aa2:	d501      	bpl.n	8009aa8 <_printf_float+0x154>
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	6123      	str	r3, [r4, #16]
 8009aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0a2      	beq.n	80099f6 <_printf_float+0xa2>
 8009ab0:	232d      	movs	r3, #45	@ 0x2d
 8009ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ab6:	e79e      	b.n	80099f6 <_printf_float+0xa2>
 8009ab8:	9a06      	ldr	r2, [sp, #24]
 8009aba:	2a47      	cmp	r2, #71	@ 0x47
 8009abc:	d1c2      	bne.n	8009a44 <_printf_float+0xf0>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1c0      	bne.n	8009a44 <_printf_float+0xf0>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e7bd      	b.n	8009a42 <_printf_float+0xee>
 8009ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009aca:	d9db      	bls.n	8009a84 <_printf_float+0x130>
 8009acc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ad0:	d118      	bne.n	8009b04 <_printf_float+0x1b0>
 8009ad2:	2900      	cmp	r1, #0
 8009ad4:	6863      	ldr	r3, [r4, #4]
 8009ad6:	dd0b      	ble.n	8009af0 <_printf_float+0x19c>
 8009ad8:	6121      	str	r1, [r4, #16]
 8009ada:	b913      	cbnz	r3, 8009ae2 <_printf_float+0x18e>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	07d0      	lsls	r0, r2, #31
 8009ae0:	d502      	bpl.n	8009ae8 <_printf_float+0x194>
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	440b      	add	r3, r1
 8009ae6:	6123      	str	r3, [r4, #16]
 8009ae8:	f04f 0900 	mov.w	r9, #0
 8009aec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009aee:	e7db      	b.n	8009aa8 <_printf_float+0x154>
 8009af0:	b913      	cbnz	r3, 8009af8 <_printf_float+0x1a4>
 8009af2:	6822      	ldr	r2, [r4, #0]
 8009af4:	07d2      	lsls	r2, r2, #31
 8009af6:	d501      	bpl.n	8009afc <_printf_float+0x1a8>
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7f4      	b.n	8009ae6 <_printf_float+0x192>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7f2      	b.n	8009ae6 <_printf_float+0x192>
 8009b00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b06:	4299      	cmp	r1, r3
 8009b08:	db05      	blt.n	8009b16 <_printf_float+0x1c2>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	6121      	str	r1, [r4, #16]
 8009b0e:	07d8      	lsls	r0, r3, #31
 8009b10:	d5ea      	bpl.n	8009ae8 <_printf_float+0x194>
 8009b12:	1c4b      	adds	r3, r1, #1
 8009b14:	e7e7      	b.n	8009ae6 <_printf_float+0x192>
 8009b16:	2900      	cmp	r1, #0
 8009b18:	bfd4      	ite	le
 8009b1a:	f1c1 0202 	rsble	r2, r1, #2
 8009b1e:	2201      	movgt	r2, #1
 8009b20:	4413      	add	r3, r2
 8009b22:	e7e0      	b.n	8009ae6 <_printf_float+0x192>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	055a      	lsls	r2, r3, #21
 8009b28:	d407      	bmi.n	8009b3a <_printf_float+0x1e6>
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	d12b      	bne.n	8009b90 <_printf_float+0x23c>
 8009b38:	e767      	b.n	8009a0a <_printf_float+0xb6>
 8009b3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b3e:	f240 80dd 	bls.w	8009cfc <_printf_float+0x3a8>
 8009b42:	2200      	movs	r2, #0
 8009b44:	2300      	movs	r3, #0
 8009b46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b4a:	f7f6 ffd1 	bl	8000af0 <__aeabi_dcmpeq>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d033      	beq.n	8009bba <_printf_float+0x266>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4a36      	ldr	r2, [pc, #216]	@ (8009c30 <_printf_float+0x2dc>)
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f43f af54 	beq.w	8009a0a <_printf_float+0xb6>
 8009b62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b66:	4543      	cmp	r3, r8
 8009b68:	db02      	blt.n	8009b70 <_printf_float+0x21c>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	07d8      	lsls	r0, r3, #31
 8009b6e:	d50f      	bpl.n	8009b90 <_printf_float+0x23c>
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f af45 	beq.w	8009a0a <_printf_float+0xb6>
 8009b80:	f04f 0900 	mov.w	r9, #0
 8009b84:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b88:	f104 0a1a 	add.w	sl, r4, #26
 8009b8c:	45c8      	cmp	r8, r9
 8009b8e:	dc09      	bgt.n	8009ba4 <_printf_float+0x250>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	079b      	lsls	r3, r3, #30
 8009b94:	f100 8103 	bmi.w	8009d9e <_printf_float+0x44a>
 8009b98:	68e0      	ldr	r0, [r4, #12]
 8009b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b9c:	4298      	cmp	r0, r3
 8009b9e:	bfb8      	it	lt
 8009ba0:	4618      	movlt	r0, r3
 8009ba2:	e734      	b.n	8009a0e <_printf_float+0xba>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f43f af2b 	beq.w	8009a0a <_printf_float+0xb6>
 8009bb4:	f109 0901 	add.w	r9, r9, #1
 8009bb8:	e7e8      	b.n	8009b8c <_printf_float+0x238>
 8009bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	dc39      	bgt.n	8009c34 <_printf_float+0x2e0>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8009c30 <_printf_float+0x2dc>)
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	47b8      	blx	r7
 8009bca:	3001      	adds	r0, #1
 8009bcc:	f43f af1d 	beq.w	8009a0a <_printf_float+0xb6>
 8009bd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009bd4:	ea59 0303 	orrs.w	r3, r9, r3
 8009bd8:	d102      	bne.n	8009be0 <_printf_float+0x28c>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	07d9      	lsls	r1, r3, #31
 8009bde:	d5d7      	bpl.n	8009b90 <_printf_float+0x23c>
 8009be0:	4631      	mov	r1, r6
 8009be2:	4628      	mov	r0, r5
 8009be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009be8:	47b8      	blx	r7
 8009bea:	3001      	adds	r0, #1
 8009bec:	f43f af0d 	beq.w	8009a0a <_printf_float+0xb6>
 8009bf0:	f04f 0a00 	mov.w	sl, #0
 8009bf4:	f104 0b1a 	add.w	fp, r4, #26
 8009bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfa:	425b      	negs	r3, r3
 8009bfc:	4553      	cmp	r3, sl
 8009bfe:	dc01      	bgt.n	8009c04 <_printf_float+0x2b0>
 8009c00:	464b      	mov	r3, r9
 8009c02:	e793      	b.n	8009b2c <_printf_float+0x1d8>
 8009c04:	2301      	movs	r3, #1
 8009c06:	465a      	mov	r2, fp
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f aefb 	beq.w	8009a0a <_printf_float+0xb6>
 8009c14:	f10a 0a01 	add.w	sl, sl, #1
 8009c18:	e7ee      	b.n	8009bf8 <_printf_float+0x2a4>
 8009c1a:	bf00      	nop
 8009c1c:	7fefffff 	.word	0x7fefffff
 8009c20:	0800dfe4 	.word	0x0800dfe4
 8009c24:	0800dfe8 	.word	0x0800dfe8
 8009c28:	0800dfec 	.word	0x0800dfec
 8009c2c:	0800dff0 	.word	0x0800dff0
 8009c30:	0800dff4 	.word	0x0800dff4
 8009c34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c3a:	4553      	cmp	r3, sl
 8009c3c:	bfa8      	it	ge
 8009c3e:	4653      	movge	r3, sl
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	4699      	mov	r9, r3
 8009c44:	dc36      	bgt.n	8009cb4 <_printf_float+0x360>
 8009c46:	f04f 0b00 	mov.w	fp, #0
 8009c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c4e:	f104 021a 	add.w	r2, r4, #26
 8009c52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c54:	9306      	str	r3, [sp, #24]
 8009c56:	eba3 0309 	sub.w	r3, r3, r9
 8009c5a:	455b      	cmp	r3, fp
 8009c5c:	dc31      	bgt.n	8009cc2 <_printf_float+0x36e>
 8009c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c60:	459a      	cmp	sl, r3
 8009c62:	dc3a      	bgt.n	8009cda <_printf_float+0x386>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	07da      	lsls	r2, r3, #31
 8009c68:	d437      	bmi.n	8009cda <_printf_float+0x386>
 8009c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6c:	ebaa 0903 	sub.w	r9, sl, r3
 8009c70:	9b06      	ldr	r3, [sp, #24]
 8009c72:	ebaa 0303 	sub.w	r3, sl, r3
 8009c76:	4599      	cmp	r9, r3
 8009c78:	bfa8      	it	ge
 8009c7a:	4699      	movge	r9, r3
 8009c7c:	f1b9 0f00 	cmp.w	r9, #0
 8009c80:	dc33      	bgt.n	8009cea <_printf_float+0x396>
 8009c82:	f04f 0800 	mov.w	r8, #0
 8009c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c8a:	f104 0b1a 	add.w	fp, r4, #26
 8009c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c90:	ebaa 0303 	sub.w	r3, sl, r3
 8009c94:	eba3 0309 	sub.w	r3, r3, r9
 8009c98:	4543      	cmp	r3, r8
 8009c9a:	f77f af79 	ble.w	8009b90 <_printf_float+0x23c>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	465a      	mov	r2, fp
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b8      	blx	r7
 8009ca8:	3001      	adds	r0, #1
 8009caa:	f43f aeae 	beq.w	8009a0a <_printf_float+0xb6>
 8009cae:	f108 0801 	add.w	r8, r8, #1
 8009cb2:	e7ec      	b.n	8009c8e <_printf_float+0x33a>
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d1c2      	bne.n	8009c46 <_printf_float+0x2f2>
 8009cc0:	e6a3      	b.n	8009a0a <_printf_float+0xb6>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	9206      	str	r2, [sp, #24]
 8009cca:	47b8      	blx	r7
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f43f ae9c 	beq.w	8009a0a <_printf_float+0xb6>
 8009cd2:	f10b 0b01 	add.w	fp, fp, #1
 8009cd6:	9a06      	ldr	r2, [sp, #24]
 8009cd8:	e7bb      	b.n	8009c52 <_printf_float+0x2fe>
 8009cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d1c0      	bne.n	8009c6a <_printf_float+0x316>
 8009ce8:	e68f      	b.n	8009a0a <_printf_float+0xb6>
 8009cea:	9a06      	ldr	r2, [sp, #24]
 8009cec:	464b      	mov	r3, r9
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	4442      	add	r2, r8
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d1c3      	bne.n	8009c82 <_printf_float+0x32e>
 8009cfa:	e686      	b.n	8009a0a <_printf_float+0xb6>
 8009cfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d00:	f1ba 0f01 	cmp.w	sl, #1
 8009d04:	dc01      	bgt.n	8009d0a <_printf_float+0x3b6>
 8009d06:	07db      	lsls	r3, r3, #31
 8009d08:	d536      	bpl.n	8009d78 <_printf_float+0x424>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	f43f ae78 	beq.w	8009a0a <_printf_float+0xb6>
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f ae70 	beq.w	8009a0a <_printf_float+0xb6>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d36:	f7f6 fedb 	bl	8000af0 <__aeabi_dcmpeq>
 8009d3a:	b9c0      	cbnz	r0, 8009d6e <_printf_float+0x41a>
 8009d3c:	4653      	mov	r3, sl
 8009d3e:	f108 0201 	add.w	r2, r8, #1
 8009d42:	4631      	mov	r1, r6
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b8      	blx	r7
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d10c      	bne.n	8009d66 <_printf_float+0x412>
 8009d4c:	e65d      	b.n	8009a0a <_printf_float+0xb6>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	465a      	mov	r2, fp
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f ae56 	beq.w	8009a0a <_printf_float+0xb6>
 8009d5e:	f108 0801 	add.w	r8, r8, #1
 8009d62:	45d0      	cmp	r8, sl
 8009d64:	dbf3      	blt.n	8009d4e <_printf_float+0x3fa>
 8009d66:	464b      	mov	r3, r9
 8009d68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d6c:	e6df      	b.n	8009b2e <_printf_float+0x1da>
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	f104 0b1a 	add.w	fp, r4, #26
 8009d76:	e7f4      	b.n	8009d62 <_printf_float+0x40e>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	e7e1      	b.n	8009d42 <_printf_float+0x3ee>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	464a      	mov	r2, r9
 8009d82:	4631      	mov	r1, r6
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b8      	blx	r7
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f43f ae3e 	beq.w	8009a0a <_printf_float+0xb6>
 8009d8e:	f108 0801 	add.w	r8, r8, #1
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d96:	1a5b      	subs	r3, r3, r1
 8009d98:	4543      	cmp	r3, r8
 8009d9a:	dcf0      	bgt.n	8009d7e <_printf_float+0x42a>
 8009d9c:	e6fc      	b.n	8009b98 <_printf_float+0x244>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	f104 0919 	add.w	r9, r4, #25
 8009da6:	e7f4      	b.n	8009d92 <_printf_float+0x43e>

08009da8 <_printf_common>:
 8009da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	4616      	mov	r6, r2
 8009dae:	4698      	mov	r8, r3
 8009db0:	688a      	ldr	r2, [r1, #8]
 8009db2:	4607      	mov	r7, r0
 8009db4:	690b      	ldr	r3, [r1, #16]
 8009db6:	460c      	mov	r4, r1
 8009db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	bfb8      	it	lt
 8009dc0:	4613      	movlt	r3, r2
 8009dc2:	6033      	str	r3, [r6, #0]
 8009dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009dc8:	b10a      	cbz	r2, 8009dce <_printf_common+0x26>
 8009dca:	3301      	adds	r3, #1
 8009dcc:	6033      	str	r3, [r6, #0]
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	0699      	lsls	r1, r3, #26
 8009dd2:	bf42      	ittt	mi
 8009dd4:	6833      	ldrmi	r3, [r6, #0]
 8009dd6:	3302      	addmi	r3, #2
 8009dd8:	6033      	strmi	r3, [r6, #0]
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	f015 0506 	ands.w	r5, r5, #6
 8009de0:	d106      	bne.n	8009df0 <_printf_common+0x48>
 8009de2:	f104 0a19 	add.w	sl, r4, #25
 8009de6:	68e3      	ldr	r3, [r4, #12]
 8009de8:	6832      	ldr	r2, [r6, #0]
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	42ab      	cmp	r3, r5
 8009dee:	dc2b      	bgt.n	8009e48 <_printf_common+0xa0>
 8009df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	3b00      	subs	r3, #0
 8009df8:	bf18      	it	ne
 8009dfa:	2301      	movne	r3, #1
 8009dfc:	0692      	lsls	r2, r2, #26
 8009dfe:	d430      	bmi.n	8009e62 <_printf_common+0xba>
 8009e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e04:	4641      	mov	r1, r8
 8009e06:	4638      	mov	r0, r7
 8009e08:	47c8      	blx	r9
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d023      	beq.n	8009e56 <_printf_common+0xae>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	341a      	adds	r4, #26
 8009e12:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009e16:	f003 0306 	and.w	r3, r3, #6
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	bf0a      	itet	eq
 8009e1e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009e22:	2500      	movne	r5, #0
 8009e24:	6833      	ldreq	r3, [r6, #0]
 8009e26:	f04f 0600 	mov.w	r6, #0
 8009e2a:	bf08      	it	eq
 8009e2c:	1aed      	subeq	r5, r5, r3
 8009e2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e32:	bf08      	it	eq
 8009e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bfc4      	itt	gt
 8009e3c:	1a9b      	subgt	r3, r3, r2
 8009e3e:	18ed      	addgt	r5, r5, r3
 8009e40:	42b5      	cmp	r5, r6
 8009e42:	d11a      	bne.n	8009e7a <_printf_common+0xd2>
 8009e44:	2000      	movs	r0, #0
 8009e46:	e008      	b.n	8009e5a <_printf_common+0xb2>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4652      	mov	r2, sl
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	4638      	mov	r0, r7
 8009e50:	47c8      	blx	r9
 8009e52:	3001      	adds	r0, #1
 8009e54:	d103      	bne.n	8009e5e <_printf_common+0xb6>
 8009e56:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5e:	3501      	adds	r5, #1
 8009e60:	e7c1      	b.n	8009de6 <_printf_common+0x3e>
 8009e62:	18e1      	adds	r1, r4, r3
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	2030      	movs	r0, #48	@ 0x30
 8009e68:	3302      	adds	r3, #2
 8009e6a:	4422      	add	r2, r4
 8009e6c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e78:	e7c2      	b.n	8009e00 <_printf_common+0x58>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	4641      	mov	r1, r8
 8009e80:	4638      	mov	r0, r7
 8009e82:	47c8      	blx	r9
 8009e84:	3001      	adds	r0, #1
 8009e86:	d0e6      	beq.n	8009e56 <_printf_common+0xae>
 8009e88:	3601      	adds	r6, #1
 8009e8a:	e7d9      	b.n	8009e40 <_printf_common+0x98>

08009e8c <_printf_i>:
 8009e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	7e0f      	ldrb	r7, [r1, #24]
 8009e92:	4691      	mov	r9, r2
 8009e94:	4680      	mov	r8, r0
 8009e96:	460c      	mov	r4, r1
 8009e98:	2f78      	cmp	r7, #120	@ 0x78
 8009e9a:	469a      	mov	sl, r3
 8009e9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ea2:	d807      	bhi.n	8009eb4 <_printf_i+0x28>
 8009ea4:	2f62      	cmp	r7, #98	@ 0x62
 8009ea6:	d80a      	bhi.n	8009ebe <_printf_i+0x32>
 8009ea8:	2f00      	cmp	r7, #0
 8009eaa:	f000 80d2 	beq.w	800a052 <_printf_i+0x1c6>
 8009eae:	2f58      	cmp	r7, #88	@ 0x58
 8009eb0:	f000 80b9 	beq.w	800a026 <_printf_i+0x19a>
 8009eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ebc:	e03a      	b.n	8009f34 <_printf_i+0xa8>
 8009ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ec2:	2b15      	cmp	r3, #21
 8009ec4:	d8f6      	bhi.n	8009eb4 <_printf_i+0x28>
 8009ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8009ecc <_printf_i+0x40>)
 8009ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f39 	.word	0x08009f39
 8009ed4:	08009eb5 	.word	0x08009eb5
 8009ed8:	08009eb5 	.word	0x08009eb5
 8009edc:	08009eb5 	.word	0x08009eb5
 8009ee0:	08009eb5 	.word	0x08009eb5
 8009ee4:	08009f39 	.word	0x08009f39
 8009ee8:	08009eb5 	.word	0x08009eb5
 8009eec:	08009eb5 	.word	0x08009eb5
 8009ef0:	08009eb5 	.word	0x08009eb5
 8009ef4:	08009eb5 	.word	0x08009eb5
 8009ef8:	0800a039 	.word	0x0800a039
 8009efc:	08009f63 	.word	0x08009f63
 8009f00:	08009ff3 	.word	0x08009ff3
 8009f04:	08009eb5 	.word	0x08009eb5
 8009f08:	08009eb5 	.word	0x08009eb5
 8009f0c:	0800a05b 	.word	0x0800a05b
 8009f10:	08009eb5 	.word	0x08009eb5
 8009f14:	08009f63 	.word	0x08009f63
 8009f18:	08009eb5 	.word	0x08009eb5
 8009f1c:	08009eb5 	.word	0x08009eb5
 8009f20:	08009ffb 	.word	0x08009ffb
 8009f24:	6833      	ldr	r3, [r6, #0]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6032      	str	r2, [r6, #0]
 8009f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f34:	2301      	movs	r3, #1
 8009f36:	e09d      	b.n	800a074 <_printf_i+0x1e8>
 8009f38:	6833      	ldr	r3, [r6, #0]
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	1d19      	adds	r1, r3, #4
 8009f3e:	6031      	str	r1, [r6, #0]
 8009f40:	0606      	lsls	r6, r0, #24
 8009f42:	d501      	bpl.n	8009f48 <_printf_i+0xbc>
 8009f44:	681d      	ldr	r5, [r3, #0]
 8009f46:	e003      	b.n	8009f50 <_printf_i+0xc4>
 8009f48:	0645      	lsls	r5, r0, #25
 8009f4a:	d5fb      	bpl.n	8009f44 <_printf_i+0xb8>
 8009f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f50:	2d00      	cmp	r5, #0
 8009f52:	da03      	bge.n	8009f5c <_printf_i+0xd0>
 8009f54:	232d      	movs	r3, #45	@ 0x2d
 8009f56:	426d      	negs	r5, r5
 8009f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f5c:	4859      	ldr	r0, [pc, #356]	@ (800a0c4 <_printf_i+0x238>)
 8009f5e:	230a      	movs	r3, #10
 8009f60:	e011      	b.n	8009f86 <_printf_i+0xfa>
 8009f62:	6821      	ldr	r1, [r4, #0]
 8009f64:	6833      	ldr	r3, [r6, #0]
 8009f66:	0608      	lsls	r0, r1, #24
 8009f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f6c:	d402      	bmi.n	8009f74 <_printf_i+0xe8>
 8009f6e:	0649      	lsls	r1, r1, #25
 8009f70:	bf48      	it	mi
 8009f72:	b2ad      	uxthmi	r5, r5
 8009f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f76:	6033      	str	r3, [r6, #0]
 8009f78:	4852      	ldr	r0, [pc, #328]	@ (800a0c4 <_printf_i+0x238>)
 8009f7a:	bf14      	ite	ne
 8009f7c:	230a      	movne	r3, #10
 8009f7e:	2308      	moveq	r3, #8
 8009f80:	2100      	movs	r1, #0
 8009f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f86:	6866      	ldr	r6, [r4, #4]
 8009f88:	2e00      	cmp	r6, #0
 8009f8a:	60a6      	str	r6, [r4, #8]
 8009f8c:	bfa2      	ittt	ge
 8009f8e:	6821      	ldrge	r1, [r4, #0]
 8009f90:	f021 0104 	bicge.w	r1, r1, #4
 8009f94:	6021      	strge	r1, [r4, #0]
 8009f96:	b90d      	cbnz	r5, 8009f9c <_printf_i+0x110>
 8009f98:	2e00      	cmp	r6, #0
 8009f9a:	d04b      	beq.n	800a034 <_printf_i+0x1a8>
 8009f9c:	4616      	mov	r6, r2
 8009f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8009fa6:	5dc7      	ldrb	r7, [r0, r7]
 8009fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fac:	462f      	mov	r7, r5
 8009fae:	460d      	mov	r5, r1
 8009fb0:	42bb      	cmp	r3, r7
 8009fb2:	d9f4      	bls.n	8009f9e <_printf_i+0x112>
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d10b      	bne.n	8009fd0 <_printf_i+0x144>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	07df      	lsls	r7, r3, #31
 8009fbc:	d508      	bpl.n	8009fd0 <_printf_i+0x144>
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	6861      	ldr	r1, [r4, #4]
 8009fc2:	4299      	cmp	r1, r3
 8009fc4:	bfde      	ittt	le
 8009fc6:	2330      	movle	r3, #48	@ 0x30
 8009fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fd0:	1b92      	subs	r2, r2, r6
 8009fd2:	6122      	str	r2, [r4, #16]
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	aa03      	add	r2, sp, #12
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f8cd a000 	str.w	sl, [sp]
 8009fe0:	f7ff fee2 	bl	8009da8 <_printf_common>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d14a      	bne.n	800a07e <_printf_i+0x1f2>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	b004      	add	sp, #16
 8009fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	f043 0320 	orr.w	r3, r3, #32
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	2778      	movs	r7, #120	@ 0x78
 8009ffc:	4832      	ldr	r0, [pc, #200]	@ (800a0c8 <_printf_i+0x23c>)
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a004:	061f      	lsls	r7, r3, #24
 800a006:	6831      	ldr	r1, [r6, #0]
 800a008:	f851 5b04 	ldr.w	r5, [r1], #4
 800a00c:	d402      	bmi.n	800a014 <_printf_i+0x188>
 800a00e:	065f      	lsls	r7, r3, #25
 800a010:	bf48      	it	mi
 800a012:	b2ad      	uxthmi	r5, r5
 800a014:	6031      	str	r1, [r6, #0]
 800a016:	07d9      	lsls	r1, r3, #31
 800a018:	bf44      	itt	mi
 800a01a:	f043 0320 	orrmi.w	r3, r3, #32
 800a01e:	6023      	strmi	r3, [r4, #0]
 800a020:	b11d      	cbz	r5, 800a02a <_printf_i+0x19e>
 800a022:	2310      	movs	r3, #16
 800a024:	e7ac      	b.n	8009f80 <_printf_i+0xf4>
 800a026:	4827      	ldr	r0, [pc, #156]	@ (800a0c4 <_printf_i+0x238>)
 800a028:	e7e9      	b.n	8009ffe <_printf_i+0x172>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	f023 0320 	bic.w	r3, r3, #32
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	e7f6      	b.n	800a022 <_printf_i+0x196>
 800a034:	4616      	mov	r6, r2
 800a036:	e7bd      	b.n	8009fb4 <_printf_i+0x128>
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	6825      	ldr	r5, [r4, #0]
 800a03c:	1d18      	adds	r0, r3, #4
 800a03e:	6961      	ldr	r1, [r4, #20]
 800a040:	6030      	str	r0, [r6, #0]
 800a042:	062e      	lsls	r6, r5, #24
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	d501      	bpl.n	800a04c <_printf_i+0x1c0>
 800a048:	6019      	str	r1, [r3, #0]
 800a04a:	e002      	b.n	800a052 <_printf_i+0x1c6>
 800a04c:	0668      	lsls	r0, r5, #25
 800a04e:	d5fb      	bpl.n	800a048 <_printf_i+0x1bc>
 800a050:	8019      	strh	r1, [r3, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	4616      	mov	r6, r2
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	e7bc      	b.n	8009fd4 <_printf_i+0x148>
 800a05a:	6833      	ldr	r3, [r6, #0]
 800a05c:	2100      	movs	r1, #0
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	6032      	str	r2, [r6, #0]
 800a062:	681e      	ldr	r6, [r3, #0]
 800a064:	6862      	ldr	r2, [r4, #4]
 800a066:	4630      	mov	r0, r6
 800a068:	f000 fbf9 	bl	800a85e <memchr>
 800a06c:	b108      	cbz	r0, 800a072 <_printf_i+0x1e6>
 800a06e:	1b80      	subs	r0, r0, r6
 800a070:	6060      	str	r0, [r4, #4]
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	2300      	movs	r3, #0
 800a078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a07c:	e7aa      	b.n	8009fd4 <_printf_i+0x148>
 800a07e:	6923      	ldr	r3, [r4, #16]
 800a080:	4632      	mov	r2, r6
 800a082:	4649      	mov	r1, r9
 800a084:	4640      	mov	r0, r8
 800a086:	47d0      	blx	sl
 800a088:	3001      	adds	r0, #1
 800a08a:	d0ad      	beq.n	8009fe8 <_printf_i+0x15c>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	079b      	lsls	r3, r3, #30
 800a090:	d413      	bmi.n	800a0ba <_printf_i+0x22e>
 800a092:	68e0      	ldr	r0, [r4, #12]
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	4298      	cmp	r0, r3
 800a098:	bfb8      	it	lt
 800a09a:	4618      	movlt	r0, r3
 800a09c:	e7a6      	b.n	8009fec <_printf_i+0x160>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	4649      	mov	r1, r9
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	47d0      	blx	sl
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	d09d      	beq.n	8009fe8 <_printf_i+0x15c>
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	68e3      	ldr	r3, [r4, #12]
 800a0b0:	9903      	ldr	r1, [sp, #12]
 800a0b2:	1a5b      	subs	r3, r3, r1
 800a0b4:	42ab      	cmp	r3, r5
 800a0b6:	dcf2      	bgt.n	800a09e <_printf_i+0x212>
 800a0b8:	e7eb      	b.n	800a092 <_printf_i+0x206>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	f104 0619 	add.w	r6, r4, #25
 800a0c0:	e7f5      	b.n	800a0ae <_printf_i+0x222>
 800a0c2:	bf00      	nop
 800a0c4:	0800dff6 	.word	0x0800dff6
 800a0c8:	0800e007 	.word	0x0800e007

0800a0cc <_scanf_float>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	b087      	sub	sp, #28
 800a0d2:	4617      	mov	r7, r2
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	9303      	str	r3, [sp, #12]
 800a0da:	688b      	ldr	r3, [r1, #8]
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a0e2:	460a      	mov	r2, r1
 800a0e4:	bf89      	itett	hi
 800a0e6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0ea:	f04f 0b00 	movls.w	fp, #0
 800a0ee:	eb03 0b05 	addhi.w	fp, r3, r5
 800a0f2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0f6:	f04f 0500 	mov.w	r5, #0
 800a0fa:	bf88      	it	hi
 800a0fc:	608b      	strhi	r3, [r1, #8]
 800a0fe:	680b      	ldr	r3, [r1, #0]
 800a100:	46aa      	mov	sl, r5
 800a102:	46a9      	mov	r9, r5
 800a104:	9502      	str	r5, [sp, #8]
 800a106:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a10a:	f842 3b1c 	str.w	r3, [r2], #28
 800a10e:	4616      	mov	r6, r2
 800a110:	9201      	str	r2, [sp, #4]
 800a112:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a116:	68a2      	ldr	r2, [r4, #8]
 800a118:	b152      	cbz	r2, 800a130 <_scanf_float+0x64>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a120:	d864      	bhi.n	800a1ec <_scanf_float+0x120>
 800a122:	2b40      	cmp	r3, #64	@ 0x40
 800a124:	d83c      	bhi.n	800a1a0 <_scanf_float+0xd4>
 800a126:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a12a:	b2c8      	uxtb	r0, r1
 800a12c:	280e      	cmp	r0, #14
 800a12e:	d93a      	bls.n	800a1a6 <_scanf_float+0xda>
 800a130:	f1b9 0f00 	cmp.w	r9, #0
 800a134:	d003      	beq.n	800a13e <_scanf_float+0x72>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a142:	f1ba 0f01 	cmp.w	sl, #1
 800a146:	f200 8117 	bhi.w	800a378 <_scanf_float+0x2ac>
 800a14a:	9b01      	ldr	r3, [sp, #4]
 800a14c:	429e      	cmp	r6, r3
 800a14e:	f200 8108 	bhi.w	800a362 <_scanf_float+0x296>
 800a152:	2001      	movs	r0, #1
 800a154:	b007      	add	sp, #28
 800a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a15e:	2a0d      	cmp	r2, #13
 800a160:	d8e6      	bhi.n	800a130 <_scanf_float+0x64>
 800a162:	a101      	add	r1, pc, #4	@ (adr r1, 800a168 <_scanf_float+0x9c>)
 800a164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a168:	0800a2af 	.word	0x0800a2af
 800a16c:	0800a131 	.word	0x0800a131
 800a170:	0800a131 	.word	0x0800a131
 800a174:	0800a131 	.word	0x0800a131
 800a178:	0800a30f 	.word	0x0800a30f
 800a17c:	0800a2e7 	.word	0x0800a2e7
 800a180:	0800a131 	.word	0x0800a131
 800a184:	0800a131 	.word	0x0800a131
 800a188:	0800a2bd 	.word	0x0800a2bd
 800a18c:	0800a131 	.word	0x0800a131
 800a190:	0800a131 	.word	0x0800a131
 800a194:	0800a131 	.word	0x0800a131
 800a198:	0800a131 	.word	0x0800a131
 800a19c:	0800a275 	.word	0x0800a275
 800a1a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a1a4:	e7db      	b.n	800a15e <_scanf_float+0x92>
 800a1a6:	290e      	cmp	r1, #14
 800a1a8:	d8c2      	bhi.n	800a130 <_scanf_float+0x64>
 800a1aa:	a001      	add	r0, pc, #4	@ (adr r0, 800a1b0 <_scanf_float+0xe4>)
 800a1ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a1b0:	0800a265 	.word	0x0800a265
 800a1b4:	0800a131 	.word	0x0800a131
 800a1b8:	0800a265 	.word	0x0800a265
 800a1bc:	0800a2fb 	.word	0x0800a2fb
 800a1c0:	0800a131 	.word	0x0800a131
 800a1c4:	0800a20d 	.word	0x0800a20d
 800a1c8:	0800a24b 	.word	0x0800a24b
 800a1cc:	0800a24b 	.word	0x0800a24b
 800a1d0:	0800a24b 	.word	0x0800a24b
 800a1d4:	0800a24b 	.word	0x0800a24b
 800a1d8:	0800a24b 	.word	0x0800a24b
 800a1dc:	0800a24b 	.word	0x0800a24b
 800a1e0:	0800a24b 	.word	0x0800a24b
 800a1e4:	0800a24b 	.word	0x0800a24b
 800a1e8:	0800a24b 	.word	0x0800a24b
 800a1ec:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1ee:	d809      	bhi.n	800a204 <_scanf_float+0x138>
 800a1f0:	2b60      	cmp	r3, #96	@ 0x60
 800a1f2:	d8b2      	bhi.n	800a15a <_scanf_float+0x8e>
 800a1f4:	2b54      	cmp	r3, #84	@ 0x54
 800a1f6:	d07b      	beq.n	800a2f0 <_scanf_float+0x224>
 800a1f8:	2b59      	cmp	r3, #89	@ 0x59
 800a1fa:	d199      	bne.n	800a130 <_scanf_float+0x64>
 800a1fc:	2d07      	cmp	r5, #7
 800a1fe:	d197      	bne.n	800a130 <_scanf_float+0x64>
 800a200:	2508      	movs	r5, #8
 800a202:	e02c      	b.n	800a25e <_scanf_float+0x192>
 800a204:	2b74      	cmp	r3, #116	@ 0x74
 800a206:	d073      	beq.n	800a2f0 <_scanf_float+0x224>
 800a208:	2b79      	cmp	r3, #121	@ 0x79
 800a20a:	e7f6      	b.n	800a1fa <_scanf_float+0x12e>
 800a20c:	6821      	ldr	r1, [r4, #0]
 800a20e:	05c8      	lsls	r0, r1, #23
 800a210:	d51b      	bpl.n	800a24a <_scanf_float+0x17e>
 800a212:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a216:	f109 0901 	add.w	r9, r9, #1
 800a21a:	6021      	str	r1, [r4, #0]
 800a21c:	f1bb 0f00 	cmp.w	fp, #0
 800a220:	d003      	beq.n	800a22a <_scanf_float+0x15e>
 800a222:	3201      	adds	r2, #1
 800a224:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a228:	60a2      	str	r2, [r4, #8]
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	60a3      	str	r3, [r4, #8]
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	3301      	adds	r3, #1
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3b01      	subs	r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	607b      	str	r3, [r7, #4]
 800a23e:	f340 8087 	ble.w	800a350 <_scanf_float+0x284>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	e765      	b.n	800a116 <_scanf_float+0x4a>
 800a24a:	eb1a 0105 	adds.w	r1, sl, r5
 800a24e:	f47f af6f 	bne.w	800a130 <_scanf_float+0x64>
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	460d      	mov	r5, r1
 800a256:	468a      	mov	sl, r1
 800a258:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	f806 3b01 	strb.w	r3, [r6], #1
 800a262:	e7e2      	b.n	800a22a <_scanf_float+0x15e>
 800a264:	6822      	ldr	r2, [r4, #0]
 800a266:	0610      	lsls	r0, r2, #24
 800a268:	f57f af62 	bpl.w	800a130 <_scanf_float+0x64>
 800a26c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a270:	6022      	str	r2, [r4, #0]
 800a272:	e7f4      	b.n	800a25e <_scanf_float+0x192>
 800a274:	f1ba 0f00 	cmp.w	sl, #0
 800a278:	d10e      	bne.n	800a298 <_scanf_float+0x1cc>
 800a27a:	f1b9 0f00 	cmp.w	r9, #0
 800a27e:	d10e      	bne.n	800a29e <_scanf_float+0x1d2>
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a286:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a28a:	d108      	bne.n	800a29e <_scanf_float+0x1d2>
 800a28c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a290:	f04f 0a01 	mov.w	sl, #1
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	e7e2      	b.n	800a25e <_scanf_float+0x192>
 800a298:	f1ba 0f02 	cmp.w	sl, #2
 800a29c:	d055      	beq.n	800a34a <_scanf_float+0x27e>
 800a29e:	2d01      	cmp	r5, #1
 800a2a0:	d002      	beq.n	800a2a8 <_scanf_float+0x1dc>
 800a2a2:	2d04      	cmp	r5, #4
 800a2a4:	f47f af44 	bne.w	800a130 <_scanf_float+0x64>
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	b2ed      	uxtb	r5, r5
 800a2ac:	e7d7      	b.n	800a25e <_scanf_float+0x192>
 800a2ae:	f1ba 0f01 	cmp.w	sl, #1
 800a2b2:	f47f af3d 	bne.w	800a130 <_scanf_float+0x64>
 800a2b6:	f04f 0a02 	mov.w	sl, #2
 800a2ba:	e7d0      	b.n	800a25e <_scanf_float+0x192>
 800a2bc:	b97d      	cbnz	r5, 800a2de <_scanf_float+0x212>
 800a2be:	f1b9 0f00 	cmp.w	r9, #0
 800a2c2:	f47f af38 	bne.w	800a136 <_scanf_float+0x6a>
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a2cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a2d0:	f040 8107 	bne.w	800a4e2 <_scanf_float+0x416>
 800a2d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2d8:	2501      	movs	r5, #1
 800a2da:	6022      	str	r2, [r4, #0]
 800a2dc:	e7bf      	b.n	800a25e <_scanf_float+0x192>
 800a2de:	2d03      	cmp	r5, #3
 800a2e0:	d0e2      	beq.n	800a2a8 <_scanf_float+0x1dc>
 800a2e2:	2d05      	cmp	r5, #5
 800a2e4:	e7de      	b.n	800a2a4 <_scanf_float+0x1d8>
 800a2e6:	2d02      	cmp	r5, #2
 800a2e8:	f47f af22 	bne.w	800a130 <_scanf_float+0x64>
 800a2ec:	2503      	movs	r5, #3
 800a2ee:	e7b6      	b.n	800a25e <_scanf_float+0x192>
 800a2f0:	2d06      	cmp	r5, #6
 800a2f2:	f47f af1d 	bne.w	800a130 <_scanf_float+0x64>
 800a2f6:	2507      	movs	r5, #7
 800a2f8:	e7b1      	b.n	800a25e <_scanf_float+0x192>
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	0591      	lsls	r1, r2, #22
 800a2fe:	f57f af17 	bpl.w	800a130 <_scanf_float+0x64>
 800a302:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a306:	f8cd 9008 	str.w	r9, [sp, #8]
 800a30a:	6022      	str	r2, [r4, #0]
 800a30c:	e7a7      	b.n	800a25e <_scanf_float+0x192>
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a314:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a318:	d006      	beq.n	800a328 <_scanf_float+0x25c>
 800a31a:	0550      	lsls	r0, r2, #21
 800a31c:	f57f af08 	bpl.w	800a130 <_scanf_float+0x64>
 800a320:	f1b9 0f00 	cmp.w	r9, #0
 800a324:	f000 80dd 	beq.w	800a4e2 <_scanf_float+0x416>
 800a328:	0591      	lsls	r1, r2, #22
 800a32a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a32e:	bf58      	it	pl
 800a330:	9902      	ldrpl	r1, [sp, #8]
 800a332:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a336:	bf58      	it	pl
 800a338:	eba9 0101 	subpl.w	r1, r9, r1
 800a33c:	6022      	str	r2, [r4, #0]
 800a33e:	f04f 0900 	mov.w	r9, #0
 800a342:	bf58      	it	pl
 800a344:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a348:	e789      	b.n	800a25e <_scanf_float+0x192>
 800a34a:	f04f 0a03 	mov.w	sl, #3
 800a34e:	e786      	b.n	800a25e <_scanf_float+0x192>
 800a350:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a354:	4639      	mov	r1, r7
 800a356:	4640      	mov	r0, r8
 800a358:	4798      	blx	r3
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f aedb 	beq.w	800a116 <_scanf_float+0x4a>
 800a360:	e6e6      	b.n	800a130 <_scanf_float+0x64>
 800a362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a366:	463a      	mov	r2, r7
 800a368:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a36c:	4640      	mov	r0, r8
 800a36e:	4798      	blx	r3
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	3b01      	subs	r3, #1
 800a374:	6123      	str	r3, [r4, #16]
 800a376:	e6e8      	b.n	800a14a <_scanf_float+0x7e>
 800a378:	1e6b      	subs	r3, r5, #1
 800a37a:	2b06      	cmp	r3, #6
 800a37c:	d824      	bhi.n	800a3c8 <_scanf_float+0x2fc>
 800a37e:	2d02      	cmp	r5, #2
 800a380:	d836      	bhi.n	800a3f0 <_scanf_float+0x324>
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	429e      	cmp	r6, r3
 800a386:	f67f aee4 	bls.w	800a152 <_scanf_float+0x86>
 800a38a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a38e:	463a      	mov	r2, r7
 800a390:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a394:	4640      	mov	r0, r8
 800a396:	4798      	blx	r3
 800a398:	6923      	ldr	r3, [r4, #16]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	6123      	str	r3, [r4, #16]
 800a39e:	e7f0      	b.n	800a382 <_scanf_float+0x2b6>
 800a3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3a4:	463a      	mov	r2, r7
 800a3a6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4798      	blx	r3
 800a3ae:	6923      	ldr	r3, [r4, #16]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3b8:	fa5f fa8a 	uxtb.w	sl, sl
 800a3bc:	f1ba 0f02 	cmp.w	sl, #2
 800a3c0:	d1ee      	bne.n	800a3a0 <_scanf_float+0x2d4>
 800a3c2:	3d03      	subs	r5, #3
 800a3c4:	b2ed      	uxtb	r5, r5
 800a3c6:	1b76      	subs	r6, r6, r5
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	05da      	lsls	r2, r3, #23
 800a3cc:	d52f      	bpl.n	800a42e <_scanf_float+0x362>
 800a3ce:	055b      	lsls	r3, r3, #21
 800a3d0:	d511      	bpl.n	800a3f6 <_scanf_float+0x32a>
 800a3d2:	9b01      	ldr	r3, [sp, #4]
 800a3d4:	429e      	cmp	r6, r3
 800a3d6:	f67f aebc 	bls.w	800a152 <_scanf_float+0x86>
 800a3da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3de:	463a      	mov	r2, r7
 800a3e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	4798      	blx	r3
 800a3e8:	6923      	ldr	r3, [r4, #16]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	e7f0      	b.n	800a3d2 <_scanf_float+0x306>
 800a3f0:	46aa      	mov	sl, r5
 800a3f2:	46b3      	mov	fp, r6
 800a3f4:	e7de      	b.n	800a3b4 <_scanf_float+0x2e8>
 800a3f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3fa:	1e75      	subs	r5, r6, #1
 800a3fc:	6923      	ldr	r3, [r4, #16]
 800a3fe:	2965      	cmp	r1, #101	@ 0x65
 800a400:	f103 33ff 	add.w	r3, r3, #4294967295
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	d00c      	beq.n	800a422 <_scanf_float+0x356>
 800a408:	2945      	cmp	r1, #69	@ 0x45
 800a40a:	d00a      	beq.n	800a422 <_scanf_float+0x356>
 800a40c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a410:	463a      	mov	r2, r7
 800a412:	4640      	mov	r0, r8
 800a414:	1eb5      	subs	r5, r6, #2
 800a416:	4798      	blx	r3
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a41e:	3b01      	subs	r3, #1
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	462e      	mov	r6, r5
 800a424:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a428:	463a      	mov	r2, r7
 800a42a:	4640      	mov	r0, r8
 800a42c:	4798      	blx	r3
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	f012 0210 	ands.w	r2, r2, #16
 800a434:	d001      	beq.n	800a43a <_scanf_float+0x36e>
 800a436:	2000      	movs	r0, #0
 800a438:	e68c      	b.n	800a154 <_scanf_float+0x88>
 800a43a:	7032      	strb	r2, [r6, #0]
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a446:	d11c      	bne.n	800a482 <_scanf_float+0x3b6>
 800a448:	9b02      	ldr	r3, [sp, #8]
 800a44a:	454b      	cmp	r3, r9
 800a44c:	eba3 0209 	sub.w	r2, r3, r9
 800a450:	d123      	bne.n	800a49a <_scanf_float+0x3ce>
 800a452:	2200      	movs	r2, #0
 800a454:	9901      	ldr	r1, [sp, #4]
 800a456:	4640      	mov	r0, r8
 800a458:	f002 fc2a 	bl	800ccb0 <_strtod_r>
 800a45c:	6821      	ldr	r1, [r4, #0]
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	f011 0f02 	tst.w	r1, #2
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	ec57 6b10 	vmov	r6, r7, d0
 800a46a:	f103 0204 	add.w	r2, r3, #4
 800a46e:	d01f      	beq.n	800a4b0 <_scanf_float+0x3e4>
 800a470:	9903      	ldr	r1, [sp, #12]
 800a472:	600a      	str	r2, [r1, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	e9c3 6700 	strd	r6, r7, [r3]
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	60e3      	str	r3, [r4, #12]
 800a480:	e7d9      	b.n	800a436 <_scanf_float+0x36a>
 800a482:	9b04      	ldr	r3, [sp, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0e4      	beq.n	800a452 <_scanf_float+0x386>
 800a488:	9905      	ldr	r1, [sp, #20]
 800a48a:	230a      	movs	r3, #10
 800a48c:	4640      	mov	r0, r8
 800a48e:	3101      	adds	r1, #1
 800a490:	f002 fc8e 	bl	800cdb0 <_strtol_r>
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	9e05      	ldr	r6, [sp, #20]
 800a498:	1ac2      	subs	r2, r0, r3
 800a49a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a49e:	4912      	ldr	r1, [pc, #72]	@ (800a4e8 <_scanf_float+0x41c>)
 800a4a0:	429e      	cmp	r6, r3
 800a4a2:	bf28      	it	cs
 800a4a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f000 f8f5 	bl	800a698 <siprintf>
 800a4ae:	e7d0      	b.n	800a452 <_scanf_float+0x386>
 800a4b0:	f011 0f04 	tst.w	r1, #4
 800a4b4:	9903      	ldr	r1, [sp, #12]
 800a4b6:	600a      	str	r2, [r1, #0]
 800a4b8:	d1dc      	bne.n	800a474 <_scanf_float+0x3a8>
 800a4ba:	681d      	ldr	r5, [r3, #0]
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 fb46 	bl	8000b54 <__aeabi_dcmpun>
 800a4c8:	b128      	cbz	r0, 800a4d6 <_scanf_float+0x40a>
 800a4ca:	4808      	ldr	r0, [pc, #32]	@ (800a4ec <_scanf_float+0x420>)
 800a4cc:	f000 f9d6 	bl	800a87c <nanf>
 800a4d0:	ed85 0a00 	vstr	s0, [r5]
 800a4d4:	e7d1      	b.n	800a47a <_scanf_float+0x3ae>
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	4639      	mov	r1, r7
 800a4da:	f7f6 fb99 	bl	8000c10 <__aeabi_d2f>
 800a4de:	6028      	str	r0, [r5, #0]
 800a4e0:	e7cb      	b.n	800a47a <_scanf_float+0x3ae>
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	e62a      	b.n	800a13e <_scanf_float+0x72>
 800a4e8:	0800e018 	.word	0x0800e018
 800a4ec:	0800e3ad 	.word	0x0800e3ad

0800a4f0 <std>:
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	6083      	str	r3, [r0, #8]
 800a4f8:	8181      	strh	r1, [r0, #12]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4fe:	81c2      	strh	r2, [r0, #14]
 800a500:	2208      	movs	r2, #8
 800a502:	6183      	str	r3, [r0, #24]
 800a504:	e9c0 3300 	strd	r3, r3, [r0]
 800a508:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a50c:	305c      	adds	r0, #92	@ 0x5c
 800a50e:	f000 f926 	bl	800a75e <memset>
 800a512:	4b0d      	ldr	r3, [pc, #52]	@ (800a548 <std+0x58>)
 800a514:	6224      	str	r4, [r4, #32]
 800a516:	6263      	str	r3, [r4, #36]	@ 0x24
 800a518:	4b0c      	ldr	r3, [pc, #48]	@ (800a54c <std+0x5c>)
 800a51a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a51c:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <std+0x60>)
 800a51e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a520:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <std+0x64>)
 800a522:	6323      	str	r3, [r4, #48]	@ 0x30
 800a524:	4b0c      	ldr	r3, [pc, #48]	@ (800a558 <std+0x68>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d006      	beq.n	800a538 <std+0x48>
 800a52a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a52e:	4294      	cmp	r4, r2
 800a530:	d002      	beq.n	800a538 <std+0x48>
 800a532:	33d0      	adds	r3, #208	@ 0xd0
 800a534:	429c      	cmp	r4, r3
 800a536:	d105      	bne.n	800a544 <std+0x54>
 800a538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	f000 b98a 	b.w	800a858 <__retarget_lock_init_recursive>
 800a544:	bd10      	pop	{r4, pc}
 800a546:	bf00      	nop
 800a548:	0800a6d9 	.word	0x0800a6d9
 800a54c:	0800a6fb 	.word	0x0800a6fb
 800a550:	0800a733 	.word	0x0800a733
 800a554:	0800a757 	.word	0x0800a757
 800a558:	200003f8 	.word	0x200003f8

0800a55c <stdio_exit_handler>:
 800a55c:	4a02      	ldr	r2, [pc, #8]	@ (800a568 <stdio_exit_handler+0xc>)
 800a55e:	4903      	ldr	r1, [pc, #12]	@ (800a56c <stdio_exit_handler+0x10>)
 800a560:	4803      	ldr	r0, [pc, #12]	@ (800a570 <stdio_exit_handler+0x14>)
 800a562:	f000 b869 	b.w	800a638 <_fwalk_sglue>
 800a566:	bf00      	nop
 800a568:	2000000c 	.word	0x2000000c
 800a56c:	0800d3f1 	.word	0x0800d3f1
 800a570:	2000001c 	.word	0x2000001c

0800a574 <cleanup_stdio>:
 800a574:	6841      	ldr	r1, [r0, #4]
 800a576:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a8 <cleanup_stdio+0x34>)
 800a578:	4299      	cmp	r1, r3
 800a57a:	b510      	push	{r4, lr}
 800a57c:	4604      	mov	r4, r0
 800a57e:	d001      	beq.n	800a584 <cleanup_stdio+0x10>
 800a580:	f002 ff36 	bl	800d3f0 <_fflush_r>
 800a584:	68a1      	ldr	r1, [r4, #8]
 800a586:	4b09      	ldr	r3, [pc, #36]	@ (800a5ac <cleanup_stdio+0x38>)
 800a588:	4299      	cmp	r1, r3
 800a58a:	d002      	beq.n	800a592 <cleanup_stdio+0x1e>
 800a58c:	4620      	mov	r0, r4
 800a58e:	f002 ff2f 	bl	800d3f0 <_fflush_r>
 800a592:	68e1      	ldr	r1, [r4, #12]
 800a594:	4b06      	ldr	r3, [pc, #24]	@ (800a5b0 <cleanup_stdio+0x3c>)
 800a596:	4299      	cmp	r1, r3
 800a598:	d004      	beq.n	800a5a4 <cleanup_stdio+0x30>
 800a59a:	4620      	mov	r0, r4
 800a59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a0:	f002 bf26 	b.w	800d3f0 <_fflush_r>
 800a5a4:	bd10      	pop	{r4, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200003f8 	.word	0x200003f8
 800a5ac:	20000460 	.word	0x20000460
 800a5b0:	200004c8 	.word	0x200004c8

0800a5b4 <global_stdio_init.part.0>:
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e4 <global_stdio_init.part.0+0x30>)
 800a5b8:	2104      	movs	r1, #4
 800a5ba:	4c0b      	ldr	r4, [pc, #44]	@ (800a5e8 <global_stdio_init.part.0+0x34>)
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800a5ec <global_stdio_init.part.0+0x38>)
 800a5be:	4620      	mov	r0, r4
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f7ff ff94 	bl	800a4f0 <std>
 800a5c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	2109      	movs	r1, #9
 800a5d0:	f7ff ff8e 	bl	800a4f0 <std>
 800a5d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5d8:	2202      	movs	r2, #2
 800a5da:	2112      	movs	r1, #18
 800a5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e0:	f7ff bf86 	b.w	800a4f0 <std>
 800a5e4:	20000530 	.word	0x20000530
 800a5e8:	200003f8 	.word	0x200003f8
 800a5ec:	0800a55d 	.word	0x0800a55d

0800a5f0 <__sfp_lock_acquire>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	@ (800a5f8 <__sfp_lock_acquire+0x8>)
 800a5f2:	f000 b932 	b.w	800a85a <__retarget_lock_acquire_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	20000539 	.word	0x20000539

0800a5fc <__sfp_lock_release>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	@ (800a604 <__sfp_lock_release+0x8>)
 800a5fe:	f000 b92d 	b.w	800a85c <__retarget_lock_release_recursive>
 800a602:	bf00      	nop
 800a604:	20000539 	.word	0x20000539

0800a608 <__sinit>:
 800a608:	b510      	push	{r4, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	f7ff fff0 	bl	800a5f0 <__sfp_lock_acquire>
 800a610:	6a23      	ldr	r3, [r4, #32]
 800a612:	b11b      	cbz	r3, 800a61c <__sinit+0x14>
 800a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a618:	f7ff bff0 	b.w	800a5fc <__sfp_lock_release>
 800a61c:	4b04      	ldr	r3, [pc, #16]	@ (800a630 <__sinit+0x28>)
 800a61e:	6223      	str	r3, [r4, #32]
 800a620:	4b04      	ldr	r3, [pc, #16]	@ (800a634 <__sinit+0x2c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1f5      	bne.n	800a614 <__sinit+0xc>
 800a628:	f7ff ffc4 	bl	800a5b4 <global_stdio_init.part.0>
 800a62c:	e7f2      	b.n	800a614 <__sinit+0xc>
 800a62e:	bf00      	nop
 800a630:	0800a575 	.word	0x0800a575
 800a634:	20000530 	.word	0x20000530

0800a638 <_fwalk_sglue>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4607      	mov	r7, r0
 800a63e:	4688      	mov	r8, r1
 800a640:	4614      	mov	r4, r2
 800a642:	2600      	movs	r6, #0
 800a644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a648:	f1b9 0901 	subs.w	r9, r9, #1
 800a64c:	d505      	bpl.n	800a65a <_fwalk_sglue+0x22>
 800a64e:	6824      	ldr	r4, [r4, #0]
 800a650:	2c00      	cmp	r4, #0
 800a652:	d1f7      	bne.n	800a644 <_fwalk_sglue+0xc>
 800a654:	4630      	mov	r0, r6
 800a656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d907      	bls.n	800a670 <_fwalk_sglue+0x38>
 800a660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a664:	3301      	adds	r3, #1
 800a666:	d003      	beq.n	800a670 <_fwalk_sglue+0x38>
 800a668:	4629      	mov	r1, r5
 800a66a:	4638      	mov	r0, r7
 800a66c:	47c0      	blx	r8
 800a66e:	4306      	orrs	r6, r0
 800a670:	3568      	adds	r5, #104	@ 0x68
 800a672:	e7e9      	b.n	800a648 <_fwalk_sglue+0x10>

0800a674 <iprintf>:
 800a674:	b40f      	push	{r0, r1, r2, r3}
 800a676:	b507      	push	{r0, r1, r2, lr}
 800a678:	4906      	ldr	r1, [pc, #24]	@ (800a694 <iprintf+0x20>)
 800a67a:	ab04      	add	r3, sp, #16
 800a67c:	6808      	ldr	r0, [r1, #0]
 800a67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a682:	6881      	ldr	r1, [r0, #8]
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	f002 fd17 	bl	800d0b8 <_vfiprintf_r>
 800a68a:	b003      	add	sp, #12
 800a68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a690:	b004      	add	sp, #16
 800a692:	4770      	bx	lr
 800a694:	20000018 	.word	0x20000018

0800a698 <siprintf>:
 800a698:	b40e      	push	{r1, r2, r3}
 800a69a:	b500      	push	{lr}
 800a69c:	b09c      	sub	sp, #112	@ 0x70
 800a69e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a6a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a6a4:	9002      	str	r0, [sp, #8]
 800a6a6:	9006      	str	r0, [sp, #24]
 800a6a8:	9107      	str	r1, [sp, #28]
 800a6aa:	9104      	str	r1, [sp, #16]
 800a6ac:	4808      	ldr	r0, [pc, #32]	@ (800a6d0 <siprintf+0x38>)
 800a6ae:	4909      	ldr	r1, [pc, #36]	@ (800a6d4 <siprintf+0x3c>)
 800a6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b4:	9105      	str	r1, [sp, #20]
 800a6b6:	a902      	add	r1, sp, #8
 800a6b8:	6800      	ldr	r0, [r0, #0]
 800a6ba:	9301      	str	r3, [sp, #4]
 800a6bc:	f002 fbd6 	bl	800ce6c <_svfiprintf_r>
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	b01c      	add	sp, #112	@ 0x70
 800a6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6cc:	b003      	add	sp, #12
 800a6ce:	4770      	bx	lr
 800a6d0:	20000018 	.word	0x20000018
 800a6d4:	ffff0208 	.word	0xffff0208

0800a6d8 <__sread>:
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	460c      	mov	r4, r1
 800a6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e0:	f000 f86c 	bl	800a7bc <_read_r>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	bfab      	itete	ge
 800a6e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a6ec:	181b      	addge	r3, r3, r0
 800a6ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6f2:	bfac      	ite	ge
 800a6f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6f6:	81a3      	strhlt	r3, [r4, #12]
 800a6f8:	bd10      	pop	{r4, pc}

0800a6fa <__swrite>:
 800a6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fe:	461f      	mov	r7, r3
 800a700:	898b      	ldrh	r3, [r1, #12]
 800a702:	4605      	mov	r5, r0
 800a704:	460c      	mov	r4, r1
 800a706:	05db      	lsls	r3, r3, #23
 800a708:	4616      	mov	r6, r2
 800a70a:	d505      	bpl.n	800a718 <__swrite+0x1e>
 800a70c:	2302      	movs	r3, #2
 800a70e:	2200      	movs	r2, #0
 800a710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a714:	f000 f840 	bl	800a798 <_lseek_r>
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	4632      	mov	r2, r6
 800a71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a720:	4628      	mov	r0, r5
 800a722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	463b      	mov	r3, r7
 800a72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a72e:	f000 b857 	b.w	800a7e0 <_write_r>

0800a732 <__sseek>:
 800a732:	b510      	push	{r4, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73a:	f000 f82d 	bl	800a798 <_lseek_r>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	bf15      	itete	ne
 800a744:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a74a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a74e:	81a3      	strheq	r3, [r4, #12]
 800a750:	bf18      	it	ne
 800a752:	81a3      	strhne	r3, [r4, #12]
 800a754:	bd10      	pop	{r4, pc}

0800a756 <__sclose>:
 800a756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75a:	f000 b80d 	b.w	800a778 <_close_r>

0800a75e <memset>:
 800a75e:	4402      	add	r2, r0
 800a760:	4603      	mov	r3, r0
 800a762:	4293      	cmp	r3, r2
 800a764:	d100      	bne.n	800a768 <memset+0xa>
 800a766:	4770      	bx	lr
 800a768:	f803 1b01 	strb.w	r1, [r3], #1
 800a76c:	e7f9      	b.n	800a762 <memset+0x4>
	...

0800a770 <_localeconv_r>:
 800a770:	4800      	ldr	r0, [pc, #0]	@ (800a774 <_localeconv_r+0x4>)
 800a772:	4770      	bx	lr
 800a774:	20000158 	.word	0x20000158

0800a778 <_close_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	2300      	movs	r3, #0
 800a77c:	4d05      	ldr	r5, [pc, #20]	@ (800a794 <_close_r+0x1c>)
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	602b      	str	r3, [r5, #0]
 800a784:	f7f7 fd85 	bl	8002292 <_close>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_close_r+0x1a>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_close_r+0x1a>
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	20000534 	.word	0x20000534

0800a798 <_lseek_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4604      	mov	r4, r0
 800a79c:	4d06      	ldr	r5, [pc, #24]	@ (800a7b8 <_lseek_r+0x20>)
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f7 fd9a 	bl	80022e0 <_lseek>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_lseek_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_lseek_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000534 	.word	0x20000534

0800a7bc <_read_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4d06      	ldr	r5, [pc, #24]	@ (800a7dc <_read_r+0x20>)
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	602a      	str	r2, [r5, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f7f7 fd28 	bl	8002220 <_read>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_read_r+0x1e>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_read_r+0x1e>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20000534 	.word	0x20000534

0800a7e0 <_write_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4d06      	ldr	r5, [pc, #24]	@ (800a800 <_write_r+0x20>)
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	602a      	str	r2, [r5, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	f7f7 fd33 	bl	800225a <_write>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_write_r+0x1e>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_write_r+0x1e>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20000534 	.word	0x20000534

0800a804 <__errno>:
 800a804:	4b01      	ldr	r3, [pc, #4]	@ (800a80c <__errno+0x8>)
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	20000018 	.word	0x20000018

0800a810 <__libc_init_array>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	4d0d      	ldr	r5, [pc, #52]	@ (800a848 <__libc_init_array+0x38>)
 800a814:	2600      	movs	r6, #0
 800a816:	4c0d      	ldr	r4, [pc, #52]	@ (800a84c <__libc_init_array+0x3c>)
 800a818:	1b64      	subs	r4, r4, r5
 800a81a:	10a4      	asrs	r4, r4, #2
 800a81c:	42a6      	cmp	r6, r4
 800a81e:	d109      	bne.n	800a834 <__libc_init_array+0x24>
 800a820:	4d0b      	ldr	r5, [pc, #44]	@ (800a850 <__libc_init_array+0x40>)
 800a822:	2600      	movs	r6, #0
 800a824:	4c0b      	ldr	r4, [pc, #44]	@ (800a854 <__libc_init_array+0x44>)
 800a826:	f003 fb91 	bl	800df4c <_init>
 800a82a:	1b64      	subs	r4, r4, r5
 800a82c:	10a4      	asrs	r4, r4, #2
 800a82e:	42a6      	cmp	r6, r4
 800a830:	d105      	bne.n	800a83e <__libc_init_array+0x2e>
 800a832:	bd70      	pop	{r4, r5, r6, pc}
 800a834:	f855 3b04 	ldr.w	r3, [r5], #4
 800a838:	3601      	adds	r6, #1
 800a83a:	4798      	blx	r3
 800a83c:	e7ee      	b.n	800a81c <__libc_init_array+0xc>
 800a83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a842:	3601      	adds	r6, #1
 800a844:	4798      	blx	r3
 800a846:	e7f2      	b.n	800a82e <__libc_init_array+0x1e>
 800a848:	0800e418 	.word	0x0800e418
 800a84c:	0800e418 	.word	0x0800e418
 800a850:	0800e418 	.word	0x0800e418
 800a854:	0800e41c 	.word	0x0800e41c

0800a858 <__retarget_lock_init_recursive>:
 800a858:	4770      	bx	lr

0800a85a <__retarget_lock_acquire_recursive>:
 800a85a:	4770      	bx	lr

0800a85c <__retarget_lock_release_recursive>:
 800a85c:	4770      	bx	lr

0800a85e <memchr>:
 800a85e:	b2c9      	uxtb	r1, r1
 800a860:	4603      	mov	r3, r0
 800a862:	4402      	add	r2, r0
 800a864:	b510      	push	{r4, lr}
 800a866:	4293      	cmp	r3, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	d101      	bne.n	800a870 <memchr+0x12>
 800a86c:	2000      	movs	r0, #0
 800a86e:	e003      	b.n	800a878 <memchr+0x1a>
 800a870:	7804      	ldrb	r4, [r0, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	428c      	cmp	r4, r1
 800a876:	d1f6      	bne.n	800a866 <memchr+0x8>
 800a878:	bd10      	pop	{r4, pc}
	...

0800a87c <nanf>:
 800a87c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a884 <nanf+0x8>
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	7fc00000 	.word	0x7fc00000

0800a888 <quorem>:
 800a888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	6903      	ldr	r3, [r0, #16]
 800a88e:	4607      	mov	r7, r0
 800a890:	690c      	ldr	r4, [r1, #16]
 800a892:	42a3      	cmp	r3, r4
 800a894:	f2c0 8083 	blt.w	800a99e <quorem+0x116>
 800a898:	3c01      	subs	r4, #1
 800a89a:	f100 0514 	add.w	r5, r0, #20
 800a89e:	f101 0814 	add.w	r8, r1, #20
 800a8a2:	00a3      	lsls	r3, r4, #2
 800a8a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8c0:	d331      	bcc.n	800a926 <quorem+0x9e>
 800a8c2:	f04f 0a00 	mov.w	sl, #0
 800a8c6:	46c4      	mov	ip, r8
 800a8c8:	46ae      	mov	lr, r5
 800a8ca:	46d3      	mov	fp, sl
 800a8cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8d0:	b298      	uxth	r0, r3
 800a8d2:	45e1      	cmp	r9, ip
 800a8d4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a8d8:	fb06 a000 	mla	r0, r6, r0, sl
 800a8dc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a8e0:	b280      	uxth	r0, r0
 800a8e2:	fb06 2303 	mla	r3, r6, r3, r2
 800a8e6:	f8de 2000 	ldr.w	r2, [lr]
 800a8ea:	b292      	uxth	r2, r2
 800a8ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8f0:	eba2 0200 	sub.w	r2, r2, r0
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f8de 0000 	ldr.w	r0, [lr]
 800a8fa:	445a      	add	r2, fp
 800a8fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a900:	b292      	uxth	r2, r2
 800a902:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a906:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a90a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a90e:	f84e 2b04 	str.w	r2, [lr], #4
 800a912:	d2db      	bcs.n	800a8cc <quorem+0x44>
 800a914:	9b00      	ldr	r3, [sp, #0]
 800a916:	58eb      	ldr	r3, [r5, r3]
 800a918:	b92b      	cbnz	r3, 800a926 <quorem+0x9e>
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	3b04      	subs	r3, #4
 800a91e:	429d      	cmp	r5, r3
 800a920:	461a      	mov	r2, r3
 800a922:	d330      	bcc.n	800a986 <quorem+0xfe>
 800a924:	613c      	str	r4, [r7, #16]
 800a926:	4638      	mov	r0, r7
 800a928:	f001 f9c8 	bl	800bcbc <__mcmp>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	db26      	blt.n	800a97e <quorem+0xf6>
 800a930:	4629      	mov	r1, r5
 800a932:	2000      	movs	r0, #0
 800a934:	f858 2b04 	ldr.w	r2, [r8], #4
 800a938:	f8d1 c000 	ldr.w	ip, [r1]
 800a93c:	fa1f fe82 	uxth.w	lr, r2
 800a940:	45c1      	cmp	r9, r8
 800a942:	fa1f f38c 	uxth.w	r3, ip
 800a946:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a94a:	eba3 030e 	sub.w	r3, r3, lr
 800a94e:	4403      	add	r3, r0
 800a950:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a954:	b29b      	uxth	r3, r3
 800a956:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a95a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a95e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a962:	f841 3b04 	str.w	r3, [r1], #4
 800a966:	d2e5      	bcs.n	800a934 <quorem+0xac>
 800a968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a96c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a970:	b922      	cbnz	r2, 800a97c <quorem+0xf4>
 800a972:	3b04      	subs	r3, #4
 800a974:	429d      	cmp	r5, r3
 800a976:	461a      	mov	r2, r3
 800a978:	d30b      	bcc.n	800a992 <quorem+0x10a>
 800a97a:	613c      	str	r4, [r7, #16]
 800a97c:	3601      	adds	r6, #1
 800a97e:	4630      	mov	r0, r6
 800a980:	b003      	add	sp, #12
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	6812      	ldr	r2, [r2, #0]
 800a988:	3b04      	subs	r3, #4
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	d1ca      	bne.n	800a924 <quorem+0x9c>
 800a98e:	3c01      	subs	r4, #1
 800a990:	e7c5      	b.n	800a91e <quorem+0x96>
 800a992:	6812      	ldr	r2, [r2, #0]
 800a994:	3b04      	subs	r3, #4
 800a996:	2a00      	cmp	r2, #0
 800a998:	d1ef      	bne.n	800a97a <quorem+0xf2>
 800a99a:	3c01      	subs	r4, #1
 800a99c:	e7ea      	b.n	800a974 <quorem+0xec>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e7ee      	b.n	800a980 <quorem+0xf8>
 800a9a2:	0000      	movs	r0, r0
 800a9a4:	0000      	movs	r0, r0
	...

0800a9a8 <_dtoa_r>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	69c7      	ldr	r7, [r0, #28]
 800a9ae:	b099      	sub	sp, #100	@ 0x64
 800a9b0:	4683      	mov	fp, r0
 800a9b2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a9b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9ba:	ec55 4b10 	vmov	r4, r5, d0
 800a9be:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9c2:	b97f      	cbnz	r7, 800a9e4 <_dtoa_r+0x3c>
 800a9c4:	2010      	movs	r0, #16
 800a9c6:	f000 fdfd 	bl	800b5c4 <malloc>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a9d0:	b920      	cbnz	r0, 800a9dc <_dtoa_r+0x34>
 800a9d2:	4ba7      	ldr	r3, [pc, #668]	@ (800ac70 <_dtoa_r+0x2c8>)
 800a9d4:	21ef      	movs	r1, #239	@ 0xef
 800a9d6:	48a7      	ldr	r0, [pc, #668]	@ (800ac74 <_dtoa_r+0x2cc>)
 800a9d8:	f002 fe1a 	bl	800d610 <__assert_func>
 800a9dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a9e0:	6007      	str	r7, [r0, #0]
 800a9e2:	60c7      	str	r7, [r0, #12]
 800a9e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9e8:	6819      	ldr	r1, [r3, #0]
 800a9ea:	b159      	cbz	r1, 800aa04 <_dtoa_r+0x5c>
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	4093      	lsls	r3, r2
 800a9f4:	604a      	str	r2, [r1, #4]
 800a9f6:	608b      	str	r3, [r1, #8]
 800a9f8:	f000 feda 	bl	800b7b0 <_Bfree>
 800a9fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	1e2b      	subs	r3, r5, #0
 800aa06:	bfb7      	itett	lt
 800aa08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa0c:	2300      	movge	r3, #0
 800aa0e:	2201      	movlt	r2, #1
 800aa10:	9303      	strlt	r3, [sp, #12]
 800aa12:	bfa8      	it	ge
 800aa14:	6033      	strge	r3, [r6, #0]
 800aa16:	9f03      	ldr	r7, [sp, #12]
 800aa18:	4b97      	ldr	r3, [pc, #604]	@ (800ac78 <_dtoa_r+0x2d0>)
 800aa1a:	bfb8      	it	lt
 800aa1c:	6032      	strlt	r2, [r6, #0]
 800aa1e:	43bb      	bics	r3, r7
 800aa20:	d112      	bne.n	800aa48 <_dtoa_r+0xa0>
 800aa22:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa2e:	4323      	orrs	r3, r4
 800aa30:	f000 854c 	beq.w	800b4cc <_dtoa_r+0xb24>
 800aa34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa36:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac8c <_dtoa_r+0x2e4>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 854e 	beq.w	800b4dc <_dtoa_r+0xb34>
 800aa40:	f10a 0303 	add.w	r3, sl, #3
 800aa44:	f000 bd48 	b.w	800b4d8 <_dtoa_r+0xb30>
 800aa48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2300      	movs	r3, #0
 800aa50:	ec51 0b17 	vmov	r0, r1, d7
 800aa54:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa58:	f7f6 f84a 	bl	8000af0 <__aeabi_dcmpeq>
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	b158      	cbz	r0, 800aa78 <_dtoa_r+0xd0>
 800aa60:	2301      	movs	r3, #1
 800aa62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa68:	b113      	cbz	r3, 800aa70 <_dtoa_r+0xc8>
 800aa6a:	4b84      	ldr	r3, [pc, #528]	@ (800ac7c <_dtoa_r+0x2d4>)
 800aa6c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa6e:	6013      	str	r3, [r2, #0]
 800aa70:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ac90 <_dtoa_r+0x2e8>
 800aa74:	f000 bd32 	b.w	800b4dc <_dtoa_r+0xb34>
 800aa78:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa7c:	aa16      	add	r2, sp, #88	@ 0x58
 800aa7e:	a917      	add	r1, sp, #92	@ 0x5c
 800aa80:	4658      	mov	r0, fp
 800aa82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa86:	f001 fa41 	bl	800bf0c <__d2b>
 800aa8a:	4681      	mov	r9, r0
 800aa8c:	2e00      	cmp	r6, #0
 800aa8e:	d075      	beq.n	800ab7c <_dtoa_r+0x1d4>
 800aa90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa92:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa96:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa9e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aaa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aaaa:	4619      	mov	r1, r3
 800aaac:	2200      	movs	r2, #0
 800aaae:	4b74      	ldr	r3, [pc, #464]	@ (800ac80 <_dtoa_r+0x2d8>)
 800aab0:	f7f5 fbfe 	bl	80002b0 <__aeabi_dsub>
 800aab4:	a368      	add	r3, pc, #416	@ (adr r3, 800ac58 <_dtoa_r+0x2b0>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fdb1 	bl	8000620 <__aeabi_dmul>
 800aabe:	a368      	add	r3, pc, #416	@ (adr r3, 800ac60 <_dtoa_r+0x2b8>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fbf6 	bl	80002b4 <__adddf3>
 800aac8:	4604      	mov	r4, r0
 800aaca:	460d      	mov	r5, r1
 800aacc:	4630      	mov	r0, r6
 800aace:	f7f5 fd3d 	bl	800054c <__aeabi_i2d>
 800aad2:	a365      	add	r3, pc, #404	@ (adr r3, 800ac68 <_dtoa_r+0x2c0>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fda2 	bl	8000620 <__aeabi_dmul>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4620      	mov	r0, r4
 800aae2:	4629      	mov	r1, r5
 800aae4:	f7f5 fbe6 	bl	80002b4 <__adddf3>
 800aae8:	4604      	mov	r4, r0
 800aaea:	460d      	mov	r5, r1
 800aaec:	f7f6 f848 	bl	8000b80 <__aeabi_d2iz>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4607      	mov	r7, r0
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	4629      	mov	r1, r5
 800aafa:	f7f6 f803 	bl	8000b04 <__aeabi_dcmplt>
 800aafe:	b140      	cbz	r0, 800ab12 <_dtoa_r+0x16a>
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7f5 fd23 	bl	800054c <__aeabi_i2d>
 800ab06:	4622      	mov	r2, r4
 800ab08:	462b      	mov	r3, r5
 800ab0a:	f7f5 fff1 	bl	8000af0 <__aeabi_dcmpeq>
 800ab0e:	b900      	cbnz	r0, 800ab12 <_dtoa_r+0x16a>
 800ab10:	3f01      	subs	r7, #1
 800ab12:	2f16      	cmp	r7, #22
 800ab14:	d851      	bhi.n	800abba <_dtoa_r+0x212>
 800ab16:	4b5b      	ldr	r3, [pc, #364]	@ (800ac84 <_dtoa_r+0x2dc>)
 800ab18:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	f7f5 ffee 	bl	8000b04 <__aeabi_dcmplt>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d048      	beq.n	800abbe <_dtoa_r+0x216>
 800ab2c:	3f01      	subs	r7, #1
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab32:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab34:	1b9b      	subs	r3, r3, r6
 800ab36:	1e5a      	subs	r2, r3, #1
 800ab38:	bf46      	itte	mi
 800ab3a:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab3e:	2300      	movmi	r3, #0
 800ab40:	f04f 0800 	movpl.w	r8, #0
 800ab44:	9208      	str	r2, [sp, #32]
 800ab46:	bf48      	it	mi
 800ab48:	9308      	strmi	r3, [sp, #32]
 800ab4a:	2f00      	cmp	r7, #0
 800ab4c:	db39      	blt.n	800abc2 <_dtoa_r+0x21a>
 800ab4e:	9b08      	ldr	r3, [sp, #32]
 800ab50:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab52:	443b      	add	r3, r7
 800ab54:	9308      	str	r3, [sp, #32]
 800ab56:	2300      	movs	r3, #0
 800ab58:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5c:	2b09      	cmp	r3, #9
 800ab5e:	d864      	bhi.n	800ac2a <_dtoa_r+0x282>
 800ab60:	2b05      	cmp	r3, #5
 800ab62:	bfc5      	ittet	gt
 800ab64:	3b04      	subgt	r3, #4
 800ab66:	2400      	movgt	r4, #0
 800ab68:	2401      	movle	r4, #1
 800ab6a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6e:	3b02      	subs	r3, #2
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d865      	bhi.n	800ac40 <_dtoa_r+0x298>
 800ab74:	e8df f003 	tbb	[pc, r3]
 800ab78:	5737392c 	.word	0x5737392c
 800ab7c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab80:	441e      	add	r6, r3
 800ab82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	bfc9      	itett	gt
 800ab8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab8e:	f1c3 0320 	rsble	r3, r3, #32
 800ab92:	409f      	lslgt	r7, r3
 800ab94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab98:	bfd8      	it	le
 800ab9a:	fa04 f003 	lslle.w	r0, r4, r3
 800ab9e:	f106 36ff 	add.w	r6, r6, #4294967295
 800aba2:	bfc4      	itt	gt
 800aba4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aba8:	ea47 0003 	orrgt.w	r0, r7, r3
 800abac:	f7f5 fcbe 	bl	800052c <__aeabi_ui2d>
 800abb0:	2201      	movs	r2, #1
 800abb2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abb6:	9214      	str	r2, [sp, #80]	@ 0x50
 800abb8:	e777      	b.n	800aaaa <_dtoa_r+0x102>
 800abba:	2301      	movs	r3, #1
 800abbc:	e7b8      	b.n	800ab30 <_dtoa_r+0x188>
 800abbe:	9012      	str	r0, [sp, #72]	@ 0x48
 800abc0:	e7b7      	b.n	800ab32 <_dtoa_r+0x18a>
 800abc2:	427b      	negs	r3, r7
 800abc4:	eba8 0807 	sub.w	r8, r8, r7
 800abc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abca:	2300      	movs	r3, #0
 800abcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abce:	e7c4      	b.n	800ab5a <_dtoa_r+0x1b2>
 800abd0:	2300      	movs	r3, #0
 800abd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dc35      	bgt.n	800ac46 <_dtoa_r+0x29e>
 800abda:	2301      	movs	r3, #1
 800abdc:	461a      	mov	r2, r3
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	920e      	str	r2, [sp, #56]	@ 0x38
 800abe4:	e00b      	b.n	800abfe <_dtoa_r+0x256>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e7f3      	b.n	800abd2 <_dtoa_r+0x22a>
 800abea:	2300      	movs	r3, #0
 800abec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abf0:	18fb      	adds	r3, r7, r3
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	3301      	adds	r3, #1
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	9307      	str	r3, [sp, #28]
 800abfa:	bfb8      	it	lt
 800abfc:	2301      	movlt	r3, #1
 800abfe:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac02:	2100      	movs	r1, #0
 800ac04:	2204      	movs	r2, #4
 800ac06:	f102 0514 	add.w	r5, r2, #20
 800ac0a:	429d      	cmp	r5, r3
 800ac0c:	d91f      	bls.n	800ac4e <_dtoa_r+0x2a6>
 800ac0e:	6041      	str	r1, [r0, #4]
 800ac10:	4658      	mov	r0, fp
 800ac12:	f000 fd8d 	bl	800b730 <_Balloc>
 800ac16:	4682      	mov	sl, r0
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d13b      	bne.n	800ac94 <_dtoa_r+0x2ec>
 800ac1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ac88 <_dtoa_r+0x2e0>)
 800ac1e:	4602      	mov	r2, r0
 800ac20:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac24:	e6d7      	b.n	800a9d6 <_dtoa_r+0x2e>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e7e0      	b.n	800abec <_dtoa_r+0x244>
 800ac2a:	2401      	movs	r4, #1
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac32:	f04f 33ff 	mov.w	r3, #4294967295
 800ac36:	2200      	movs	r2, #0
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	9307      	str	r3, [sp, #28]
 800ac3c:	2312      	movs	r3, #18
 800ac3e:	e7d0      	b.n	800abe2 <_dtoa_r+0x23a>
 800ac40:	2301      	movs	r3, #1
 800ac42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac44:	e7f5      	b.n	800ac32 <_dtoa_r+0x28a>
 800ac46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	9307      	str	r3, [sp, #28]
 800ac4c:	e7d7      	b.n	800abfe <_dtoa_r+0x256>
 800ac4e:	3101      	adds	r1, #1
 800ac50:	0052      	lsls	r2, r2, #1
 800ac52:	e7d8      	b.n	800ac06 <_dtoa_r+0x25e>
 800ac54:	f3af 8000 	nop.w
 800ac58:	636f4361 	.word	0x636f4361
 800ac5c:	3fd287a7 	.word	0x3fd287a7
 800ac60:	8b60c8b3 	.word	0x8b60c8b3
 800ac64:	3fc68a28 	.word	0x3fc68a28
 800ac68:	509f79fb 	.word	0x509f79fb
 800ac6c:	3fd34413 	.word	0x3fd34413
 800ac70:	0800e02a 	.word	0x0800e02a
 800ac74:	0800e041 	.word	0x0800e041
 800ac78:	7ff00000 	.word	0x7ff00000
 800ac7c:	0800dff5 	.word	0x0800dff5
 800ac80:	3ff80000 	.word	0x3ff80000
 800ac84:	0800e138 	.word	0x0800e138
 800ac88:	0800e099 	.word	0x0800e099
 800ac8c:	0800e026 	.word	0x0800e026
 800ac90:	0800dff4 	.word	0x0800dff4
 800ac94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac98:	6018      	str	r0, [r3, #0]
 800ac9a:	9b07      	ldr	r3, [sp, #28]
 800ac9c:	2b0e      	cmp	r3, #14
 800ac9e:	f200 80a4 	bhi.w	800adea <_dtoa_r+0x442>
 800aca2:	2c00      	cmp	r4, #0
 800aca4:	f000 80a1 	beq.w	800adea <_dtoa_r+0x442>
 800aca8:	2f00      	cmp	r7, #0
 800acaa:	dd33      	ble.n	800ad14 <_dtoa_r+0x36c>
 800acac:	f007 020f 	and.w	r2, r7, #15
 800acb0:	4bac      	ldr	r3, [pc, #688]	@ (800af64 <_dtoa_r+0x5bc>)
 800acb2:	05f8      	lsls	r0, r7, #23
 800acb4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800acb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acbc:	ed93 7b00 	vldr	d7, [r3]
 800acc0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acc4:	d516      	bpl.n	800acf4 <_dtoa_r+0x34c>
 800acc6:	4ba8      	ldr	r3, [pc, #672]	@ (800af68 <_dtoa_r+0x5c0>)
 800acc8:	f004 040f 	and.w	r4, r4, #15
 800accc:	2603      	movs	r6, #3
 800acce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acd6:	f7f5 fdcd 	bl	8000874 <__aeabi_ddiv>
 800acda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acde:	4da2      	ldr	r5, [pc, #648]	@ (800af68 <_dtoa_r+0x5c0>)
 800ace0:	b954      	cbnz	r4, 800acf8 <_dtoa_r+0x350>
 800ace2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ace6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acea:	f7f5 fdc3 	bl	8000874 <__aeabi_ddiv>
 800acee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf2:	e028      	b.n	800ad46 <_dtoa_r+0x39e>
 800acf4:	2602      	movs	r6, #2
 800acf6:	e7f2      	b.n	800acde <_dtoa_r+0x336>
 800acf8:	07e1      	lsls	r1, r4, #31
 800acfa:	d508      	bpl.n	800ad0e <_dtoa_r+0x366>
 800acfc:	3601      	adds	r6, #1
 800acfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad02:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad06:	f7f5 fc8b 	bl	8000620 <__aeabi_dmul>
 800ad0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad0e:	1064      	asrs	r4, r4, #1
 800ad10:	3508      	adds	r5, #8
 800ad12:	e7e5      	b.n	800ace0 <_dtoa_r+0x338>
 800ad14:	f000 80d2 	beq.w	800aebc <_dtoa_r+0x514>
 800ad18:	427c      	negs	r4, r7
 800ad1a:	4b92      	ldr	r3, [pc, #584]	@ (800af64 <_dtoa_r+0x5bc>)
 800ad1c:	4d92      	ldr	r5, [pc, #584]	@ (800af68 <_dtoa_r+0x5c0>)
 800ad1e:	2602      	movs	r6, #2
 800ad20:	f004 020f 	and.w	r2, r4, #15
 800ad24:	1124      	asrs	r4, r4, #4
 800ad26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	f7f5 fc75 	bl	8000620 <__aeabi_dmul>
 800ad36:	2300      	movs	r3, #0
 800ad38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad3c:	2c00      	cmp	r4, #0
 800ad3e:	f040 80b2 	bne.w	800aea6 <_dtoa_r+0x4fe>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1d3      	bne.n	800acee <_dtoa_r+0x346>
 800ad46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 80b7 	beq.w	800aec0 <_dtoa_r+0x518>
 800ad52:	2200      	movs	r2, #0
 800ad54:	4b85      	ldr	r3, [pc, #532]	@ (800af6c <_dtoa_r+0x5c4>)
 800ad56:	4620      	mov	r0, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7f5 fed3 	bl	8000b04 <__aeabi_dcmplt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f000 80ae 	beq.w	800aec0 <_dtoa_r+0x518>
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 80aa 	beq.w	800aec0 <_dtoa_r+0x518>
 800ad6c:	9b00      	ldr	r3, [sp, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	dd37      	ble.n	800ade2 <_dtoa_r+0x43a>
 800ad72:	1e7b      	subs	r3, r7, #1
 800ad74:	4620      	mov	r0, r4
 800ad76:	2200      	movs	r2, #0
 800ad78:	4629      	mov	r1, r5
 800ad7a:	9304      	str	r3, [sp, #16]
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	4b7c      	ldr	r3, [pc, #496]	@ (800af70 <_dtoa_r+0x5c8>)
 800ad80:	f7f5 fc4e 	bl	8000620 <__aeabi_dmul>
 800ad84:	9c00      	ldr	r4, [sp, #0]
 800ad86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7f5 fbde 	bl	800054c <__aeabi_i2d>
 800ad90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad94:	f7f5 fc44 	bl	8000620 <__aeabi_dmul>
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4b76      	ldr	r3, [pc, #472]	@ (800af74 <_dtoa_r+0x5cc>)
 800ad9c:	f7f5 fa8a 	bl	80002b4 <__adddf3>
 800ada0:	4605      	mov	r5, r0
 800ada2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	f040 808d 	bne.w	800aec6 <_dtoa_r+0x51e>
 800adac:	2200      	movs	r2, #0
 800adae:	4b72      	ldr	r3, [pc, #456]	@ (800af78 <_dtoa_r+0x5d0>)
 800adb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb4:	f7f5 fa7c 	bl	80002b0 <__aeabi_dsub>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adc0:	462a      	mov	r2, r5
 800adc2:	4633      	mov	r3, r6
 800adc4:	f7f5 febc 	bl	8000b40 <__aeabi_dcmpgt>
 800adc8:	2800      	cmp	r0, #0
 800adca:	f040 828b 	bne.w	800b2e4 <_dtoa_r+0x93c>
 800adce:	462a      	mov	r2, r5
 800add0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800add4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800add8:	f7f5 fe94 	bl	8000b04 <__aeabi_dcmplt>
 800addc:	2800      	cmp	r0, #0
 800adde:	f040 8128 	bne.w	800b032 <_dtoa_r+0x68a>
 800ade2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ade6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800adea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adec:	2b00      	cmp	r3, #0
 800adee:	f2c0 815a 	blt.w	800b0a6 <_dtoa_r+0x6fe>
 800adf2:	2f0e      	cmp	r7, #14
 800adf4:	f300 8157 	bgt.w	800b0a6 <_dtoa_r+0x6fe>
 800adf8:	4b5a      	ldr	r3, [pc, #360]	@ (800af64 <_dtoa_r+0x5bc>)
 800adfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adfe:	ed93 7b00 	vldr	d7, [r3]
 800ae02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	ed8d 7b00 	vstr	d7, [sp]
 800ae0a:	da03      	bge.n	800ae14 <_dtoa_r+0x46c>
 800ae0c:	9b07      	ldr	r3, [sp, #28]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f340 8101 	ble.w	800b016 <_dtoa_r+0x66e>
 800ae14:	4656      	mov	r6, sl
 800ae16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 fd27 	bl	8000874 <__aeabi_ddiv>
 800ae26:	f7f5 feab 	bl	8000b80 <__aeabi_d2iz>
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	f7f5 fb8e 	bl	800054c <__aeabi_i2d>
 800ae30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae34:	f7f5 fbf4 	bl	8000620 <__aeabi_dmul>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae40:	460b      	mov	r3, r1
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 fa34 	bl	80002b0 <__aeabi_dsub>
 800ae48:	9d07      	ldr	r5, [sp, #28]
 800ae4a:	f806 4b01 	strb.w	r4, [r6], #1
 800ae4e:	eba6 040a 	sub.w	r4, r6, sl
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	42a5      	cmp	r5, r4
 800ae58:	f040 8117 	bne.w	800b08a <_dtoa_r+0x6e2>
 800ae5c:	f7f5 fa2a 	bl	80002b4 <__adddf3>
 800ae60:	4604      	mov	r4, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae68:	f7f5 fe6a 	bl	8000b40 <__aeabi_dcmpgt>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	f040 80f9 	bne.w	800b064 <_dtoa_r+0x6bc>
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae7a:	f7f5 fe39 	bl	8000af0 <__aeabi_dcmpeq>
 800ae7e:	b118      	cbz	r0, 800ae88 <_dtoa_r+0x4e0>
 800ae80:	f018 0f01 	tst.w	r8, #1
 800ae84:	f040 80ee 	bne.w	800b064 <_dtoa_r+0x6bc>
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4658      	mov	r0, fp
 800ae8c:	f000 fc90 	bl	800b7b0 <_Bfree>
 800ae90:	2300      	movs	r3, #0
 800ae92:	3701      	adds	r7, #1
 800ae94:	7033      	strb	r3, [r6, #0]
 800ae96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae98:	601f      	str	r7, [r3, #0]
 800ae9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 831d 	beq.w	800b4dc <_dtoa_r+0xb34>
 800aea2:	601e      	str	r6, [r3, #0]
 800aea4:	e31a      	b.n	800b4dc <_dtoa_r+0xb34>
 800aea6:	07e2      	lsls	r2, r4, #31
 800aea8:	d505      	bpl.n	800aeb6 <_dtoa_r+0x50e>
 800aeaa:	3601      	adds	r6, #1
 800aeac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aeb0:	f7f5 fbb6 	bl	8000620 <__aeabi_dmul>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	1064      	asrs	r4, r4, #1
 800aeb8:	3508      	adds	r5, #8
 800aeba:	e73f      	b.n	800ad3c <_dtoa_r+0x394>
 800aebc:	2602      	movs	r6, #2
 800aebe:	e742      	b.n	800ad46 <_dtoa_r+0x39e>
 800aec0:	9c07      	ldr	r4, [sp, #28]
 800aec2:	9704      	str	r7, [sp, #16]
 800aec4:	e761      	b.n	800ad8a <_dtoa_r+0x3e2>
 800aec6:	4b27      	ldr	r3, [pc, #156]	@ (800af64 <_dtoa_r+0x5bc>)
 800aec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aeca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aece:	4454      	add	r4, sl
 800aed0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aed4:	2900      	cmp	r1, #0
 800aed6:	d053      	beq.n	800af80 <_dtoa_r+0x5d8>
 800aed8:	2000      	movs	r0, #0
 800aeda:	4928      	ldr	r1, [pc, #160]	@ (800af7c <_dtoa_r+0x5d4>)
 800aedc:	f7f5 fcca 	bl	8000874 <__aeabi_ddiv>
 800aee0:	4633      	mov	r3, r6
 800aee2:	4656      	mov	r6, sl
 800aee4:	462a      	mov	r2, r5
 800aee6:	f7f5 f9e3 	bl	80002b0 <__aeabi_dsub>
 800aeea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aeee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aef2:	f7f5 fe45 	bl	8000b80 <__aeabi_d2iz>
 800aef6:	4605      	mov	r5, r0
 800aef8:	f7f5 fb28 	bl	800054c <__aeabi_i2d>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	3530      	adds	r5, #48	@ 0x30
 800af02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af06:	f7f5 f9d3 	bl	80002b0 <__aeabi_dsub>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	f806 5b01 	strb.w	r5, [r6], #1
 800af12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af1a:	f7f5 fdf3 	bl	8000b04 <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d171      	bne.n	800b006 <_dtoa_r+0x65e>
 800af22:	2000      	movs	r0, #0
 800af24:	4911      	ldr	r1, [pc, #68]	@ (800af6c <_dtoa_r+0x5c4>)
 800af26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af2a:	f7f5 f9c1 	bl	80002b0 <__aeabi_dsub>
 800af2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af32:	f7f5 fde7 	bl	8000b04 <__aeabi_dcmplt>
 800af36:	2800      	cmp	r0, #0
 800af38:	f040 8095 	bne.w	800b066 <_dtoa_r+0x6be>
 800af3c:	42a6      	cmp	r6, r4
 800af3e:	f43f af50 	beq.w	800ade2 <_dtoa_r+0x43a>
 800af42:	2200      	movs	r2, #0
 800af44:	4b0a      	ldr	r3, [pc, #40]	@ (800af70 <_dtoa_r+0x5c8>)
 800af46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af4a:	f7f5 fb69 	bl	8000620 <__aeabi_dmul>
 800af4e:	2200      	movs	r2, #0
 800af50:	4b07      	ldr	r3, [pc, #28]	@ (800af70 <_dtoa_r+0x5c8>)
 800af52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5a:	f7f5 fb61 	bl	8000620 <__aeabi_dmul>
 800af5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af62:	e7c4      	b.n	800aeee <_dtoa_r+0x546>
 800af64:	0800e138 	.word	0x0800e138
 800af68:	0800e110 	.word	0x0800e110
 800af6c:	3ff00000 	.word	0x3ff00000
 800af70:	40240000 	.word	0x40240000
 800af74:	401c0000 	.word	0x401c0000
 800af78:	40140000 	.word	0x40140000
 800af7c:	3fe00000 	.word	0x3fe00000
 800af80:	4631      	mov	r1, r6
 800af82:	4656      	mov	r6, sl
 800af84:	4628      	mov	r0, r5
 800af86:	f7f5 fb4b 	bl	8000620 <__aeabi_dmul>
 800af8a:	9415      	str	r4, [sp, #84]	@ 0x54
 800af8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af94:	f7f5 fdf4 	bl	8000b80 <__aeabi_d2iz>
 800af98:	4605      	mov	r5, r0
 800af9a:	f7f5 fad7 	bl	800054c <__aeabi_i2d>
 800af9e:	4602      	mov	r2, r0
 800afa0:	3530      	adds	r5, #48	@ 0x30
 800afa2:	460b      	mov	r3, r1
 800afa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afa8:	f7f5 f982 	bl	80002b0 <__aeabi_dsub>
 800afac:	f806 5b01 	strb.w	r5, [r6], #1
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	42a6      	cmp	r6, r4
 800afb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afba:	f04f 0200 	mov.w	r2, #0
 800afbe:	d124      	bne.n	800b00a <_dtoa_r+0x662>
 800afc0:	4bac      	ldr	r3, [pc, #688]	@ (800b274 <_dtoa_r+0x8cc>)
 800afc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afc6:	f7f5 f975 	bl	80002b4 <__adddf3>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd2:	f7f5 fdb5 	bl	8000b40 <__aeabi_dcmpgt>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d145      	bne.n	800b066 <_dtoa_r+0x6be>
 800afda:	2000      	movs	r0, #0
 800afdc:	49a5      	ldr	r1, [pc, #660]	@ (800b274 <_dtoa_r+0x8cc>)
 800afde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afe2:	f7f5 f965 	bl	80002b0 <__aeabi_dsub>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afee:	f7f5 fd89 	bl	8000b04 <__aeabi_dcmplt>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	f43f aef5 	beq.w	800ade2 <_dtoa_r+0x43a>
 800aff8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800affa:	1e73      	subs	r3, r6, #1
 800affc:	9315      	str	r3, [sp, #84]	@ 0x54
 800affe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b002:	2b30      	cmp	r3, #48	@ 0x30
 800b004:	d0f8      	beq.n	800aff8 <_dtoa_r+0x650>
 800b006:	9f04      	ldr	r7, [sp, #16]
 800b008:	e73e      	b.n	800ae88 <_dtoa_r+0x4e0>
 800b00a:	4b9b      	ldr	r3, [pc, #620]	@ (800b278 <_dtoa_r+0x8d0>)
 800b00c:	f7f5 fb08 	bl	8000620 <__aeabi_dmul>
 800b010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b014:	e7bc      	b.n	800af90 <_dtoa_r+0x5e8>
 800b016:	d10c      	bne.n	800b032 <_dtoa_r+0x68a>
 800b018:	2200      	movs	r2, #0
 800b01a:	4b98      	ldr	r3, [pc, #608]	@ (800b27c <_dtoa_r+0x8d4>)
 800b01c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b020:	f7f5 fafe 	bl	8000620 <__aeabi_dmul>
 800b024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b028:	f7f5 fd80 	bl	8000b2c <__aeabi_dcmpge>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	f000 8157 	beq.w	800b2e0 <_dtoa_r+0x938>
 800b032:	2400      	movs	r4, #0
 800b034:	4625      	mov	r5, r4
 800b036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b038:	4656      	mov	r6, sl
 800b03a:	43db      	mvns	r3, r3
 800b03c:	9304      	str	r3, [sp, #16]
 800b03e:	2700      	movs	r7, #0
 800b040:	4621      	mov	r1, r4
 800b042:	4658      	mov	r0, fp
 800b044:	f000 fbb4 	bl	800b7b0 <_Bfree>
 800b048:	2d00      	cmp	r5, #0
 800b04a:	d0dc      	beq.n	800b006 <_dtoa_r+0x65e>
 800b04c:	b12f      	cbz	r7, 800b05a <_dtoa_r+0x6b2>
 800b04e:	42af      	cmp	r7, r5
 800b050:	d003      	beq.n	800b05a <_dtoa_r+0x6b2>
 800b052:	4639      	mov	r1, r7
 800b054:	4658      	mov	r0, fp
 800b056:	f000 fbab 	bl	800b7b0 <_Bfree>
 800b05a:	4629      	mov	r1, r5
 800b05c:	4658      	mov	r0, fp
 800b05e:	f000 fba7 	bl	800b7b0 <_Bfree>
 800b062:	e7d0      	b.n	800b006 <_dtoa_r+0x65e>
 800b064:	9704      	str	r7, [sp, #16]
 800b066:	4633      	mov	r3, r6
 800b068:	461e      	mov	r6, r3
 800b06a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b06e:	2a39      	cmp	r2, #57	@ 0x39
 800b070:	d107      	bne.n	800b082 <_dtoa_r+0x6da>
 800b072:	459a      	cmp	sl, r3
 800b074:	d1f8      	bne.n	800b068 <_dtoa_r+0x6c0>
 800b076:	9a04      	ldr	r2, [sp, #16]
 800b078:	3201      	adds	r2, #1
 800b07a:	9204      	str	r2, [sp, #16]
 800b07c:	2230      	movs	r2, #48	@ 0x30
 800b07e:	f88a 2000 	strb.w	r2, [sl]
 800b082:	781a      	ldrb	r2, [r3, #0]
 800b084:	3201      	adds	r2, #1
 800b086:	701a      	strb	r2, [r3, #0]
 800b088:	e7bd      	b.n	800b006 <_dtoa_r+0x65e>
 800b08a:	2200      	movs	r2, #0
 800b08c:	4b7a      	ldr	r3, [pc, #488]	@ (800b278 <_dtoa_r+0x8d0>)
 800b08e:	f7f5 fac7 	bl	8000620 <__aeabi_dmul>
 800b092:	2200      	movs	r2, #0
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	460d      	mov	r5, r1
 800b09a:	f7f5 fd29 	bl	8000af0 <__aeabi_dcmpeq>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f aebb 	beq.w	800ae1a <_dtoa_r+0x472>
 800b0a4:	e6f0      	b.n	800ae88 <_dtoa_r+0x4e0>
 800b0a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	f000 80db 	beq.w	800b264 <_dtoa_r+0x8bc>
 800b0ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b0:	2a01      	cmp	r2, #1
 800b0b2:	f300 80bf 	bgt.w	800b234 <_dtoa_r+0x88c>
 800b0b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	f000 80b7 	beq.w	800b22c <_dtoa_r+0x884>
 800b0be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0c4:	4646      	mov	r6, r8
 800b0c6:	9a08      	ldr	r2, [sp, #32]
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	4658      	mov	r0, fp
 800b0cc:	4498      	add	r8, r3
 800b0ce:	441a      	add	r2, r3
 800b0d0:	9208      	str	r2, [sp, #32]
 800b0d2:	f000 fc6d 	bl	800b9b0 <__i2b>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	b15e      	cbz	r6, 800b0f2 <_dtoa_r+0x74a>
 800b0da:	9b08      	ldr	r3, [sp, #32]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dd08      	ble.n	800b0f2 <_dtoa_r+0x74a>
 800b0e0:	42b3      	cmp	r3, r6
 800b0e2:	9a08      	ldr	r2, [sp, #32]
 800b0e4:	bfa8      	it	ge
 800b0e6:	4633      	movge	r3, r6
 800b0e8:	eba8 0803 	sub.w	r8, r8, r3
 800b0ec:	1af6      	subs	r6, r6, r3
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0f4:	b1f3      	cbz	r3, 800b134 <_dtoa_r+0x78c>
 800b0f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 80b7 	beq.w	800b26c <_dtoa_r+0x8c4>
 800b0fe:	b18c      	cbz	r4, 800b124 <_dtoa_r+0x77c>
 800b100:	4629      	mov	r1, r5
 800b102:	4622      	mov	r2, r4
 800b104:	4658      	mov	r0, fp
 800b106:	f000 fd13 	bl	800bb30 <__pow5mult>
 800b10a:	464a      	mov	r2, r9
 800b10c:	4601      	mov	r1, r0
 800b10e:	4605      	mov	r5, r0
 800b110:	4658      	mov	r0, fp
 800b112:	f000 fc63 	bl	800b9dc <__multiply>
 800b116:	4649      	mov	r1, r9
 800b118:	9004      	str	r0, [sp, #16]
 800b11a:	4658      	mov	r0, fp
 800b11c:	f000 fb48 	bl	800b7b0 <_Bfree>
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	4699      	mov	r9, r3
 800b124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b126:	1b1a      	subs	r2, r3, r4
 800b128:	d004      	beq.n	800b134 <_dtoa_r+0x78c>
 800b12a:	4649      	mov	r1, r9
 800b12c:	4658      	mov	r0, fp
 800b12e:	f000 fcff 	bl	800bb30 <__pow5mult>
 800b132:	4681      	mov	r9, r0
 800b134:	2101      	movs	r1, #1
 800b136:	4658      	mov	r0, fp
 800b138:	f000 fc3a 	bl	800b9b0 <__i2b>
 800b13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b13e:	4604      	mov	r4, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 81cf 	beq.w	800b4e4 <_dtoa_r+0xb3c>
 800b146:	461a      	mov	r2, r3
 800b148:	4601      	mov	r1, r0
 800b14a:	4658      	mov	r0, fp
 800b14c:	f000 fcf0 	bl	800bb30 <__pow5mult>
 800b150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b152:	4604      	mov	r4, r0
 800b154:	2b01      	cmp	r3, #1
 800b156:	f300 8095 	bgt.w	800b284 <_dtoa_r+0x8dc>
 800b15a:	9b02      	ldr	r3, [sp, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 8087 	bne.w	800b270 <_dtoa_r+0x8c8>
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f040 8089 	bne.w	800b280 <_dtoa_r+0x8d8>
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b174:	0d1b      	lsrs	r3, r3, #20
 800b176:	051b      	lsls	r3, r3, #20
 800b178:	b12b      	cbz	r3, 800b186 <_dtoa_r+0x7de>
 800b17a:	9b08      	ldr	r3, [sp, #32]
 800b17c:	f108 0801 	add.w	r8, r8, #1
 800b180:	3301      	adds	r3, #1
 800b182:	9308      	str	r3, [sp, #32]
 800b184:	2301      	movs	r3, #1
 800b186:	930a      	str	r3, [sp, #40]	@ 0x28
 800b188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 81b0 	beq.w	800b4f0 <_dtoa_r+0xb48>
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b196:	6918      	ldr	r0, [r3, #16]
 800b198:	f000 fbbe 	bl	800b918 <__hi0bits>
 800b19c:	f1c0 0020 	rsb	r0, r0, #32
 800b1a0:	9b08      	ldr	r3, [sp, #32]
 800b1a2:	4418      	add	r0, r3
 800b1a4:	f010 001f 	ands.w	r0, r0, #31
 800b1a8:	d077      	beq.n	800b29a <_dtoa_r+0x8f2>
 800b1aa:	f1c0 0320 	rsb	r3, r0, #32
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	dd6b      	ble.n	800b28a <_dtoa_r+0x8e2>
 800b1b2:	f1c0 001c 	rsb	r0, r0, #28
 800b1b6:	9b08      	ldr	r3, [sp, #32]
 800b1b8:	4480      	add	r8, r0
 800b1ba:	4403      	add	r3, r0
 800b1bc:	4406      	add	r6, r0
 800b1be:	9308      	str	r3, [sp, #32]
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	dd05      	ble.n	800b1d2 <_dtoa_r+0x82a>
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	4642      	mov	r2, r8
 800b1ca:	4658      	mov	r0, fp
 800b1cc:	f000 fd0a 	bl	800bbe4 <__lshift>
 800b1d0:	4681      	mov	r9, r0
 800b1d2:	9b08      	ldr	r3, [sp, #32]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dd05      	ble.n	800b1e4 <_dtoa_r+0x83c>
 800b1d8:	4621      	mov	r1, r4
 800b1da:	461a      	mov	r2, r3
 800b1dc:	4658      	mov	r0, fp
 800b1de:	f000 fd01 	bl	800bbe4 <__lshift>
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d059      	beq.n	800b29e <_dtoa_r+0x8f6>
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	f000 fd65 	bl	800bcbc <__mcmp>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	da53      	bge.n	800b29e <_dtoa_r+0x8f6>
 800b1f6:	1e7b      	subs	r3, r7, #1
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	220a      	movs	r2, #10
 800b1fc:	4658      	mov	r0, fp
 800b1fe:	9304      	str	r3, [sp, #16]
 800b200:	2300      	movs	r3, #0
 800b202:	f000 faf7 	bl	800b7f4 <__multadd>
 800b206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b208:	4681      	mov	r9, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 8172 	beq.w	800b4f4 <_dtoa_r+0xb4c>
 800b210:	2300      	movs	r3, #0
 800b212:	4629      	mov	r1, r5
 800b214:	220a      	movs	r2, #10
 800b216:	4658      	mov	r0, fp
 800b218:	f000 faec 	bl	800b7f4 <__multadd>
 800b21c:	9b00      	ldr	r3, [sp, #0]
 800b21e:	4605      	mov	r5, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	dc67      	bgt.n	800b2f4 <_dtoa_r+0x94c>
 800b224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b226:	2b02      	cmp	r3, #2
 800b228:	dc41      	bgt.n	800b2ae <_dtoa_r+0x906>
 800b22a:	e063      	b.n	800b2f4 <_dtoa_r+0x94c>
 800b22c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b22e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b232:	e746      	b.n	800b0c2 <_dtoa_r+0x71a>
 800b234:	9b07      	ldr	r3, [sp, #28]
 800b236:	1e5c      	subs	r4, r3, #1
 800b238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	bfb7      	itett	lt
 800b23e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b240:	1b1c      	subge	r4, r3, r4
 800b242:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b244:	1ae3      	sublt	r3, r4, r3
 800b246:	bfbe      	ittt	lt
 800b248:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b24a:	2400      	movlt	r4, #0
 800b24c:	18d2      	addlt	r2, r2, r3
 800b24e:	9b07      	ldr	r3, [sp, #28]
 800b250:	bfb8      	it	lt
 800b252:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b254:	2b00      	cmp	r3, #0
 800b256:	bfb5      	itete	lt
 800b258:	eba8 0603 	sublt.w	r6, r8, r3
 800b25c:	4646      	movge	r6, r8
 800b25e:	2300      	movlt	r3, #0
 800b260:	9b07      	ldrge	r3, [sp, #28]
 800b262:	e730      	b.n	800b0c6 <_dtoa_r+0x71e>
 800b264:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b266:	4646      	mov	r6, r8
 800b268:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b26a:	e735      	b.n	800b0d8 <_dtoa_r+0x730>
 800b26c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b26e:	e75c      	b.n	800b12a <_dtoa_r+0x782>
 800b270:	2300      	movs	r3, #0
 800b272:	e788      	b.n	800b186 <_dtoa_r+0x7de>
 800b274:	3fe00000 	.word	0x3fe00000
 800b278:	40240000 	.word	0x40240000
 800b27c:	40140000 	.word	0x40140000
 800b280:	9b02      	ldr	r3, [sp, #8]
 800b282:	e780      	b.n	800b186 <_dtoa_r+0x7de>
 800b284:	2300      	movs	r3, #0
 800b286:	930a      	str	r3, [sp, #40]	@ 0x28
 800b288:	e782      	b.n	800b190 <_dtoa_r+0x7e8>
 800b28a:	d099      	beq.n	800b1c0 <_dtoa_r+0x818>
 800b28c:	331c      	adds	r3, #28
 800b28e:	9a08      	ldr	r2, [sp, #32]
 800b290:	441a      	add	r2, r3
 800b292:	4498      	add	r8, r3
 800b294:	441e      	add	r6, r3
 800b296:	9208      	str	r2, [sp, #32]
 800b298:	e792      	b.n	800b1c0 <_dtoa_r+0x818>
 800b29a:	4603      	mov	r3, r0
 800b29c:	e7f6      	b.n	800b28c <_dtoa_r+0x8e4>
 800b29e:	9b07      	ldr	r3, [sp, #28]
 800b2a0:	9704      	str	r7, [sp, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dc20      	bgt.n	800b2e8 <_dtoa_r+0x940>
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	dd1e      	ble.n	800b2ec <_dtoa_r+0x944>
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f47f aec0 	bne.w	800b036 <_dtoa_r+0x68e>
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	2205      	movs	r2, #5
 800b2ba:	4658      	mov	r0, fp
 800b2bc:	f000 fa9a 	bl	800b7f4 <__multadd>
 800b2c0:	4601      	mov	r1, r0
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4648      	mov	r0, r9
 800b2c6:	f000 fcf9 	bl	800bcbc <__mcmp>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f77f aeb3 	ble.w	800b036 <_dtoa_r+0x68e>
 800b2d0:	2331      	movs	r3, #49	@ 0x31
 800b2d2:	4656      	mov	r6, sl
 800b2d4:	f806 3b01 	strb.w	r3, [r6], #1
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	9304      	str	r3, [sp, #16]
 800b2de:	e6ae      	b.n	800b03e <_dtoa_r+0x696>
 800b2e0:	9c07      	ldr	r4, [sp, #28]
 800b2e2:	9704      	str	r7, [sp, #16]
 800b2e4:	4625      	mov	r5, r4
 800b2e6:	e7f3      	b.n	800b2d0 <_dtoa_r+0x928>
 800b2e8:	9b07      	ldr	r3, [sp, #28]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 8104 	beq.w	800b4fc <_dtoa_r+0xb54>
 800b2f4:	2e00      	cmp	r6, #0
 800b2f6:	dd05      	ble.n	800b304 <_dtoa_r+0x95c>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	4658      	mov	r0, fp
 800b2fe:	f000 fc71 	bl	800bbe4 <__lshift>
 800b302:	4605      	mov	r5, r0
 800b304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b306:	2b00      	cmp	r3, #0
 800b308:	d05a      	beq.n	800b3c0 <_dtoa_r+0xa18>
 800b30a:	6869      	ldr	r1, [r5, #4]
 800b30c:	4658      	mov	r0, fp
 800b30e:	f000 fa0f 	bl	800b730 <_Balloc>
 800b312:	4606      	mov	r6, r0
 800b314:	b928      	cbnz	r0, 800b322 <_dtoa_r+0x97a>
 800b316:	4b84      	ldr	r3, [pc, #528]	@ (800b528 <_dtoa_r+0xb80>)
 800b318:	4602      	mov	r2, r0
 800b31a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b31e:	f7ff bb5a 	b.w	800a9d6 <_dtoa_r+0x2e>
 800b322:	692a      	ldr	r2, [r5, #16]
 800b324:	f105 010c 	add.w	r1, r5, #12
 800b328:	300c      	adds	r0, #12
 800b32a:	3202      	adds	r2, #2
 800b32c:	0092      	lsls	r2, r2, #2
 800b32e:	f002 f957 	bl	800d5e0 <memcpy>
 800b332:	2201      	movs	r2, #1
 800b334:	4631      	mov	r1, r6
 800b336:	4658      	mov	r0, fp
 800b338:	f000 fc54 	bl	800bbe4 <__lshift>
 800b33c:	f10a 0301 	add.w	r3, sl, #1
 800b340:	462f      	mov	r7, r5
 800b342:	4605      	mov	r5, r0
 800b344:	9307      	str	r3, [sp, #28]
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	4453      	add	r3, sl
 800b34a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b34c:	9b02      	ldr	r3, [sp, #8]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	930a      	str	r3, [sp, #40]	@ 0x28
 800b354:	9b07      	ldr	r3, [sp, #28]
 800b356:	4621      	mov	r1, r4
 800b358:	4648      	mov	r0, r9
 800b35a:	3b01      	subs	r3, #1
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	f7ff fa93 	bl	800a888 <quorem>
 800b362:	4639      	mov	r1, r7
 800b364:	9002      	str	r0, [sp, #8]
 800b366:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b36a:	4648      	mov	r0, r9
 800b36c:	f000 fca6 	bl	800bcbc <__mcmp>
 800b370:	462a      	mov	r2, r5
 800b372:	9008      	str	r0, [sp, #32]
 800b374:	4621      	mov	r1, r4
 800b376:	4658      	mov	r0, fp
 800b378:	f000 fcbc 	bl	800bcf4 <__mdiff>
 800b37c:	68c2      	ldr	r2, [r0, #12]
 800b37e:	4606      	mov	r6, r0
 800b380:	bb02      	cbnz	r2, 800b3c4 <_dtoa_r+0xa1c>
 800b382:	4601      	mov	r1, r0
 800b384:	4648      	mov	r0, r9
 800b386:	f000 fc99 	bl	800bcbc <__mcmp>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4631      	mov	r1, r6
 800b38e:	4658      	mov	r0, fp
 800b390:	920e      	str	r2, [sp, #56]	@ 0x38
 800b392:	f000 fa0d 	bl	800b7b0 <_Bfree>
 800b396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b398:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b39a:	9e07      	ldr	r6, [sp, #28]
 800b39c:	ea43 0102 	orr.w	r1, r3, r2
 800b3a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3a2:	4319      	orrs	r1, r3
 800b3a4:	d110      	bne.n	800b3c8 <_dtoa_r+0xa20>
 800b3a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3aa:	d029      	beq.n	800b400 <_dtoa_r+0xa58>
 800b3ac:	9b08      	ldr	r3, [sp, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	dd02      	ble.n	800b3b8 <_dtoa_r+0xa10>
 800b3b2:	9b02      	ldr	r3, [sp, #8]
 800b3b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3b8:	9b00      	ldr	r3, [sp, #0]
 800b3ba:	f883 8000 	strb.w	r8, [r3]
 800b3be:	e63f      	b.n	800b040 <_dtoa_r+0x698>
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	e7bb      	b.n	800b33c <_dtoa_r+0x994>
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	e7e1      	b.n	800b38c <_dtoa_r+0x9e4>
 800b3c8:	9b08      	ldr	r3, [sp, #32]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	db04      	blt.n	800b3d8 <_dtoa_r+0xa30>
 800b3ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b3d4:	430b      	orrs	r3, r1
 800b3d6:	d120      	bne.n	800b41a <_dtoa_r+0xa72>
 800b3d8:	2a00      	cmp	r2, #0
 800b3da:	dded      	ble.n	800b3b8 <_dtoa_r+0xa10>
 800b3dc:	4649      	mov	r1, r9
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4658      	mov	r0, fp
 800b3e2:	f000 fbff 	bl	800bbe4 <__lshift>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4681      	mov	r9, r0
 800b3ea:	f000 fc67 	bl	800bcbc <__mcmp>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	dc03      	bgt.n	800b3fa <_dtoa_r+0xa52>
 800b3f2:	d1e1      	bne.n	800b3b8 <_dtoa_r+0xa10>
 800b3f4:	f018 0f01 	tst.w	r8, #1
 800b3f8:	d0de      	beq.n	800b3b8 <_dtoa_r+0xa10>
 800b3fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3fe:	d1d8      	bne.n	800b3b2 <_dtoa_r+0xa0a>
 800b400:	2339      	movs	r3, #57	@ 0x39
 800b402:	9a00      	ldr	r2, [sp, #0]
 800b404:	7013      	strb	r3, [r2, #0]
 800b406:	4633      	mov	r3, r6
 800b408:	461e      	mov	r6, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b410:	2a39      	cmp	r2, #57	@ 0x39
 800b412:	d052      	beq.n	800b4ba <_dtoa_r+0xb12>
 800b414:	3201      	adds	r2, #1
 800b416:	701a      	strb	r2, [r3, #0]
 800b418:	e612      	b.n	800b040 <_dtoa_r+0x698>
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	dd07      	ble.n	800b42e <_dtoa_r+0xa86>
 800b41e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b422:	d0ed      	beq.n	800b400 <_dtoa_r+0xa58>
 800b424:	f108 0301 	add.w	r3, r8, #1
 800b428:	9a00      	ldr	r2, [sp, #0]
 800b42a:	7013      	strb	r3, [r2, #0]
 800b42c:	e608      	b.n	800b040 <_dtoa_r+0x698>
 800b42e:	9b07      	ldr	r3, [sp, #28]
 800b430:	9a07      	ldr	r2, [sp, #28]
 800b432:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b438:	4293      	cmp	r3, r2
 800b43a:	d028      	beq.n	800b48e <_dtoa_r+0xae6>
 800b43c:	4649      	mov	r1, r9
 800b43e:	2300      	movs	r3, #0
 800b440:	220a      	movs	r2, #10
 800b442:	4658      	mov	r0, fp
 800b444:	f000 f9d6 	bl	800b7f4 <__multadd>
 800b448:	42af      	cmp	r7, r5
 800b44a:	4681      	mov	r9, r0
 800b44c:	f04f 0300 	mov.w	r3, #0
 800b450:	f04f 020a 	mov.w	r2, #10
 800b454:	4639      	mov	r1, r7
 800b456:	4658      	mov	r0, fp
 800b458:	d107      	bne.n	800b46a <_dtoa_r+0xac2>
 800b45a:	f000 f9cb 	bl	800b7f4 <__multadd>
 800b45e:	4607      	mov	r7, r0
 800b460:	4605      	mov	r5, r0
 800b462:	9b07      	ldr	r3, [sp, #28]
 800b464:	3301      	adds	r3, #1
 800b466:	9307      	str	r3, [sp, #28]
 800b468:	e774      	b.n	800b354 <_dtoa_r+0x9ac>
 800b46a:	f000 f9c3 	bl	800b7f4 <__multadd>
 800b46e:	4629      	mov	r1, r5
 800b470:	4607      	mov	r7, r0
 800b472:	2300      	movs	r3, #0
 800b474:	220a      	movs	r2, #10
 800b476:	4658      	mov	r0, fp
 800b478:	f000 f9bc 	bl	800b7f4 <__multadd>
 800b47c:	4605      	mov	r5, r0
 800b47e:	e7f0      	b.n	800b462 <_dtoa_r+0xaba>
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	2700      	movs	r7, #0
 800b484:	2b00      	cmp	r3, #0
 800b486:	bfcc      	ite	gt
 800b488:	461e      	movgt	r6, r3
 800b48a:	2601      	movle	r6, #1
 800b48c:	4456      	add	r6, sl
 800b48e:	4649      	mov	r1, r9
 800b490:	2201      	movs	r2, #1
 800b492:	4658      	mov	r0, fp
 800b494:	f000 fba6 	bl	800bbe4 <__lshift>
 800b498:	4621      	mov	r1, r4
 800b49a:	4681      	mov	r9, r0
 800b49c:	f000 fc0e 	bl	800bcbc <__mcmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	dcb0      	bgt.n	800b406 <_dtoa_r+0xa5e>
 800b4a4:	d102      	bne.n	800b4ac <_dtoa_r+0xb04>
 800b4a6:	f018 0f01 	tst.w	r8, #1
 800b4aa:	d1ac      	bne.n	800b406 <_dtoa_r+0xa5e>
 800b4ac:	4633      	mov	r3, r6
 800b4ae:	461e      	mov	r6, r3
 800b4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4b4:	2a30      	cmp	r2, #48	@ 0x30
 800b4b6:	d0fa      	beq.n	800b4ae <_dtoa_r+0xb06>
 800b4b8:	e5c2      	b.n	800b040 <_dtoa_r+0x698>
 800b4ba:	459a      	cmp	sl, r3
 800b4bc:	d1a4      	bne.n	800b408 <_dtoa_r+0xa60>
 800b4be:	9b04      	ldr	r3, [sp, #16]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	2331      	movs	r3, #49	@ 0x31
 800b4c6:	f88a 3000 	strb.w	r3, [sl]
 800b4ca:	e5b9      	b.n	800b040 <_dtoa_r+0x698>
 800b4cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b52c <_dtoa_r+0xb84>
 800b4d2:	b11b      	cbz	r3, 800b4dc <_dtoa_r+0xb34>
 800b4d4:	f10a 0308 	add.w	r3, sl, #8
 800b4d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	4650      	mov	r0, sl
 800b4de:	b019      	add	sp, #100	@ 0x64
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	f77f ae37 	ble.w	800b15a <_dtoa_r+0x7b2>
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	e655      	b.n	800b1a0 <_dtoa_r+0x7f8>
 800b4f4:	9b00      	ldr	r3, [sp, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f77f aed6 	ble.w	800b2a8 <_dtoa_r+0x900>
 800b4fc:	4656      	mov	r6, sl
 800b4fe:	4621      	mov	r1, r4
 800b500:	4648      	mov	r0, r9
 800b502:	f7ff f9c1 	bl	800a888 <quorem>
 800b506:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b50a:	9b00      	ldr	r3, [sp, #0]
 800b50c:	f806 8b01 	strb.w	r8, [r6], #1
 800b510:	eba6 020a 	sub.w	r2, r6, sl
 800b514:	4293      	cmp	r3, r2
 800b516:	ddb3      	ble.n	800b480 <_dtoa_r+0xad8>
 800b518:	4649      	mov	r1, r9
 800b51a:	2300      	movs	r3, #0
 800b51c:	220a      	movs	r2, #10
 800b51e:	4658      	mov	r0, fp
 800b520:	f000 f968 	bl	800b7f4 <__multadd>
 800b524:	4681      	mov	r9, r0
 800b526:	e7ea      	b.n	800b4fe <_dtoa_r+0xb56>
 800b528:	0800e099 	.word	0x0800e099
 800b52c:	0800e01d 	.word	0x0800e01d

0800b530 <_free_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4605      	mov	r5, r0
 800b534:	2900      	cmp	r1, #0
 800b536:	d041      	beq.n	800b5bc <_free_r+0x8c>
 800b538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b53c:	1f0c      	subs	r4, r1, #4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfb8      	it	lt
 800b542:	18e4      	addlt	r4, r4, r3
 800b544:	f000 f8e8 	bl	800b718 <__malloc_lock>
 800b548:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c0 <_free_r+0x90>)
 800b54a:	6813      	ldr	r3, [r2, #0]
 800b54c:	b933      	cbnz	r3, 800b55c <_free_r+0x2c>
 800b54e:	6063      	str	r3, [r4, #4]
 800b550:	6014      	str	r4, [r2, #0]
 800b552:	4628      	mov	r0, r5
 800b554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b558:	f000 b8e4 	b.w	800b724 <__malloc_unlock>
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	d908      	bls.n	800b572 <_free_r+0x42>
 800b560:	6820      	ldr	r0, [r4, #0]
 800b562:	1821      	adds	r1, r4, r0
 800b564:	428b      	cmp	r3, r1
 800b566:	bf01      	itttt	eq
 800b568:	6819      	ldreq	r1, [r3, #0]
 800b56a:	685b      	ldreq	r3, [r3, #4]
 800b56c:	1809      	addeq	r1, r1, r0
 800b56e:	6021      	streq	r1, [r4, #0]
 800b570:	e7ed      	b.n	800b54e <_free_r+0x1e>
 800b572:	461a      	mov	r2, r3
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	b10b      	cbz	r3, 800b57c <_free_r+0x4c>
 800b578:	42a3      	cmp	r3, r4
 800b57a:	d9fa      	bls.n	800b572 <_free_r+0x42>
 800b57c:	6811      	ldr	r1, [r2, #0]
 800b57e:	1850      	adds	r0, r2, r1
 800b580:	42a0      	cmp	r0, r4
 800b582:	d10b      	bne.n	800b59c <_free_r+0x6c>
 800b584:	6820      	ldr	r0, [r4, #0]
 800b586:	4401      	add	r1, r0
 800b588:	1850      	adds	r0, r2, r1
 800b58a:	6011      	str	r1, [r2, #0]
 800b58c:	4283      	cmp	r3, r0
 800b58e:	d1e0      	bne.n	800b552 <_free_r+0x22>
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4408      	add	r0, r1
 800b596:	6053      	str	r3, [r2, #4]
 800b598:	6010      	str	r0, [r2, #0]
 800b59a:	e7da      	b.n	800b552 <_free_r+0x22>
 800b59c:	d902      	bls.n	800b5a4 <_free_r+0x74>
 800b59e:	230c      	movs	r3, #12
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	e7d6      	b.n	800b552 <_free_r+0x22>
 800b5a4:	6820      	ldr	r0, [r4, #0]
 800b5a6:	1821      	adds	r1, r4, r0
 800b5a8:	428b      	cmp	r3, r1
 800b5aa:	bf02      	ittt	eq
 800b5ac:	6819      	ldreq	r1, [r3, #0]
 800b5ae:	685b      	ldreq	r3, [r3, #4]
 800b5b0:	1809      	addeq	r1, r1, r0
 800b5b2:	6063      	str	r3, [r4, #4]
 800b5b4:	bf08      	it	eq
 800b5b6:	6021      	streq	r1, [r4, #0]
 800b5b8:	6054      	str	r4, [r2, #4]
 800b5ba:	e7ca      	b.n	800b552 <_free_r+0x22>
 800b5bc:	bd38      	pop	{r3, r4, r5, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000540 	.word	0x20000540

0800b5c4 <malloc>:
 800b5c4:	4b02      	ldr	r3, [pc, #8]	@ (800b5d0 <malloc+0xc>)
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f000 b825 	b.w	800b618 <_malloc_r>
 800b5ce:	bf00      	nop
 800b5d0:	20000018 	.word	0x20000018

0800b5d4 <sbrk_aligned>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	4e0f      	ldr	r6, [pc, #60]	@ (800b614 <sbrk_aligned+0x40>)
 800b5d8:	460c      	mov	r4, r1
 800b5da:	4605      	mov	r5, r0
 800b5dc:	6831      	ldr	r1, [r6, #0]
 800b5de:	b911      	cbnz	r1, 800b5e6 <sbrk_aligned+0x12>
 800b5e0:	f001 ffee 	bl	800d5c0 <_sbrk_r>
 800b5e4:	6030      	str	r0, [r6, #0]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f001 ffe9 	bl	800d5c0 <_sbrk_r>
 800b5ee:	1c43      	adds	r3, r0, #1
 800b5f0:	d103      	bne.n	800b5fa <sbrk_aligned+0x26>
 800b5f2:	f04f 34ff 	mov.w	r4, #4294967295
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	1cc4      	adds	r4, r0, #3
 800b5fc:	f024 0403 	bic.w	r4, r4, #3
 800b600:	42a0      	cmp	r0, r4
 800b602:	d0f8      	beq.n	800b5f6 <sbrk_aligned+0x22>
 800b604:	1a21      	subs	r1, r4, r0
 800b606:	4628      	mov	r0, r5
 800b608:	f001 ffda 	bl	800d5c0 <_sbrk_r>
 800b60c:	3001      	adds	r0, #1
 800b60e:	d1f2      	bne.n	800b5f6 <sbrk_aligned+0x22>
 800b610:	e7ef      	b.n	800b5f2 <sbrk_aligned+0x1e>
 800b612:	bf00      	nop
 800b614:	2000053c 	.word	0x2000053c

0800b618 <_malloc_r>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	1ccd      	adds	r5, r1, #3
 800b61e:	4606      	mov	r6, r0
 800b620:	f025 0503 	bic.w	r5, r5, #3
 800b624:	3508      	adds	r5, #8
 800b626:	2d0c      	cmp	r5, #12
 800b628:	bf38      	it	cc
 800b62a:	250c      	movcc	r5, #12
 800b62c:	2d00      	cmp	r5, #0
 800b62e:	db01      	blt.n	800b634 <_malloc_r+0x1c>
 800b630:	42a9      	cmp	r1, r5
 800b632:	d904      	bls.n	800b63e <_malloc_r+0x26>
 800b634:	230c      	movs	r3, #12
 800b636:	6033      	str	r3, [r6, #0]
 800b638:	2000      	movs	r0, #0
 800b63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b714 <_malloc_r+0xfc>
 800b642:	f000 f869 	bl	800b718 <__malloc_lock>
 800b646:	f8d8 3000 	ldr.w	r3, [r8]
 800b64a:	461c      	mov	r4, r3
 800b64c:	bb44      	cbnz	r4, 800b6a0 <_malloc_r+0x88>
 800b64e:	4629      	mov	r1, r5
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff ffbf 	bl	800b5d4 <sbrk_aligned>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	4604      	mov	r4, r0
 800b65a:	d158      	bne.n	800b70e <_malloc_r+0xf6>
 800b65c:	f8d8 4000 	ldr.w	r4, [r8]
 800b660:	4627      	mov	r7, r4
 800b662:	2f00      	cmp	r7, #0
 800b664:	d143      	bne.n	800b6ee <_malloc_r+0xd6>
 800b666:	2c00      	cmp	r4, #0
 800b668:	d04b      	beq.n	800b702 <_malloc_r+0xea>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	4639      	mov	r1, r7
 800b66e:	4630      	mov	r0, r6
 800b670:	eb04 0903 	add.w	r9, r4, r3
 800b674:	f001 ffa4 	bl	800d5c0 <_sbrk_r>
 800b678:	4581      	cmp	r9, r0
 800b67a:	d142      	bne.n	800b702 <_malloc_r+0xea>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	4630      	mov	r0, r6
 800b680:	1a6d      	subs	r5, r5, r1
 800b682:	4629      	mov	r1, r5
 800b684:	f7ff ffa6 	bl	800b5d4 <sbrk_aligned>
 800b688:	3001      	adds	r0, #1
 800b68a:	d03a      	beq.n	800b702 <_malloc_r+0xea>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	442b      	add	r3, r5
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	f8d8 3000 	ldr.w	r3, [r8]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	bb62      	cbnz	r2, 800b6f4 <_malloc_r+0xdc>
 800b69a:	f8c8 7000 	str.w	r7, [r8]
 800b69e:	e00f      	b.n	800b6c0 <_malloc_r+0xa8>
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	1b52      	subs	r2, r2, r5
 800b6a4:	d420      	bmi.n	800b6e8 <_malloc_r+0xd0>
 800b6a6:	2a0b      	cmp	r2, #11
 800b6a8:	d917      	bls.n	800b6da <_malloc_r+0xc2>
 800b6aa:	1961      	adds	r1, r4, r5
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	6025      	str	r5, [r4, #0]
 800b6b0:	bf18      	it	ne
 800b6b2:	6059      	strne	r1, [r3, #4]
 800b6b4:	6863      	ldr	r3, [r4, #4]
 800b6b6:	bf08      	it	eq
 800b6b8:	f8c8 1000 	streq.w	r1, [r8]
 800b6bc:	5162      	str	r2, [r4, r5]
 800b6be:	604b      	str	r3, [r1, #4]
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f82f 	bl	800b724 <__malloc_unlock>
 800b6c6:	f104 000b 	add.w	r0, r4, #11
 800b6ca:	1d23      	adds	r3, r4, #4
 800b6cc:	f020 0007 	bic.w	r0, r0, #7
 800b6d0:	1ac2      	subs	r2, r0, r3
 800b6d2:	bf1c      	itt	ne
 800b6d4:	1a1b      	subne	r3, r3, r0
 800b6d6:	50a3      	strne	r3, [r4, r2]
 800b6d8:	e7af      	b.n	800b63a <_malloc_r+0x22>
 800b6da:	6862      	ldr	r2, [r4, #4]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	bf0c      	ite	eq
 800b6e0:	f8c8 2000 	streq.w	r2, [r8]
 800b6e4:	605a      	strne	r2, [r3, #4]
 800b6e6:	e7eb      	b.n	800b6c0 <_malloc_r+0xa8>
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	6864      	ldr	r4, [r4, #4]
 800b6ec:	e7ae      	b.n	800b64c <_malloc_r+0x34>
 800b6ee:	463c      	mov	r4, r7
 800b6f0:	687f      	ldr	r7, [r7, #4]
 800b6f2:	e7b6      	b.n	800b662 <_malloc_r+0x4a>
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d1fb      	bne.n	800b6f4 <_malloc_r+0xdc>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	6053      	str	r3, [r2, #4]
 800b700:	e7de      	b.n	800b6c0 <_malloc_r+0xa8>
 800b702:	230c      	movs	r3, #12
 800b704:	4630      	mov	r0, r6
 800b706:	6033      	str	r3, [r6, #0]
 800b708:	f000 f80c 	bl	800b724 <__malloc_unlock>
 800b70c:	e794      	b.n	800b638 <_malloc_r+0x20>
 800b70e:	6005      	str	r5, [r0, #0]
 800b710:	e7d6      	b.n	800b6c0 <_malloc_r+0xa8>
 800b712:	bf00      	nop
 800b714:	20000540 	.word	0x20000540

0800b718 <__malloc_lock>:
 800b718:	4801      	ldr	r0, [pc, #4]	@ (800b720 <__malloc_lock+0x8>)
 800b71a:	f7ff b89e 	b.w	800a85a <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	20000538 	.word	0x20000538

0800b724 <__malloc_unlock>:
 800b724:	4801      	ldr	r0, [pc, #4]	@ (800b72c <__malloc_unlock+0x8>)
 800b726:	f7ff b899 	b.w	800a85c <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	20000538 	.word	0x20000538

0800b730 <_Balloc>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	69c6      	ldr	r6, [r0, #28]
 800b734:	4604      	mov	r4, r0
 800b736:	460d      	mov	r5, r1
 800b738:	b976      	cbnz	r6, 800b758 <_Balloc+0x28>
 800b73a:	2010      	movs	r0, #16
 800b73c:	f7ff ff42 	bl	800b5c4 <malloc>
 800b740:	4602      	mov	r2, r0
 800b742:	61e0      	str	r0, [r4, #28]
 800b744:	b920      	cbnz	r0, 800b750 <_Balloc+0x20>
 800b746:	4b18      	ldr	r3, [pc, #96]	@ (800b7a8 <_Balloc+0x78>)
 800b748:	216b      	movs	r1, #107	@ 0x6b
 800b74a:	4818      	ldr	r0, [pc, #96]	@ (800b7ac <_Balloc+0x7c>)
 800b74c:	f001 ff60 	bl	800d610 <__assert_func>
 800b750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b754:	6006      	str	r6, [r0, #0]
 800b756:	60c6      	str	r6, [r0, #12]
 800b758:	69e6      	ldr	r6, [r4, #28]
 800b75a:	68f3      	ldr	r3, [r6, #12]
 800b75c:	b183      	cbz	r3, 800b780 <_Balloc+0x50>
 800b75e:	69e3      	ldr	r3, [r4, #28]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b766:	b9b8      	cbnz	r0, 800b798 <_Balloc+0x68>
 800b768:	2101      	movs	r1, #1
 800b76a:	4620      	mov	r0, r4
 800b76c:	fa01 f605 	lsl.w	r6, r1, r5
 800b770:	1d72      	adds	r2, r6, #5
 800b772:	0092      	lsls	r2, r2, #2
 800b774:	f001 ff6a 	bl	800d64c <_calloc_r>
 800b778:	b160      	cbz	r0, 800b794 <_Balloc+0x64>
 800b77a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b77e:	e00e      	b.n	800b79e <_Balloc+0x6e>
 800b780:	2221      	movs	r2, #33	@ 0x21
 800b782:	2104      	movs	r1, #4
 800b784:	4620      	mov	r0, r4
 800b786:	f001 ff61 	bl	800d64c <_calloc_r>
 800b78a:	69e3      	ldr	r3, [r4, #28]
 800b78c:	60f0      	str	r0, [r6, #12]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e4      	bne.n	800b75e <_Balloc+0x2e>
 800b794:	2000      	movs	r0, #0
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	6802      	ldr	r2, [r0, #0]
 800b79a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7a4:	e7f7      	b.n	800b796 <_Balloc+0x66>
 800b7a6:	bf00      	nop
 800b7a8:	0800e02a 	.word	0x0800e02a
 800b7ac:	0800e0aa 	.word	0x0800e0aa

0800b7b0 <_Bfree>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	69c6      	ldr	r6, [r0, #28]
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	b976      	cbnz	r6, 800b7d8 <_Bfree+0x28>
 800b7ba:	2010      	movs	r0, #16
 800b7bc:	f7ff ff02 	bl	800b5c4 <malloc>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	61e8      	str	r0, [r5, #28]
 800b7c4:	b920      	cbnz	r0, 800b7d0 <_Bfree+0x20>
 800b7c6:	4b09      	ldr	r3, [pc, #36]	@ (800b7ec <_Bfree+0x3c>)
 800b7c8:	218f      	movs	r1, #143	@ 0x8f
 800b7ca:	4809      	ldr	r0, [pc, #36]	@ (800b7f0 <_Bfree+0x40>)
 800b7cc:	f001 ff20 	bl	800d610 <__assert_func>
 800b7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7d4:	6006      	str	r6, [r0, #0]
 800b7d6:	60c6      	str	r6, [r0, #12]
 800b7d8:	b13c      	cbz	r4, 800b7ea <_Bfree+0x3a>
 800b7da:	69eb      	ldr	r3, [r5, #28]
 800b7dc:	6862      	ldr	r2, [r4, #4]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7e4:	6021      	str	r1, [r4, #0]
 800b7e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	0800e02a 	.word	0x0800e02a
 800b7f0:	0800e0aa 	.word	0x0800e0aa

0800b7f4 <__multadd>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	f101 0c14 	add.w	ip, r1, #20
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	461e      	mov	r6, r3
 800b802:	690d      	ldr	r5, [r1, #16]
 800b804:	2000      	movs	r0, #0
 800b806:	f8dc 3000 	ldr.w	r3, [ip]
 800b80a:	3001      	adds	r0, #1
 800b80c:	b299      	uxth	r1, r3
 800b80e:	4285      	cmp	r5, r0
 800b810:	fb02 6101 	mla	r1, r2, r1, r6
 800b814:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b818:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b81c:	b289      	uxth	r1, r1
 800b81e:	fb02 3306 	mla	r3, r2, r6, r3
 800b822:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b826:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b82a:	f84c 1b04 	str.w	r1, [ip], #4
 800b82e:	dcea      	bgt.n	800b806 <__multadd+0x12>
 800b830:	b30e      	cbz	r6, 800b876 <__multadd+0x82>
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	42ab      	cmp	r3, r5
 800b836:	dc19      	bgt.n	800b86c <__multadd+0x78>
 800b838:	6861      	ldr	r1, [r4, #4]
 800b83a:	4638      	mov	r0, r7
 800b83c:	3101      	adds	r1, #1
 800b83e:	f7ff ff77 	bl	800b730 <_Balloc>
 800b842:	4680      	mov	r8, r0
 800b844:	b928      	cbnz	r0, 800b852 <__multadd+0x5e>
 800b846:	4602      	mov	r2, r0
 800b848:	4b0c      	ldr	r3, [pc, #48]	@ (800b87c <__multadd+0x88>)
 800b84a:	21ba      	movs	r1, #186	@ 0xba
 800b84c:	480c      	ldr	r0, [pc, #48]	@ (800b880 <__multadd+0x8c>)
 800b84e:	f001 fedf 	bl	800d610 <__assert_func>
 800b852:	6922      	ldr	r2, [r4, #16]
 800b854:	f104 010c 	add.w	r1, r4, #12
 800b858:	300c      	adds	r0, #12
 800b85a:	3202      	adds	r2, #2
 800b85c:	0092      	lsls	r2, r2, #2
 800b85e:	f001 febf 	bl	800d5e0 <memcpy>
 800b862:	4621      	mov	r1, r4
 800b864:	4644      	mov	r4, r8
 800b866:	4638      	mov	r0, r7
 800b868:	f7ff ffa2 	bl	800b7b0 <_Bfree>
 800b86c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b870:	3501      	adds	r5, #1
 800b872:	615e      	str	r6, [r3, #20]
 800b874:	6125      	str	r5, [r4, #16]
 800b876:	4620      	mov	r0, r4
 800b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87c:	0800e099 	.word	0x0800e099
 800b880:	0800e0aa 	.word	0x0800e0aa

0800b884 <__s2b>:
 800b884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b888:	4615      	mov	r5, r2
 800b88a:	461f      	mov	r7, r3
 800b88c:	2209      	movs	r2, #9
 800b88e:	3308      	adds	r3, #8
 800b890:	460c      	mov	r4, r1
 800b892:	4606      	mov	r6, r0
 800b894:	2100      	movs	r1, #0
 800b896:	fb93 f3f2 	sdiv	r3, r3, r2
 800b89a:	2201      	movs	r2, #1
 800b89c:	429a      	cmp	r2, r3
 800b89e:	db09      	blt.n	800b8b4 <__s2b+0x30>
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7ff ff45 	bl	800b730 <_Balloc>
 800b8a6:	b940      	cbnz	r0, 800b8ba <__s2b+0x36>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	4b19      	ldr	r3, [pc, #100]	@ (800b910 <__s2b+0x8c>)
 800b8ac:	21d3      	movs	r1, #211	@ 0xd3
 800b8ae:	4819      	ldr	r0, [pc, #100]	@ (800b914 <__s2b+0x90>)
 800b8b0:	f001 feae 	bl	800d610 <__assert_func>
 800b8b4:	0052      	lsls	r2, r2, #1
 800b8b6:	3101      	adds	r1, #1
 800b8b8:	e7f0      	b.n	800b89c <__s2b+0x18>
 800b8ba:	9b08      	ldr	r3, [sp, #32]
 800b8bc:	2d09      	cmp	r5, #9
 800b8be:	6143      	str	r3, [r0, #20]
 800b8c0:	f04f 0301 	mov.w	r3, #1
 800b8c4:	6103      	str	r3, [r0, #16]
 800b8c6:	dd16      	ble.n	800b8f6 <__s2b+0x72>
 800b8c8:	f104 0909 	add.w	r9, r4, #9
 800b8cc:	442c      	add	r4, r5
 800b8ce:	46c8      	mov	r8, r9
 800b8d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	220a      	movs	r2, #10
 800b8d8:	4630      	mov	r0, r6
 800b8da:	3b30      	subs	r3, #48	@ 0x30
 800b8dc:	f7ff ff8a 	bl	800b7f4 <__multadd>
 800b8e0:	45a0      	cmp	r8, r4
 800b8e2:	d1f5      	bne.n	800b8d0 <__s2b+0x4c>
 800b8e4:	f1a5 0408 	sub.w	r4, r5, #8
 800b8e8:	444c      	add	r4, r9
 800b8ea:	1b2d      	subs	r5, r5, r4
 800b8ec:	1963      	adds	r3, r4, r5
 800b8ee:	42bb      	cmp	r3, r7
 800b8f0:	db04      	blt.n	800b8fc <__s2b+0x78>
 800b8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f6:	340a      	adds	r4, #10
 800b8f8:	2509      	movs	r5, #9
 800b8fa:	e7f6      	b.n	800b8ea <__s2b+0x66>
 800b8fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b900:	4601      	mov	r1, r0
 800b902:	220a      	movs	r2, #10
 800b904:	4630      	mov	r0, r6
 800b906:	3b30      	subs	r3, #48	@ 0x30
 800b908:	f7ff ff74 	bl	800b7f4 <__multadd>
 800b90c:	e7ee      	b.n	800b8ec <__s2b+0x68>
 800b90e:	bf00      	nop
 800b910:	0800e099 	.word	0x0800e099
 800b914:	0800e0aa 	.word	0x0800e0aa

0800b918 <__hi0bits>:
 800b918:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b91c:	4603      	mov	r3, r0
 800b91e:	bf36      	itet	cc
 800b920:	0403      	lslcc	r3, r0, #16
 800b922:	2000      	movcs	r0, #0
 800b924:	2010      	movcc	r0, #16
 800b926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b92a:	bf3c      	itt	cc
 800b92c:	021b      	lslcc	r3, r3, #8
 800b92e:	3008      	addcc	r0, #8
 800b930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b934:	bf3c      	itt	cc
 800b936:	011b      	lslcc	r3, r3, #4
 800b938:	3004      	addcc	r0, #4
 800b93a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b93e:	bf3c      	itt	cc
 800b940:	009b      	lslcc	r3, r3, #2
 800b942:	3002      	addcc	r0, #2
 800b944:	2b00      	cmp	r3, #0
 800b946:	db05      	blt.n	800b954 <__hi0bits+0x3c>
 800b948:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b94c:	f100 0001 	add.w	r0, r0, #1
 800b950:	bf08      	it	eq
 800b952:	2020      	moveq	r0, #32
 800b954:	4770      	bx	lr

0800b956 <__lo0bits>:
 800b956:	6803      	ldr	r3, [r0, #0]
 800b958:	4602      	mov	r2, r0
 800b95a:	f013 0007 	ands.w	r0, r3, #7
 800b95e:	d00b      	beq.n	800b978 <__lo0bits+0x22>
 800b960:	07d9      	lsls	r1, r3, #31
 800b962:	d421      	bmi.n	800b9a8 <__lo0bits+0x52>
 800b964:	0798      	lsls	r0, r3, #30
 800b966:	bf47      	ittee	mi
 800b968:	085b      	lsrmi	r3, r3, #1
 800b96a:	2001      	movmi	r0, #1
 800b96c:	089b      	lsrpl	r3, r3, #2
 800b96e:	2002      	movpl	r0, #2
 800b970:	bf4c      	ite	mi
 800b972:	6013      	strmi	r3, [r2, #0]
 800b974:	6013      	strpl	r3, [r2, #0]
 800b976:	4770      	bx	lr
 800b978:	b299      	uxth	r1, r3
 800b97a:	b909      	cbnz	r1, 800b980 <__lo0bits+0x2a>
 800b97c:	0c1b      	lsrs	r3, r3, #16
 800b97e:	2010      	movs	r0, #16
 800b980:	b2d9      	uxtb	r1, r3
 800b982:	b909      	cbnz	r1, 800b988 <__lo0bits+0x32>
 800b984:	3008      	adds	r0, #8
 800b986:	0a1b      	lsrs	r3, r3, #8
 800b988:	0719      	lsls	r1, r3, #28
 800b98a:	bf04      	itt	eq
 800b98c:	091b      	lsreq	r3, r3, #4
 800b98e:	3004      	addeq	r0, #4
 800b990:	0799      	lsls	r1, r3, #30
 800b992:	bf04      	itt	eq
 800b994:	089b      	lsreq	r3, r3, #2
 800b996:	3002      	addeq	r0, #2
 800b998:	07d9      	lsls	r1, r3, #31
 800b99a:	d403      	bmi.n	800b9a4 <__lo0bits+0x4e>
 800b99c:	085b      	lsrs	r3, r3, #1
 800b99e:	f100 0001 	add.w	r0, r0, #1
 800b9a2:	d003      	beq.n	800b9ac <__lo0bits+0x56>
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	4770      	bx	lr
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	4770      	bx	lr
 800b9ac:	2020      	movs	r0, #32
 800b9ae:	4770      	bx	lr

0800b9b0 <__i2b>:
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	2101      	movs	r1, #1
 800b9b6:	f7ff febb 	bl	800b730 <_Balloc>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	b928      	cbnz	r0, 800b9ca <__i2b+0x1a>
 800b9be:	4b05      	ldr	r3, [pc, #20]	@ (800b9d4 <__i2b+0x24>)
 800b9c0:	f240 1145 	movw	r1, #325	@ 0x145
 800b9c4:	4804      	ldr	r0, [pc, #16]	@ (800b9d8 <__i2b+0x28>)
 800b9c6:	f001 fe23 	bl	800d610 <__assert_func>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	6144      	str	r4, [r0, #20]
 800b9ce:	6103      	str	r3, [r0, #16]
 800b9d0:	bd10      	pop	{r4, pc}
 800b9d2:	bf00      	nop
 800b9d4:	0800e099 	.word	0x0800e099
 800b9d8:	0800e0aa 	.word	0x0800e0aa

0800b9dc <__multiply>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	690a      	ldr	r2, [r1, #16]
 800b9e4:	460f      	mov	r7, r1
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	bfa2      	ittt	ge
 800b9ee:	4623      	movge	r3, r4
 800b9f0:	460c      	movge	r4, r1
 800b9f2:	461f      	movge	r7, r3
 800b9f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b9fe:	6861      	ldr	r1, [r4, #4]
 800ba00:	eb0a 0609 	add.w	r6, sl, r9
 800ba04:	42b3      	cmp	r3, r6
 800ba06:	bfb8      	it	lt
 800ba08:	3101      	addlt	r1, #1
 800ba0a:	f7ff fe91 	bl	800b730 <_Balloc>
 800ba0e:	b930      	cbnz	r0, 800ba1e <__multiply+0x42>
 800ba10:	4602      	mov	r2, r0
 800ba12:	4b45      	ldr	r3, [pc, #276]	@ (800bb28 <__multiply+0x14c>)
 800ba14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba18:	4844      	ldr	r0, [pc, #272]	@ (800bb2c <__multiply+0x150>)
 800ba1a:	f001 fdf9 	bl	800d610 <__assert_func>
 800ba1e:	f100 0514 	add.w	r5, r0, #20
 800ba22:	2200      	movs	r2, #0
 800ba24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba28:	462b      	mov	r3, r5
 800ba2a:	4543      	cmp	r3, r8
 800ba2c:	d321      	bcc.n	800ba72 <__multiply+0x96>
 800ba2e:	f107 0114 	add.w	r1, r7, #20
 800ba32:	f104 0214 	add.w	r2, r4, #20
 800ba36:	f104 0715 	add.w	r7, r4, #21
 800ba3a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba3e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba42:	9302      	str	r3, [sp, #8]
 800ba44:	1b13      	subs	r3, r2, r4
 800ba46:	3b15      	subs	r3, #21
 800ba48:	f023 0303 	bic.w	r3, r3, #3
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	42ba      	cmp	r2, r7
 800ba50:	bf38      	it	cc
 800ba52:	2304      	movcc	r3, #4
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	9b02      	ldr	r3, [sp, #8]
 800ba58:	9103      	str	r1, [sp, #12]
 800ba5a:	428b      	cmp	r3, r1
 800ba5c:	d80c      	bhi.n	800ba78 <__multiply+0x9c>
 800ba5e:	2e00      	cmp	r6, #0
 800ba60:	dd03      	ble.n	800ba6a <__multiply+0x8e>
 800ba62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d05b      	beq.n	800bb22 <__multiply+0x146>
 800ba6a:	6106      	str	r6, [r0, #16]
 800ba6c:	b005      	add	sp, #20
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	f843 2b04 	str.w	r2, [r3], #4
 800ba76:	e7d8      	b.n	800ba2a <__multiply+0x4e>
 800ba78:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba7c:	f1ba 0f00 	cmp.w	sl, #0
 800ba80:	d024      	beq.n	800bacc <__multiply+0xf0>
 800ba82:	f104 0e14 	add.w	lr, r4, #20
 800ba86:	46a9      	mov	r9, r5
 800ba88:	f04f 0c00 	mov.w	ip, #0
 800ba8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba90:	f8d9 3000 	ldr.w	r3, [r9]
 800ba94:	fa1f fb87 	uxth.w	fp, r7
 800ba98:	4572      	cmp	r2, lr
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800baa0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800baa4:	f8d9 7000 	ldr.w	r7, [r9]
 800baa8:	4463      	add	r3, ip
 800baaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800baae:	fb0a c70b 	mla	r7, sl, fp, ip
 800bab2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800babc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bac0:	f849 3b04 	str.w	r3, [r9], #4
 800bac4:	d8e2      	bhi.n	800ba8c <__multiply+0xb0>
 800bac6:	9b01      	ldr	r3, [sp, #4]
 800bac8:	f845 c003 	str.w	ip, [r5, r3]
 800bacc:	9b03      	ldr	r3, [sp, #12]
 800bace:	3104      	adds	r1, #4
 800bad0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bad4:	f1b9 0f00 	cmp.w	r9, #0
 800bad8:	d021      	beq.n	800bb1e <__multiply+0x142>
 800bada:	682b      	ldr	r3, [r5, #0]
 800badc:	f104 0c14 	add.w	ip, r4, #20
 800bae0:	46ae      	mov	lr, r5
 800bae2:	f04f 0a00 	mov.w	sl, #0
 800bae6:	f8bc b000 	ldrh.w	fp, [ip]
 800baea:	b29b      	uxth	r3, r3
 800baec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800baf0:	fb09 770b 	mla	r7, r9, fp, r7
 800baf4:	4457      	add	r7, sl
 800baf6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bafa:	f84e 3b04 	str.w	r3, [lr], #4
 800bafe:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb06:	f8be 3000 	ldrh.w	r3, [lr]
 800bb0a:	4562      	cmp	r2, ip
 800bb0c:	fb09 330a 	mla	r3, r9, sl, r3
 800bb10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb18:	d8e5      	bhi.n	800bae6 <__multiply+0x10a>
 800bb1a:	9f01      	ldr	r7, [sp, #4]
 800bb1c:	51eb      	str	r3, [r5, r7]
 800bb1e:	3504      	adds	r5, #4
 800bb20:	e799      	b.n	800ba56 <__multiply+0x7a>
 800bb22:	3e01      	subs	r6, #1
 800bb24:	e79b      	b.n	800ba5e <__multiply+0x82>
 800bb26:	bf00      	nop
 800bb28:	0800e099 	.word	0x0800e099
 800bb2c:	0800e0aa 	.word	0x0800e0aa

0800bb30 <__pow5mult>:
 800bb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb34:	4615      	mov	r5, r2
 800bb36:	f012 0203 	ands.w	r2, r2, #3
 800bb3a:	4607      	mov	r7, r0
 800bb3c:	460e      	mov	r6, r1
 800bb3e:	d007      	beq.n	800bb50 <__pow5mult+0x20>
 800bb40:	3a01      	subs	r2, #1
 800bb42:	4c25      	ldr	r4, [pc, #148]	@ (800bbd8 <__pow5mult+0xa8>)
 800bb44:	2300      	movs	r3, #0
 800bb46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb4a:	f7ff fe53 	bl	800b7f4 <__multadd>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	10ad      	asrs	r5, r5, #2
 800bb52:	d03d      	beq.n	800bbd0 <__pow5mult+0xa0>
 800bb54:	69fc      	ldr	r4, [r7, #28]
 800bb56:	b97c      	cbnz	r4, 800bb78 <__pow5mult+0x48>
 800bb58:	2010      	movs	r0, #16
 800bb5a:	f7ff fd33 	bl	800b5c4 <malloc>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	61f8      	str	r0, [r7, #28]
 800bb62:	b928      	cbnz	r0, 800bb70 <__pow5mult+0x40>
 800bb64:	4b1d      	ldr	r3, [pc, #116]	@ (800bbdc <__pow5mult+0xac>)
 800bb66:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb6a:	481d      	ldr	r0, [pc, #116]	@ (800bbe0 <__pow5mult+0xb0>)
 800bb6c:	f001 fd50 	bl	800d610 <__assert_func>
 800bb70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb74:	6004      	str	r4, [r0, #0]
 800bb76:	60c4      	str	r4, [r0, #12]
 800bb78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb80:	b94c      	cbnz	r4, 800bb96 <__pow5mult+0x66>
 800bb82:	f240 2171 	movw	r1, #625	@ 0x271
 800bb86:	4638      	mov	r0, r7
 800bb88:	f7ff ff12 	bl	800b9b0 <__i2b>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb94:	6003      	str	r3, [r0, #0]
 800bb96:	f04f 0900 	mov.w	r9, #0
 800bb9a:	07eb      	lsls	r3, r5, #31
 800bb9c:	d50a      	bpl.n	800bbb4 <__pow5mult+0x84>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4622      	mov	r2, r4
 800bba2:	4638      	mov	r0, r7
 800bba4:	f7ff ff1a 	bl	800b9dc <__multiply>
 800bba8:	4680      	mov	r8, r0
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4638      	mov	r0, r7
 800bbae:	4646      	mov	r6, r8
 800bbb0:	f7ff fdfe 	bl	800b7b0 <_Bfree>
 800bbb4:	106d      	asrs	r5, r5, #1
 800bbb6:	d00b      	beq.n	800bbd0 <__pow5mult+0xa0>
 800bbb8:	6820      	ldr	r0, [r4, #0]
 800bbba:	b938      	cbnz	r0, 800bbcc <__pow5mult+0x9c>
 800bbbc:	4622      	mov	r2, r4
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7ff ff0b 	bl	800b9dc <__multiply>
 800bbc6:	6020      	str	r0, [r4, #0]
 800bbc8:	f8c0 9000 	str.w	r9, [r0]
 800bbcc:	4604      	mov	r4, r0
 800bbce:	e7e4      	b.n	800bb9a <__pow5mult+0x6a>
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbd6:	bf00      	nop
 800bbd8:	0800e104 	.word	0x0800e104
 800bbdc:	0800e02a 	.word	0x0800e02a
 800bbe0:	0800e0aa 	.word	0x0800e0aa

0800bbe4 <__lshift>:
 800bbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	460c      	mov	r4, r1
 800bbea:	4607      	mov	r7, r0
 800bbec:	4691      	mov	r9, r2
 800bbee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	6849      	ldr	r1, [r1, #4]
 800bbf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbfa:	68a3      	ldr	r3, [r4, #8]
 800bbfc:	f108 0601 	add.w	r6, r8, #1
 800bc00:	42b3      	cmp	r3, r6
 800bc02:	db0b      	blt.n	800bc1c <__lshift+0x38>
 800bc04:	4638      	mov	r0, r7
 800bc06:	f7ff fd93 	bl	800b730 <_Balloc>
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	b948      	cbnz	r0, 800bc22 <__lshift+0x3e>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	4b28      	ldr	r3, [pc, #160]	@ (800bcb4 <__lshift+0xd0>)
 800bc12:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc16:	4828      	ldr	r0, [pc, #160]	@ (800bcb8 <__lshift+0xd4>)
 800bc18:	f001 fcfa 	bl	800d610 <__assert_func>
 800bc1c:	3101      	adds	r1, #1
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	e7ee      	b.n	800bc00 <__lshift+0x1c>
 800bc22:	2300      	movs	r3, #0
 800bc24:	f100 0114 	add.w	r1, r0, #20
 800bc28:	f100 0210 	add.w	r2, r0, #16
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	4553      	cmp	r3, sl
 800bc30:	db33      	blt.n	800bc9a <__lshift+0xb6>
 800bc32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc36:	f104 0314 	add.w	r3, r4, #20
 800bc3a:	6920      	ldr	r0, [r4, #16]
 800bc3c:	f019 091f 	ands.w	r9, r9, #31
 800bc40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc48:	d02b      	beq.n	800bca2 <__lshift+0xbe>
 800bc4a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc4e:	468a      	mov	sl, r1
 800bc50:	2200      	movs	r2, #0
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	fa00 f009 	lsl.w	r0, r0, r9
 800bc58:	4310      	orrs	r0, r2
 800bc5a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc62:	459c      	cmp	ip, r3
 800bc64:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc68:	d8f3      	bhi.n	800bc52 <__lshift+0x6e>
 800bc6a:	ebac 0304 	sub.w	r3, ip, r4
 800bc6e:	f104 0015 	add.w	r0, r4, #21
 800bc72:	3b15      	subs	r3, #21
 800bc74:	f023 0303 	bic.w	r3, r3, #3
 800bc78:	3304      	adds	r3, #4
 800bc7a:	4584      	cmp	ip, r0
 800bc7c:	bf38      	it	cc
 800bc7e:	2304      	movcc	r3, #4
 800bc80:	50ca      	str	r2, [r1, r3]
 800bc82:	b10a      	cbz	r2, 800bc88 <__lshift+0xa4>
 800bc84:	f108 0602 	add.w	r6, r8, #2
 800bc88:	3e01      	subs	r6, #1
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	612e      	str	r6, [r5, #16]
 800bc90:	f7ff fd8e 	bl	800b7b0 <_Bfree>
 800bc94:	4628      	mov	r0, r5
 800bc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	f842 0f04 	str.w	r0, [r2, #4]!
 800bca0:	e7c5      	b.n	800bc2e <__lshift+0x4a>
 800bca2:	3904      	subs	r1, #4
 800bca4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca8:	459c      	cmp	ip, r3
 800bcaa:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcae:	d8f9      	bhi.n	800bca4 <__lshift+0xc0>
 800bcb0:	e7ea      	b.n	800bc88 <__lshift+0xa4>
 800bcb2:	bf00      	nop
 800bcb4:	0800e099 	.word	0x0800e099
 800bcb8:	0800e0aa 	.word	0x0800e0aa

0800bcbc <__mcmp>:
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	690a      	ldr	r2, [r1, #16]
 800bcc0:	6900      	ldr	r0, [r0, #16]
 800bcc2:	1a80      	subs	r0, r0, r2
 800bcc4:	b530      	push	{r4, r5, lr}
 800bcc6:	d10e      	bne.n	800bce6 <__mcmp+0x2a>
 800bcc8:	3314      	adds	r3, #20
 800bcca:	3114      	adds	r1, #20
 800bccc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcdc:	4295      	cmp	r5, r2
 800bcde:	d003      	beq.n	800bce8 <__mcmp+0x2c>
 800bce0:	d205      	bcs.n	800bcee <__mcmp+0x32>
 800bce2:	f04f 30ff 	mov.w	r0, #4294967295
 800bce6:	bd30      	pop	{r4, r5, pc}
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	d3f3      	bcc.n	800bcd4 <__mcmp+0x18>
 800bcec:	e7fb      	b.n	800bce6 <__mcmp+0x2a>
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e7f9      	b.n	800bce6 <__mcmp+0x2a>
	...

0800bcf4 <__mdiff>:
 800bcf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	4689      	mov	r9, r1
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4614      	mov	r4, r2
 800bd00:	4648      	mov	r0, r9
 800bd02:	f7ff ffdb 	bl	800bcbc <__mcmp>
 800bd06:	1e05      	subs	r5, r0, #0
 800bd08:	d112      	bne.n	800bd30 <__mdiff+0x3c>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff fd0f 	bl	800b730 <_Balloc>
 800bd12:	4602      	mov	r2, r0
 800bd14:	b928      	cbnz	r0, 800bd22 <__mdiff+0x2e>
 800bd16:	4b41      	ldr	r3, [pc, #260]	@ (800be1c <__mdiff+0x128>)
 800bd18:	f240 2137 	movw	r1, #567	@ 0x237
 800bd1c:	4840      	ldr	r0, [pc, #256]	@ (800be20 <__mdiff+0x12c>)
 800bd1e:	f001 fc77 	bl	800d610 <__assert_func>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd28:	4610      	mov	r0, r2
 800bd2a:	b003      	add	sp, #12
 800bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd30:	bfbc      	itt	lt
 800bd32:	464b      	movlt	r3, r9
 800bd34:	46a1      	movlt	r9, r4
 800bd36:	4630      	mov	r0, r6
 800bd38:	bfb8      	it	lt
 800bd3a:	2501      	movlt	r5, #1
 800bd3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd40:	bfb4      	ite	lt
 800bd42:	461c      	movlt	r4, r3
 800bd44:	2500      	movge	r5, #0
 800bd46:	f7ff fcf3 	bl	800b730 <_Balloc>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	b918      	cbnz	r0, 800bd56 <__mdiff+0x62>
 800bd4e:	4b33      	ldr	r3, [pc, #204]	@ (800be1c <__mdiff+0x128>)
 800bd50:	f240 2145 	movw	r1, #581	@ 0x245
 800bd54:	e7e2      	b.n	800bd1c <__mdiff+0x28>
 800bd56:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd5a:	f104 0e14 	add.w	lr, r4, #20
 800bd5e:	6926      	ldr	r6, [r4, #16]
 800bd60:	f100 0b14 	add.w	fp, r0, #20
 800bd64:	60c5      	str	r5, [r0, #12]
 800bd66:	f109 0514 	add.w	r5, r9, #20
 800bd6a:	f109 0310 	add.w	r3, r9, #16
 800bd6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd72:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd76:	46d9      	mov	r9, fp
 800bd78:	f04f 0c00 	mov.w	ip, #0
 800bd7c:	9301      	str	r3, [sp, #4]
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd84:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd88:	4576      	cmp	r6, lr
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	fa1f f38a 	uxth.w	r3, sl
 800bd90:	4619      	mov	r1, r3
 800bd92:	b283      	uxth	r3, r0
 800bd94:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bd98:	eba1 0303 	sub.w	r3, r1, r3
 800bd9c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bda0:	4463      	add	r3, ip
 800bda2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdb0:	f849 3b04 	str.w	r3, [r9], #4
 800bdb4:	d8e3      	bhi.n	800bd7e <__mdiff+0x8a>
 800bdb6:	1b33      	subs	r3, r6, r4
 800bdb8:	3415      	adds	r4, #21
 800bdba:	3b15      	subs	r3, #21
 800bdbc:	f023 0303 	bic.w	r3, r3, #3
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	42a6      	cmp	r6, r4
 800bdc4:	bf38      	it	cc
 800bdc6:	2304      	movcc	r3, #4
 800bdc8:	441d      	add	r5, r3
 800bdca:	445b      	add	r3, fp
 800bdcc:	462c      	mov	r4, r5
 800bdce:	461e      	mov	r6, r3
 800bdd0:	4544      	cmp	r4, r8
 800bdd2:	d30e      	bcc.n	800bdf2 <__mdiff+0xfe>
 800bdd4:	f108 0103 	add.w	r1, r8, #3
 800bdd8:	1b49      	subs	r1, r1, r5
 800bdda:	3d03      	subs	r5, #3
 800bddc:	f021 0103 	bic.w	r1, r1, #3
 800bde0:	45a8      	cmp	r8, r5
 800bde2:	bf38      	it	cc
 800bde4:	2100      	movcc	r1, #0
 800bde6:	440b      	add	r3, r1
 800bde8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdec:	b199      	cbz	r1, 800be16 <__mdiff+0x122>
 800bdee:	6117      	str	r7, [r2, #16]
 800bdf0:	e79a      	b.n	800bd28 <__mdiff+0x34>
 800bdf2:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdf6:	46e6      	mov	lr, ip
 800bdf8:	fa1f fc81 	uxth.w	ip, r1
 800bdfc:	0c08      	lsrs	r0, r1, #16
 800bdfe:	4471      	add	r1, lr
 800be00:	44f4      	add	ip, lr
 800be02:	b289      	uxth	r1, r1
 800be04:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be10:	f846 1b04 	str.w	r1, [r6], #4
 800be14:	e7dc      	b.n	800bdd0 <__mdiff+0xdc>
 800be16:	3f01      	subs	r7, #1
 800be18:	e7e6      	b.n	800bde8 <__mdiff+0xf4>
 800be1a:	bf00      	nop
 800be1c:	0800e099 	.word	0x0800e099
 800be20:	0800e0aa 	.word	0x0800e0aa

0800be24 <__ulp>:
 800be24:	b082      	sub	sp, #8
 800be26:	4b11      	ldr	r3, [pc, #68]	@ (800be6c <__ulp+0x48>)
 800be28:	ed8d 0b00 	vstr	d0, [sp]
 800be2c:	9a01      	ldr	r2, [sp, #4]
 800be2e:	4013      	ands	r3, r2
 800be30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be34:	2b00      	cmp	r3, #0
 800be36:	dc08      	bgt.n	800be4a <__ulp+0x26>
 800be38:	425b      	negs	r3, r3
 800be3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be42:	da04      	bge.n	800be4e <__ulp+0x2a>
 800be44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be48:	4113      	asrs	r3, r2
 800be4a:	2200      	movs	r2, #0
 800be4c:	e008      	b.n	800be60 <__ulp+0x3c>
 800be4e:	f1a2 0314 	sub.w	r3, r2, #20
 800be52:	2b1e      	cmp	r3, #30
 800be54:	bfd6      	itet	le
 800be56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be5a:	2201      	movgt	r2, #1
 800be5c:	40da      	lsrle	r2, r3
 800be5e:	2300      	movs	r3, #0
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	ec41 0b10 	vmov	d0, r0, r1
 800be68:	b002      	add	sp, #8
 800be6a:	4770      	bx	lr
 800be6c:	7ff00000 	.word	0x7ff00000

0800be70 <__b2d>:
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	6906      	ldr	r6, [r0, #16]
 800be76:	f100 0814 	add.w	r8, r0, #20
 800be7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be7e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be82:	1f37      	subs	r7, r6, #4
 800be84:	4610      	mov	r0, r2
 800be86:	f7ff fd47 	bl	800b918 <__hi0bits>
 800be8a:	f1c0 0320 	rsb	r3, r0, #32
 800be8e:	280a      	cmp	r0, #10
 800be90:	600b      	str	r3, [r1, #0]
 800be92:	491d      	ldr	r1, [pc, #116]	@ (800bf08 <__b2d+0x98>)
 800be94:	dc16      	bgt.n	800bec4 <__b2d+0x54>
 800be96:	f1c0 0c0b 	rsb	ip, r0, #11
 800be9a:	45b8      	cmp	r8, r7
 800be9c:	f100 0015 	add.w	r0, r0, #21
 800bea0:	fa22 f30c 	lsr.w	r3, r2, ip
 800bea4:	fa02 f000 	lsl.w	r0, r2, r0
 800bea8:	ea43 0501 	orr.w	r5, r3, r1
 800beac:	bf34      	ite	cc
 800beae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800beb2:	2300      	movcs	r3, #0
 800beb4:	fa23 f30c 	lsr.w	r3, r3, ip
 800beb8:	4303      	orrs	r3, r0
 800beba:	461c      	mov	r4, r3
 800bebc:	ec45 4b10 	vmov	d0, r4, r5
 800bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec4:	45b8      	cmp	r8, r7
 800bec6:	bf3a      	itte	cc
 800bec8:	f1a6 0708 	subcc.w	r7, r6, #8
 800becc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bed0:	2300      	movcs	r3, #0
 800bed2:	380b      	subs	r0, #11
 800bed4:	d014      	beq.n	800bf00 <__b2d+0x90>
 800bed6:	f1c0 0120 	rsb	r1, r0, #32
 800beda:	4082      	lsls	r2, r0
 800bedc:	4547      	cmp	r7, r8
 800bede:	fa23 f401 	lsr.w	r4, r3, r1
 800bee2:	fa03 f300 	lsl.w	r3, r3, r0
 800bee6:	ea42 0204 	orr.w	r2, r2, r4
 800beea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800beee:	bf8c      	ite	hi
 800bef0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bef4:	2200      	movls	r2, #0
 800bef6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800befa:	40ca      	lsrs	r2, r1
 800befc:	4313      	orrs	r3, r2
 800befe:	e7dc      	b.n	800beba <__b2d+0x4a>
 800bf00:	ea42 0501 	orr.w	r5, r2, r1
 800bf04:	e7d9      	b.n	800beba <__b2d+0x4a>
 800bf06:	bf00      	nop
 800bf08:	3ff00000 	.word	0x3ff00000

0800bf0c <__d2b>:
 800bf0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf10:	460f      	mov	r7, r1
 800bf12:	2101      	movs	r1, #1
 800bf14:	4616      	mov	r6, r2
 800bf16:	ec59 8b10 	vmov	r8, r9, d0
 800bf1a:	f7ff fc09 	bl	800b730 <_Balloc>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	b930      	cbnz	r0, 800bf30 <__d2b+0x24>
 800bf22:	4602      	mov	r2, r0
 800bf24:	4b23      	ldr	r3, [pc, #140]	@ (800bfb4 <__d2b+0xa8>)
 800bf26:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf2a:	4823      	ldr	r0, [pc, #140]	@ (800bfb8 <__d2b+0xac>)
 800bf2c:	f001 fb70 	bl	800d610 <__assert_func>
 800bf30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf38:	b10d      	cbz	r5, 800bf3e <__d2b+0x32>
 800bf3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	f1b8 0300 	subs.w	r3, r8, #0
 800bf44:	d023      	beq.n	800bf8e <__d2b+0x82>
 800bf46:	4668      	mov	r0, sp
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	f7ff fd04 	bl	800b956 <__lo0bits>
 800bf4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf52:	b1d0      	cbz	r0, 800bf8a <__d2b+0x7e>
 800bf54:	f1c0 0320 	rsb	r3, r0, #32
 800bf58:	fa02 f303 	lsl.w	r3, r2, r3
 800bf5c:	40c2      	lsrs	r2, r0
 800bf5e:	430b      	orrs	r3, r1
 800bf60:	9201      	str	r2, [sp, #4]
 800bf62:	6163      	str	r3, [r4, #20]
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	61a3      	str	r3, [r4, #24]
 800bf6a:	bf0c      	ite	eq
 800bf6c:	2201      	moveq	r2, #1
 800bf6e:	2202      	movne	r2, #2
 800bf70:	6122      	str	r2, [r4, #16]
 800bf72:	b1a5      	cbz	r5, 800bf9e <__d2b+0x92>
 800bf74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf78:	4405      	add	r5, r0
 800bf7a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf7e:	603d      	str	r5, [r7, #0]
 800bf80:	6030      	str	r0, [r6, #0]
 800bf82:	4620      	mov	r0, r4
 800bf84:	b003      	add	sp, #12
 800bf86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf8a:	6161      	str	r1, [r4, #20]
 800bf8c:	e7ea      	b.n	800bf64 <__d2b+0x58>
 800bf8e:	a801      	add	r0, sp, #4
 800bf90:	f7ff fce1 	bl	800b956 <__lo0bits>
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	3020      	adds	r0, #32
 800bf98:	2201      	movs	r2, #1
 800bf9a:	6163      	str	r3, [r4, #20]
 800bf9c:	e7e8      	b.n	800bf70 <__d2b+0x64>
 800bf9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfa6:	6038      	str	r0, [r7, #0]
 800bfa8:	6918      	ldr	r0, [r3, #16]
 800bfaa:	f7ff fcb5 	bl	800b918 <__hi0bits>
 800bfae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfb2:	e7e5      	b.n	800bf80 <__d2b+0x74>
 800bfb4:	0800e099 	.word	0x0800e099
 800bfb8:	0800e0aa 	.word	0x0800e0aa

0800bfbc <__ratio>:
 800bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	b085      	sub	sp, #20
 800bfc2:	e9cd 1000 	strd	r1, r0, [sp]
 800bfc6:	a902      	add	r1, sp, #8
 800bfc8:	f7ff ff52 	bl	800be70 <__b2d>
 800bfcc:	a903      	add	r1, sp, #12
 800bfce:	9800      	ldr	r0, [sp, #0]
 800bfd0:	ec55 4b10 	vmov	r4, r5, d0
 800bfd4:	f7ff ff4c 	bl	800be70 <__b2d>
 800bfd8:	9b01      	ldr	r3, [sp, #4]
 800bfda:	462f      	mov	r7, r5
 800bfdc:	4620      	mov	r0, r4
 800bfde:	6919      	ldr	r1, [r3, #16]
 800bfe0:	9b00      	ldr	r3, [sp, #0]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	1ac9      	subs	r1, r1, r3
 800bfe6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bfea:	ec5b ab10 	vmov	sl, fp, d0
 800bfee:	1a9b      	subs	r3, r3, r2
 800bff0:	46d9      	mov	r9, fp
 800bff2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfcd      	iteet	gt
 800bffa:	462a      	movgt	r2, r5
 800bffc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c000:	465a      	movle	r2, fp
 800c002:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c006:	bfd8      	it	le
 800c008:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c00c:	4652      	mov	r2, sl
 800c00e:	4639      	mov	r1, r7
 800c010:	464b      	mov	r3, r9
 800c012:	f7f4 fc2f 	bl	8000874 <__aeabi_ddiv>
 800c016:	ec41 0b10 	vmov	d0, r0, r1
 800c01a:	b005      	add	sp, #20
 800c01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c020 <__copybits>:
 800c020:	3901      	subs	r1, #1
 800c022:	f102 0314 	add.w	r3, r2, #20
 800c026:	1149      	asrs	r1, r1, #5
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	3101      	adds	r1, #1
 800c02c:	6914      	ldr	r4, [r2, #16]
 800c02e:	1f05      	subs	r5, r0, #4
 800c030:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c034:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c038:	42a3      	cmp	r3, r4
 800c03a:	d30c      	bcc.n	800c056 <__copybits+0x36>
 800c03c:	1aa3      	subs	r3, r4, r2
 800c03e:	3211      	adds	r2, #17
 800c040:	3b11      	subs	r3, #17
 800c042:	f023 0303 	bic.w	r3, r3, #3
 800c046:	42a2      	cmp	r2, r4
 800c048:	bf88      	it	hi
 800c04a:	2300      	movhi	r3, #0
 800c04c:	4418      	add	r0, r3
 800c04e:	2300      	movs	r3, #0
 800c050:	4288      	cmp	r0, r1
 800c052:	d305      	bcc.n	800c060 <__copybits+0x40>
 800c054:	bd70      	pop	{r4, r5, r6, pc}
 800c056:	f853 6b04 	ldr.w	r6, [r3], #4
 800c05a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c05e:	e7eb      	b.n	800c038 <__copybits+0x18>
 800c060:	f840 3b04 	str.w	r3, [r0], #4
 800c064:	e7f4      	b.n	800c050 <__copybits+0x30>

0800c066 <__any_on>:
 800c066:	f100 0214 	add.w	r2, r0, #20
 800c06a:	114b      	asrs	r3, r1, #5
 800c06c:	6900      	ldr	r0, [r0, #16]
 800c06e:	4298      	cmp	r0, r3
 800c070:	b510      	push	{r4, lr}
 800c072:	db11      	blt.n	800c098 <__any_on+0x32>
 800c074:	dd0a      	ble.n	800c08c <__any_on+0x26>
 800c076:	f011 011f 	ands.w	r1, r1, #31
 800c07a:	d007      	beq.n	800c08c <__any_on+0x26>
 800c07c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c080:	fa24 f001 	lsr.w	r0, r4, r1
 800c084:	fa00 f101 	lsl.w	r1, r0, r1
 800c088:	428c      	cmp	r4, r1
 800c08a:	d10b      	bne.n	800c0a4 <__any_on+0x3e>
 800c08c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c090:	4293      	cmp	r3, r2
 800c092:	d803      	bhi.n	800c09c <__any_on+0x36>
 800c094:	2000      	movs	r0, #0
 800c096:	bd10      	pop	{r4, pc}
 800c098:	4603      	mov	r3, r0
 800c09a:	e7f7      	b.n	800c08c <__any_on+0x26>
 800c09c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d0f5      	beq.n	800c090 <__any_on+0x2a>
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	e7f6      	b.n	800c096 <__any_on+0x30>

0800c0a8 <sulp>:
 800c0a8:	b570      	push	{r4, r5, r6, lr}
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	4616      	mov	r6, r2
 800c0b0:	ec45 4b10 	vmov	d0, r4, r5
 800c0b4:	f7ff feb6 	bl	800be24 <__ulp>
 800c0b8:	ec51 0b10 	vmov	r0, r1, d0
 800c0bc:	b17e      	cbz	r6, 800c0de <sulp+0x36>
 800c0be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c0c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	dd09      	ble.n	800c0de <sulp+0x36>
 800c0ca:	051b      	lsls	r3, r3, #20
 800c0cc:	2400      	movs	r4, #0
 800c0ce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c0d8:	462b      	mov	r3, r5
 800c0da:	f7f4 faa1 	bl	8000620 <__aeabi_dmul>
 800c0de:	ec41 0b10 	vmov	d0, r0, r1
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	0000      	movs	r0, r0
	...

0800c0e8 <_strtod_l>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	b09f      	sub	sp, #124	@ 0x7c
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	f04f 0a00 	mov.w	sl, #0
 800c0f4:	f04f 0b00 	mov.w	fp, #0
 800c0f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	9005      	str	r0, [sp, #20]
 800c0fe:	921a      	str	r2, [sp, #104]	@ 0x68
 800c100:	460a      	mov	r2, r1
 800c102:	9219      	str	r2, [sp, #100]	@ 0x64
 800c104:	7811      	ldrb	r1, [r2, #0]
 800c106:	292b      	cmp	r1, #43	@ 0x2b
 800c108:	d04a      	beq.n	800c1a0 <_strtod_l+0xb8>
 800c10a:	d838      	bhi.n	800c17e <_strtod_l+0x96>
 800c10c:	290d      	cmp	r1, #13
 800c10e:	d832      	bhi.n	800c176 <_strtod_l+0x8e>
 800c110:	2908      	cmp	r1, #8
 800c112:	d832      	bhi.n	800c17a <_strtod_l+0x92>
 800c114:	2900      	cmp	r1, #0
 800c116:	d03b      	beq.n	800c190 <_strtod_l+0xa8>
 800c118:	2200      	movs	r2, #0
 800c11a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c11c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c11e:	782a      	ldrb	r2, [r5, #0]
 800c120:	2a30      	cmp	r2, #48	@ 0x30
 800c122:	f040 80b3 	bne.w	800c28c <_strtod_l+0x1a4>
 800c126:	786a      	ldrb	r2, [r5, #1]
 800c128:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c12c:	2a58      	cmp	r2, #88	@ 0x58
 800c12e:	d16e      	bne.n	800c20e <_strtod_l+0x126>
 800c130:	9302      	str	r3, [sp, #8]
 800c132:	a919      	add	r1, sp, #100	@ 0x64
 800c134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c136:	4a90      	ldr	r2, [pc, #576]	@ (800c378 <_strtod_l+0x290>)
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c13c:	9805      	ldr	r0, [sp, #20]
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c142:	f001 fafd 	bl	800d740 <__gethex>
 800c146:	f010 060f 	ands.w	r6, r0, #15
 800c14a:	4604      	mov	r4, r0
 800c14c:	d005      	beq.n	800c15a <_strtod_l+0x72>
 800c14e:	2e06      	cmp	r6, #6
 800c150:	d128      	bne.n	800c1a4 <_strtod_l+0xbc>
 800c152:	3501      	adds	r5, #1
 800c154:	2300      	movs	r3, #0
 800c156:	9519      	str	r5, [sp, #100]	@ 0x64
 800c158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c15a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f040 858e 	bne.w	800cc7e <_strtod_l+0xb96>
 800c162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c164:	b1cb      	cbz	r3, 800c19a <_strtod_l+0xb2>
 800c166:	4652      	mov	r2, sl
 800c168:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c16c:	ec43 2b10 	vmov	d0, r2, r3
 800c170:	b01f      	add	sp, #124	@ 0x7c
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	2920      	cmp	r1, #32
 800c178:	d1ce      	bne.n	800c118 <_strtod_l+0x30>
 800c17a:	3201      	adds	r2, #1
 800c17c:	e7c1      	b.n	800c102 <_strtod_l+0x1a>
 800c17e:	292d      	cmp	r1, #45	@ 0x2d
 800c180:	d1ca      	bne.n	800c118 <_strtod_l+0x30>
 800c182:	2101      	movs	r1, #1
 800c184:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c186:	1c51      	adds	r1, r2, #1
 800c188:	9119      	str	r1, [sp, #100]	@ 0x64
 800c18a:	7852      	ldrb	r2, [r2, #1]
 800c18c:	2a00      	cmp	r2, #0
 800c18e:	d1c5      	bne.n	800c11c <_strtod_l+0x34>
 800c190:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c192:	9419      	str	r4, [sp, #100]	@ 0x64
 800c194:	2b00      	cmp	r3, #0
 800c196:	f040 8570 	bne.w	800cc7a <_strtod_l+0xb92>
 800c19a:	4652      	mov	r2, sl
 800c19c:	465b      	mov	r3, fp
 800c19e:	e7e5      	b.n	800c16c <_strtod_l+0x84>
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	e7ef      	b.n	800c184 <_strtod_l+0x9c>
 800c1a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1a6:	b13a      	cbz	r2, 800c1b8 <_strtod_l+0xd0>
 800c1a8:	2135      	movs	r1, #53	@ 0x35
 800c1aa:	a81c      	add	r0, sp, #112	@ 0x70
 800c1ac:	f7ff ff38 	bl	800c020 <__copybits>
 800c1b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1b2:	9805      	ldr	r0, [sp, #20]
 800c1b4:	f7ff fafc 	bl	800b7b0 <_Bfree>
 800c1b8:	3e01      	subs	r6, #1
 800c1ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c1bc:	2e04      	cmp	r6, #4
 800c1be:	d806      	bhi.n	800c1ce <_strtod_l+0xe6>
 800c1c0:	e8df f006 	tbb	[pc, r6]
 800c1c4:	201d0314 	.word	0x201d0314
 800c1c8:	14          	.byte	0x14
 800c1c9:	00          	.byte	0x00
 800c1ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c1ce:	05e1      	lsls	r1, r4, #23
 800c1d0:	bf48      	it	mi
 800c1d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c1d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1da:	0d1b      	lsrs	r3, r3, #20
 800c1dc:	051b      	lsls	r3, r3, #20
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1bb      	bne.n	800c15a <_strtod_l+0x72>
 800c1e2:	f7fe fb0f 	bl	800a804 <__errno>
 800c1e6:	2322      	movs	r3, #34	@ 0x22
 800c1e8:	6003      	str	r3, [r0, #0]
 800c1ea:	e7b6      	b.n	800c15a <_strtod_l+0x72>
 800c1ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c1f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c1f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c1f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c1fc:	e7e7      	b.n	800c1ce <_strtod_l+0xe6>
 800c1fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c380 <_strtod_l+0x298>
 800c202:	e7e4      	b.n	800c1ce <_strtod_l+0xe6>
 800c204:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c208:	f04f 3aff 	mov.w	sl, #4294967295
 800c20c:	e7df      	b.n	800c1ce <_strtod_l+0xe6>
 800c20e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c210:	1c5a      	adds	r2, r3, #1
 800c212:	9219      	str	r2, [sp, #100]	@ 0x64
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	2b30      	cmp	r3, #48	@ 0x30
 800c218:	d0f9      	beq.n	800c20e <_strtod_l+0x126>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d09d      	beq.n	800c15a <_strtod_l+0x72>
 800c21e:	2301      	movs	r3, #1
 800c220:	9309      	str	r3, [sp, #36]	@ 0x24
 800c222:	220a      	movs	r2, #10
 800c224:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c226:	930c      	str	r3, [sp, #48]	@ 0x30
 800c228:	2300      	movs	r3, #0
 800c22a:	461f      	mov	r7, r3
 800c22c:	9308      	str	r3, [sp, #32]
 800c22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c230:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c232:	7805      	ldrb	r5, [r0, #0]
 800c234:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c238:	b2d9      	uxtb	r1, r3
 800c23a:	2909      	cmp	r1, #9
 800c23c:	d928      	bls.n	800c290 <_strtod_l+0x1a8>
 800c23e:	2201      	movs	r2, #1
 800c240:	494e      	ldr	r1, [pc, #312]	@ (800c37c <_strtod_l+0x294>)
 800c242:	f001 f9ab 	bl	800d59c <strncmp>
 800c246:	2800      	cmp	r0, #0
 800c248:	d033      	beq.n	800c2b2 <_strtod_l+0x1ca>
 800c24a:	2000      	movs	r0, #0
 800c24c:	462a      	mov	r2, r5
 800c24e:	463d      	mov	r5, r7
 800c250:	4681      	mov	r9, r0
 800c252:	4603      	mov	r3, r0
 800c254:	2a65      	cmp	r2, #101	@ 0x65
 800c256:	d001      	beq.n	800c25c <_strtod_l+0x174>
 800c258:	2a45      	cmp	r2, #69	@ 0x45
 800c25a:	d114      	bne.n	800c286 <_strtod_l+0x19e>
 800c25c:	b91d      	cbnz	r5, 800c266 <_strtod_l+0x17e>
 800c25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c260:	4302      	orrs	r2, r0
 800c262:	d095      	beq.n	800c190 <_strtod_l+0xa8>
 800c264:	2500      	movs	r5, #0
 800c266:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c268:	1c62      	adds	r2, r4, #1
 800c26a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c26c:	7862      	ldrb	r2, [r4, #1]
 800c26e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c270:	d078      	beq.n	800c364 <_strtod_l+0x27c>
 800c272:	2a2d      	cmp	r2, #45	@ 0x2d
 800c274:	d07c      	beq.n	800c370 <_strtod_l+0x288>
 800c276:	f04f 0c00 	mov.w	ip, #0
 800c27a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c27e:	2909      	cmp	r1, #9
 800c280:	f240 8084 	bls.w	800c38c <_strtod_l+0x2a4>
 800c284:	9419      	str	r4, [sp, #100]	@ 0x64
 800c286:	f04f 0800 	mov.w	r8, #0
 800c28a:	e0a4      	b.n	800c3d6 <_strtod_l+0x2ee>
 800c28c:	2300      	movs	r3, #0
 800c28e:	e7c7      	b.n	800c220 <_strtod_l+0x138>
 800c290:	2f08      	cmp	r7, #8
 800c292:	f100 0001 	add.w	r0, r0, #1
 800c296:	f107 0701 	add.w	r7, r7, #1
 800c29a:	bfd5      	itete	le
 800c29c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c29e:	9908      	ldrgt	r1, [sp, #32]
 800c2a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c2a8:	bfd4      	ite	le
 800c2aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c2ac:	9308      	strgt	r3, [sp, #32]
 800c2ae:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2b0:	e7be      	b.n	800c230 <_strtod_l+0x148>
 800c2b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2b4:	1c5a      	adds	r2, r3, #1
 800c2b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2b8:	785a      	ldrb	r2, [r3, #1]
 800c2ba:	b37f      	cbz	r7, 800c31c <_strtod_l+0x234>
 800c2bc:	4681      	mov	r9, r0
 800c2be:	463d      	mov	r5, r7
 800c2c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c2c4:	2b09      	cmp	r3, #9
 800c2c6:	d912      	bls.n	800c2ee <_strtod_l+0x206>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e7c3      	b.n	800c254 <_strtod_l+0x16c>
 800c2cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2d4:	785a      	ldrb	r2, [r3, #1]
 800c2d6:	2a30      	cmp	r2, #48	@ 0x30
 800c2d8:	d0f8      	beq.n	800c2cc <_strtod_l+0x1e4>
 800c2da:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c2de:	2b08      	cmp	r3, #8
 800c2e0:	f200 84d2 	bhi.w	800cc88 <_strtod_l+0xba0>
 800c2e4:	4681      	mov	r9, r0
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ea:	4605      	mov	r5, r0
 800c2ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2ee:	3a30      	subs	r2, #48	@ 0x30
 800c2f0:	f100 0301 	add.w	r3, r0, #1
 800c2f4:	d02a      	beq.n	800c34c <_strtod_l+0x264>
 800c2f6:	4499      	add	r9, r3
 800c2f8:	eb00 0c05 	add.w	ip, r0, r5
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	210a      	movs	r1, #10
 800c300:	4563      	cmp	r3, ip
 800c302:	d10d      	bne.n	800c320 <_strtod_l+0x238>
 800c304:	1c69      	adds	r1, r5, #1
 800c306:	4401      	add	r1, r0
 800c308:	4428      	add	r0, r5
 800c30a:	2808      	cmp	r0, #8
 800c30c:	dc16      	bgt.n	800c33c <_strtod_l+0x254>
 800c30e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c310:	230a      	movs	r3, #10
 800c312:	fb03 2300 	mla	r3, r3, r0, r2
 800c316:	930a      	str	r3, [sp, #40]	@ 0x28
 800c318:	2300      	movs	r3, #0
 800c31a:	e018      	b.n	800c34e <_strtod_l+0x266>
 800c31c:	4638      	mov	r0, r7
 800c31e:	e7da      	b.n	800c2d6 <_strtod_l+0x1ee>
 800c320:	2b08      	cmp	r3, #8
 800c322:	f103 0301 	add.w	r3, r3, #1
 800c326:	dc03      	bgt.n	800c330 <_strtod_l+0x248>
 800c328:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c32a:	434e      	muls	r6, r1
 800c32c:	960a      	str	r6, [sp, #40]	@ 0x28
 800c32e:	e7e7      	b.n	800c300 <_strtod_l+0x218>
 800c330:	2b10      	cmp	r3, #16
 800c332:	bfde      	ittt	le
 800c334:	9e08      	ldrle	r6, [sp, #32]
 800c336:	434e      	mulle	r6, r1
 800c338:	9608      	strle	r6, [sp, #32]
 800c33a:	e7e1      	b.n	800c300 <_strtod_l+0x218>
 800c33c:	280f      	cmp	r0, #15
 800c33e:	dceb      	bgt.n	800c318 <_strtod_l+0x230>
 800c340:	9808      	ldr	r0, [sp, #32]
 800c342:	230a      	movs	r3, #10
 800c344:	fb03 2300 	mla	r3, r3, r0, r2
 800c348:	9308      	str	r3, [sp, #32]
 800c34a:	e7e5      	b.n	800c318 <_strtod_l+0x230>
 800c34c:	4629      	mov	r1, r5
 800c34e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c350:	460d      	mov	r5, r1
 800c352:	1c50      	adds	r0, r2, #1
 800c354:	9019      	str	r0, [sp, #100]	@ 0x64
 800c356:	4618      	mov	r0, r3
 800c358:	7852      	ldrb	r2, [r2, #1]
 800c35a:	e7b1      	b.n	800c2c0 <_strtod_l+0x1d8>
 800c35c:	f04f 0900 	mov.w	r9, #0
 800c360:	2301      	movs	r3, #1
 800c362:	e77c      	b.n	800c25e <_strtod_l+0x176>
 800c364:	f04f 0c00 	mov.w	ip, #0
 800c368:	1ca2      	adds	r2, r4, #2
 800c36a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c36c:	78a2      	ldrb	r2, [r4, #2]
 800c36e:	e784      	b.n	800c27a <_strtod_l+0x192>
 800c370:	f04f 0c01 	mov.w	ip, #1
 800c374:	e7f8      	b.n	800c368 <_strtod_l+0x280>
 800c376:	bf00      	nop
 800c378:	0800e218 	.word	0x0800e218
 800c37c:	0800e200 	.word	0x0800e200
 800c380:	7ff00000 	.word	0x7ff00000
 800c384:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c386:	1c51      	adds	r1, r2, #1
 800c388:	9119      	str	r1, [sp, #100]	@ 0x64
 800c38a:	7852      	ldrb	r2, [r2, #1]
 800c38c:	2a30      	cmp	r2, #48	@ 0x30
 800c38e:	d0f9      	beq.n	800c384 <_strtod_l+0x29c>
 800c390:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c394:	2908      	cmp	r1, #8
 800c396:	f63f af76 	bhi.w	800c286 <_strtod_l+0x19e>
 800c39a:	3a30      	subs	r2, #48	@ 0x30
 800c39c:	f04f 080a 	mov.w	r8, #10
 800c3a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c3a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3a8:	1c56      	adds	r6, r2, #1
 800c3aa:	9619      	str	r6, [sp, #100]	@ 0x64
 800c3ac:	7852      	ldrb	r2, [r2, #1]
 800c3ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c3b2:	f1be 0f09 	cmp.w	lr, #9
 800c3b6:	d939      	bls.n	800c42c <_strtod_l+0x344>
 800c3b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3be:	1a76      	subs	r6, r6, r1
 800c3c0:	2e08      	cmp	r6, #8
 800c3c2:	dc03      	bgt.n	800c3cc <_strtod_l+0x2e4>
 800c3c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3c6:	4588      	cmp	r8, r1
 800c3c8:	bfa8      	it	ge
 800c3ca:	4688      	movge	r8, r1
 800c3cc:	f1bc 0f00 	cmp.w	ip, #0
 800c3d0:	d001      	beq.n	800c3d6 <_strtod_l+0x2ee>
 800c3d2:	f1c8 0800 	rsb	r8, r8, #0
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	d14e      	bne.n	800c478 <_strtod_l+0x390>
 800c3da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3dc:	4308      	orrs	r0, r1
 800c3de:	f47f aebc 	bne.w	800c15a <_strtod_l+0x72>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f47f aed4 	bne.w	800c190 <_strtod_l+0xa8>
 800c3e8:	2a69      	cmp	r2, #105	@ 0x69
 800c3ea:	d028      	beq.n	800c43e <_strtod_l+0x356>
 800c3ec:	dc25      	bgt.n	800c43a <_strtod_l+0x352>
 800c3ee:	2a49      	cmp	r2, #73	@ 0x49
 800c3f0:	d025      	beq.n	800c43e <_strtod_l+0x356>
 800c3f2:	2a4e      	cmp	r2, #78	@ 0x4e
 800c3f4:	f47f aecc 	bne.w	800c190 <_strtod_l+0xa8>
 800c3f8:	499b      	ldr	r1, [pc, #620]	@ (800c668 <_strtod_l+0x580>)
 800c3fa:	a819      	add	r0, sp, #100	@ 0x64
 800c3fc:	f001 fbc0 	bl	800db80 <__match>
 800c400:	2800      	cmp	r0, #0
 800c402:	f43f aec5 	beq.w	800c190 <_strtod_l+0xa8>
 800c406:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	2b28      	cmp	r3, #40	@ 0x28
 800c40c:	d12e      	bne.n	800c46c <_strtod_l+0x384>
 800c40e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c410:	4996      	ldr	r1, [pc, #600]	@ (800c66c <_strtod_l+0x584>)
 800c412:	a819      	add	r0, sp, #100	@ 0x64
 800c414:	f001 fbc8 	bl	800dba8 <__hexnan>
 800c418:	2805      	cmp	r0, #5
 800c41a:	d127      	bne.n	800c46c <_strtod_l+0x384>
 800c41c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c41e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c422:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c426:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c42a:	e696      	b.n	800c15a <_strtod_l+0x72>
 800c42c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c42e:	fb08 2101 	mla	r1, r8, r1, r2
 800c432:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c436:	920e      	str	r2, [sp, #56]	@ 0x38
 800c438:	e7b5      	b.n	800c3a6 <_strtod_l+0x2be>
 800c43a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c43c:	e7da      	b.n	800c3f4 <_strtod_l+0x30c>
 800c43e:	498c      	ldr	r1, [pc, #560]	@ (800c670 <_strtod_l+0x588>)
 800c440:	a819      	add	r0, sp, #100	@ 0x64
 800c442:	f001 fb9d 	bl	800db80 <__match>
 800c446:	2800      	cmp	r0, #0
 800c448:	f43f aea2 	beq.w	800c190 <_strtod_l+0xa8>
 800c44c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c44e:	a819      	add	r0, sp, #100	@ 0x64
 800c450:	4988      	ldr	r1, [pc, #544]	@ (800c674 <_strtod_l+0x58c>)
 800c452:	3b01      	subs	r3, #1
 800c454:	9319      	str	r3, [sp, #100]	@ 0x64
 800c456:	f001 fb93 	bl	800db80 <__match>
 800c45a:	b910      	cbnz	r0, 800c462 <_strtod_l+0x37a>
 800c45c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c45e:	3301      	adds	r3, #1
 800c460:	9319      	str	r3, [sp, #100]	@ 0x64
 800c462:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c684 <_strtod_l+0x59c>
 800c466:	f04f 0a00 	mov.w	sl, #0
 800c46a:	e676      	b.n	800c15a <_strtod_l+0x72>
 800c46c:	4882      	ldr	r0, [pc, #520]	@ (800c678 <_strtod_l+0x590>)
 800c46e:	f001 f8c7 	bl	800d600 <nan>
 800c472:	ec5b ab10 	vmov	sl, fp, d0
 800c476:	e670      	b.n	800c15a <_strtod_l+0x72>
 800c478:	eba8 0309 	sub.w	r3, r8, r9
 800c47c:	2f00      	cmp	r7, #0
 800c47e:	bf08      	it	eq
 800c480:	462f      	moveq	r7, r5
 800c482:	2d10      	cmp	r5, #16
 800c484:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c486:	462c      	mov	r4, r5
 800c488:	9309      	str	r3, [sp, #36]	@ 0x24
 800c48a:	bfa8      	it	ge
 800c48c:	2410      	movge	r4, #16
 800c48e:	f7f4 f84d 	bl	800052c <__aeabi_ui2d>
 800c492:	2d09      	cmp	r5, #9
 800c494:	4682      	mov	sl, r0
 800c496:	468b      	mov	fp, r1
 800c498:	dc13      	bgt.n	800c4c2 <_strtod_l+0x3da>
 800c49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f43f ae5c 	beq.w	800c15a <_strtod_l+0x72>
 800c4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4a4:	dd78      	ble.n	800c598 <_strtod_l+0x4b0>
 800c4a6:	2b16      	cmp	r3, #22
 800c4a8:	dc5f      	bgt.n	800c56a <_strtod_l+0x482>
 800c4aa:	4974      	ldr	r1, [pc, #464]	@ (800c67c <_strtod_l+0x594>)
 800c4ac:	4652      	mov	r2, sl
 800c4ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4b2:	465b      	mov	r3, fp
 800c4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4b8:	f7f4 f8b2 	bl	8000620 <__aeabi_dmul>
 800c4bc:	4682      	mov	sl, r0
 800c4be:	468b      	mov	fp, r1
 800c4c0:	e64b      	b.n	800c15a <_strtod_l+0x72>
 800c4c2:	4b6e      	ldr	r3, [pc, #440]	@ (800c67c <_strtod_l+0x594>)
 800c4c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c4cc:	f7f4 f8a8 	bl	8000620 <__aeabi_dmul>
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	9808      	ldr	r0, [sp, #32]
 800c4d6:	f7f4 f829 	bl	800052c <__aeabi_ui2d>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4650      	mov	r0, sl
 800c4e0:	4659      	mov	r1, fp
 800c4e2:	f7f3 fee7 	bl	80002b4 <__adddf3>
 800c4e6:	2d0f      	cmp	r5, #15
 800c4e8:	4682      	mov	sl, r0
 800c4ea:	468b      	mov	fp, r1
 800c4ec:	ddd5      	ble.n	800c49a <_strtod_l+0x3b2>
 800c4ee:	1b2c      	subs	r4, r5, r4
 800c4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f2:	441c      	add	r4, r3
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	f340 8096 	ble.w	800c626 <_strtod_l+0x53e>
 800c4fa:	f014 030f 	ands.w	r3, r4, #15
 800c4fe:	d00a      	beq.n	800c516 <_strtod_l+0x42e>
 800c500:	495e      	ldr	r1, [pc, #376]	@ (800c67c <_strtod_l+0x594>)
 800c502:	4652      	mov	r2, sl
 800c504:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c508:	465b      	mov	r3, fp
 800c50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c50e:	f7f4 f887 	bl	8000620 <__aeabi_dmul>
 800c512:	4682      	mov	sl, r0
 800c514:	468b      	mov	fp, r1
 800c516:	f034 040f 	bics.w	r4, r4, #15
 800c51a:	d073      	beq.n	800c604 <_strtod_l+0x51c>
 800c51c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c520:	dd48      	ble.n	800c5b4 <_strtod_l+0x4cc>
 800c522:	2400      	movs	r4, #0
 800c524:	46a0      	mov	r8, r4
 800c526:	46a1      	mov	r9, r4
 800c528:	940a      	str	r4, [sp, #40]	@ 0x28
 800c52a:	2322      	movs	r3, #34	@ 0x22
 800c52c:	9a05      	ldr	r2, [sp, #20]
 800c52e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c684 <_strtod_l+0x59c>
 800c532:	f04f 0a00 	mov.w	sl, #0
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f43f ae0d 	beq.w	800c15a <_strtod_l+0x72>
 800c540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c542:	9805      	ldr	r0, [sp, #20]
 800c544:	f7ff f934 	bl	800b7b0 <_Bfree>
 800c548:	4649      	mov	r1, r9
 800c54a:	9805      	ldr	r0, [sp, #20]
 800c54c:	f7ff f930 	bl	800b7b0 <_Bfree>
 800c550:	4641      	mov	r1, r8
 800c552:	9805      	ldr	r0, [sp, #20]
 800c554:	f7ff f92c 	bl	800b7b0 <_Bfree>
 800c558:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c55a:	9805      	ldr	r0, [sp, #20]
 800c55c:	f7ff f928 	bl	800b7b0 <_Bfree>
 800c560:	4621      	mov	r1, r4
 800c562:	9805      	ldr	r0, [sp, #20]
 800c564:	f7ff f924 	bl	800b7b0 <_Bfree>
 800c568:	e5f7      	b.n	800c15a <_strtod_l+0x72>
 800c56a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c570:	4293      	cmp	r3, r2
 800c572:	dbbc      	blt.n	800c4ee <_strtod_l+0x406>
 800c574:	f1c5 050f 	rsb	r5, r5, #15
 800c578:	4c40      	ldr	r4, [pc, #256]	@ (800c67c <_strtod_l+0x594>)
 800c57a:	4652      	mov	r2, sl
 800c57c:	465b      	mov	r3, fp
 800c57e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c586:	f7f4 f84b 	bl	8000620 <__aeabi_dmul>
 800c58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58c:	1b5d      	subs	r5, r3, r5
 800c58e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c592:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c596:	e78f      	b.n	800c4b8 <_strtod_l+0x3d0>
 800c598:	3316      	adds	r3, #22
 800c59a:	dba8      	blt.n	800c4ee <_strtod_l+0x406>
 800c59c:	eba9 0808 	sub.w	r8, r9, r8
 800c5a0:	4b36      	ldr	r3, [pc, #216]	@ (800c67c <_strtod_l+0x594>)
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	4659      	mov	r1, fp
 800c5a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c5aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5ae:	f7f4 f961 	bl	8000874 <__aeabi_ddiv>
 800c5b2:	e783      	b.n	800c4bc <_strtod_l+0x3d4>
 800c5b4:	4b32      	ldr	r3, [pc, #200]	@ (800c680 <_strtod_l+0x598>)
 800c5b6:	1124      	asrs	r4, r4, #4
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	4659      	mov	r1, fp
 800c5bc:	9308      	str	r3, [sp, #32]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	461e      	mov	r6, r3
 800c5c2:	2c01      	cmp	r4, #1
 800c5c4:	dc21      	bgt.n	800c60a <_strtod_l+0x522>
 800c5c6:	b10b      	cbz	r3, 800c5cc <_strtod_l+0x4e4>
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	468b      	mov	fp, r1
 800c5cc:	492c      	ldr	r1, [pc, #176]	@ (800c680 <_strtod_l+0x598>)
 800c5ce:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c5d8:	465b      	mov	r3, fp
 800c5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5de:	f7f4 f81f 	bl	8000620 <__aeabi_dmul>
 800c5e2:	4b28      	ldr	r3, [pc, #160]	@ (800c684 <_strtod_l+0x59c>)
 800c5e4:	460a      	mov	r2, r1
 800c5e6:	4682      	mov	sl, r0
 800c5e8:	400b      	ands	r3, r1
 800c5ea:	4927      	ldr	r1, [pc, #156]	@ (800c688 <_strtod_l+0x5a0>)
 800c5ec:	428b      	cmp	r3, r1
 800c5ee:	d898      	bhi.n	800c522 <_strtod_l+0x43a>
 800c5f0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c5f4:	428b      	cmp	r3, r1
 800c5f6:	bf86      	itte	hi
 800c5f8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c68c <_strtod_l+0x5a4>
 800c5fc:	f04f 3aff 	movhi.w	sl, #4294967295
 800c600:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c604:	2300      	movs	r3, #0
 800c606:	9308      	str	r3, [sp, #32]
 800c608:	e07a      	b.n	800c700 <_strtod_l+0x618>
 800c60a:	07e2      	lsls	r2, r4, #31
 800c60c:	d505      	bpl.n	800c61a <_strtod_l+0x532>
 800c60e:	9b08      	ldr	r3, [sp, #32]
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	f7f4 f804 	bl	8000620 <__aeabi_dmul>
 800c618:	2301      	movs	r3, #1
 800c61a:	9a08      	ldr	r2, [sp, #32]
 800c61c:	3601      	adds	r6, #1
 800c61e:	1064      	asrs	r4, r4, #1
 800c620:	3208      	adds	r2, #8
 800c622:	9208      	str	r2, [sp, #32]
 800c624:	e7cd      	b.n	800c5c2 <_strtod_l+0x4da>
 800c626:	d0ed      	beq.n	800c604 <_strtod_l+0x51c>
 800c628:	4264      	negs	r4, r4
 800c62a:	f014 020f 	ands.w	r2, r4, #15
 800c62e:	d00a      	beq.n	800c646 <_strtod_l+0x55e>
 800c630:	4b12      	ldr	r3, [pc, #72]	@ (800c67c <_strtod_l+0x594>)
 800c632:	4650      	mov	r0, sl
 800c634:	4659      	mov	r1, fp
 800c636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	f7f4 f919 	bl	8000874 <__aeabi_ddiv>
 800c642:	4682      	mov	sl, r0
 800c644:	468b      	mov	fp, r1
 800c646:	1124      	asrs	r4, r4, #4
 800c648:	d0dc      	beq.n	800c604 <_strtod_l+0x51c>
 800c64a:	2c1f      	cmp	r4, #31
 800c64c:	dd20      	ble.n	800c690 <_strtod_l+0x5a8>
 800c64e:	2400      	movs	r4, #0
 800c650:	46a0      	mov	r8, r4
 800c652:	46a1      	mov	r9, r4
 800c654:	940a      	str	r4, [sp, #40]	@ 0x28
 800c656:	2322      	movs	r3, #34	@ 0x22
 800c658:	9a05      	ldr	r2, [sp, #20]
 800c65a:	f04f 0a00 	mov.w	sl, #0
 800c65e:	f04f 0b00 	mov.w	fp, #0
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	e768      	b.n	800c538 <_strtod_l+0x450>
 800c666:	bf00      	nop
 800c668:	0800dff1 	.word	0x0800dff1
 800c66c:	0800e204 	.word	0x0800e204
 800c670:	0800dfe9 	.word	0x0800dfe9
 800c674:	0800e020 	.word	0x0800e020
 800c678:	0800e3ad 	.word	0x0800e3ad
 800c67c:	0800e138 	.word	0x0800e138
 800c680:	0800e110 	.word	0x0800e110
 800c684:	7ff00000 	.word	0x7ff00000
 800c688:	7ca00000 	.word	0x7ca00000
 800c68c:	7fefffff 	.word	0x7fefffff
 800c690:	f014 0310 	ands.w	r3, r4, #16
 800c694:	4650      	mov	r0, sl
 800c696:	4659      	mov	r1, fp
 800c698:	4ea9      	ldr	r6, [pc, #676]	@ (800c940 <_strtod_l+0x858>)
 800c69a:	bf18      	it	ne
 800c69c:	236a      	movne	r3, #106	@ 0x6a
 800c69e:	9308      	str	r3, [sp, #32]
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	07e2      	lsls	r2, r4, #31
 800c6a4:	d504      	bpl.n	800c6b0 <_strtod_l+0x5c8>
 800c6a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6aa:	f7f3 ffb9 	bl	8000620 <__aeabi_dmul>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	1064      	asrs	r4, r4, #1
 800c6b2:	f106 0608 	add.w	r6, r6, #8
 800c6b6:	d1f4      	bne.n	800c6a2 <_strtod_l+0x5ba>
 800c6b8:	b10b      	cbz	r3, 800c6be <_strtod_l+0x5d6>
 800c6ba:	4682      	mov	sl, r0
 800c6bc:	468b      	mov	fp, r1
 800c6be:	9b08      	ldr	r3, [sp, #32]
 800c6c0:	b1b3      	cbz	r3, 800c6f0 <_strtod_l+0x608>
 800c6c2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c6c6:	4659      	mov	r1, fp
 800c6c8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	dd0f      	ble.n	800c6f0 <_strtod_l+0x608>
 800c6d0:	2b1f      	cmp	r3, #31
 800c6d2:	dd55      	ble.n	800c780 <_strtod_l+0x698>
 800c6d4:	2b34      	cmp	r3, #52	@ 0x34
 800c6d6:	f04f 0a00 	mov.w	sl, #0
 800c6da:	bfdb      	ittet	le
 800c6dc:	f04f 33ff 	movle.w	r3, #4294967295
 800c6e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c6e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c6e8:	4093      	lslle	r3, r2
 800c6ea:	bfd8      	it	le
 800c6ec:	ea03 0b01 	andle.w	fp, r3, r1
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	4659      	mov	r1, fp
 800c6f8:	f7f4 f9fa 	bl	8000af0 <__aeabi_dcmpeq>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d1a6      	bne.n	800c64e <_strtod_l+0x566>
 800c700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c702:	463a      	mov	r2, r7
 800c704:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	462b      	mov	r3, r5
 800c70a:	9805      	ldr	r0, [sp, #20]
 800c70c:	f7ff f8ba 	bl	800b884 <__s2b>
 800c710:	900a      	str	r0, [sp, #40]	@ 0x28
 800c712:	2800      	cmp	r0, #0
 800c714:	f43f af05 	beq.w	800c522 <_strtod_l+0x43a>
 800c718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c71a:	eba9 0308 	sub.w	r3, r9, r8
 800c71e:	2400      	movs	r4, #0
 800c720:	2a00      	cmp	r2, #0
 800c722:	46a0      	mov	r8, r4
 800c724:	bfa8      	it	ge
 800c726:	2300      	movge	r3, #0
 800c728:	9312      	str	r3, [sp, #72]	@ 0x48
 800c72a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c72e:	9316      	str	r3, [sp, #88]	@ 0x58
 800c730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c732:	9805      	ldr	r0, [sp, #20]
 800c734:	6859      	ldr	r1, [r3, #4]
 800c736:	f7fe fffb 	bl	800b730 <_Balloc>
 800c73a:	4681      	mov	r9, r0
 800c73c:	2800      	cmp	r0, #0
 800c73e:	f43f aef4 	beq.w	800c52a <_strtod_l+0x442>
 800c742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c744:	300c      	adds	r0, #12
 800c746:	691a      	ldr	r2, [r3, #16]
 800c748:	f103 010c 	add.w	r1, r3, #12
 800c74c:	3202      	adds	r2, #2
 800c74e:	0092      	lsls	r2, r2, #2
 800c750:	f000 ff46 	bl	800d5e0 <memcpy>
 800c754:	aa1c      	add	r2, sp, #112	@ 0x70
 800c756:	a91b      	add	r1, sp, #108	@ 0x6c
 800c758:	9805      	ldr	r0, [sp, #20]
 800c75a:	ec4b ab10 	vmov	d0, sl, fp
 800c75e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c762:	f7ff fbd3 	bl	800bf0c <__d2b>
 800c766:	901a      	str	r0, [sp, #104]	@ 0x68
 800c768:	2800      	cmp	r0, #0
 800c76a:	f43f aede 	beq.w	800c52a <_strtod_l+0x442>
 800c76e:	2101      	movs	r1, #1
 800c770:	9805      	ldr	r0, [sp, #20]
 800c772:	f7ff f91d 	bl	800b9b0 <__i2b>
 800c776:	4680      	mov	r8, r0
 800c778:	b948      	cbnz	r0, 800c78e <_strtod_l+0x6a6>
 800c77a:	f04f 0800 	mov.w	r8, #0
 800c77e:	e6d4      	b.n	800c52a <_strtod_l+0x442>
 800c780:	f04f 32ff 	mov.w	r2, #4294967295
 800c784:	fa02 f303 	lsl.w	r3, r2, r3
 800c788:	ea03 0a0a 	and.w	sl, r3, sl
 800c78c:	e7b0      	b.n	800c6f0 <_strtod_l+0x608>
 800c78e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c790:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c792:	2d00      	cmp	r5, #0
 800c794:	bfa9      	itett	ge
 800c796:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c798:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c79a:	18ef      	addge	r7, r5, r3
 800c79c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c79e:	bfb8      	it	lt
 800c7a0:	1b5e      	sublt	r6, r3, r5
 800c7a2:	9b08      	ldr	r3, [sp, #32]
 800c7a4:	bfb8      	it	lt
 800c7a6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c7a8:	1aed      	subs	r5, r5, r3
 800c7aa:	4b66      	ldr	r3, [pc, #408]	@ (800c944 <_strtod_l+0x85c>)
 800c7ac:	4415      	add	r5, r2
 800c7ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c7b2:	3d01      	subs	r5, #1
 800c7b4:	429d      	cmp	r5, r3
 800c7b6:	da4f      	bge.n	800c858 <_strtod_l+0x770>
 800c7b8:	1b5b      	subs	r3, r3, r5
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	2b1f      	cmp	r3, #31
 800c7be:	eba2 0203 	sub.w	r2, r2, r3
 800c7c2:	dc3d      	bgt.n	800c840 <_strtod_l+0x758>
 800c7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7ce:	18bd      	adds	r5, r7, r2
 800c7d0:	9b08      	ldr	r3, [sp, #32]
 800c7d2:	4416      	add	r6, r2
 800c7d4:	42af      	cmp	r7, r5
 800c7d6:	441e      	add	r6, r3
 800c7d8:	463b      	mov	r3, r7
 800c7da:	bfa8      	it	ge
 800c7dc:	462b      	movge	r3, r5
 800c7de:	42b3      	cmp	r3, r6
 800c7e0:	bfa8      	it	ge
 800c7e2:	4633      	movge	r3, r6
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	bfc2      	ittt	gt
 800c7e8:	1aed      	subgt	r5, r5, r3
 800c7ea:	1af6      	subgt	r6, r6, r3
 800c7ec:	1aff      	subgt	r7, r7, r3
 800c7ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dd16      	ble.n	800c822 <_strtod_l+0x73a>
 800c7f4:	4641      	mov	r1, r8
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	9805      	ldr	r0, [sp, #20]
 800c7fa:	f7ff f999 	bl	800bb30 <__pow5mult>
 800c7fe:	4680      	mov	r8, r0
 800c800:	2800      	cmp	r0, #0
 800c802:	d0ba      	beq.n	800c77a <_strtod_l+0x692>
 800c804:	4601      	mov	r1, r0
 800c806:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c808:	9805      	ldr	r0, [sp, #20]
 800c80a:	f7ff f8e7 	bl	800b9dc <__multiply>
 800c80e:	900e      	str	r0, [sp, #56]	@ 0x38
 800c810:	2800      	cmp	r0, #0
 800c812:	f43f ae8a 	beq.w	800c52a <_strtod_l+0x442>
 800c816:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c818:	9805      	ldr	r0, [sp, #20]
 800c81a:	f7fe ffc9 	bl	800b7b0 <_Bfree>
 800c81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c820:	931a      	str	r3, [sp, #104]	@ 0x68
 800c822:	2d00      	cmp	r5, #0
 800c824:	dc1d      	bgt.n	800c862 <_strtod_l+0x77a>
 800c826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dd23      	ble.n	800c874 <_strtod_l+0x78c>
 800c82c:	4649      	mov	r1, r9
 800c82e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c830:	9805      	ldr	r0, [sp, #20]
 800c832:	f7ff f97d 	bl	800bb30 <__pow5mult>
 800c836:	4681      	mov	r9, r0
 800c838:	b9e0      	cbnz	r0, 800c874 <_strtod_l+0x78c>
 800c83a:	f04f 0900 	mov.w	r9, #0
 800c83e:	e674      	b.n	800c52a <_strtod_l+0x442>
 800c840:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c844:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c846:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c84a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c84e:	35e2      	adds	r5, #226	@ 0xe2
 800c850:	fa01 f305 	lsl.w	r3, r1, r5
 800c854:	9310      	str	r3, [sp, #64]	@ 0x40
 800c856:	e7ba      	b.n	800c7ce <_strtod_l+0x6e6>
 800c858:	2300      	movs	r3, #0
 800c85a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c85c:	2301      	movs	r3, #1
 800c85e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c860:	e7b5      	b.n	800c7ce <_strtod_l+0x6e6>
 800c862:	462a      	mov	r2, r5
 800c864:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c866:	9805      	ldr	r0, [sp, #20]
 800c868:	f7ff f9bc 	bl	800bbe4 <__lshift>
 800c86c:	901a      	str	r0, [sp, #104]	@ 0x68
 800c86e:	2800      	cmp	r0, #0
 800c870:	d1d9      	bne.n	800c826 <_strtod_l+0x73e>
 800c872:	e65a      	b.n	800c52a <_strtod_l+0x442>
 800c874:	2e00      	cmp	r6, #0
 800c876:	dd07      	ble.n	800c888 <_strtod_l+0x7a0>
 800c878:	4649      	mov	r1, r9
 800c87a:	4632      	mov	r2, r6
 800c87c:	9805      	ldr	r0, [sp, #20]
 800c87e:	f7ff f9b1 	bl	800bbe4 <__lshift>
 800c882:	4681      	mov	r9, r0
 800c884:	2800      	cmp	r0, #0
 800c886:	d0d8      	beq.n	800c83a <_strtod_l+0x752>
 800c888:	2f00      	cmp	r7, #0
 800c88a:	dd08      	ble.n	800c89e <_strtod_l+0x7b6>
 800c88c:	4641      	mov	r1, r8
 800c88e:	463a      	mov	r2, r7
 800c890:	9805      	ldr	r0, [sp, #20]
 800c892:	f7ff f9a7 	bl	800bbe4 <__lshift>
 800c896:	4680      	mov	r8, r0
 800c898:	2800      	cmp	r0, #0
 800c89a:	f43f ae46 	beq.w	800c52a <_strtod_l+0x442>
 800c89e:	464a      	mov	r2, r9
 800c8a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8a2:	9805      	ldr	r0, [sp, #20]
 800c8a4:	f7ff fa26 	bl	800bcf4 <__mdiff>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	f43f ae3d 	beq.w	800c52a <_strtod_l+0x442>
 800c8b0:	68c3      	ldr	r3, [r0, #12]
 800c8b2:	4641      	mov	r1, r8
 800c8b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	60c3      	str	r3, [r0, #12]
 800c8ba:	f7ff f9ff 	bl	800bcbc <__mcmp>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	da46      	bge.n	800c950 <_strtod_l+0x868>
 800c8c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c4:	ea53 030a 	orrs.w	r3, r3, sl
 800c8c8:	d16c      	bne.n	800c9a4 <_strtod_l+0x8bc>
 800c8ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d168      	bne.n	800c9a4 <_strtod_l+0x8bc>
 800c8d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8d6:	0d1b      	lsrs	r3, r3, #20
 800c8d8:	051b      	lsls	r3, r3, #20
 800c8da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8de:	d961      	bls.n	800c9a4 <_strtod_l+0x8bc>
 800c8e0:	6963      	ldr	r3, [r4, #20]
 800c8e2:	b913      	cbnz	r3, 800c8ea <_strtod_l+0x802>
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	dd5c      	ble.n	800c9a4 <_strtod_l+0x8bc>
 800c8ea:	4621      	mov	r1, r4
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	9805      	ldr	r0, [sp, #20]
 800c8f0:	f7ff f978 	bl	800bbe4 <__lshift>
 800c8f4:	4641      	mov	r1, r8
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	f7ff f9e0 	bl	800bcbc <__mcmp>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	dd51      	ble.n	800c9a4 <_strtod_l+0x8bc>
 800c900:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c904:	9a08      	ldr	r2, [sp, #32]
 800c906:	0d1b      	lsrs	r3, r3, #20
 800c908:	051b      	lsls	r3, r3, #20
 800c90a:	2a00      	cmp	r2, #0
 800c90c:	d06b      	beq.n	800c9e6 <_strtod_l+0x8fe>
 800c90e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c912:	d868      	bhi.n	800c9e6 <_strtod_l+0x8fe>
 800c914:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c918:	f67f ae9d 	bls.w	800c656 <_strtod_l+0x56e>
 800c91c:	4b0a      	ldr	r3, [pc, #40]	@ (800c948 <_strtod_l+0x860>)
 800c91e:	4650      	mov	r0, sl
 800c920:	4659      	mov	r1, fp
 800c922:	2200      	movs	r2, #0
 800c924:	f7f3 fe7c 	bl	8000620 <__aeabi_dmul>
 800c928:	4b08      	ldr	r3, [pc, #32]	@ (800c94c <_strtod_l+0x864>)
 800c92a:	4682      	mov	sl, r0
 800c92c:	468b      	mov	fp, r1
 800c92e:	400b      	ands	r3, r1
 800c930:	2b00      	cmp	r3, #0
 800c932:	f47f ae05 	bne.w	800c540 <_strtod_l+0x458>
 800c936:	2322      	movs	r3, #34	@ 0x22
 800c938:	9a05      	ldr	r2, [sp, #20]
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	e600      	b.n	800c540 <_strtod_l+0x458>
 800c93e:	bf00      	nop
 800c940:	0800e230 	.word	0x0800e230
 800c944:	fffffc02 	.word	0xfffffc02
 800c948:	39500000 	.word	0x39500000
 800c94c:	7ff00000 	.word	0x7ff00000
 800c950:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c954:	d165      	bne.n	800ca22 <_strtod_l+0x93a>
 800c956:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c95c:	b35a      	cbz	r2, 800c9b6 <_strtod_l+0x8ce>
 800c95e:	4a9e      	ldr	r2, [pc, #632]	@ (800cbd8 <_strtod_l+0xaf0>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d12b      	bne.n	800c9bc <_strtod_l+0x8d4>
 800c964:	9b08      	ldr	r3, [sp, #32]
 800c966:	4651      	mov	r1, sl
 800c968:	b303      	cbz	r3, 800c9ac <_strtod_l+0x8c4>
 800c96a:	465a      	mov	r2, fp
 800c96c:	4b9b      	ldr	r3, [pc, #620]	@ (800cbdc <_strtod_l+0xaf4>)
 800c96e:	4013      	ands	r3, r2
 800c970:	f04f 32ff 	mov.w	r2, #4294967295
 800c974:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c978:	d81b      	bhi.n	800c9b2 <_strtod_l+0x8ca>
 800c97a:	0d1b      	lsrs	r3, r3, #20
 800c97c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c980:	fa02 f303 	lsl.w	r3, r2, r3
 800c984:	4299      	cmp	r1, r3
 800c986:	d119      	bne.n	800c9bc <_strtod_l+0x8d4>
 800c988:	4b95      	ldr	r3, [pc, #596]	@ (800cbe0 <_strtod_l+0xaf8>)
 800c98a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d102      	bne.n	800c996 <_strtod_l+0x8ae>
 800c990:	3101      	adds	r1, #1
 800c992:	f43f adca 	beq.w	800c52a <_strtod_l+0x442>
 800c996:	4b91      	ldr	r3, [pc, #580]	@ (800cbdc <_strtod_l+0xaf4>)
 800c998:	f04f 0a00 	mov.w	sl, #0
 800c99c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c99e:	401a      	ands	r2, r3
 800c9a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c9a4:	9b08      	ldr	r3, [sp, #32]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1b8      	bne.n	800c91c <_strtod_l+0x834>
 800c9aa:	e5c9      	b.n	800c540 <_strtod_l+0x458>
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	e7e8      	b.n	800c984 <_strtod_l+0x89c>
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	e7e6      	b.n	800c984 <_strtod_l+0x89c>
 800c9b6:	ea53 030a 	orrs.w	r3, r3, sl
 800c9ba:	d0a1      	beq.n	800c900 <_strtod_l+0x818>
 800c9bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9be:	b1db      	cbz	r3, 800c9f8 <_strtod_l+0x910>
 800c9c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9c2:	4213      	tst	r3, r2
 800c9c4:	d0ee      	beq.n	800c9a4 <_strtod_l+0x8bc>
 800c9c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	9a08      	ldr	r2, [sp, #32]
 800c9cc:	4659      	mov	r1, fp
 800c9ce:	b1bb      	cbz	r3, 800ca00 <_strtod_l+0x918>
 800c9d0:	f7ff fb6a 	bl	800c0a8 <sulp>
 800c9d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9d8:	ec53 2b10 	vmov	r2, r3, d0
 800c9dc:	f7f3 fc6a 	bl	80002b4 <__adddf3>
 800c9e0:	4682      	mov	sl, r0
 800c9e2:	468b      	mov	fp, r1
 800c9e4:	e7de      	b.n	800c9a4 <_strtod_l+0x8bc>
 800c9e6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c9ea:	f04f 3aff 	mov.w	sl, #4294967295
 800c9ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c9f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c9f6:	e7d5      	b.n	800c9a4 <_strtod_l+0x8bc>
 800c9f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9fa:	ea13 0f0a 	tst.w	r3, sl
 800c9fe:	e7e1      	b.n	800c9c4 <_strtod_l+0x8dc>
 800ca00:	f7ff fb52 	bl	800c0a8 <sulp>
 800ca04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca08:	ec53 2b10 	vmov	r2, r3, d0
 800ca0c:	f7f3 fc50 	bl	80002b0 <__aeabi_dsub>
 800ca10:	2200      	movs	r2, #0
 800ca12:	2300      	movs	r3, #0
 800ca14:	4682      	mov	sl, r0
 800ca16:	468b      	mov	fp, r1
 800ca18:	f7f4 f86a 	bl	8000af0 <__aeabi_dcmpeq>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0c1      	beq.n	800c9a4 <_strtod_l+0x8bc>
 800ca20:	e619      	b.n	800c656 <_strtod_l+0x56e>
 800ca22:	4641      	mov	r1, r8
 800ca24:	4620      	mov	r0, r4
 800ca26:	f7ff fac9 	bl	800bfbc <__ratio>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca30:	ec57 6b10 	vmov	r6, r7, d0
 800ca34:	4630      	mov	r0, r6
 800ca36:	4639      	mov	r1, r7
 800ca38:	f7f4 f86e 	bl	8000b18 <__aeabi_dcmple>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d06f      	beq.n	800cb20 <_strtod_l+0xa38>
 800ca40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d17a      	bne.n	800cb3c <_strtod_l+0xa54>
 800ca46:	f1ba 0f00 	cmp.w	sl, #0
 800ca4a:	d158      	bne.n	800cafe <_strtod_l+0xa16>
 800ca4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d15a      	bne.n	800cb0c <_strtod_l+0xa24>
 800ca56:	2200      	movs	r2, #0
 800ca58:	4b62      	ldr	r3, [pc, #392]	@ (800cbe4 <_strtod_l+0xafc>)
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	f7f4 f851 	bl	8000b04 <__aeabi_dcmplt>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d159      	bne.n	800cb1a <_strtod_l+0xa32>
 800ca66:	4630      	mov	r0, r6
 800ca68:	4639      	mov	r1, r7
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	4b5e      	ldr	r3, [pc, #376]	@ (800cbe8 <_strtod_l+0xb00>)
 800ca6e:	f7f3 fdd7 	bl	8000620 <__aeabi_dmul>
 800ca72:	4606      	mov	r6, r0
 800ca74:	460f      	mov	r7, r1
 800ca76:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca7a:	9606      	str	r6, [sp, #24]
 800ca7c:	9307      	str	r3, [sp, #28]
 800ca7e:	4d57      	ldr	r5, [pc, #348]	@ (800cbdc <_strtod_l+0xaf4>)
 800ca80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca8a:	401d      	ands	r5, r3
 800ca8c:	4b57      	ldr	r3, [pc, #348]	@ (800cbec <_strtod_l+0xb04>)
 800ca8e:	429d      	cmp	r5, r3
 800ca90:	f040 80b0 	bne.w	800cbf4 <_strtod_l+0xb0c>
 800ca94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca96:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca9a:	ec4b ab10 	vmov	d0, sl, fp
 800ca9e:	f7ff f9c1 	bl	800be24 <__ulp>
 800caa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800caa6:	ec51 0b10 	vmov	r0, r1, d0
 800caaa:	f7f3 fdb9 	bl	8000620 <__aeabi_dmul>
 800caae:	4652      	mov	r2, sl
 800cab0:	465b      	mov	r3, fp
 800cab2:	f7f3 fbff 	bl	80002b4 <__adddf3>
 800cab6:	460b      	mov	r3, r1
 800cab8:	4948      	ldr	r1, [pc, #288]	@ (800cbdc <_strtod_l+0xaf4>)
 800caba:	4682      	mov	sl, r0
 800cabc:	4a4c      	ldr	r2, [pc, #304]	@ (800cbf0 <_strtod_l+0xb08>)
 800cabe:	4019      	ands	r1, r3
 800cac0:	4291      	cmp	r1, r2
 800cac2:	d942      	bls.n	800cb4a <_strtod_l+0xa62>
 800cac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cac6:	4b46      	ldr	r3, [pc, #280]	@ (800cbe0 <_strtod_l+0xaf8>)
 800cac8:	429a      	cmp	r2, r3
 800caca:	d103      	bne.n	800cad4 <_strtod_l+0x9ec>
 800cacc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cace:	3301      	adds	r3, #1
 800cad0:	f43f ad2b 	beq.w	800c52a <_strtod_l+0x442>
 800cad4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800cbe0 <_strtod_l+0xaf8>
 800cad8:	f04f 3aff 	mov.w	sl, #4294967295
 800cadc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cade:	9805      	ldr	r0, [sp, #20]
 800cae0:	f7fe fe66 	bl	800b7b0 <_Bfree>
 800cae4:	4649      	mov	r1, r9
 800cae6:	9805      	ldr	r0, [sp, #20]
 800cae8:	f7fe fe62 	bl	800b7b0 <_Bfree>
 800caec:	4641      	mov	r1, r8
 800caee:	9805      	ldr	r0, [sp, #20]
 800caf0:	f7fe fe5e 	bl	800b7b0 <_Bfree>
 800caf4:	4621      	mov	r1, r4
 800caf6:	9805      	ldr	r0, [sp, #20]
 800caf8:	f7fe fe5a 	bl	800b7b0 <_Bfree>
 800cafc:	e618      	b.n	800c730 <_strtod_l+0x648>
 800cafe:	f1ba 0f01 	cmp.w	sl, #1
 800cb02:	d103      	bne.n	800cb0c <_strtod_l+0xa24>
 800cb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f43f ada5 	beq.w	800c656 <_strtod_l+0x56e>
 800cb0c:	2600      	movs	r6, #0
 800cb0e:	4f35      	ldr	r7, [pc, #212]	@ (800cbe4 <_strtod_l+0xafc>)
 800cb10:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800cbb8 <_strtod_l+0xad0>
 800cb14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb18:	e7b1      	b.n	800ca7e <_strtod_l+0x996>
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	4f32      	ldr	r7, [pc, #200]	@ (800cbe8 <_strtod_l+0xb00>)
 800cb1e:	e7aa      	b.n	800ca76 <_strtod_l+0x98e>
 800cb20:	4b31      	ldr	r3, [pc, #196]	@ (800cbe8 <_strtod_l+0xb00>)
 800cb22:	4630      	mov	r0, r6
 800cb24:	4639      	mov	r1, r7
 800cb26:	2200      	movs	r2, #0
 800cb28:	f7f3 fd7a 	bl	8000620 <__aeabi_dmul>
 800cb2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb2e:	4606      	mov	r6, r0
 800cb30:	460f      	mov	r7, r1
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d09f      	beq.n	800ca76 <_strtod_l+0x98e>
 800cb36:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb3a:	e7a0      	b.n	800ca7e <_strtod_l+0x996>
 800cb3c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800cbc0 <_strtod_l+0xad8>
 800cb40:	ec57 6b17 	vmov	r6, r7, d7
 800cb44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb48:	e799      	b.n	800ca7e <_strtod_l+0x996>
 800cb4a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb4e:	9b08      	ldr	r3, [sp, #32]
 800cb50:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1c1      	bne.n	800cadc <_strtod_l+0x9f4>
 800cb58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb5c:	0d1b      	lsrs	r3, r3, #20
 800cb5e:	051b      	lsls	r3, r3, #20
 800cb60:	429d      	cmp	r5, r3
 800cb62:	d1bb      	bne.n	800cadc <_strtod_l+0x9f4>
 800cb64:	4630      	mov	r0, r6
 800cb66:	4639      	mov	r1, r7
 800cb68:	f7f4 f8ba 	bl	8000ce0 <__aeabi_d2lz>
 800cb6c:	f7f3 fd2a 	bl	80005c4 <__aeabi_l2d>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4630      	mov	r0, r6
 800cb76:	4639      	mov	r1, r7
 800cb78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb7c:	f7f3 fb98 	bl	80002b0 <__aeabi_dsub>
 800cb80:	460b      	mov	r3, r1
 800cb82:	4602      	mov	r2, r0
 800cb84:	ea46 060a 	orr.w	r6, r6, sl
 800cb88:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb8e:	431e      	orrs	r6, r3
 800cb90:	d06d      	beq.n	800cc6e <_strtod_l+0xb86>
 800cb92:	a30d      	add	r3, pc, #52	@ (adr r3, 800cbc8 <_strtod_l+0xae0>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	f7f3 ffb4 	bl	8000b04 <__aeabi_dcmplt>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	f47f accf 	bne.w	800c540 <_strtod_l+0x458>
 800cba2:	a30b      	add	r3, pc, #44	@ (adr r3, 800cbd0 <_strtod_l+0xae8>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbac:	f7f3 ffc8 	bl	8000b40 <__aeabi_dcmpgt>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d093      	beq.n	800cadc <_strtod_l+0x9f4>
 800cbb4:	e4c4      	b.n	800c540 <_strtod_l+0x458>
 800cbb6:	bf00      	nop
 800cbb8:	00000000 	.word	0x00000000
 800cbbc:	bff00000 	.word	0xbff00000
 800cbc0:	00000000 	.word	0x00000000
 800cbc4:	3ff00000 	.word	0x3ff00000
 800cbc8:	94a03595 	.word	0x94a03595
 800cbcc:	3fdfffff 	.word	0x3fdfffff
 800cbd0:	35afe535 	.word	0x35afe535
 800cbd4:	3fe00000 	.word	0x3fe00000
 800cbd8:	000fffff 	.word	0x000fffff
 800cbdc:	7ff00000 	.word	0x7ff00000
 800cbe0:	7fefffff 	.word	0x7fefffff
 800cbe4:	3ff00000 	.word	0x3ff00000
 800cbe8:	3fe00000 	.word	0x3fe00000
 800cbec:	7fe00000 	.word	0x7fe00000
 800cbf0:	7c9fffff 	.word	0x7c9fffff
 800cbf4:	9b08      	ldr	r3, [sp, #32]
 800cbf6:	b323      	cbz	r3, 800cc42 <_strtod_l+0xb5a>
 800cbf8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cbfc:	d821      	bhi.n	800cc42 <_strtod_l+0xb5a>
 800cbfe:	4630      	mov	r0, r6
 800cc00:	4639      	mov	r1, r7
 800cc02:	a327      	add	r3, pc, #156	@ (adr r3, 800cca0 <_strtod_l+0xbb8>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 ff86 	bl	8000b18 <__aeabi_dcmple>
 800cc0c:	b1a0      	cbz	r0, 800cc38 <_strtod_l+0xb50>
 800cc0e:	4639      	mov	r1, r7
 800cc10:	4630      	mov	r0, r6
 800cc12:	f7f3 ffdd 	bl	8000bd0 <__aeabi_d2uiz>
 800cc16:	2801      	cmp	r0, #1
 800cc18:	bf38      	it	cc
 800cc1a:	2001      	movcc	r0, #1
 800cc1c:	f7f3 fc86 	bl	800052c <__aeabi_ui2d>
 800cc20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc22:	4606      	mov	r6, r0
 800cc24:	460f      	mov	r7, r1
 800cc26:	b9fb      	cbnz	r3, 800cc68 <_strtod_l+0xb80>
 800cc28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc2c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc2e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc3e:	1b5b      	subs	r3, r3, r5
 800cc40:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc42:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc4a:	f7ff f8eb 	bl	800be24 <__ulp>
 800cc4e:	4650      	mov	r0, sl
 800cc50:	4659      	mov	r1, fp
 800cc52:	ec53 2b10 	vmov	r2, r3, d0
 800cc56:	f7f3 fce3 	bl	8000620 <__aeabi_dmul>
 800cc5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc5e:	f7f3 fb29 	bl	80002b4 <__adddf3>
 800cc62:	4682      	mov	sl, r0
 800cc64:	468b      	mov	fp, r1
 800cc66:	e772      	b.n	800cb4e <_strtod_l+0xa66>
 800cc68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cc6c:	e7e0      	b.n	800cc30 <_strtod_l+0xb48>
 800cc6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cca8 <_strtod_l+0xbc0>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 ff46 	bl	8000b04 <__aeabi_dcmplt>
 800cc78:	e79a      	b.n	800cbb0 <_strtod_l+0xac8>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc80:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	f7ff ba6d 	b.w	800c162 <_strtod_l+0x7a>
 800cc88:	2a65      	cmp	r2, #101	@ 0x65
 800cc8a:	f43f ab67 	beq.w	800c35c <_strtod_l+0x274>
 800cc8e:	2a45      	cmp	r2, #69	@ 0x45
 800cc90:	f43f ab64 	beq.w	800c35c <_strtod_l+0x274>
 800cc94:	2301      	movs	r3, #1
 800cc96:	f7ff bba0 	b.w	800c3da <_strtod_l+0x2f2>
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w
 800cca0:	ffc00000 	.word	0xffc00000
 800cca4:	41dfffff 	.word	0x41dfffff
 800cca8:	94a03595 	.word	0x94a03595
 800ccac:	3fcfffff 	.word	0x3fcfffff

0800ccb0 <_strtod_r>:
 800ccb0:	4b01      	ldr	r3, [pc, #4]	@ (800ccb8 <_strtod_r+0x8>)
 800ccb2:	f7ff ba19 	b.w	800c0e8 <_strtod_l>
 800ccb6:	bf00      	nop
 800ccb8:	20000068 	.word	0x20000068

0800ccbc <_strtol_l.constprop.0>:
 800ccbc:	2b24      	cmp	r3, #36	@ 0x24
 800ccbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc2:	4686      	mov	lr, r0
 800ccc4:	4690      	mov	r8, r2
 800ccc6:	d801      	bhi.n	800cccc <_strtol_l.constprop.0+0x10>
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d106      	bne.n	800ccda <_strtol_l.constprop.0+0x1e>
 800cccc:	f7fd fd9a 	bl	800a804 <__errno>
 800ccd0:	2316      	movs	r3, #22
 800ccd2:	6003      	str	r3, [r0, #0]
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccda:	460d      	mov	r5, r1
 800ccdc:	4833      	ldr	r0, [pc, #204]	@ (800cdac <_strtol_l.constprop.0+0xf0>)
 800ccde:	462a      	mov	r2, r5
 800cce0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cce4:	5d06      	ldrb	r6, [r0, r4]
 800cce6:	f016 0608 	ands.w	r6, r6, #8
 800ccea:	d1f8      	bne.n	800ccde <_strtol_l.constprop.0+0x22>
 800ccec:	2c2d      	cmp	r4, #45	@ 0x2d
 800ccee:	d12d      	bne.n	800cd4c <_strtol_l.constprop.0+0x90>
 800ccf0:	782c      	ldrb	r4, [r5, #0]
 800ccf2:	2601      	movs	r6, #1
 800ccf4:	1c95      	adds	r5, r2, #2
 800ccf6:	f033 0210 	bics.w	r2, r3, #16
 800ccfa:	d109      	bne.n	800cd10 <_strtol_l.constprop.0+0x54>
 800ccfc:	2c30      	cmp	r4, #48	@ 0x30
 800ccfe:	d12a      	bne.n	800cd56 <_strtol_l.constprop.0+0x9a>
 800cd00:	782a      	ldrb	r2, [r5, #0]
 800cd02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd06:	2a58      	cmp	r2, #88	@ 0x58
 800cd08:	d125      	bne.n	800cd56 <_strtol_l.constprop.0+0x9a>
 800cd0a:	786c      	ldrb	r4, [r5, #1]
 800cd0c:	2310      	movs	r3, #16
 800cd0e:	3502      	adds	r5, #2
 800cd10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cd14:	2200      	movs	r2, #0
 800cd16:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd1a:	4610      	mov	r0, r2
 800cd1c:	fbbc f9f3 	udiv	r9, ip, r3
 800cd20:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd28:	2f09      	cmp	r7, #9
 800cd2a:	d81b      	bhi.n	800cd64 <_strtol_l.constprop.0+0xa8>
 800cd2c:	463c      	mov	r4, r7
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	dd27      	ble.n	800cd82 <_strtol_l.constprop.0+0xc6>
 800cd32:	1c57      	adds	r7, r2, #1
 800cd34:	d007      	beq.n	800cd46 <_strtol_l.constprop.0+0x8a>
 800cd36:	4581      	cmp	r9, r0
 800cd38:	d320      	bcc.n	800cd7c <_strtol_l.constprop.0+0xc0>
 800cd3a:	d101      	bne.n	800cd40 <_strtol_l.constprop.0+0x84>
 800cd3c:	45a2      	cmp	sl, r4
 800cd3e:	db1d      	blt.n	800cd7c <_strtol_l.constprop.0+0xc0>
 800cd40:	fb00 4003 	mla	r0, r0, r3, r4
 800cd44:	2201      	movs	r2, #1
 800cd46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd4a:	e7eb      	b.n	800cd24 <_strtol_l.constprop.0+0x68>
 800cd4c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd4e:	bf04      	itt	eq
 800cd50:	782c      	ldrbeq	r4, [r5, #0]
 800cd52:	1c95      	addeq	r5, r2, #2
 800cd54:	e7cf      	b.n	800ccf6 <_strtol_l.constprop.0+0x3a>
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1da      	bne.n	800cd10 <_strtol_l.constprop.0+0x54>
 800cd5a:	2c30      	cmp	r4, #48	@ 0x30
 800cd5c:	bf0c      	ite	eq
 800cd5e:	2308      	moveq	r3, #8
 800cd60:	230a      	movne	r3, #10
 800cd62:	e7d5      	b.n	800cd10 <_strtol_l.constprop.0+0x54>
 800cd64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd68:	2f19      	cmp	r7, #25
 800cd6a:	d801      	bhi.n	800cd70 <_strtol_l.constprop.0+0xb4>
 800cd6c:	3c37      	subs	r4, #55	@ 0x37
 800cd6e:	e7de      	b.n	800cd2e <_strtol_l.constprop.0+0x72>
 800cd70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd74:	2f19      	cmp	r7, #25
 800cd76:	d804      	bhi.n	800cd82 <_strtol_l.constprop.0+0xc6>
 800cd78:	3c57      	subs	r4, #87	@ 0x57
 800cd7a:	e7d8      	b.n	800cd2e <_strtol_l.constprop.0+0x72>
 800cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd80:	e7e1      	b.n	800cd46 <_strtol_l.constprop.0+0x8a>
 800cd82:	1c53      	adds	r3, r2, #1
 800cd84:	d108      	bne.n	800cd98 <_strtol_l.constprop.0+0xdc>
 800cd86:	2322      	movs	r3, #34	@ 0x22
 800cd88:	4660      	mov	r0, ip
 800cd8a:	f8ce 3000 	str.w	r3, [lr]
 800cd8e:	f1b8 0f00 	cmp.w	r8, #0
 800cd92:	d0a0      	beq.n	800ccd6 <_strtol_l.constprop.0+0x1a>
 800cd94:	1e69      	subs	r1, r5, #1
 800cd96:	e006      	b.n	800cda6 <_strtol_l.constprop.0+0xea>
 800cd98:	b106      	cbz	r6, 800cd9c <_strtol_l.constprop.0+0xe0>
 800cd9a:	4240      	negs	r0, r0
 800cd9c:	f1b8 0f00 	cmp.w	r8, #0
 800cda0:	d099      	beq.n	800ccd6 <_strtol_l.constprop.0+0x1a>
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	d1f6      	bne.n	800cd94 <_strtol_l.constprop.0+0xd8>
 800cda6:	f8c8 1000 	str.w	r1, [r8]
 800cdaa:	e794      	b.n	800ccd6 <_strtol_l.constprop.0+0x1a>
 800cdac:	0800e259 	.word	0x0800e259

0800cdb0 <_strtol_r>:
 800cdb0:	f7ff bf84 	b.w	800ccbc <_strtol_l.constprop.0>

0800cdb4 <__ssputs_r>:
 800cdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb8:	461f      	mov	r7, r3
 800cdba:	688e      	ldr	r6, [r1, #8]
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	42be      	cmp	r6, r7
 800cdc2:	4690      	mov	r8, r2
 800cdc4:	680b      	ldr	r3, [r1, #0]
 800cdc6:	d82d      	bhi.n	800ce24 <__ssputs_r+0x70>
 800cdc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cdd0:	d026      	beq.n	800ce20 <__ssputs_r+0x6c>
 800cdd2:	6965      	ldr	r5, [r4, #20]
 800cdd4:	6909      	ldr	r1, [r1, #16]
 800cdd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdda:	eba3 0901 	sub.w	r9, r3, r1
 800cdde:	1c7b      	adds	r3, r7, #1
 800cde0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cde4:	444b      	add	r3, r9
 800cde6:	106d      	asrs	r5, r5, #1
 800cde8:	429d      	cmp	r5, r3
 800cdea:	bf38      	it	cc
 800cdec:	461d      	movcc	r5, r3
 800cdee:	0553      	lsls	r3, r2, #21
 800cdf0:	d527      	bpl.n	800ce42 <__ssputs_r+0x8e>
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7fe fc10 	bl	800b618 <_malloc_r>
 800cdf8:	4606      	mov	r6, r0
 800cdfa:	b360      	cbz	r0, 800ce56 <__ssputs_r+0xa2>
 800cdfc:	464a      	mov	r2, r9
 800cdfe:	6921      	ldr	r1, [r4, #16]
 800ce00:	f000 fbee 	bl	800d5e0 <memcpy>
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	6126      	str	r6, [r4, #16]
 800ce12:	444e      	add	r6, r9
 800ce14:	6165      	str	r5, [r4, #20]
 800ce16:	eba5 0509 	sub.w	r5, r5, r9
 800ce1a:	6026      	str	r6, [r4, #0]
 800ce1c:	463e      	mov	r6, r7
 800ce1e:	60a5      	str	r5, [r4, #8]
 800ce20:	42be      	cmp	r6, r7
 800ce22:	d900      	bls.n	800ce26 <__ssputs_r+0x72>
 800ce24:	463e      	mov	r6, r7
 800ce26:	4632      	mov	r2, r6
 800ce28:	4641      	mov	r1, r8
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	f000 fb9c 	bl	800d568 <memmove>
 800ce30:	68a3      	ldr	r3, [r4, #8]
 800ce32:	2000      	movs	r0, #0
 800ce34:	1b9b      	subs	r3, r3, r6
 800ce36:	60a3      	str	r3, [r4, #8]
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	4433      	add	r3, r6
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce42:	462a      	mov	r2, r5
 800ce44:	f000 ff5d 	bl	800dd02 <_realloc_r>
 800ce48:	4606      	mov	r6, r0
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d1e0      	bne.n	800ce10 <__ssputs_r+0x5c>
 800ce4e:	6921      	ldr	r1, [r4, #16]
 800ce50:	4650      	mov	r0, sl
 800ce52:	f7fe fb6d 	bl	800b530 <_free_r>
 800ce56:	230c      	movs	r3, #12
 800ce58:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5c:	f8ca 3000 	str.w	r3, [sl]
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	e7e9      	b.n	800ce3e <__ssputs_r+0x8a>
	...

0800ce6c <_svfiprintf_r>:
 800ce6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	4698      	mov	r8, r3
 800ce72:	898b      	ldrh	r3, [r1, #12]
 800ce74:	b09d      	sub	sp, #116	@ 0x74
 800ce76:	4607      	mov	r7, r0
 800ce78:	061b      	lsls	r3, r3, #24
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	4614      	mov	r4, r2
 800ce7e:	d510      	bpl.n	800cea2 <_svfiprintf_r+0x36>
 800ce80:	690b      	ldr	r3, [r1, #16]
 800ce82:	b973      	cbnz	r3, 800cea2 <_svfiprintf_r+0x36>
 800ce84:	2140      	movs	r1, #64	@ 0x40
 800ce86:	f7fe fbc7 	bl	800b618 <_malloc_r>
 800ce8a:	6028      	str	r0, [r5, #0]
 800ce8c:	6128      	str	r0, [r5, #16]
 800ce8e:	b930      	cbnz	r0, 800ce9e <_svfiprintf_r+0x32>
 800ce90:	230c      	movs	r3, #12
 800ce92:	603b      	str	r3, [r7, #0]
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	b01d      	add	sp, #116	@ 0x74
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9e:	2340      	movs	r3, #64	@ 0x40
 800cea0:	616b      	str	r3, [r5, #20]
 800cea2:	2300      	movs	r3, #0
 800cea4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea8:	f04f 0901 	mov.w	r9, #1
 800ceac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d050 <_svfiprintf_r+0x1e4>
 800ceb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceb2:	2320      	movs	r3, #32
 800ceb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ceb8:	2330      	movs	r3, #48	@ 0x30
 800ceba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cebe:	4623      	mov	r3, r4
 800cec0:	469a      	mov	sl, r3
 800cec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec6:	b10a      	cbz	r2, 800cecc <_svfiprintf_r+0x60>
 800cec8:	2a25      	cmp	r2, #37	@ 0x25
 800ceca:	d1f9      	bne.n	800cec0 <_svfiprintf_r+0x54>
 800cecc:	ebba 0b04 	subs.w	fp, sl, r4
 800ced0:	d00b      	beq.n	800ceea <_svfiprintf_r+0x7e>
 800ced2:	465b      	mov	r3, fp
 800ced4:	4622      	mov	r2, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7ff ff6b 	bl	800cdb4 <__ssputs_r>
 800cede:	3001      	adds	r0, #1
 800cee0:	f000 80a7 	beq.w	800d032 <_svfiprintf_r+0x1c6>
 800cee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee6:	445a      	add	r2, fp
 800cee8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ceea:	f89a 3000 	ldrb.w	r3, [sl]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f000 809f 	beq.w	800d032 <_svfiprintf_r+0x1c6>
 800cef4:	2300      	movs	r3, #0
 800cef6:	f04f 32ff 	mov.w	r2, #4294967295
 800cefa:	f10a 0a01 	add.w	sl, sl, #1
 800cefe:	9304      	str	r3, [sp, #16]
 800cf00:	9307      	str	r3, [sp, #28]
 800cf02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf06:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf0c:	4654      	mov	r4, sl
 800cf0e:	2205      	movs	r2, #5
 800cf10:	484f      	ldr	r0, [pc, #316]	@ (800d050 <_svfiprintf_r+0x1e4>)
 800cf12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf16:	f7fd fca2 	bl	800a85e <memchr>
 800cf1a:	9a04      	ldr	r2, [sp, #16]
 800cf1c:	b9d8      	cbnz	r0, 800cf56 <_svfiprintf_r+0xea>
 800cf1e:	06d0      	lsls	r0, r2, #27
 800cf20:	bf44      	itt	mi
 800cf22:	2320      	movmi	r3, #32
 800cf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf28:	0711      	lsls	r1, r2, #28
 800cf2a:	bf44      	itt	mi
 800cf2c:	232b      	movmi	r3, #43	@ 0x2b
 800cf2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf32:	f89a 3000 	ldrb.w	r3, [sl]
 800cf36:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf38:	d015      	beq.n	800cf66 <_svfiprintf_r+0xfa>
 800cf3a:	9a07      	ldr	r2, [sp, #28]
 800cf3c:	4654      	mov	r4, sl
 800cf3e:	2000      	movs	r0, #0
 800cf40:	f04f 0c0a 	mov.w	ip, #10
 800cf44:	4621      	mov	r1, r4
 800cf46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf4a:	3b30      	subs	r3, #48	@ 0x30
 800cf4c:	2b09      	cmp	r3, #9
 800cf4e:	d94b      	bls.n	800cfe8 <_svfiprintf_r+0x17c>
 800cf50:	b1b0      	cbz	r0, 800cf80 <_svfiprintf_r+0x114>
 800cf52:	9207      	str	r2, [sp, #28]
 800cf54:	e014      	b.n	800cf80 <_svfiprintf_r+0x114>
 800cf56:	eba0 0308 	sub.w	r3, r0, r8
 800cf5a:	46a2      	mov	sl, r4
 800cf5c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf60:	4313      	orrs	r3, r2
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	e7d2      	b.n	800cf0c <_svfiprintf_r+0xa0>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	1d19      	adds	r1, r3, #4
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	9103      	str	r1, [sp, #12]
 800cf70:	bfbb      	ittet	lt
 800cf72:	425b      	neglt	r3, r3
 800cf74:	f042 0202 	orrlt.w	r2, r2, #2
 800cf78:	9307      	strge	r3, [sp, #28]
 800cf7a:	9307      	strlt	r3, [sp, #28]
 800cf7c:	bfb8      	it	lt
 800cf7e:	9204      	strlt	r2, [sp, #16]
 800cf80:	7823      	ldrb	r3, [r4, #0]
 800cf82:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf84:	d10a      	bne.n	800cf9c <_svfiprintf_r+0x130>
 800cf86:	7863      	ldrb	r3, [r4, #1]
 800cf88:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf8a:	d132      	bne.n	800cff2 <_svfiprintf_r+0x186>
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	3402      	adds	r4, #2
 800cf90:	1d1a      	adds	r2, r3, #4
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf98:	9203      	str	r2, [sp, #12]
 800cf9a:	9305      	str	r3, [sp, #20]
 800cf9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d060 <_svfiprintf_r+0x1f4>
 800cfa0:	2203      	movs	r2, #3
 800cfa2:	7821      	ldrb	r1, [r4, #0]
 800cfa4:	4650      	mov	r0, sl
 800cfa6:	f7fd fc5a 	bl	800a85e <memchr>
 800cfaa:	b138      	cbz	r0, 800cfbc <_svfiprintf_r+0x150>
 800cfac:	eba0 000a 	sub.w	r0, r0, sl
 800cfb0:	2240      	movs	r2, #64	@ 0x40
 800cfb2:	9b04      	ldr	r3, [sp, #16]
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	4082      	lsls	r2, r0
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfc0:	2206      	movs	r2, #6
 800cfc2:	4824      	ldr	r0, [pc, #144]	@ (800d054 <_svfiprintf_r+0x1e8>)
 800cfc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfc8:	f7fd fc49 	bl	800a85e <memchr>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	d036      	beq.n	800d03e <_svfiprintf_r+0x1d2>
 800cfd0:	4b21      	ldr	r3, [pc, #132]	@ (800d058 <_svfiprintf_r+0x1ec>)
 800cfd2:	bb1b      	cbnz	r3, 800d01c <_svfiprintf_r+0x1b0>
 800cfd4:	9b03      	ldr	r3, [sp, #12]
 800cfd6:	3307      	adds	r3, #7
 800cfd8:	f023 0307 	bic.w	r3, r3, #7
 800cfdc:	3308      	adds	r3, #8
 800cfde:	9303      	str	r3, [sp, #12]
 800cfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe2:	4433      	add	r3, r6
 800cfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfe6:	e76a      	b.n	800cebe <_svfiprintf_r+0x52>
 800cfe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfec:	460c      	mov	r4, r1
 800cfee:	2001      	movs	r0, #1
 800cff0:	e7a8      	b.n	800cf44 <_svfiprintf_r+0xd8>
 800cff2:	2300      	movs	r3, #0
 800cff4:	3401      	adds	r4, #1
 800cff6:	f04f 0c0a 	mov.w	ip, #10
 800cffa:	4619      	mov	r1, r3
 800cffc:	9305      	str	r3, [sp, #20]
 800cffe:	4620      	mov	r0, r4
 800d000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d004:	3a30      	subs	r2, #48	@ 0x30
 800d006:	2a09      	cmp	r2, #9
 800d008:	d903      	bls.n	800d012 <_svfiprintf_r+0x1a6>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0c6      	beq.n	800cf9c <_svfiprintf_r+0x130>
 800d00e:	9105      	str	r1, [sp, #20]
 800d010:	e7c4      	b.n	800cf9c <_svfiprintf_r+0x130>
 800d012:	fb0c 2101 	mla	r1, ip, r1, r2
 800d016:	4604      	mov	r4, r0
 800d018:	2301      	movs	r3, #1
 800d01a:	e7f0      	b.n	800cffe <_svfiprintf_r+0x192>
 800d01c:	ab03      	add	r3, sp, #12
 800d01e:	462a      	mov	r2, r5
 800d020:	a904      	add	r1, sp, #16
 800d022:	4638      	mov	r0, r7
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	4b0d      	ldr	r3, [pc, #52]	@ (800d05c <_svfiprintf_r+0x1f0>)
 800d028:	f7fc fc94 	bl	8009954 <_printf_float>
 800d02c:	1c42      	adds	r2, r0, #1
 800d02e:	4606      	mov	r6, r0
 800d030:	d1d6      	bne.n	800cfe0 <_svfiprintf_r+0x174>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	065b      	lsls	r3, r3, #25
 800d036:	f53f af2d 	bmi.w	800ce94 <_svfiprintf_r+0x28>
 800d03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d03c:	e72c      	b.n	800ce98 <_svfiprintf_r+0x2c>
 800d03e:	ab03      	add	r3, sp, #12
 800d040:	462a      	mov	r2, r5
 800d042:	a904      	add	r1, sp, #16
 800d044:	4638      	mov	r0, r7
 800d046:	9300      	str	r3, [sp, #0]
 800d048:	4b04      	ldr	r3, [pc, #16]	@ (800d05c <_svfiprintf_r+0x1f0>)
 800d04a:	f7fc ff1f 	bl	8009e8c <_printf_i>
 800d04e:	e7ed      	b.n	800d02c <_svfiprintf_r+0x1c0>
 800d050:	0800e359 	.word	0x0800e359
 800d054:	0800e363 	.word	0x0800e363
 800d058:	08009955 	.word	0x08009955
 800d05c:	0800cdb5 	.word	0x0800cdb5
 800d060:	0800e35f 	.word	0x0800e35f

0800d064 <__sfputc_r>:
 800d064:	6893      	ldr	r3, [r2, #8]
 800d066:	3b01      	subs	r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	6093      	str	r3, [r2, #8]
 800d06c:	b410      	push	{r4}
 800d06e:	da08      	bge.n	800d082 <__sfputc_r+0x1e>
 800d070:	6994      	ldr	r4, [r2, #24]
 800d072:	42a3      	cmp	r3, r4
 800d074:	db01      	blt.n	800d07a <__sfputc_r+0x16>
 800d076:	290a      	cmp	r1, #10
 800d078:	d103      	bne.n	800d082 <__sfputc_r+0x1e>
 800d07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d07e:	f000 b9df 	b.w	800d440 <__swbuf_r>
 800d082:	6813      	ldr	r3, [r2, #0]
 800d084:	1c58      	adds	r0, r3, #1
 800d086:	6010      	str	r0, [r2, #0]
 800d088:	4608      	mov	r0, r1
 800d08a:	7019      	strb	r1, [r3, #0]
 800d08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <__sfputs_r>:
 800d092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	4614      	mov	r4, r2
 800d09a:	18d5      	adds	r5, r2, r3
 800d09c:	42ac      	cmp	r4, r5
 800d09e:	d101      	bne.n	800d0a4 <__sfputs_r+0x12>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	e007      	b.n	800d0b4 <__sfputs_r+0x22>
 800d0a4:	463a      	mov	r2, r7
 800d0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f7ff ffda 	bl	800d064 <__sfputc_r>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d1f3      	bne.n	800d09c <__sfputs_r+0xa>
 800d0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0b8 <_vfiprintf_r>:
 800d0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	460d      	mov	r5, r1
 800d0be:	b09d      	sub	sp, #116	@ 0x74
 800d0c0:	4614      	mov	r4, r2
 800d0c2:	4698      	mov	r8, r3
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	b118      	cbz	r0, 800d0d0 <_vfiprintf_r+0x18>
 800d0c8:	6a03      	ldr	r3, [r0, #32]
 800d0ca:	b90b      	cbnz	r3, 800d0d0 <_vfiprintf_r+0x18>
 800d0cc:	f7fd fa9c 	bl	800a608 <__sinit>
 800d0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0d2:	07d9      	lsls	r1, r3, #31
 800d0d4:	d405      	bmi.n	800d0e2 <_vfiprintf_r+0x2a>
 800d0d6:	89ab      	ldrh	r3, [r5, #12]
 800d0d8:	059a      	lsls	r2, r3, #22
 800d0da:	d402      	bmi.n	800d0e2 <_vfiprintf_r+0x2a>
 800d0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0de:	f7fd fbbc 	bl	800a85a <__retarget_lock_acquire_recursive>
 800d0e2:	89ab      	ldrh	r3, [r5, #12]
 800d0e4:	071b      	lsls	r3, r3, #28
 800d0e6:	d501      	bpl.n	800d0ec <_vfiprintf_r+0x34>
 800d0e8:	692b      	ldr	r3, [r5, #16]
 800d0ea:	b99b      	cbnz	r3, 800d114 <_vfiprintf_r+0x5c>
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f000 f9e4 	bl	800d4bc <__swsetup_r>
 800d0f4:	b170      	cbz	r0, 800d114 <_vfiprintf_r+0x5c>
 800d0f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0f8:	07dc      	lsls	r4, r3, #31
 800d0fa:	d504      	bpl.n	800d106 <_vfiprintf_r+0x4e>
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	b01d      	add	sp, #116	@ 0x74
 800d102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d106:	89ab      	ldrh	r3, [r5, #12]
 800d108:	0598      	lsls	r0, r3, #22
 800d10a:	d4f7      	bmi.n	800d0fc <_vfiprintf_r+0x44>
 800d10c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d10e:	f7fd fba5 	bl	800a85c <__retarget_lock_release_recursive>
 800d112:	e7f3      	b.n	800d0fc <_vfiprintf_r+0x44>
 800d114:	2300      	movs	r3, #0
 800d116:	f8cd 800c 	str.w	r8, [sp, #12]
 800d11a:	f04f 0901 	mov.w	r9, #1
 800d11e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d2d4 <_vfiprintf_r+0x21c>
 800d122:	9309      	str	r3, [sp, #36]	@ 0x24
 800d124:	2320      	movs	r3, #32
 800d126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d12a:	2330      	movs	r3, #48	@ 0x30
 800d12c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d130:	4623      	mov	r3, r4
 800d132:	469a      	mov	sl, r3
 800d134:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d138:	b10a      	cbz	r2, 800d13e <_vfiprintf_r+0x86>
 800d13a:	2a25      	cmp	r2, #37	@ 0x25
 800d13c:	d1f9      	bne.n	800d132 <_vfiprintf_r+0x7a>
 800d13e:	ebba 0b04 	subs.w	fp, sl, r4
 800d142:	d00b      	beq.n	800d15c <_vfiprintf_r+0xa4>
 800d144:	465b      	mov	r3, fp
 800d146:	4622      	mov	r2, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	4630      	mov	r0, r6
 800d14c:	f7ff ffa1 	bl	800d092 <__sfputs_r>
 800d150:	3001      	adds	r0, #1
 800d152:	f000 80a7 	beq.w	800d2a4 <_vfiprintf_r+0x1ec>
 800d156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d158:	445a      	add	r2, fp
 800d15a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d15c:	f89a 3000 	ldrb.w	r3, [sl]
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 809f 	beq.w	800d2a4 <_vfiprintf_r+0x1ec>
 800d166:	2300      	movs	r3, #0
 800d168:	f04f 32ff 	mov.w	r2, #4294967295
 800d16c:	f10a 0a01 	add.w	sl, sl, #1
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d178:	931a      	str	r3, [sp, #104]	@ 0x68
 800d17a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d17e:	4654      	mov	r4, sl
 800d180:	2205      	movs	r2, #5
 800d182:	4854      	ldr	r0, [pc, #336]	@ (800d2d4 <_vfiprintf_r+0x21c>)
 800d184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d188:	f7fd fb69 	bl	800a85e <memchr>
 800d18c:	9a04      	ldr	r2, [sp, #16]
 800d18e:	b9d8      	cbnz	r0, 800d1c8 <_vfiprintf_r+0x110>
 800d190:	06d1      	lsls	r1, r2, #27
 800d192:	bf44      	itt	mi
 800d194:	2320      	movmi	r3, #32
 800d196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d19a:	0713      	lsls	r3, r2, #28
 800d19c:	bf44      	itt	mi
 800d19e:	232b      	movmi	r3, #43	@ 0x2b
 800d1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1aa:	d015      	beq.n	800d1d8 <_vfiprintf_r+0x120>
 800d1ac:	9a07      	ldr	r2, [sp, #28]
 800d1ae:	4654      	mov	r4, sl
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	f04f 0c0a 	mov.w	ip, #10
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1bc:	3b30      	subs	r3, #48	@ 0x30
 800d1be:	2b09      	cmp	r3, #9
 800d1c0:	d94b      	bls.n	800d25a <_vfiprintf_r+0x1a2>
 800d1c2:	b1b0      	cbz	r0, 800d1f2 <_vfiprintf_r+0x13a>
 800d1c4:	9207      	str	r2, [sp, #28]
 800d1c6:	e014      	b.n	800d1f2 <_vfiprintf_r+0x13a>
 800d1c8:	eba0 0308 	sub.w	r3, r0, r8
 800d1cc:	46a2      	mov	sl, r4
 800d1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	9304      	str	r3, [sp, #16]
 800d1d6:	e7d2      	b.n	800d17e <_vfiprintf_r+0xc6>
 800d1d8:	9b03      	ldr	r3, [sp, #12]
 800d1da:	1d19      	adds	r1, r3, #4
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	9103      	str	r1, [sp, #12]
 800d1e2:	bfbb      	ittet	lt
 800d1e4:	425b      	neglt	r3, r3
 800d1e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ea:	9307      	strge	r3, [sp, #28]
 800d1ec:	9307      	strlt	r3, [sp, #28]
 800d1ee:	bfb8      	it	lt
 800d1f0:	9204      	strlt	r2, [sp, #16]
 800d1f2:	7823      	ldrb	r3, [r4, #0]
 800d1f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1f6:	d10a      	bne.n	800d20e <_vfiprintf_r+0x156>
 800d1f8:	7863      	ldrb	r3, [r4, #1]
 800d1fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1fc:	d132      	bne.n	800d264 <_vfiprintf_r+0x1ac>
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	3402      	adds	r4, #2
 800d202:	1d1a      	adds	r2, r3, #4
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d20a:	9203      	str	r2, [sp, #12]
 800d20c:	9305      	str	r3, [sp, #20]
 800d20e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2e4 <_vfiprintf_r+0x22c>
 800d212:	2203      	movs	r2, #3
 800d214:	7821      	ldrb	r1, [r4, #0]
 800d216:	4650      	mov	r0, sl
 800d218:	f7fd fb21 	bl	800a85e <memchr>
 800d21c:	b138      	cbz	r0, 800d22e <_vfiprintf_r+0x176>
 800d21e:	eba0 000a 	sub.w	r0, r0, sl
 800d222:	2240      	movs	r2, #64	@ 0x40
 800d224:	9b04      	ldr	r3, [sp, #16]
 800d226:	3401      	adds	r4, #1
 800d228:	4082      	lsls	r2, r0
 800d22a:	4313      	orrs	r3, r2
 800d22c:	9304      	str	r3, [sp, #16]
 800d22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d232:	2206      	movs	r2, #6
 800d234:	4828      	ldr	r0, [pc, #160]	@ (800d2d8 <_vfiprintf_r+0x220>)
 800d236:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d23a:	f7fd fb10 	bl	800a85e <memchr>
 800d23e:	2800      	cmp	r0, #0
 800d240:	d03f      	beq.n	800d2c2 <_vfiprintf_r+0x20a>
 800d242:	4b26      	ldr	r3, [pc, #152]	@ (800d2dc <_vfiprintf_r+0x224>)
 800d244:	bb1b      	cbnz	r3, 800d28e <_vfiprintf_r+0x1d6>
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	3307      	adds	r3, #7
 800d24a:	f023 0307 	bic.w	r3, r3, #7
 800d24e:	3308      	adds	r3, #8
 800d250:	9303      	str	r3, [sp, #12]
 800d252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d254:	443b      	add	r3, r7
 800d256:	9309      	str	r3, [sp, #36]	@ 0x24
 800d258:	e76a      	b.n	800d130 <_vfiprintf_r+0x78>
 800d25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d25e:	460c      	mov	r4, r1
 800d260:	2001      	movs	r0, #1
 800d262:	e7a8      	b.n	800d1b6 <_vfiprintf_r+0xfe>
 800d264:	2300      	movs	r3, #0
 800d266:	3401      	adds	r4, #1
 800d268:	f04f 0c0a 	mov.w	ip, #10
 800d26c:	4619      	mov	r1, r3
 800d26e:	9305      	str	r3, [sp, #20]
 800d270:	4620      	mov	r0, r4
 800d272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d276:	3a30      	subs	r2, #48	@ 0x30
 800d278:	2a09      	cmp	r2, #9
 800d27a:	d903      	bls.n	800d284 <_vfiprintf_r+0x1cc>
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d0c6      	beq.n	800d20e <_vfiprintf_r+0x156>
 800d280:	9105      	str	r1, [sp, #20]
 800d282:	e7c4      	b.n	800d20e <_vfiprintf_r+0x156>
 800d284:	fb0c 2101 	mla	r1, ip, r1, r2
 800d288:	4604      	mov	r4, r0
 800d28a:	2301      	movs	r3, #1
 800d28c:	e7f0      	b.n	800d270 <_vfiprintf_r+0x1b8>
 800d28e:	ab03      	add	r3, sp, #12
 800d290:	462a      	mov	r2, r5
 800d292:	a904      	add	r1, sp, #16
 800d294:	4630      	mov	r0, r6
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	4b11      	ldr	r3, [pc, #68]	@ (800d2e0 <_vfiprintf_r+0x228>)
 800d29a:	f7fc fb5b 	bl	8009954 <_printf_float>
 800d29e:	4607      	mov	r7, r0
 800d2a0:	1c78      	adds	r0, r7, #1
 800d2a2:	d1d6      	bne.n	800d252 <_vfiprintf_r+0x19a>
 800d2a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2a6:	07d9      	lsls	r1, r3, #31
 800d2a8:	d405      	bmi.n	800d2b6 <_vfiprintf_r+0x1fe>
 800d2aa:	89ab      	ldrh	r3, [r5, #12]
 800d2ac:	059a      	lsls	r2, r3, #22
 800d2ae:	d402      	bmi.n	800d2b6 <_vfiprintf_r+0x1fe>
 800d2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2b2:	f7fd fad3 	bl	800a85c <__retarget_lock_release_recursive>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	065b      	lsls	r3, r3, #25
 800d2ba:	f53f af1f 	bmi.w	800d0fc <_vfiprintf_r+0x44>
 800d2be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2c0:	e71e      	b.n	800d100 <_vfiprintf_r+0x48>
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	462a      	mov	r2, r5
 800d2c6:	a904      	add	r1, sp, #16
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <_vfiprintf_r+0x228>)
 800d2ce:	f7fc fddd 	bl	8009e8c <_printf_i>
 800d2d2:	e7e4      	b.n	800d29e <_vfiprintf_r+0x1e6>
 800d2d4:	0800e359 	.word	0x0800e359
 800d2d8:	0800e363 	.word	0x0800e363
 800d2dc:	08009955 	.word	0x08009955
 800d2e0:	0800d093 	.word	0x0800d093
 800d2e4:	0800e35f 	.word	0x0800e35f

0800d2e8 <__sflush_r>:
 800d2e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f0:	0716      	lsls	r6, r2, #28
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	d454      	bmi.n	800d3a2 <__sflush_r+0xba>
 800d2f8:	684b      	ldr	r3, [r1, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	dc02      	bgt.n	800d304 <__sflush_r+0x1c>
 800d2fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d300:	2b00      	cmp	r3, #0
 800d302:	dd48      	ble.n	800d396 <__sflush_r+0xae>
 800d304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d306:	2e00      	cmp	r6, #0
 800d308:	d045      	beq.n	800d396 <__sflush_r+0xae>
 800d30a:	2300      	movs	r3, #0
 800d30c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d310:	682f      	ldr	r7, [r5, #0]
 800d312:	6a21      	ldr	r1, [r4, #32]
 800d314:	602b      	str	r3, [r5, #0]
 800d316:	d030      	beq.n	800d37a <__sflush_r+0x92>
 800d318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d31a:	89a3      	ldrh	r3, [r4, #12]
 800d31c:	0759      	lsls	r1, r3, #29
 800d31e:	d505      	bpl.n	800d32c <__sflush_r+0x44>
 800d320:	6863      	ldr	r3, [r4, #4]
 800d322:	1ad2      	subs	r2, r2, r3
 800d324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d326:	b10b      	cbz	r3, 800d32c <__sflush_r+0x44>
 800d328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d32a:	1ad2      	subs	r2, r2, r3
 800d32c:	2300      	movs	r3, #0
 800d32e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d330:	6a21      	ldr	r1, [r4, #32]
 800d332:	4628      	mov	r0, r5
 800d334:	47b0      	blx	r6
 800d336:	1c43      	adds	r3, r0, #1
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	d106      	bne.n	800d34a <__sflush_r+0x62>
 800d33c:	6829      	ldr	r1, [r5, #0]
 800d33e:	291d      	cmp	r1, #29
 800d340:	d82b      	bhi.n	800d39a <__sflush_r+0xb2>
 800d342:	4a2a      	ldr	r2, [pc, #168]	@ (800d3ec <__sflush_r+0x104>)
 800d344:	410a      	asrs	r2, r1
 800d346:	07d6      	lsls	r6, r2, #31
 800d348:	d427      	bmi.n	800d39a <__sflush_r+0xb2>
 800d34a:	2200      	movs	r2, #0
 800d34c:	04d9      	lsls	r1, r3, #19
 800d34e:	6062      	str	r2, [r4, #4]
 800d350:	6922      	ldr	r2, [r4, #16]
 800d352:	6022      	str	r2, [r4, #0]
 800d354:	d504      	bpl.n	800d360 <__sflush_r+0x78>
 800d356:	1c42      	adds	r2, r0, #1
 800d358:	d101      	bne.n	800d35e <__sflush_r+0x76>
 800d35a:	682b      	ldr	r3, [r5, #0]
 800d35c:	b903      	cbnz	r3, 800d360 <__sflush_r+0x78>
 800d35e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d362:	602f      	str	r7, [r5, #0]
 800d364:	b1b9      	cbz	r1, 800d396 <__sflush_r+0xae>
 800d366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d36a:	4299      	cmp	r1, r3
 800d36c:	d002      	beq.n	800d374 <__sflush_r+0x8c>
 800d36e:	4628      	mov	r0, r5
 800d370:	f7fe f8de 	bl	800b530 <_free_r>
 800d374:	2300      	movs	r3, #0
 800d376:	6363      	str	r3, [r4, #52]	@ 0x34
 800d378:	e00d      	b.n	800d396 <__sflush_r+0xae>
 800d37a:	2301      	movs	r3, #1
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b0      	blx	r6
 800d380:	4602      	mov	r2, r0
 800d382:	1c50      	adds	r0, r2, #1
 800d384:	d1c9      	bne.n	800d31a <__sflush_r+0x32>
 800d386:	682b      	ldr	r3, [r5, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d0c6      	beq.n	800d31a <__sflush_r+0x32>
 800d38c:	2b1d      	cmp	r3, #29
 800d38e:	d001      	beq.n	800d394 <__sflush_r+0xac>
 800d390:	2b16      	cmp	r3, #22
 800d392:	d11d      	bne.n	800d3d0 <__sflush_r+0xe8>
 800d394:	602f      	str	r7, [r5, #0]
 800d396:	2000      	movs	r0, #0
 800d398:	e021      	b.n	800d3de <__sflush_r+0xf6>
 800d39a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d39e:	b21b      	sxth	r3, r3
 800d3a0:	e01a      	b.n	800d3d8 <__sflush_r+0xf0>
 800d3a2:	690f      	ldr	r7, [r1, #16]
 800d3a4:	2f00      	cmp	r7, #0
 800d3a6:	d0f6      	beq.n	800d396 <__sflush_r+0xae>
 800d3a8:	0793      	lsls	r3, r2, #30
 800d3aa:	680e      	ldr	r6, [r1, #0]
 800d3ac:	600f      	str	r7, [r1, #0]
 800d3ae:	bf0c      	ite	eq
 800d3b0:	694b      	ldreq	r3, [r1, #20]
 800d3b2:	2300      	movne	r3, #0
 800d3b4:	eba6 0807 	sub.w	r8, r6, r7
 800d3b8:	608b      	str	r3, [r1, #8]
 800d3ba:	f1b8 0f00 	cmp.w	r8, #0
 800d3be:	ddea      	ble.n	800d396 <__sflush_r+0xae>
 800d3c0:	4643      	mov	r3, r8
 800d3c2:	463a      	mov	r2, r7
 800d3c4:	6a21      	ldr	r1, [r4, #32]
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3ca:	47b0      	blx	r6
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	dc08      	bgt.n	800d3e2 <__sflush_r+0xfa>
 800d3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3dc:	81a3      	strh	r3, [r4, #12]
 800d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e2:	4407      	add	r7, r0
 800d3e4:	eba8 0800 	sub.w	r8, r8, r0
 800d3e8:	e7e7      	b.n	800d3ba <__sflush_r+0xd2>
 800d3ea:	bf00      	nop
 800d3ec:	dfbffffe 	.word	0xdfbffffe

0800d3f0 <_fflush_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	690b      	ldr	r3, [r1, #16]
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	b913      	cbnz	r3, 800d400 <_fflush_r+0x10>
 800d3fa:	2500      	movs	r5, #0
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	b118      	cbz	r0, 800d40a <_fflush_r+0x1a>
 800d402:	6a03      	ldr	r3, [r0, #32]
 800d404:	b90b      	cbnz	r3, 800d40a <_fflush_r+0x1a>
 800d406:	f7fd f8ff 	bl	800a608 <__sinit>
 800d40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d0f3      	beq.n	800d3fa <_fflush_r+0xa>
 800d412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d414:	07d0      	lsls	r0, r2, #31
 800d416:	d404      	bmi.n	800d422 <_fflush_r+0x32>
 800d418:	0599      	lsls	r1, r3, #22
 800d41a:	d402      	bmi.n	800d422 <_fflush_r+0x32>
 800d41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d41e:	f7fd fa1c 	bl	800a85a <__retarget_lock_acquire_recursive>
 800d422:	4628      	mov	r0, r5
 800d424:	4621      	mov	r1, r4
 800d426:	f7ff ff5f 	bl	800d2e8 <__sflush_r>
 800d42a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d42c:	4605      	mov	r5, r0
 800d42e:	07da      	lsls	r2, r3, #31
 800d430:	d4e4      	bmi.n	800d3fc <_fflush_r+0xc>
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	059b      	lsls	r3, r3, #22
 800d436:	d4e1      	bmi.n	800d3fc <_fflush_r+0xc>
 800d438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d43a:	f7fd fa0f 	bl	800a85c <__retarget_lock_release_recursive>
 800d43e:	e7dd      	b.n	800d3fc <_fflush_r+0xc>

0800d440 <__swbuf_r>:
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	460e      	mov	r6, r1
 800d444:	4614      	mov	r4, r2
 800d446:	4605      	mov	r5, r0
 800d448:	b118      	cbz	r0, 800d452 <__swbuf_r+0x12>
 800d44a:	6a03      	ldr	r3, [r0, #32]
 800d44c:	b90b      	cbnz	r3, 800d452 <__swbuf_r+0x12>
 800d44e:	f7fd f8db 	bl	800a608 <__sinit>
 800d452:	69a3      	ldr	r3, [r4, #24]
 800d454:	60a3      	str	r3, [r4, #8]
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	071a      	lsls	r2, r3, #28
 800d45a:	d501      	bpl.n	800d460 <__swbuf_r+0x20>
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	b943      	cbnz	r3, 800d472 <__swbuf_r+0x32>
 800d460:	4621      	mov	r1, r4
 800d462:	4628      	mov	r0, r5
 800d464:	f000 f82a 	bl	800d4bc <__swsetup_r>
 800d468:	b118      	cbz	r0, 800d472 <__swbuf_r+0x32>
 800d46a:	f04f 37ff 	mov.w	r7, #4294967295
 800d46e:	4638      	mov	r0, r7
 800d470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	b2f6      	uxtb	r6, r6
 800d476:	6922      	ldr	r2, [r4, #16]
 800d478:	4637      	mov	r7, r6
 800d47a:	1a98      	subs	r0, r3, r2
 800d47c:	6963      	ldr	r3, [r4, #20]
 800d47e:	4283      	cmp	r3, r0
 800d480:	dc05      	bgt.n	800d48e <__swbuf_r+0x4e>
 800d482:	4621      	mov	r1, r4
 800d484:	4628      	mov	r0, r5
 800d486:	f7ff ffb3 	bl	800d3f0 <_fflush_r>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d1ed      	bne.n	800d46a <__swbuf_r+0x2a>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	3b01      	subs	r3, #1
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	6022      	str	r2, [r4, #0]
 800d49a:	701e      	strb	r6, [r3, #0]
 800d49c:	1c43      	adds	r3, r0, #1
 800d49e:	6962      	ldr	r2, [r4, #20]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d004      	beq.n	800d4ae <__swbuf_r+0x6e>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	07db      	lsls	r3, r3, #31
 800d4a8:	d5e1      	bpl.n	800d46e <__swbuf_r+0x2e>
 800d4aa:	2e0a      	cmp	r6, #10
 800d4ac:	d1df      	bne.n	800d46e <__swbuf_r+0x2e>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f7ff ff9d 	bl	800d3f0 <_fflush_r>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d0d9      	beq.n	800d46e <__swbuf_r+0x2e>
 800d4ba:	e7d6      	b.n	800d46a <__swbuf_r+0x2a>

0800d4bc <__swsetup_r>:
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	4b29      	ldr	r3, [pc, #164]	@ (800d564 <__swsetup_r+0xa8>)
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	b118      	cbz	r0, 800d4d0 <__swsetup_r+0x14>
 800d4c8:	6a03      	ldr	r3, [r0, #32]
 800d4ca:	b90b      	cbnz	r3, 800d4d0 <__swsetup_r+0x14>
 800d4cc:	f7fd f89c 	bl	800a608 <__sinit>
 800d4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4d4:	0719      	lsls	r1, r3, #28
 800d4d6:	d422      	bmi.n	800d51e <__swsetup_r+0x62>
 800d4d8:	06da      	lsls	r2, r3, #27
 800d4da:	d407      	bmi.n	800d4ec <__swsetup_r+0x30>
 800d4dc:	2209      	movs	r2, #9
 800d4de:	602a      	str	r2, [r5, #0]
 800d4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	81a3      	strh	r3, [r4, #12]
 800d4ea:	e033      	b.n	800d554 <__swsetup_r+0x98>
 800d4ec:	0758      	lsls	r0, r3, #29
 800d4ee:	d512      	bpl.n	800d516 <__swsetup_r+0x5a>
 800d4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4f2:	b141      	cbz	r1, 800d506 <__swsetup_r+0x4a>
 800d4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4f8:	4299      	cmp	r1, r3
 800d4fa:	d002      	beq.n	800d502 <__swsetup_r+0x46>
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	f7fe f817 	bl	800b530 <_free_r>
 800d502:	2300      	movs	r3, #0
 800d504:	6363      	str	r3, [r4, #52]	@ 0x34
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d50c:	81a3      	strh	r3, [r4, #12]
 800d50e:	2300      	movs	r3, #0
 800d510:	6063      	str	r3, [r4, #4]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f043 0308 	orr.w	r3, r3, #8
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	b94b      	cbnz	r3, 800d536 <__swsetup_r+0x7a>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d52c:	d003      	beq.n	800d536 <__swsetup_r+0x7a>
 800d52e:	4621      	mov	r1, r4
 800d530:	4628      	mov	r0, r5
 800d532:	f000 fc58 	bl	800dde6 <__smakebuf_r>
 800d536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d53a:	f013 0201 	ands.w	r2, r3, #1
 800d53e:	d00a      	beq.n	800d556 <__swsetup_r+0x9a>
 800d540:	2200      	movs	r2, #0
 800d542:	60a2      	str	r2, [r4, #8]
 800d544:	6962      	ldr	r2, [r4, #20]
 800d546:	4252      	negs	r2, r2
 800d548:	61a2      	str	r2, [r4, #24]
 800d54a:	6922      	ldr	r2, [r4, #16]
 800d54c:	b942      	cbnz	r2, 800d560 <__swsetup_r+0xa4>
 800d54e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d552:	d1c5      	bne.n	800d4e0 <__swsetup_r+0x24>
 800d554:	bd38      	pop	{r3, r4, r5, pc}
 800d556:	0799      	lsls	r1, r3, #30
 800d558:	bf58      	it	pl
 800d55a:	6962      	ldrpl	r2, [r4, #20]
 800d55c:	60a2      	str	r2, [r4, #8]
 800d55e:	e7f4      	b.n	800d54a <__swsetup_r+0x8e>
 800d560:	2000      	movs	r0, #0
 800d562:	e7f7      	b.n	800d554 <__swsetup_r+0x98>
 800d564:	20000018 	.word	0x20000018

0800d568 <memmove>:
 800d568:	4288      	cmp	r0, r1
 800d56a:	b510      	push	{r4, lr}
 800d56c:	eb01 0402 	add.w	r4, r1, r2
 800d570:	d902      	bls.n	800d578 <memmove+0x10>
 800d572:	4284      	cmp	r4, r0
 800d574:	4623      	mov	r3, r4
 800d576:	d807      	bhi.n	800d588 <memmove+0x20>
 800d578:	1e43      	subs	r3, r0, #1
 800d57a:	42a1      	cmp	r1, r4
 800d57c:	d008      	beq.n	800d590 <memmove+0x28>
 800d57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d582:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d586:	e7f8      	b.n	800d57a <memmove+0x12>
 800d588:	4402      	add	r2, r0
 800d58a:	4601      	mov	r1, r0
 800d58c:	428a      	cmp	r2, r1
 800d58e:	d100      	bne.n	800d592 <memmove+0x2a>
 800d590:	bd10      	pop	{r4, pc}
 800d592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d59a:	e7f7      	b.n	800d58c <memmove+0x24>

0800d59c <strncmp>:
 800d59c:	b510      	push	{r4, lr}
 800d59e:	b16a      	cbz	r2, 800d5bc <strncmp+0x20>
 800d5a0:	3901      	subs	r1, #1
 800d5a2:	1884      	adds	r4, r0, r2
 800d5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d103      	bne.n	800d5b8 <strncmp+0x1c>
 800d5b0:	42a0      	cmp	r0, r4
 800d5b2:	d001      	beq.n	800d5b8 <strncmp+0x1c>
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	d1f5      	bne.n	800d5a4 <strncmp+0x8>
 800d5b8:	1ad0      	subs	r0, r2, r3
 800d5ba:	bd10      	pop	{r4, pc}
 800d5bc:	4610      	mov	r0, r2
 800d5be:	e7fc      	b.n	800d5ba <strncmp+0x1e>

0800d5c0 <_sbrk_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4d05      	ldr	r5, [pc, #20]	@ (800d5dc <_sbrk_r+0x1c>)
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	602b      	str	r3, [r5, #0]
 800d5cc:	f7f4 fe96 	bl	80022fc <_sbrk>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_sbrk_r+0x1a>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_sbrk_r+0x1a>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20000534 	.word	0x20000534

0800d5e0 <memcpy>:
 800d5e0:	440a      	add	r2, r1
 800d5e2:	1e43      	subs	r3, r0, #1
 800d5e4:	4291      	cmp	r1, r2
 800d5e6:	d100      	bne.n	800d5ea <memcpy+0xa>
 800d5e8:	4770      	bx	lr
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5f0:	4291      	cmp	r1, r2
 800d5f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5f6:	d1f9      	bne.n	800d5ec <memcpy+0xc>
 800d5f8:	bd10      	pop	{r4, pc}
 800d5fa:	0000      	movs	r0, r0
 800d5fc:	0000      	movs	r0, r0
	...

0800d600 <nan>:
 800d600:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d608 <nan+0x8>
 800d604:	4770      	bx	lr
 800d606:	bf00      	nop
 800d608:	00000000 	.word	0x00000000
 800d60c:	7ff80000 	.word	0x7ff80000

0800d610 <__assert_func>:
 800d610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d612:	4614      	mov	r4, r2
 800d614:	461a      	mov	r2, r3
 800d616:	4b09      	ldr	r3, [pc, #36]	@ (800d63c <__assert_func+0x2c>)
 800d618:	4605      	mov	r5, r0
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68d8      	ldr	r0, [r3, #12]
 800d61e:	b954      	cbnz	r4, 800d636 <__assert_func+0x26>
 800d620:	4b07      	ldr	r3, [pc, #28]	@ (800d640 <__assert_func+0x30>)
 800d622:	461c      	mov	r4, r3
 800d624:	9100      	str	r1, [sp, #0]
 800d626:	4907      	ldr	r1, [pc, #28]	@ (800d644 <__assert_func+0x34>)
 800d628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d62c:	462b      	mov	r3, r5
 800d62e:	f000 fba3 	bl	800dd78 <fiprintf>
 800d632:	f000 fc37 	bl	800dea4 <abort>
 800d636:	4b04      	ldr	r3, [pc, #16]	@ (800d648 <__assert_func+0x38>)
 800d638:	e7f4      	b.n	800d624 <__assert_func+0x14>
 800d63a:	bf00      	nop
 800d63c:	20000018 	.word	0x20000018
 800d640:	0800e3ad 	.word	0x0800e3ad
 800d644:	0800e37f 	.word	0x0800e37f
 800d648:	0800e372 	.word	0x0800e372

0800d64c <_calloc_r>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	fba1 5402 	umull	r5, r4, r1, r2
 800d652:	b93c      	cbnz	r4, 800d664 <_calloc_r+0x18>
 800d654:	4629      	mov	r1, r5
 800d656:	f7fd ffdf 	bl	800b618 <_malloc_r>
 800d65a:	4606      	mov	r6, r0
 800d65c:	b928      	cbnz	r0, 800d66a <_calloc_r+0x1e>
 800d65e:	2600      	movs	r6, #0
 800d660:	4630      	mov	r0, r6
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	220c      	movs	r2, #12
 800d666:	6002      	str	r2, [r0, #0]
 800d668:	e7f9      	b.n	800d65e <_calloc_r+0x12>
 800d66a:	462a      	mov	r2, r5
 800d66c:	4621      	mov	r1, r4
 800d66e:	f7fd f876 	bl	800a75e <memset>
 800d672:	e7f5      	b.n	800d660 <_calloc_r+0x14>

0800d674 <rshift>:
 800d674:	6903      	ldr	r3, [r0, #16]
 800d676:	114a      	asrs	r2, r1, #5
 800d678:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d680:	f100 0414 	add.w	r4, r0, #20
 800d684:	dd45      	ble.n	800d712 <rshift+0x9e>
 800d686:	f011 011f 	ands.w	r1, r1, #31
 800d68a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d68e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d692:	d10c      	bne.n	800d6ae <rshift+0x3a>
 800d694:	f100 0710 	add.w	r7, r0, #16
 800d698:	4629      	mov	r1, r5
 800d69a:	42b1      	cmp	r1, r6
 800d69c:	d334      	bcc.n	800d708 <rshift+0x94>
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	1eea      	subs	r2, r5, #3
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4296      	cmp	r6, r2
 800d6a6:	bf38      	it	cc
 800d6a8:	2300      	movcc	r3, #0
 800d6aa:	4423      	add	r3, r4
 800d6ac:	e015      	b.n	800d6da <rshift+0x66>
 800d6ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6b2:	f1c1 0820 	rsb	r8, r1, #32
 800d6b6:	f105 0e04 	add.w	lr, r5, #4
 800d6ba:	46a1      	mov	r9, r4
 800d6bc:	40cf      	lsrs	r7, r1
 800d6be:	4576      	cmp	r6, lr
 800d6c0:	46f4      	mov	ip, lr
 800d6c2:	d815      	bhi.n	800d6f0 <rshift+0x7c>
 800d6c4:	1a9a      	subs	r2, r3, r2
 800d6c6:	3501      	adds	r5, #1
 800d6c8:	0092      	lsls	r2, r2, #2
 800d6ca:	3a04      	subs	r2, #4
 800d6cc:	42ae      	cmp	r6, r5
 800d6ce:	bf38      	it	cc
 800d6d0:	2200      	movcc	r2, #0
 800d6d2:	18a3      	adds	r3, r4, r2
 800d6d4:	50a7      	str	r7, [r4, r2]
 800d6d6:	b107      	cbz	r7, 800d6da <rshift+0x66>
 800d6d8:	3304      	adds	r3, #4
 800d6da:	1b1a      	subs	r2, r3, r4
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d6e2:	bf08      	it	eq
 800d6e4:	2300      	moveq	r3, #0
 800d6e6:	6102      	str	r2, [r0, #16]
 800d6e8:	bf08      	it	eq
 800d6ea:	6143      	streq	r3, [r0, #20]
 800d6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f0:	f8dc c000 	ldr.w	ip, [ip]
 800d6f4:	fa0c fc08 	lsl.w	ip, ip, r8
 800d6f8:	ea4c 0707 	orr.w	r7, ip, r7
 800d6fc:	f849 7b04 	str.w	r7, [r9], #4
 800d700:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d704:	40cf      	lsrs	r7, r1
 800d706:	e7da      	b.n	800d6be <rshift+0x4a>
 800d708:	f851 cb04 	ldr.w	ip, [r1], #4
 800d70c:	f847 cf04 	str.w	ip, [r7, #4]!
 800d710:	e7c3      	b.n	800d69a <rshift+0x26>
 800d712:	4623      	mov	r3, r4
 800d714:	e7e1      	b.n	800d6da <rshift+0x66>

0800d716 <__hexdig_fun>:
 800d716:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d71a:	2b09      	cmp	r3, #9
 800d71c:	d802      	bhi.n	800d724 <__hexdig_fun+0xe>
 800d71e:	3820      	subs	r0, #32
 800d720:	b2c0      	uxtb	r0, r0
 800d722:	4770      	bx	lr
 800d724:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d728:	2b05      	cmp	r3, #5
 800d72a:	d801      	bhi.n	800d730 <__hexdig_fun+0x1a>
 800d72c:	3847      	subs	r0, #71	@ 0x47
 800d72e:	e7f7      	b.n	800d720 <__hexdig_fun+0xa>
 800d730:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d734:	2b05      	cmp	r3, #5
 800d736:	d801      	bhi.n	800d73c <__hexdig_fun+0x26>
 800d738:	3827      	subs	r0, #39	@ 0x27
 800d73a:	e7f1      	b.n	800d720 <__hexdig_fun+0xa>
 800d73c:	2000      	movs	r0, #0
 800d73e:	4770      	bx	lr

0800d740 <__gethex>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	b085      	sub	sp, #20
 800d746:	468a      	mov	sl, r1
 800d748:	4690      	mov	r8, r2
 800d74a:	9302      	str	r3, [sp, #8]
 800d74c:	680b      	ldr	r3, [r1, #0]
 800d74e:	9001      	str	r0, [sp, #4]
 800d750:	1c9c      	adds	r4, r3, #2
 800d752:	46a1      	mov	r9, r4
 800d754:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d758:	2830      	cmp	r0, #48	@ 0x30
 800d75a:	d0fa      	beq.n	800d752 <__gethex+0x12>
 800d75c:	eba9 0303 	sub.w	r3, r9, r3
 800d760:	f1a3 0b02 	sub.w	fp, r3, #2
 800d764:	f7ff ffd7 	bl	800d716 <__hexdig_fun>
 800d768:	4605      	mov	r5, r0
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d166      	bne.n	800d83c <__gethex+0xfc>
 800d76e:	2201      	movs	r2, #1
 800d770:	499e      	ldr	r1, [pc, #632]	@ (800d9ec <__gethex+0x2ac>)
 800d772:	4648      	mov	r0, r9
 800d774:	f7ff ff12 	bl	800d59c <strncmp>
 800d778:	4607      	mov	r7, r0
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d165      	bne.n	800d84a <__gethex+0x10a>
 800d77e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d782:	4626      	mov	r6, r4
 800d784:	f7ff ffc7 	bl	800d716 <__hexdig_fun>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d060      	beq.n	800d84e <__gethex+0x10e>
 800d78c:	4623      	mov	r3, r4
 800d78e:	7818      	ldrb	r0, [r3, #0]
 800d790:	4699      	mov	r9, r3
 800d792:	3301      	adds	r3, #1
 800d794:	2830      	cmp	r0, #48	@ 0x30
 800d796:	d0fa      	beq.n	800d78e <__gethex+0x4e>
 800d798:	f7ff ffbd 	bl	800d716 <__hexdig_fun>
 800d79c:	fab0 f580 	clz	r5, r0
 800d7a0:	f04f 0b01 	mov.w	fp, #1
 800d7a4:	096d      	lsrs	r5, r5, #5
 800d7a6:	464a      	mov	r2, r9
 800d7a8:	4616      	mov	r6, r2
 800d7aa:	3201      	adds	r2, #1
 800d7ac:	7830      	ldrb	r0, [r6, #0]
 800d7ae:	f7ff ffb2 	bl	800d716 <__hexdig_fun>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d1f8      	bne.n	800d7a8 <__gethex+0x68>
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	498c      	ldr	r1, [pc, #560]	@ (800d9ec <__gethex+0x2ac>)
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff feee 	bl	800d59c <strncmp>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	d13e      	bne.n	800d842 <__gethex+0x102>
 800d7c4:	b944      	cbnz	r4, 800d7d8 <__gethex+0x98>
 800d7c6:	1c74      	adds	r4, r6, #1
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	4616      	mov	r6, r2
 800d7cc:	3201      	adds	r2, #1
 800d7ce:	7830      	ldrb	r0, [r6, #0]
 800d7d0:	f7ff ffa1 	bl	800d716 <__hexdig_fun>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d1f8      	bne.n	800d7ca <__gethex+0x8a>
 800d7d8:	1ba4      	subs	r4, r4, r6
 800d7da:	00a7      	lsls	r7, r4, #2
 800d7dc:	7833      	ldrb	r3, [r6, #0]
 800d7de:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d7e2:	2b50      	cmp	r3, #80	@ 0x50
 800d7e4:	d13d      	bne.n	800d862 <__gethex+0x122>
 800d7e6:	7873      	ldrb	r3, [r6, #1]
 800d7e8:	2b2b      	cmp	r3, #43	@ 0x2b
 800d7ea:	d032      	beq.n	800d852 <__gethex+0x112>
 800d7ec:	2b2d      	cmp	r3, #45	@ 0x2d
 800d7ee:	d033      	beq.n	800d858 <__gethex+0x118>
 800d7f0:	1c71      	adds	r1, r6, #1
 800d7f2:	2400      	movs	r4, #0
 800d7f4:	7808      	ldrb	r0, [r1, #0]
 800d7f6:	f7ff ff8e 	bl	800d716 <__hexdig_fun>
 800d7fa:	1e43      	subs	r3, r0, #1
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b18      	cmp	r3, #24
 800d800:	d82f      	bhi.n	800d862 <__gethex+0x122>
 800d802:	f1a0 0210 	sub.w	r2, r0, #16
 800d806:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d80a:	f7ff ff84 	bl	800d716 <__hexdig_fun>
 800d80e:	f100 3cff 	add.w	ip, r0, #4294967295
 800d812:	230a      	movs	r3, #10
 800d814:	fa5f fc8c 	uxtb.w	ip, ip
 800d818:	f1bc 0f18 	cmp.w	ip, #24
 800d81c:	d91e      	bls.n	800d85c <__gethex+0x11c>
 800d81e:	b104      	cbz	r4, 800d822 <__gethex+0xe2>
 800d820:	4252      	negs	r2, r2
 800d822:	4417      	add	r7, r2
 800d824:	f8ca 1000 	str.w	r1, [sl]
 800d828:	b1ed      	cbz	r5, 800d866 <__gethex+0x126>
 800d82a:	f1bb 0f00 	cmp.w	fp, #0
 800d82e:	bf0c      	ite	eq
 800d830:	2506      	moveq	r5, #6
 800d832:	2500      	movne	r5, #0
 800d834:	4628      	mov	r0, r5
 800d836:	b005      	add	sp, #20
 800d838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83c:	2500      	movs	r5, #0
 800d83e:	462c      	mov	r4, r5
 800d840:	e7b1      	b.n	800d7a6 <__gethex+0x66>
 800d842:	2c00      	cmp	r4, #0
 800d844:	d1c8      	bne.n	800d7d8 <__gethex+0x98>
 800d846:	4627      	mov	r7, r4
 800d848:	e7c8      	b.n	800d7dc <__gethex+0x9c>
 800d84a:	464e      	mov	r6, r9
 800d84c:	462f      	mov	r7, r5
 800d84e:	2501      	movs	r5, #1
 800d850:	e7c4      	b.n	800d7dc <__gethex+0x9c>
 800d852:	2400      	movs	r4, #0
 800d854:	1cb1      	adds	r1, r6, #2
 800d856:	e7cd      	b.n	800d7f4 <__gethex+0xb4>
 800d858:	2401      	movs	r4, #1
 800d85a:	e7fb      	b.n	800d854 <__gethex+0x114>
 800d85c:	fb03 0002 	mla	r0, r3, r2, r0
 800d860:	e7cf      	b.n	800d802 <__gethex+0xc2>
 800d862:	4631      	mov	r1, r6
 800d864:	e7de      	b.n	800d824 <__gethex+0xe4>
 800d866:	eba6 0309 	sub.w	r3, r6, r9
 800d86a:	4629      	mov	r1, r5
 800d86c:	3b01      	subs	r3, #1
 800d86e:	2b07      	cmp	r3, #7
 800d870:	dc0a      	bgt.n	800d888 <__gethex+0x148>
 800d872:	9801      	ldr	r0, [sp, #4]
 800d874:	f7fd ff5c 	bl	800b730 <_Balloc>
 800d878:	4604      	mov	r4, r0
 800d87a:	b940      	cbnz	r0, 800d88e <__gethex+0x14e>
 800d87c:	4b5c      	ldr	r3, [pc, #368]	@ (800d9f0 <__gethex+0x2b0>)
 800d87e:	4602      	mov	r2, r0
 800d880:	21e4      	movs	r1, #228	@ 0xe4
 800d882:	485c      	ldr	r0, [pc, #368]	@ (800d9f4 <__gethex+0x2b4>)
 800d884:	f7ff fec4 	bl	800d610 <__assert_func>
 800d888:	3101      	adds	r1, #1
 800d88a:	105b      	asrs	r3, r3, #1
 800d88c:	e7ef      	b.n	800d86e <__gethex+0x12e>
 800d88e:	f100 0a14 	add.w	sl, r0, #20
 800d892:	2300      	movs	r3, #0
 800d894:	4655      	mov	r5, sl
 800d896:	469b      	mov	fp, r3
 800d898:	45b1      	cmp	r9, r6
 800d89a:	d337      	bcc.n	800d90c <__gethex+0x1cc>
 800d89c:	f845 bb04 	str.w	fp, [r5], #4
 800d8a0:	eba5 050a 	sub.w	r5, r5, sl
 800d8a4:	4658      	mov	r0, fp
 800d8a6:	10ad      	asrs	r5, r5, #2
 800d8a8:	6125      	str	r5, [r4, #16]
 800d8aa:	016d      	lsls	r5, r5, #5
 800d8ac:	f7fe f834 	bl	800b918 <__hi0bits>
 800d8b0:	f8d8 6000 	ldr.w	r6, [r8]
 800d8b4:	1a2d      	subs	r5, r5, r0
 800d8b6:	42b5      	cmp	r5, r6
 800d8b8:	dd54      	ble.n	800d964 <__gethex+0x224>
 800d8ba:	1bad      	subs	r5, r5, r6
 800d8bc:	4620      	mov	r0, r4
 800d8be:	4629      	mov	r1, r5
 800d8c0:	f7fe fbd1 	bl	800c066 <__any_on>
 800d8c4:	4681      	mov	r9, r0
 800d8c6:	b178      	cbz	r0, 800d8e8 <__gethex+0x1a8>
 800d8c8:	1e6b      	subs	r3, r5, #1
 800d8ca:	f04f 0901 	mov.w	r9, #1
 800d8ce:	1159      	asrs	r1, r3, #5
 800d8d0:	f003 021f 	and.w	r2, r3, #31
 800d8d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d8d8:	fa09 f202 	lsl.w	r2, r9, r2
 800d8dc:	420a      	tst	r2, r1
 800d8de:	d003      	beq.n	800d8e8 <__gethex+0x1a8>
 800d8e0:	454b      	cmp	r3, r9
 800d8e2:	dc36      	bgt.n	800d952 <__gethex+0x212>
 800d8e4:	f04f 0902 	mov.w	r9, #2
 800d8e8:	442f      	add	r7, r5
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f7ff fec1 	bl	800d674 <rshift>
 800d8f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8f6:	42bb      	cmp	r3, r7
 800d8f8:	da42      	bge.n	800d980 <__gethex+0x240>
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	9801      	ldr	r0, [sp, #4]
 800d8fe:	f7fd ff57 	bl	800b7b0 <_Bfree>
 800d902:	2300      	movs	r3, #0
 800d904:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d906:	25a3      	movs	r5, #163	@ 0xa3
 800d908:	6013      	str	r3, [r2, #0]
 800d90a:	e793      	b.n	800d834 <__gethex+0xf4>
 800d90c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d910:	2a2e      	cmp	r2, #46	@ 0x2e
 800d912:	d012      	beq.n	800d93a <__gethex+0x1fa>
 800d914:	2b20      	cmp	r3, #32
 800d916:	d104      	bne.n	800d922 <__gethex+0x1e2>
 800d918:	f845 bb04 	str.w	fp, [r5], #4
 800d91c:	f04f 0b00 	mov.w	fp, #0
 800d920:	465b      	mov	r3, fp
 800d922:	7830      	ldrb	r0, [r6, #0]
 800d924:	9303      	str	r3, [sp, #12]
 800d926:	f7ff fef6 	bl	800d716 <__hexdig_fun>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	f000 000f 	and.w	r0, r0, #15
 800d930:	4098      	lsls	r0, r3
 800d932:	3304      	adds	r3, #4
 800d934:	ea4b 0b00 	orr.w	fp, fp, r0
 800d938:	e7ae      	b.n	800d898 <__gethex+0x158>
 800d93a:	45b1      	cmp	r9, r6
 800d93c:	d8ea      	bhi.n	800d914 <__gethex+0x1d4>
 800d93e:	2201      	movs	r2, #1
 800d940:	492a      	ldr	r1, [pc, #168]	@ (800d9ec <__gethex+0x2ac>)
 800d942:	4630      	mov	r0, r6
 800d944:	9303      	str	r3, [sp, #12]
 800d946:	f7ff fe29 	bl	800d59c <strncmp>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d1e1      	bne.n	800d914 <__gethex+0x1d4>
 800d950:	e7a2      	b.n	800d898 <__gethex+0x158>
 800d952:	1ea9      	subs	r1, r5, #2
 800d954:	4620      	mov	r0, r4
 800d956:	f7fe fb86 	bl	800c066 <__any_on>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d0c2      	beq.n	800d8e4 <__gethex+0x1a4>
 800d95e:	f04f 0903 	mov.w	r9, #3
 800d962:	e7c1      	b.n	800d8e8 <__gethex+0x1a8>
 800d964:	da09      	bge.n	800d97a <__gethex+0x23a>
 800d966:	1b75      	subs	r5, r6, r5
 800d968:	4621      	mov	r1, r4
 800d96a:	9801      	ldr	r0, [sp, #4]
 800d96c:	462a      	mov	r2, r5
 800d96e:	1b7f      	subs	r7, r7, r5
 800d970:	f7fe f938 	bl	800bbe4 <__lshift>
 800d974:	4604      	mov	r4, r0
 800d976:	f100 0a14 	add.w	sl, r0, #20
 800d97a:	f04f 0900 	mov.w	r9, #0
 800d97e:	e7b8      	b.n	800d8f2 <__gethex+0x1b2>
 800d980:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d984:	42bd      	cmp	r5, r7
 800d986:	dd6f      	ble.n	800da68 <__gethex+0x328>
 800d988:	1bed      	subs	r5, r5, r7
 800d98a:	42ae      	cmp	r6, r5
 800d98c:	dc34      	bgt.n	800d9f8 <__gethex+0x2b8>
 800d98e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d022      	beq.n	800d9dc <__gethex+0x29c>
 800d996:	2b03      	cmp	r3, #3
 800d998:	d024      	beq.n	800d9e4 <__gethex+0x2a4>
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d115      	bne.n	800d9ca <__gethex+0x28a>
 800d99e:	42ae      	cmp	r6, r5
 800d9a0:	d113      	bne.n	800d9ca <__gethex+0x28a>
 800d9a2:	2e01      	cmp	r6, #1
 800d9a4:	d10b      	bne.n	800d9be <__gethex+0x27e>
 800d9a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9aa:	2562      	movs	r5, #98	@ 0x62
 800d9ac:	9a02      	ldr	r2, [sp, #8]
 800d9ae:	6013      	str	r3, [r2, #0]
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	6123      	str	r3, [r4, #16]
 800d9b4:	f8ca 3000 	str.w	r3, [sl]
 800d9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ba:	601c      	str	r4, [r3, #0]
 800d9bc:	e73a      	b.n	800d834 <__gethex+0xf4>
 800d9be:	1e71      	subs	r1, r6, #1
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f7fe fb50 	bl	800c066 <__any_on>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d1ed      	bne.n	800d9a6 <__gethex+0x266>
 800d9ca:	4621      	mov	r1, r4
 800d9cc:	9801      	ldr	r0, [sp, #4]
 800d9ce:	f7fd feef 	bl	800b7b0 <_Bfree>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9d6:	2550      	movs	r5, #80	@ 0x50
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	e72b      	b.n	800d834 <__gethex+0xf4>
 800d9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d1f3      	bne.n	800d9ca <__gethex+0x28a>
 800d9e2:	e7e0      	b.n	800d9a6 <__gethex+0x266>
 800d9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1dd      	bne.n	800d9a6 <__gethex+0x266>
 800d9ea:	e7ee      	b.n	800d9ca <__gethex+0x28a>
 800d9ec:	0800e200 	.word	0x0800e200
 800d9f0:	0800e099 	.word	0x0800e099
 800d9f4:	0800e3ae 	.word	0x0800e3ae
 800d9f8:	1e6f      	subs	r7, r5, #1
 800d9fa:	f1b9 0f00 	cmp.w	r9, #0
 800d9fe:	d130      	bne.n	800da62 <__gethex+0x322>
 800da00:	b127      	cbz	r7, 800da0c <__gethex+0x2cc>
 800da02:	4639      	mov	r1, r7
 800da04:	4620      	mov	r0, r4
 800da06:	f7fe fb2e 	bl	800c066 <__any_on>
 800da0a:	4681      	mov	r9, r0
 800da0c:	117a      	asrs	r2, r7, #5
 800da0e:	2301      	movs	r3, #1
 800da10:	f007 071f 	and.w	r7, r7, #31
 800da14:	4629      	mov	r1, r5
 800da16:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da1a:	4620      	mov	r0, r4
 800da1c:	40bb      	lsls	r3, r7
 800da1e:	1b76      	subs	r6, r6, r5
 800da20:	2502      	movs	r5, #2
 800da22:	4213      	tst	r3, r2
 800da24:	bf18      	it	ne
 800da26:	f049 0902 	orrne.w	r9, r9, #2
 800da2a:	f7ff fe23 	bl	800d674 <rshift>
 800da2e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da32:	f1b9 0f00 	cmp.w	r9, #0
 800da36:	d047      	beq.n	800dac8 <__gethex+0x388>
 800da38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d015      	beq.n	800da6c <__gethex+0x32c>
 800da40:	2b03      	cmp	r3, #3
 800da42:	d017      	beq.n	800da74 <__gethex+0x334>
 800da44:	2b01      	cmp	r3, #1
 800da46:	d109      	bne.n	800da5c <__gethex+0x31c>
 800da48:	f019 0f02 	tst.w	r9, #2
 800da4c:	d006      	beq.n	800da5c <__gethex+0x31c>
 800da4e:	f8da 3000 	ldr.w	r3, [sl]
 800da52:	ea49 0903 	orr.w	r9, r9, r3
 800da56:	f019 0f01 	tst.w	r9, #1
 800da5a:	d10e      	bne.n	800da7a <__gethex+0x33a>
 800da5c:	f045 0510 	orr.w	r5, r5, #16
 800da60:	e032      	b.n	800dac8 <__gethex+0x388>
 800da62:	f04f 0901 	mov.w	r9, #1
 800da66:	e7d1      	b.n	800da0c <__gethex+0x2cc>
 800da68:	2501      	movs	r5, #1
 800da6a:	e7e2      	b.n	800da32 <__gethex+0x2f2>
 800da6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da6e:	f1c3 0301 	rsb	r3, r3, #1
 800da72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da76:	2b00      	cmp	r3, #0
 800da78:	d0f0      	beq.n	800da5c <__gethex+0x31c>
 800da7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da7e:	f104 0314 	add.w	r3, r4, #20
 800da82:	f04f 0c00 	mov.w	ip, #0
 800da86:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da8a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da8e:	4618      	mov	r0, r3
 800da90:	f853 2b04 	ldr.w	r2, [r3], #4
 800da94:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da98:	d01b      	beq.n	800dad2 <__gethex+0x392>
 800da9a:	3201      	adds	r2, #1
 800da9c:	6002      	str	r2, [r0, #0]
 800da9e:	2d02      	cmp	r5, #2
 800daa0:	f104 0314 	add.w	r3, r4, #20
 800daa4:	d13c      	bne.n	800db20 <__gethex+0x3e0>
 800daa6:	f8d8 2000 	ldr.w	r2, [r8]
 800daaa:	3a01      	subs	r2, #1
 800daac:	42b2      	cmp	r2, r6
 800daae:	d109      	bne.n	800dac4 <__gethex+0x384>
 800dab0:	1171      	asrs	r1, r6, #5
 800dab2:	2201      	movs	r2, #1
 800dab4:	f006 061f 	and.w	r6, r6, #31
 800dab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dabc:	fa02 f606 	lsl.w	r6, r2, r6
 800dac0:	421e      	tst	r6, r3
 800dac2:	d13a      	bne.n	800db3a <__gethex+0x3fa>
 800dac4:	f045 0520 	orr.w	r5, r5, #32
 800dac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daca:	601c      	str	r4, [r3, #0]
 800dacc:	9b02      	ldr	r3, [sp, #8]
 800dace:	601f      	str	r7, [r3, #0]
 800dad0:	e6b0      	b.n	800d834 <__gethex+0xf4>
 800dad2:	4299      	cmp	r1, r3
 800dad4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dad8:	d8d9      	bhi.n	800da8e <__gethex+0x34e>
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	459b      	cmp	fp, r3
 800dade:	db17      	blt.n	800db10 <__gethex+0x3d0>
 800dae0:	6861      	ldr	r1, [r4, #4]
 800dae2:	9801      	ldr	r0, [sp, #4]
 800dae4:	3101      	adds	r1, #1
 800dae6:	f7fd fe23 	bl	800b730 <_Balloc>
 800daea:	4681      	mov	r9, r0
 800daec:	b918      	cbnz	r0, 800daf6 <__gethex+0x3b6>
 800daee:	4b1a      	ldr	r3, [pc, #104]	@ (800db58 <__gethex+0x418>)
 800daf0:	4602      	mov	r2, r0
 800daf2:	2184      	movs	r1, #132	@ 0x84
 800daf4:	e6c5      	b.n	800d882 <__gethex+0x142>
 800daf6:	6922      	ldr	r2, [r4, #16]
 800daf8:	f104 010c 	add.w	r1, r4, #12
 800dafc:	300c      	adds	r0, #12
 800dafe:	3202      	adds	r2, #2
 800db00:	0092      	lsls	r2, r2, #2
 800db02:	f7ff fd6d 	bl	800d5e0 <memcpy>
 800db06:	4621      	mov	r1, r4
 800db08:	464c      	mov	r4, r9
 800db0a:	9801      	ldr	r0, [sp, #4]
 800db0c:	f7fd fe50 	bl	800b7b0 <_Bfree>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db18:	6122      	str	r2, [r4, #16]
 800db1a:	2201      	movs	r2, #1
 800db1c:	615a      	str	r2, [r3, #20]
 800db1e:	e7be      	b.n	800da9e <__gethex+0x35e>
 800db20:	6922      	ldr	r2, [r4, #16]
 800db22:	455a      	cmp	r2, fp
 800db24:	dd0b      	ble.n	800db3e <__gethex+0x3fe>
 800db26:	2101      	movs	r1, #1
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff fda3 	bl	800d674 <rshift>
 800db2e:	3701      	adds	r7, #1
 800db30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db34:	42bb      	cmp	r3, r7
 800db36:	f6ff aee0 	blt.w	800d8fa <__gethex+0x1ba>
 800db3a:	2501      	movs	r5, #1
 800db3c:	e7c2      	b.n	800dac4 <__gethex+0x384>
 800db3e:	f016 061f 	ands.w	r6, r6, #31
 800db42:	d0fa      	beq.n	800db3a <__gethex+0x3fa>
 800db44:	4453      	add	r3, sl
 800db46:	f1c6 0620 	rsb	r6, r6, #32
 800db4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db4e:	f7fd fee3 	bl	800b918 <__hi0bits>
 800db52:	42b0      	cmp	r0, r6
 800db54:	dbe7      	blt.n	800db26 <__gethex+0x3e6>
 800db56:	e7f0      	b.n	800db3a <__gethex+0x3fa>
 800db58:	0800e099 	.word	0x0800e099

0800db5c <L_shift>:
 800db5c:	f1c2 0208 	rsb	r2, r2, #8
 800db60:	0092      	lsls	r2, r2, #2
 800db62:	b570      	push	{r4, r5, r6, lr}
 800db64:	f1c2 0620 	rsb	r6, r2, #32
 800db68:	6843      	ldr	r3, [r0, #4]
 800db6a:	6804      	ldr	r4, [r0, #0]
 800db6c:	fa03 f506 	lsl.w	r5, r3, r6
 800db70:	40d3      	lsrs	r3, r2
 800db72:	432c      	orrs	r4, r5
 800db74:	6004      	str	r4, [r0, #0]
 800db76:	f840 3f04 	str.w	r3, [r0, #4]!
 800db7a:	4288      	cmp	r0, r1
 800db7c:	d3f4      	bcc.n	800db68 <L_shift+0xc>
 800db7e:	bd70      	pop	{r4, r5, r6, pc}

0800db80 <__match>:
 800db80:	6803      	ldr	r3, [r0, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	b530      	push	{r4, r5, lr}
 800db86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db8a:	b914      	cbnz	r4, 800db92 <__match+0x12>
 800db8c:	6003      	str	r3, [r0, #0]
 800db8e:	2001      	movs	r0, #1
 800db90:	bd30      	pop	{r4, r5, pc}
 800db92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800db9a:	2d19      	cmp	r5, #25
 800db9c:	bf98      	it	ls
 800db9e:	3220      	addls	r2, #32
 800dba0:	42a2      	cmp	r2, r4
 800dba2:	d0f0      	beq.n	800db86 <__match+0x6>
 800dba4:	2000      	movs	r0, #0
 800dba6:	e7f3      	b.n	800db90 <__match+0x10>

0800dba8 <__hexnan>:
 800dba8:	680b      	ldr	r3, [r1, #0]
 800dbaa:	6801      	ldr	r1, [r0, #0]
 800dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	115e      	asrs	r6, r3, #5
 800dbb2:	f013 031f 	ands.w	r3, r3, #31
 800dbb6:	f04f 0500 	mov.w	r5, #0
 800dbba:	b087      	sub	sp, #28
 800dbbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbc0:	4682      	mov	sl, r0
 800dbc2:	4690      	mov	r8, r2
 800dbc4:	46ab      	mov	fp, r5
 800dbc6:	bf18      	it	ne
 800dbc8:	3604      	addne	r6, #4
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	9502      	str	r5, [sp, #8]
 800dbce:	1f37      	subs	r7, r6, #4
 800dbd0:	f846 5c04 	str.w	r5, [r6, #-4]
 800dbd4:	46b9      	mov	r9, r7
 800dbd6:	463c      	mov	r4, r7
 800dbd8:	1c4b      	adds	r3, r1, #1
 800dbda:	784a      	ldrb	r2, [r1, #1]
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	b342      	cbz	r2, 800dc32 <__hexnan+0x8a>
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	9105      	str	r1, [sp, #20]
 800dbe4:	9204      	str	r2, [sp, #16]
 800dbe6:	f7ff fd96 	bl	800d716 <__hexdig_fun>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d151      	bne.n	800dc92 <__hexnan+0xea>
 800dbee:	9a04      	ldr	r2, [sp, #16]
 800dbf0:	9905      	ldr	r1, [sp, #20]
 800dbf2:	2a20      	cmp	r2, #32
 800dbf4:	d818      	bhi.n	800dc28 <__hexnan+0x80>
 800dbf6:	9b02      	ldr	r3, [sp, #8]
 800dbf8:	459b      	cmp	fp, r3
 800dbfa:	dd13      	ble.n	800dc24 <__hexnan+0x7c>
 800dbfc:	454c      	cmp	r4, r9
 800dbfe:	d206      	bcs.n	800dc0e <__hexnan+0x66>
 800dc00:	2d07      	cmp	r5, #7
 800dc02:	dc04      	bgt.n	800dc0e <__hexnan+0x66>
 800dc04:	462a      	mov	r2, r5
 800dc06:	4649      	mov	r1, r9
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f7ff ffa7 	bl	800db5c <L_shift>
 800dc0e:	4544      	cmp	r4, r8
 800dc10:	d951      	bls.n	800dcb6 <__hexnan+0x10e>
 800dc12:	2300      	movs	r3, #0
 800dc14:	f1a4 0904 	sub.w	r9, r4, #4
 800dc18:	f8cd b008 	str.w	fp, [sp, #8]
 800dc1c:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc20:	461d      	mov	r5, r3
 800dc22:	464c      	mov	r4, r9
 800dc24:	9903      	ldr	r1, [sp, #12]
 800dc26:	e7d7      	b.n	800dbd8 <__hexnan+0x30>
 800dc28:	2a29      	cmp	r2, #41	@ 0x29
 800dc2a:	d156      	bne.n	800dcda <__hexnan+0x132>
 800dc2c:	3102      	adds	r1, #2
 800dc2e:	f8ca 1000 	str.w	r1, [sl]
 800dc32:	f1bb 0f00 	cmp.w	fp, #0
 800dc36:	d050      	beq.n	800dcda <__hexnan+0x132>
 800dc38:	454c      	cmp	r4, r9
 800dc3a:	d206      	bcs.n	800dc4a <__hexnan+0xa2>
 800dc3c:	2d07      	cmp	r5, #7
 800dc3e:	dc04      	bgt.n	800dc4a <__hexnan+0xa2>
 800dc40:	462a      	mov	r2, r5
 800dc42:	4649      	mov	r1, r9
 800dc44:	4620      	mov	r0, r4
 800dc46:	f7ff ff89 	bl	800db5c <L_shift>
 800dc4a:	4544      	cmp	r4, r8
 800dc4c:	d935      	bls.n	800dcba <__hexnan+0x112>
 800dc4e:	f1a8 0204 	sub.w	r2, r8, #4
 800dc52:	4623      	mov	r3, r4
 800dc54:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc58:	429f      	cmp	r7, r3
 800dc5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc5e:	d2f9      	bcs.n	800dc54 <__hexnan+0xac>
 800dc60:	1b3b      	subs	r3, r7, r4
 800dc62:	3e03      	subs	r6, #3
 800dc64:	3401      	adds	r4, #1
 800dc66:	2200      	movs	r2, #0
 800dc68:	f023 0303 	bic.w	r3, r3, #3
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	42b4      	cmp	r4, r6
 800dc70:	bf88      	it	hi
 800dc72:	2304      	movhi	r3, #4
 800dc74:	4443      	add	r3, r8
 800dc76:	f843 2b04 	str.w	r2, [r3], #4
 800dc7a:	429f      	cmp	r7, r3
 800dc7c:	d2fb      	bcs.n	800dc76 <__hexnan+0xce>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	b91b      	cbnz	r3, 800dc8a <__hexnan+0xe2>
 800dc82:	4547      	cmp	r7, r8
 800dc84:	d127      	bne.n	800dcd6 <__hexnan+0x12e>
 800dc86:	2301      	movs	r3, #1
 800dc88:	603b      	str	r3, [r7, #0]
 800dc8a:	2005      	movs	r0, #5
 800dc8c:	b007      	add	sp, #28
 800dc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc92:	3501      	adds	r5, #1
 800dc94:	f10b 0b01 	add.w	fp, fp, #1
 800dc98:	2d08      	cmp	r5, #8
 800dc9a:	dd05      	ble.n	800dca8 <__hexnan+0x100>
 800dc9c:	4544      	cmp	r4, r8
 800dc9e:	d9c1      	bls.n	800dc24 <__hexnan+0x7c>
 800dca0:	2300      	movs	r3, #0
 800dca2:	3c04      	subs	r4, #4
 800dca4:	2501      	movs	r5, #1
 800dca6:	6023      	str	r3, [r4, #0]
 800dca8:	6822      	ldr	r2, [r4, #0]
 800dcaa:	f000 000f 	and.w	r0, r0, #15
 800dcae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcb2:	6020      	str	r0, [r4, #0]
 800dcb4:	e7b6      	b.n	800dc24 <__hexnan+0x7c>
 800dcb6:	2508      	movs	r5, #8
 800dcb8:	e7b4      	b.n	800dc24 <__hexnan+0x7c>
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d0de      	beq.n	800dc7e <__hexnan+0xd6>
 800dcc0:	f1c3 0320 	rsb	r3, r3, #32
 800dcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc8:	40da      	lsrs	r2, r3
 800dcca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dcce:	4013      	ands	r3, r2
 800dcd0:	f846 3c04 	str.w	r3, [r6, #-4]
 800dcd4:	e7d3      	b.n	800dc7e <__hexnan+0xd6>
 800dcd6:	3f04      	subs	r7, #4
 800dcd8:	e7d1      	b.n	800dc7e <__hexnan+0xd6>
 800dcda:	2004      	movs	r0, #4
 800dcdc:	e7d6      	b.n	800dc8c <__hexnan+0xe4>

0800dcde <__ascii_mbtowc>:
 800dcde:	b082      	sub	sp, #8
 800dce0:	b901      	cbnz	r1, 800dce4 <__ascii_mbtowc+0x6>
 800dce2:	a901      	add	r1, sp, #4
 800dce4:	b142      	cbz	r2, 800dcf8 <__ascii_mbtowc+0x1a>
 800dce6:	b14b      	cbz	r3, 800dcfc <__ascii_mbtowc+0x1e>
 800dce8:	7813      	ldrb	r3, [r2, #0]
 800dcea:	600b      	str	r3, [r1, #0]
 800dcec:	7812      	ldrb	r2, [r2, #0]
 800dcee:	1e10      	subs	r0, r2, #0
 800dcf0:	bf18      	it	ne
 800dcf2:	2001      	movne	r0, #1
 800dcf4:	b002      	add	sp, #8
 800dcf6:	4770      	bx	lr
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	e7fb      	b.n	800dcf4 <__ascii_mbtowc+0x16>
 800dcfc:	f06f 0001 	mvn.w	r0, #1
 800dd00:	e7f8      	b.n	800dcf4 <__ascii_mbtowc+0x16>

0800dd02 <_realloc_r>:
 800dd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd06:	4680      	mov	r8, r0
 800dd08:	4615      	mov	r5, r2
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	b921      	cbnz	r1, 800dd18 <_realloc_r+0x16>
 800dd0e:	4611      	mov	r1, r2
 800dd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd14:	f7fd bc80 	b.w	800b618 <_malloc_r>
 800dd18:	b92a      	cbnz	r2, 800dd26 <_realloc_r+0x24>
 800dd1a:	f7fd fc09 	bl	800b530 <_free_r>
 800dd1e:	2400      	movs	r4, #0
 800dd20:	4620      	mov	r0, r4
 800dd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd26:	f000 f8c4 	bl	800deb2 <_malloc_usable_size_r>
 800dd2a:	4285      	cmp	r5, r0
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	d802      	bhi.n	800dd36 <_realloc_r+0x34>
 800dd30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd34:	d8f4      	bhi.n	800dd20 <_realloc_r+0x1e>
 800dd36:	4629      	mov	r1, r5
 800dd38:	4640      	mov	r0, r8
 800dd3a:	f7fd fc6d 	bl	800b618 <_malloc_r>
 800dd3e:	4607      	mov	r7, r0
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d0ec      	beq.n	800dd1e <_realloc_r+0x1c>
 800dd44:	42b5      	cmp	r5, r6
 800dd46:	462a      	mov	r2, r5
 800dd48:	4621      	mov	r1, r4
 800dd4a:	bf28      	it	cs
 800dd4c:	4632      	movcs	r2, r6
 800dd4e:	f7ff fc47 	bl	800d5e0 <memcpy>
 800dd52:	4621      	mov	r1, r4
 800dd54:	4640      	mov	r0, r8
 800dd56:	463c      	mov	r4, r7
 800dd58:	f7fd fbea 	bl	800b530 <_free_r>
 800dd5c:	e7e0      	b.n	800dd20 <_realloc_r+0x1e>

0800dd5e <__ascii_wctomb>:
 800dd5e:	4603      	mov	r3, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	b141      	cbz	r1, 800dd76 <__ascii_wctomb+0x18>
 800dd64:	2aff      	cmp	r2, #255	@ 0xff
 800dd66:	d904      	bls.n	800dd72 <__ascii_wctomb+0x14>
 800dd68:	228a      	movs	r2, #138	@ 0x8a
 800dd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	2001      	movs	r0, #1
 800dd74:	700a      	strb	r2, [r1, #0]
 800dd76:	4770      	bx	lr

0800dd78 <fiprintf>:
 800dd78:	b40e      	push	{r1, r2, r3}
 800dd7a:	b503      	push	{r0, r1, lr}
 800dd7c:	ab03      	add	r3, sp, #12
 800dd7e:	4601      	mov	r1, r0
 800dd80:	4805      	ldr	r0, [pc, #20]	@ (800dd98 <fiprintf+0x20>)
 800dd82:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	f7ff f995 	bl	800d0b8 <_vfiprintf_r>
 800dd8e:	b002      	add	sp, #8
 800dd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd94:	b003      	add	sp, #12
 800dd96:	4770      	bx	lr
 800dd98:	20000018 	.word	0x20000018

0800dd9c <__swhatbuf_r>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	460c      	mov	r4, r1
 800dda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda4:	b096      	sub	sp, #88	@ 0x58
 800dda6:	4615      	mov	r5, r2
 800dda8:	2900      	cmp	r1, #0
 800ddaa:	461e      	mov	r6, r3
 800ddac:	da0c      	bge.n	800ddc8 <__swhatbuf_r+0x2c>
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddb6:	bf14      	ite	ne
 800ddb8:	2340      	movne	r3, #64	@ 0x40
 800ddba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	6031      	str	r1, [r6, #0]
 800ddc2:	602b      	str	r3, [r5, #0]
 800ddc4:	b016      	add	sp, #88	@ 0x58
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}
 800ddc8:	466a      	mov	r2, sp
 800ddca:	f000 f849 	bl	800de60 <_fstat_r>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	dbed      	blt.n	800ddae <__swhatbuf_r+0x12>
 800ddd2:	9901      	ldr	r1, [sp, #4]
 800ddd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dddc:	4259      	negs	r1, r3
 800ddde:	4159      	adcs	r1, r3
 800dde0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dde4:	e7eb      	b.n	800ddbe <__swhatbuf_r+0x22>

0800dde6 <__smakebuf_r>:
 800dde6:	898b      	ldrh	r3, [r1, #12]
 800dde8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddea:	079d      	lsls	r5, r3, #30
 800ddec:	4606      	mov	r6, r0
 800ddee:	460c      	mov	r4, r1
 800ddf0:	d507      	bpl.n	800de02 <__smakebuf_r+0x1c>
 800ddf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddf6:	6023      	str	r3, [r4, #0]
 800ddf8:	6123      	str	r3, [r4, #16]
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	6163      	str	r3, [r4, #20]
 800ddfe:	b003      	add	sp, #12
 800de00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de02:	ab01      	add	r3, sp, #4
 800de04:	466a      	mov	r2, sp
 800de06:	f7ff ffc9 	bl	800dd9c <__swhatbuf_r>
 800de0a:	9f00      	ldr	r7, [sp, #0]
 800de0c:	4605      	mov	r5, r0
 800de0e:	4630      	mov	r0, r6
 800de10:	4639      	mov	r1, r7
 800de12:	f7fd fc01 	bl	800b618 <_malloc_r>
 800de16:	b948      	cbnz	r0, 800de2c <__smakebuf_r+0x46>
 800de18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de1c:	059a      	lsls	r2, r3, #22
 800de1e:	d4ee      	bmi.n	800ddfe <__smakebuf_r+0x18>
 800de20:	f023 0303 	bic.w	r3, r3, #3
 800de24:	f043 0302 	orr.w	r3, r3, #2
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	e7e2      	b.n	800ddf2 <__smakebuf_r+0xc>
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	6020      	str	r0, [r4, #0]
 800de30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de34:	81a3      	strh	r3, [r4, #12]
 800de36:	9b01      	ldr	r3, [sp, #4]
 800de38:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de3c:	b15b      	cbz	r3, 800de56 <__smakebuf_r+0x70>
 800de3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de42:	4630      	mov	r0, r6
 800de44:	f000 f81e 	bl	800de84 <_isatty_r>
 800de48:	b128      	cbz	r0, 800de56 <__smakebuf_r+0x70>
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	f023 0303 	bic.w	r3, r3, #3
 800de50:	f043 0301 	orr.w	r3, r3, #1
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	431d      	orrs	r5, r3
 800de5a:	81a5      	strh	r5, [r4, #12]
 800de5c:	e7cf      	b.n	800ddfe <__smakebuf_r+0x18>
	...

0800de60 <_fstat_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	2300      	movs	r3, #0
 800de64:	4d06      	ldr	r5, [pc, #24]	@ (800de80 <_fstat_r+0x20>)
 800de66:	4604      	mov	r4, r0
 800de68:	4608      	mov	r0, r1
 800de6a:	4611      	mov	r1, r2
 800de6c:	602b      	str	r3, [r5, #0]
 800de6e:	f7f4 fa1c 	bl	80022aa <_fstat>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	d102      	bne.n	800de7c <_fstat_r+0x1c>
 800de76:	682b      	ldr	r3, [r5, #0]
 800de78:	b103      	cbz	r3, 800de7c <_fstat_r+0x1c>
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	bd38      	pop	{r3, r4, r5, pc}
 800de7e:	bf00      	nop
 800de80:	20000534 	.word	0x20000534

0800de84 <_isatty_r>:
 800de84:	b538      	push	{r3, r4, r5, lr}
 800de86:	2300      	movs	r3, #0
 800de88:	4d05      	ldr	r5, [pc, #20]	@ (800dea0 <_isatty_r+0x1c>)
 800de8a:	4604      	mov	r4, r0
 800de8c:	4608      	mov	r0, r1
 800de8e:	602b      	str	r3, [r5, #0]
 800de90:	f7f4 fa1b 	bl	80022ca <_isatty>
 800de94:	1c43      	adds	r3, r0, #1
 800de96:	d102      	bne.n	800de9e <_isatty_r+0x1a>
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	b103      	cbz	r3, 800de9e <_isatty_r+0x1a>
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	bd38      	pop	{r3, r4, r5, pc}
 800dea0:	20000534 	.word	0x20000534

0800dea4 <abort>:
 800dea4:	2006      	movs	r0, #6
 800dea6:	b508      	push	{r3, lr}
 800dea8:	f000 f834 	bl	800df14 <raise>
 800deac:	2001      	movs	r0, #1
 800deae:	f7f4 f9ac 	bl	800220a <_exit>

0800deb2 <_malloc_usable_size_r>:
 800deb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deb6:	1f18      	subs	r0, r3, #4
 800deb8:	2b00      	cmp	r3, #0
 800deba:	bfbc      	itt	lt
 800debc:	580b      	ldrlt	r3, [r1, r0]
 800debe:	18c0      	addlt	r0, r0, r3
 800dec0:	4770      	bx	lr

0800dec2 <_raise_r>:
 800dec2:	291f      	cmp	r1, #31
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4605      	mov	r5, r0
 800dec8:	460c      	mov	r4, r1
 800deca:	d904      	bls.n	800ded6 <_raise_r+0x14>
 800decc:	2316      	movs	r3, #22
 800dece:	6003      	str	r3, [r0, #0]
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295
 800ded4:	bd38      	pop	{r3, r4, r5, pc}
 800ded6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ded8:	b112      	cbz	r2, 800dee0 <_raise_r+0x1e>
 800deda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dede:	b94b      	cbnz	r3, 800def4 <_raise_r+0x32>
 800dee0:	4628      	mov	r0, r5
 800dee2:	f000 f831 	bl	800df48 <_getpid_r>
 800dee6:	4622      	mov	r2, r4
 800dee8:	4601      	mov	r1, r0
 800deea:	4628      	mov	r0, r5
 800deec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def0:	f000 b818 	b.w	800df24 <_kill_r>
 800def4:	2b01      	cmp	r3, #1
 800def6:	d00a      	beq.n	800df0e <_raise_r+0x4c>
 800def8:	1c59      	adds	r1, r3, #1
 800defa:	d103      	bne.n	800df04 <_raise_r+0x42>
 800defc:	2316      	movs	r3, #22
 800defe:	6003      	str	r3, [r0, #0]
 800df00:	2001      	movs	r0, #1
 800df02:	e7e7      	b.n	800ded4 <_raise_r+0x12>
 800df04:	2100      	movs	r1, #0
 800df06:	4620      	mov	r0, r4
 800df08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df0c:	4798      	blx	r3
 800df0e:	2000      	movs	r0, #0
 800df10:	e7e0      	b.n	800ded4 <_raise_r+0x12>
	...

0800df14 <raise>:
 800df14:	4b02      	ldr	r3, [pc, #8]	@ (800df20 <raise+0xc>)
 800df16:	4601      	mov	r1, r0
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	f7ff bfd2 	b.w	800dec2 <_raise_r>
 800df1e:	bf00      	nop
 800df20:	20000018 	.word	0x20000018

0800df24 <_kill_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	2300      	movs	r3, #0
 800df28:	4d06      	ldr	r5, [pc, #24]	@ (800df44 <_kill_r+0x20>)
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	4611      	mov	r1, r2
 800df30:	602b      	str	r3, [r5, #0]
 800df32:	f7f4 f95a 	bl	80021ea <_kill>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	d102      	bne.n	800df40 <_kill_r+0x1c>
 800df3a:	682b      	ldr	r3, [r5, #0]
 800df3c:	b103      	cbz	r3, 800df40 <_kill_r+0x1c>
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	bd38      	pop	{r3, r4, r5, pc}
 800df42:	bf00      	nop
 800df44:	20000534 	.word	0x20000534

0800df48 <_getpid_r>:
 800df48:	f7f4 b947 	b.w	80021da <_getpid>

0800df4c <_init>:
 800df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4e:	bf00      	nop
 800df50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df52:	bc08      	pop	{r3}
 800df54:	469e      	mov	lr, r3
 800df56:	4770      	bx	lr

0800df58 <_fini>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	bf00      	nop
 800df5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df5e:	bc08      	pop	{r3}
 800df60:	469e      	mov	lr, r3
 800df62:	4770      	bx	lr
