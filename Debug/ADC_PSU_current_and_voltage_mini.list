
ADC_PSU_current_and_voltage_mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd4c  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800dfa8  0800dfa8  0000efa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e480  0800e480  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e480  0800e480  0000f480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e488  0800e488  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e488  0800e488  0000f488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e48c  0800e48c  0000f48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e490  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d4  0800e664  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800e664  00010544  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f4e  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002768  00000000  00000000  00028158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0002a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd1  00000000  00000000  0002bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235c8  00000000  00000000  0002ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001824b  00000000  00000000  000502a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e56e9  00000000  00000000  000684ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dbd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e70  00000000  00000000  0014dc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  00154a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800df8c 	.word	0x0800df8c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	0800df8c 	.word	0x0800df8c

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:
uint32_t NowMillis, SebelumMillis;
float temperature,voltage1,current1,voltage2,current2,konsumsiEnergi;
float read_data_float, write_value_float,arusFiltered;
int before = 0;

void __io_putchar(char ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	230a      	movs	r3, #10
 8001042:	2201      	movs	r2, #1
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001046:	f007 fecb 	bl	8008de0 <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000334 	.word	0x20000334

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 fa41 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f875 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 faa1 	bl	80015ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800106a:	f000 f8e7 	bl	800123c <MX_ADC1_Init>
  MX_SPI1_Init();
 800106e:	f000 f94b 	bl	8001308 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001072:	f000 fa4f 	bl	8001514 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001076:	f000 f99d 	bl	80013b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
  // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
  Beep_Beep();
 800107a:	f000 fe63 	bl	8001d44 <Beep_Beep>

  uint32_t address = 0x000000;
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 3; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	e013      	b.n	80010b0 <main+0x58>
	  ReadData(address, sizeof(float));
 8001088:	2104      	movs	r1, #4
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f000 fdf6 	bl	8001c7c <ReadData>
	  if (!isnan(read_data_float)) {
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <main+0xe8>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	eef4 7a67 	vcmp.f32	s15, s15
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d601      	bvs.n	80010a4 <main+0x4c>
		  break;
 80010a0:	bf00      	nop
 80010a2:	e008      	b.n	80010b6 <main+0x5e>
	  }
	  HAL_Delay(50);
 80010a4:	2032      	movs	r0, #50	@ 0x32
 80010a6:	f001 fadb 	bl	8002660 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3301      	adds	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dde8      	ble.n	8001088 <main+0x30>
  {
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//	  HAL_Delay(200);
	  ReadData(address, sizeof(float));
 80010b6:	2104      	movs	r1, #4
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f000 fddf 	bl	8001c7c <ReadData>
	  //printf("Read Data: %f |", read_data_float);
	  //Membaca ADC
	  ReadADC_voltage_current();
 80010be:	f000 faf7 	bl	80016b0 <ReadADC_voltage_current>
	  //printf("volt : %.4f |", voltage1);
	  //printf("Arus : %.4f A |", current1);
	  if(voltage1 <13.1 && before == 0){
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <main+0xec>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa52 	bl	8000570 <__aeabi_f2d>
 80010cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001138 <main+0xe0>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fd17 	bl	8000b04 <__aeabi_dcmplt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d012      	beq.n	8001102 <main+0xaa>
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <main+0xf0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10e      	bne.n	8001102 <main+0xaa>
		  write_value(konsumsiEnergi, address);
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <main+0xf4>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	6838      	ldr	r0, [r7, #0]
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	f000 fd42 	bl	8001b78 <write_value>
		  HAL_Delay(50);
 80010f4:	2032      	movs	r0, #50	@ 0x32
 80010f6:	f001 fab3 	bl	8002660 <HAL_Delay>
		  before = 1;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <main+0xf0>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e013      	b.n	800112a <main+0xd2>
	  }
	  else if(voltage1 > 13.1 && before == 1){
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <main+0xec>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa32 	bl	8000570 <__aeabi_f2d>
 800110c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001138 <main+0xe0>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fd15 	bl	8000b40 <__aeabi_dcmpgt>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <main+0xd2>
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <main+0xf0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d102      	bne.n	800112a <main+0xd2>
		  before=0;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <main+0xf0>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
	  }
	  //printf("Consumption: %.4f Ah\n", konsumsiEnergi);
	  HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f001 fa98 	bl	8002660 <HAL_Delay>
	  ReadData(address, sizeof(float));
 8001130:	e7c1      	b.n	80010b6 <main+0x5e>
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	33333333 	.word	0x33333333
 800113c:	402a3333 	.word	0x402a3333
 8001140:	200003e4 	.word	0x200003e4
 8001144:	200003d0 	.word	0x200003d0
 8001148:	200003ec 	.word	0x200003ec
 800114c:	200003e0 	.word	0x200003e0

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09c      	sub	sp, #112	@ 0x70
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2250      	movs	r2, #80	@ 0x50
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f009 fb1f 	bl	800a7a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <SystemClock_Config+0xe4>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	4a2e      	ldr	r2, [pc, #184]	@ (8001234 <SystemClock_Config+0xe4>)
 800117c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001180:	6113      	str	r3, [r2, #16]
 8001182:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <SystemClock_Config+0xe4>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800118e:	bf00      	nop
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <SystemClock_Config+0xe4>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b08      	cmp	r3, #8
 800119a:	d1f9      	bne.n	8001190 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 800119c:	2312      	movs	r3, #18
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80011a4:	2308      	movs	r3, #8
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2340      	movs	r3, #64	@ 0x40
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80011ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80011b2:	2320      	movs	r3, #32
 80011b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 80011c2:	2340      	movs	r3, #64	@ 0x40
 80011c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80011d2:	2304      	movs	r3, #4
 80011d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 ffd0 	bl	8004188 <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011ee:	f000 fde3 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	231f      	movs	r3, #31
 80011f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80011fa:	2308      	movs	r3, #8
 80011fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fbf1 	bl	80049f8 <HAL_RCC_ClockConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800121c:	f000 fdcc 	bl	8001db8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <SystemClock_Config+0xe8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <SystemClock_Config+0xe8>)
 8001226:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3770      	adds	r7, #112	@ 0x70
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	44020800 	.word	0x44020800
 8001238:	40022000 	.word	0x40022000

0800123c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f009 faaa 	bl	800a7a2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001250:	4a2b      	ldr	r2, [pc, #172]	@ (8001300 <MX_ADC1_Init+0xc4>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001256:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800125a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125c:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <MX_ADC1_Init+0xc0>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <MX_ADC1_Init+0xc0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126e:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001270:	2204      	movs	r2, #4
 8001272:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001276:	2200      	movs	r2, #0
 8001278:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_ADC1_Init+0xc0>)
 800127c:	2201      	movs	r2, #1
 800127e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001282:	2201      	movs	r2, #1
 8001284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_ADC1_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_ADC1_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_ADC1_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_ADC1_Init+0xc0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <MX_ADC1_Init+0xc0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b6:	4811      	ldr	r0, [pc, #68]	@ (80012fc <MX_ADC1_Init+0xc0>)
 80012b8:	f001 fc7a 	bl	8002bb0 <HAL_ADC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012c2:	f000 fd79 	bl	8001db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_ADC1_Init+0xc8>)
 80012c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ca:	2306      	movs	r3, #6
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d2:	237f      	movs	r3, #127	@ 0x7f
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d6:	2304      	movs	r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_ADC1_Init+0xc0>)
 80012e4:	f001 fee4 	bl	80030b0 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012ee:	f000 fd63 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f0 	.word	0x200001f0
 8001300:	42028000 	.word	0x42028000
 8001304:	14f00020 	.word	0x14f00020

08001308 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800130e:	4a28      	ldr	r2, [pc, #160]	@ (80013b0 <MX_SPI1_Init+0xa8>)
 8001310:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001314:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001318:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001320:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001322:	2203      	movs	r2, #3
 8001324:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001334:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001338:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001354:	2207      	movs	r2, #7
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800135e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_SPI1_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_SPI1_Init+0xa4>)
 8001398:	f005 ff3e 	bl	8007218 <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80013a2:	f000 fd09 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000258 	.word	0x20000258
 80013b0:	40013000 	.word	0x40013000

080013b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b09c      	sub	sp, #112	@ 0x70
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2234      	movs	r2, #52	@ 0x34
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f009 f9d7 	bl	800a7a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f4:	4b45      	ldr	r3, [pc, #276]	@ (800150c <MX_TIM1_Init+0x158>)
 80013f6:	4a46      	ldr	r2, [pc, #280]	@ (8001510 <MX_TIM1_Init+0x15c>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013fa:	4b44      	ldr	r3, [pc, #272]	@ (800150c <MX_TIM1_Init+0x158>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b42      	ldr	r3, [pc, #264]	@ (800150c <MX_TIM1_Init+0x158>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001406:	4b41      	ldr	r3, [pc, #260]	@ (800150c <MX_TIM1_Init+0x158>)
 8001408:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800140c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b3f      	ldr	r3, [pc, #252]	@ (800150c <MX_TIM1_Init+0x158>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001414:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <MX_TIM1_Init+0x158>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b3c      	ldr	r3, [pc, #240]	@ (800150c <MX_TIM1_Init+0x158>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001420:	483a      	ldr	r0, [pc, #232]	@ (800150c <MX_TIM1_Init+0x158>)
 8001422:	f006 fc74 	bl	8007d0e <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fcc4 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001434:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001436:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800143a:	4619      	mov	r1, r3
 800143c:	4833      	ldr	r0, [pc, #204]	@ (800150c <MX_TIM1_Init+0x158>)
 800143e:	f006 ff01 	bl	8008244 <HAL_TIM_ConfigClockSource>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001448:	f000 fcb6 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800144c:	482f      	ldr	r0, [pc, #188]	@ (800150c <MX_TIM1_Init+0x158>)
 800144e:	f006 fcb5 	bl	8007dbc <HAL_TIM_PWM_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001458:	f000 fcae 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001468:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800146c:	4619      	mov	r1, r3
 800146e:	4827      	ldr	r0, [pc, #156]	@ (800150c <MX_TIM1_Init+0x158>)
 8001470:	f007 fb78 	bl	8008b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800147a:	f000 fc9d 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	@ 0x60
 8001480:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	481a      	ldr	r0, [pc, #104]	@ (800150c <MX_TIM1_Init+0x158>)
 80014a4:	f006 fdba 	bl	800801c <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014ae:	f000 fc83 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_TIM1_Init+0x158>)
 80014f0:	f007 fba0 	bl	8008c34 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80014fa:	f000 fc5d 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <MX_TIM1_Init+0x158>)
 8001500:	f000 fdba 	bl	8002078 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3770      	adds	r7, #112	@ 0x70
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002e8 	.word	0x200002e8
 8001510:	40012c00 	.word	0x40012c00

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 800151a:	4a23      	ldr	r2, [pc, #140]	@ (80015a8 <MX_USART1_UART_Init+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 800155e:	f007 fbef 	bl	8008d40 <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001568:	f000 fc26 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001570:	f008 f8aa 	bl	80096c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800157a:	f000 fc1d 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001582:	f008 f8df 	bl	8009744 <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800158c:	f000 fc14 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_USART1_UART_Init+0x90>)
 8001592:	f008 f860 	bl	8009656 <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 fc0c 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000334 	.word	0x20000334
 80015a8:	40013800 	.word	0x40013800

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b36      	ldr	r3, [pc, #216]	@ (800169c <MX_GPIO_Init+0xf0>)
 80015c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c8:	4a34      	ldr	r2, [pc, #208]	@ (800169c <MX_GPIO_Init+0xf0>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d2:	4b32      	ldr	r3, [pc, #200]	@ (800169c <MX_GPIO_Init+0xf0>)
 80015d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <MX_GPIO_Init+0xf0>)
 80015e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e6:	4a2d      	ldr	r2, [pc, #180]	@ (800169c <MX_GPIO_Init+0xf0>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <MX_GPIO_Init+0xf0>)
 80015f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b27      	ldr	r3, [pc, #156]	@ (800169c <MX_GPIO_Init+0xf0>)
 8001600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001604:	4a25      	ldr	r2, [pc, #148]	@ (800169c <MX_GPIO_Init+0xf0>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <MX_GPIO_Init+0xf0>)
 8001610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2110      	movs	r1, #16
 8001620:	481f      	ldr	r0, [pc, #124]	@ (80016a0 <MX_GPIO_Init+0xf4>)
 8001622:	f002 fd99 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BATT1_Pin|BATT2_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800162c:	481d      	ldr	r0, [pc, #116]	@ (80016a4 <MX_GPIO_Init+0xf8>)
 800162e:	f002 fd93 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <MX_GPIO_Init+0xfc>)
 8001638:	f002 fd8e 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800163c:	2310      	movs	r3, #16
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <MX_GPIO_Init+0xf4>)
 8001654:	f002 fc2e 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BATT1_Pin BATT2_Pin */
  GPIO_InitStruct.Pin = BATT1_Pin|BATT2_Pin;
 8001658:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800165c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MX_GPIO_Init+0xf8>)
 8001672:	f002 fc1f 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	4806      	ldr	r0, [pc, #24]	@ (80016a8 <MX_GPIO_Init+0xfc>)
 800168e:	f002 fc11 	bl	8003eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001692:	bf00      	nop
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	44020c00 	.word	0x44020c00
 80016a0:	42020000 	.word	0x42020000
 80016a4:	42020400 	.word	0x42020400
 80016a8:	42020800 	.word	0x42020800
 80016ac:	00000000 	.word	0x00000000

080016b0 <ReadADC_voltage_current>:

/* USER CODE BEGIN 4 */
void ReadADC_voltage_current(void){
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b092      	sub	sp, #72	@ 0x48
 80016b4:	af00      	add	r7, sp, #0
	uint32_t sumADC_voltage1, sumADC_current1,sumADC_voltage2, sumADC_current2;
	uint16_t value_voltage1, value_current1, value_voltage2, value_current2;
	float voltage_current1,voltage_current2;

	ADC_ChannelConfTypeDef sConfig = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 f870 	bl	800a7a2 <memset>
	sumADC_voltage1 = sumADC_current1 = sumADC_voltage2 = sumADC_current2 = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80016ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016d0:	647b      	str	r3, [r7, #68]	@ 0x44
	for (int i = 0; i < 500; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80016d6:	e077      	b.n	80017c8 <ReadADC_voltage_current+0x118>
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d8:	2306      	movs	r3, #6
 80016da:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 80016dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80016e0:	60fb      	str	r3, [r7, #12]

		//ADC VOLTAGE BATT1
		sConfig.Channel = ADC_CHANNEL_5;
 80016e2:	4bc9      	ldr	r3, [pc, #804]	@ (8001a08 <ReadADC_voltage_current+0x358>)
 80016e4:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	48c8      	ldr	r0, [pc, #800]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 80016ec:	f001 fce0 	bl	80030b0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80016f0:	48c6      	ldr	r0, [pc, #792]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 80016f2:	f001 fbab 	bl	8002e4c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80016f6:	f04f 31ff 	mov.w	r1, #4294967295
 80016fa:	48c4      	ldr	r0, [pc, #784]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 80016fc:	f001 fc3c 	bl	8002f78 <HAL_ADC_PollForConversion>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <ReadADC_voltage_current+0x64>
			sumADC_voltage1 += HAL_ADC_GetValue(&hadc1);
 8001706:	48c1      	ldr	r0, [pc, #772]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001708:	f001 fcc5 	bl	8003096 <HAL_ADC_GetValue>
 800170c:	4602      	mov	r2, r0
 800170e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001710:	4413      	add	r3, r2
 8001712:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		HAL_ADC_Stop(&hadc1);
 8001714:	48bd      	ldr	r0, [pc, #756]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001716:	f001 fbfc 	bl	8002f12 <HAL_ADC_Stop>

		//ADC VOLTAGE BATT2
		sConfig.Channel = ADC_CHANNEL_4;
 800171a:	4bbd      	ldr	r3, [pc, #756]	@ (8001a10 <ReadADC_voltage_current+0x360>)
 800171c:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	48ba      	ldr	r0, [pc, #744]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001724:	f001 fcc4 	bl	80030b0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001728:	48b8      	ldr	r0, [pc, #736]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 800172a:	f001 fb8f 	bl	8002e4c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800172e:	f04f 31ff 	mov.w	r1, #4294967295
 8001732:	48b6      	ldr	r0, [pc, #728]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001734:	f001 fc20 	bl	8002f78 <HAL_ADC_PollForConversion>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <ReadADC_voltage_current+0x9c>
			sumADC_voltage2 += HAL_ADC_GetValue(&hadc1);
 800173e:	48b3      	ldr	r0, [pc, #716]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001740:	f001 fca9 	bl	8003096 <HAL_ADC_GetValue>
 8001744:	4602      	mov	r2, r0
 8001746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001748:	4413      	add	r3, r2
 800174a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		HAL_ADC_Stop(&hadc1);
 800174c:	48af      	ldr	r0, [pc, #700]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 800174e:	f001 fbe0 	bl	8002f12 <HAL_ADC_Stop>

		//ADC CURRENT BATT1
		sConfig.Channel = ADC_CHANNEL_1;
 8001752:	4bb0      	ldr	r3, [pc, #704]	@ (8001a14 <ReadADC_voltage_current+0x364>)
 8001754:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	48ac      	ldr	r0, [pc, #688]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 800175c:	f001 fca8 	bl	80030b0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001760:	48aa      	ldr	r0, [pc, #680]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001762:	f001 fb73 	bl	8002e4c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001766:	f04f 31ff 	mov.w	r1, #4294967295
 800176a:	48a8      	ldr	r0, [pc, #672]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 800176c:	f001 fc04 	bl	8002f78 <HAL_ADC_PollForConversion>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <ReadADC_voltage_current+0xd4>
			sumADC_current1 += HAL_ADC_GetValue(&hadc1);
 8001776:	48a5      	ldr	r0, [pc, #660]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001778:	f001 fc8d 	bl	8003096 <HAL_ADC_GetValue>
 800177c:	4602      	mov	r2, r0
 800177e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001780:	4413      	add	r3, r2
 8001782:	643b      	str	r3, [r7, #64]	@ 0x40
		}
		HAL_ADC_Stop(&hadc1);
 8001784:	48a1      	ldr	r0, [pc, #644]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001786:	f001 fbc4 	bl	8002f12 <HAL_ADC_Stop>

//		ADC CURRENT BATT2
		sConfig.Channel = ADC_CHANNEL_10;
 800178a:	4ba3      	ldr	r3, [pc, #652]	@ (8001a18 <ReadADC_voltage_current+0x368>)
 800178c:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	489e      	ldr	r0, [pc, #632]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 8001794:	f001 fc8c 	bl	80030b0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001798:	489c      	ldr	r0, [pc, #624]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 800179a:	f001 fb57 	bl	8002e4c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800179e:	f04f 31ff 	mov.w	r1, #4294967295
 80017a2:	489a      	ldr	r0, [pc, #616]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 80017a4:	f001 fbe8 	bl	8002f78 <HAL_ADC_PollForConversion>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <ReadADC_voltage_current+0x10c>
			sumADC_current2 += HAL_ADC_GetValue(&hadc1);
 80017ae:	4897      	ldr	r0, [pc, #604]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 80017b0:	f001 fc71 	bl	8003096 <HAL_ADC_GetValue>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b8:	4413      	add	r3, r2
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		HAL_ADC_Stop(&hadc1);
 80017bc:	4893      	ldr	r0, [pc, #588]	@ (8001a0c <ReadADC_voltage_current+0x35c>)
 80017be:	f001 fba8 	bl	8002f12 <HAL_ADC_Stop>
	for (int i = 0; i < 500; i++) {
 80017c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c4:	3301      	adds	r3, #1
 80017c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017ce:	db83      	blt.n	80016d8 <ReadADC_voltage_current+0x28>
	}
	value_voltage1 = ((sumADC_voltage1 / 500) - 1317) * 2372 / (3689 - 1317);
 80017d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d2:	4a92      	ldr	r2, [pc, #584]	@ (8001a1c <ReadADC_voltage_current+0x36c>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	f640 1244 	movw	r2, #2372	@ 0x944
 80017de:	fb03 f202 	mul.w	r2, r3, r2
 80017e2:	4b8f      	ldr	r3, [pc, #572]	@ (8001a20 <ReadADC_voltage_current+0x370>)
 80017e4:	4413      	add	r3, r2
 80017e6:	4a8f      	ldr	r2, [pc, #572]	@ (8001a24 <ReadADC_voltage_current+0x374>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0a9b      	lsrs	r3, r3, #10
 80017ee:	867b      	strh	r3, [r7, #50]	@ 0x32
	value_current1 = ((sumADC_current1 / 500) - 1480) * 2552 / (4032 - 1480);
 80017f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017f2:	4a8a      	ldr	r2, [pc, #552]	@ (8001a1c <ReadADC_voltage_current+0x36c>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	f640 12f8 	movw	r2, #2552	@ 0x9f8
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	f5a3 1366 	sub.w	r3, r3, #3768320	@ 0x398000
 8001806:	f5a3 5307 	sub.w	r3, r3, #8640	@ 0x21c0
 800180a:	4a87      	ldr	r2, [pc, #540]	@ (8001a28 <ReadADC_voltage_current+0x378>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0adb      	lsrs	r3, r3, #11
 8001812:	863b      	strh	r3, [r7, #48]	@ 0x30
	value_voltage2 = ((sumADC_voltage2 / 500) - 1317) * 2380 / (3697 - 1317);
 8001814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001816:	4a81      	ldr	r2, [pc, #516]	@ (8001a1c <ReadADC_voltage_current+0x36c>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	f640 124c 	movw	r2, #2380	@ 0x94c
 8001822:	fb03 f202 	mul.w	r2, r3, r2
 8001826:	4b81      	ldr	r3, [pc, #516]	@ (8001a2c <ReadADC_voltage_current+0x37c>)
 8001828:	4413      	add	r3, r2
 800182a:	4a81      	ldr	r2, [pc, #516]	@ (8001a30 <ReadADC_voltage_current+0x380>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0adb      	lsrs	r3, r3, #11
 8001832:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	value_current2 = ((sumADC_current2 / 500) - 1336) * 2474 / (3810 - 1336);
 8001834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001836:	4a79      	ldr	r2, [pc, #484]	@ (8001a1c <ReadADC_voltage_current+0x36c>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 8001842:	fb03 f202 	mul.w	r2, r3, r2
 8001846:	4b7b      	ldr	r3, [pc, #492]	@ (8001a34 <ReadADC_voltage_current+0x384>)
 8001848:	4413      	add	r3, r2
 800184a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a38 <ReadADC_voltage_current+0x388>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	0a9b      	lsrs	r3, r3, #10
 8001852:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	voltage1 = (value_voltage1 * 14.6) / 2372;
 8001854:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe78 	bl	800054c <__aeabi_i2d>
 800185c:	a358      	add	r3, pc, #352	@ (adr r3, 80019c0 <ReadADC_voltage_current+0x310>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fedd 	bl	8000620 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	a356      	add	r3, pc, #344	@ (adr r3, 80019c8 <ReadADC_voltage_current+0x318>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fffe 	bl	8000874 <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9c6 	bl	8000c10 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	4a6d      	ldr	r2, [pc, #436]	@ (8001a3c <ReadADC_voltage_current+0x38c>)
 8001888:	6013      	str	r3, [r2, #0]
	voltage_current1 = (value_current1 * 3.31) / 2552;
 800188a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe5d 	bl	800054c <__aeabi_i2d>
 8001892:	a34f      	add	r3, pc, #316	@ (adr r3, 80019d0 <ReadADC_voltage_current+0x320>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe fec2 	bl	8000620 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	a34c      	add	r3, pc, #304	@ (adr r3, 80019d8 <ReadADC_voltage_current+0x328>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe ffe3 	bl	8000874 <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f9ab 	bl	8000c10 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	current1 = fabs((voltage_current1 - 2.5305) / 0.1041);
 80018be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018c0:	f7fe fe56 	bl	8000570 <__aeabi_f2d>
 80018c4:	a346      	add	r3, pc, #280	@ (adr r3, 80019e0 <ReadADC_voltage_current+0x330>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fcf1 	bl	80002b0 <__aeabi_dsub>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	a344      	add	r3, pc, #272	@ (adr r3, 80019e8 <ReadADC_voltage_current+0x338>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ffca 	bl	8000874 <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f992 	bl	8000c10 <__aeabi_d2f>
 80018ec:	ee07 0a90 	vmov	s15, r0
 80018f0:	eef0 7ae7 	vabs.f32	s15, s15
 80018f4:	4b52      	ldr	r3, [pc, #328]	@ (8001a40 <ReadADC_voltage_current+0x390>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]

	voltage2 = (value_voltage2 * 14.6) / 2380;
 80018fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe25 	bl	800054c <__aeabi_i2d>
 8001902:	a32f      	add	r3, pc, #188	@ (adr r3, 80019c0 <ReadADC_voltage_current+0x310>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe8a 	bl	8000620 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	a336      	add	r3, pc, #216	@ (adr r3, 80019f0 <ReadADC_voltage_current+0x340>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe ffab 	bl	8000874 <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f973 	bl	8000c10 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	4a45      	ldr	r2, [pc, #276]	@ (8001a44 <ReadADC_voltage_current+0x394>)
 800192e:	6013      	str	r3, [r2, #0]
	voltage_current2 = (value_current2 * 3.31) / 2474;
 8001930:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe0a 	bl	800054c <__aeabi_i2d>
 8001938:	a325      	add	r3, pc, #148	@ (adr r3, 80019d0 <ReadADC_voltage_current+0x320>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fe6f 	bl	8000620 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	a32b      	add	r3, pc, #172	@ (adr r3, 80019f8 <ReadADC_voltage_current+0x348>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe ff90 	bl	8000874 <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f958 	bl	8000c10 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
	current2 = fabs((voltage_current2 - 2.437) / 0.1041);
 8001964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001966:	f7fe fe03 	bl	8000570 <__aeabi_f2d>
 800196a:	a325      	add	r3, pc, #148	@ (adr r3, 8001a00 <ReadADC_voltage_current+0x350>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fc9e 	bl	80002b0 <__aeabi_dsub>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	a31a      	add	r3, pc, #104	@ (adr r3, 80019e8 <ReadADC_voltage_current+0x338>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe ff77 	bl	8000874 <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f93f 	bl	8000c10 <__aeabi_d2f>
 8001992:	ee07 0a90 	vmov	s15, r0
 8001996:	eef0 7ae7 	vabs.f32	s15, s15
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <ReadADC_voltage_current+0x398>)
 800199c:	edc3 7a00 	vstr	s15, [r3]

	//Konsumsi Arus Algoritma
	NowMillis = HAL_GetTick();
 80019a0:	f000 fe52 	bl	8002648 <HAL_GetTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <ReadADC_voltage_current+0x39c>)
 80019a8:	6013      	str	r3, [r2, #0]
	if (NowMillis - SebelumMillis >= 1000){
 80019aa:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <ReadADC_voltage_current+0x39c>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <ReadADC_voltage_current+0x3a0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019b8:	f0c0 8086 	bcc.w	8001ac8 <ReadADC_voltage_current+0x418>
 80019bc:	e04a      	b.n	8001a54 <ReadADC_voltage_current+0x3a4>
 80019be:	bf00      	nop
 80019c0:	33333333 	.word	0x33333333
 80019c4:	402d3333 	.word	0x402d3333
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40a28800 	.word	0x40a28800
 80019d0:	47ae147b 	.word	0x47ae147b
 80019d4:	400a7ae1 	.word	0x400a7ae1
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40a3f000 	.word	0x40a3f000
 80019e0:	c8b43958 	.word	0xc8b43958
 80019e4:	40043e76 	.word	0x40043e76
 80019e8:	2f837b4a 	.word	0x2f837b4a
 80019ec:	3fbaa64c 	.word	0x3fbaa64c
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40a29800 	.word	0x40a29800
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40a35400 	.word	0x40a35400
 8001a00:	db22d0e5 	.word	0xdb22d0e5
 8001a04:	40037ef9 	.word	0x40037ef9
 8001a08:	14f00020 	.word	0x14f00020
 8001a0c:	200001f0 	.word	0x200001f0
 8001a10:	10c00010 	.word	0x10c00010
 8001a14:	04300002 	.word	0x04300002
 8001a18:	2a000400 	.word	0x2a000400
 8001a1c:	10624dd3 	.word	0x10624dd3
 8001a20:	ffd0552c 	.word	0xffd0552c
 8001a24:	6e8419e7 	.word	0x6e8419e7
 8001a28:	cd712753 	.word	0xcd712753
 8001a2c:	ffd02c04 	.word	0xffd02c04
 8001a30:	dc4a00dd 	.word	0xdc4a00dd
 8001a34:	ffcd90d0 	.word	0xffcd90d0
 8001a38:	69f5a703 	.word	0x69f5a703
 8001a3c:	200003d0 	.word	0x200003d0
 8001a40:	200003d4 	.word	0x200003d4
 8001a44:	200003d8 	.word	0x200003d8
 8001a48:	200003dc 	.word	0x200003dc
 8001a4c:	200003c8 	.word	0x200003c8
 8001a50:	200003cc 	.word	0x200003cc
		arusFiltered = 0.2 * current1 + 0.8 * arusFiltered;
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <ReadADC_voltage_current+0x490>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd89 	bl	8000570 <__aeabi_f2d>
 8001a5e:	a334      	add	r3, pc, #208	@ (adr r3, 8001b30 <ReadADC_voltage_current+0x480>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fddc 	bl	8000620 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	461d      	mov	r5, r3
 8001a70:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <ReadADC_voltage_current+0x494>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd7b 	bl	8000570 <__aeabi_f2d>
 8001a7a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001b38 <ReadADC_voltage_current+0x488>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdce 	bl	8000620 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fc12 	bl	80002b4 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f8ba 	bl	8000c10 <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a29      	ldr	r2, [pc, #164]	@ (8001b44 <ReadADC_voltage_current+0x494>)
 8001aa0:	6013      	str	r3, [r2, #0]
		konsumsiEnergi += (arusFiltered / 3600);
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <ReadADC_voltage_current+0x494>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001b48 <ReadADC_voltage_current+0x498>
 8001aac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ab0:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <ReadADC_voltage_current+0x49c>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <ReadADC_voltage_current+0x49c>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
		SebelumMillis = NowMillis;
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <ReadADC_voltage_current+0x4a0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	@ (8001b54 <ReadADC_voltage_current+0x4a4>)
 8001ac6:	6013      	str	r3, [r2, #0]
	}

	//printf("Raw Data voltage: %d |", value_voltage1);
	//

	printf("Voltage1 : %.4f |", voltage1);
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <ReadADC_voltage_current+0x4a8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd4f 	bl	8000570 <__aeabi_f2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4821      	ldr	r0, [pc, #132]	@ (8001b5c <ReadADC_voltage_current+0x4ac>)
 8001ad8:	f008 fdee 	bl	800a6b8 <iprintf>
	printf("current1 : %.4f |", current1);
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <ReadADC_voltage_current+0x490>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd45 	bl	8000570 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	481d      	ldr	r0, [pc, #116]	@ (8001b60 <ReadADC_voltage_current+0x4b0>)
 8001aec:	f008 fde4 	bl	800a6b8 <iprintf>
	printf("Voltage2 : %.4f |", voltage2);
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <ReadADC_voltage_current+0x4b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd3b 	bl	8000570 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <ReadADC_voltage_current+0x4b8>)
 8001b00:	f008 fdda 	bl	800a6b8 <iprintf>
	printf("current2 : %.4f |", current2);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <ReadADC_voltage_current+0x4bc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd31 	bl	8000570 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4817      	ldr	r0, [pc, #92]	@ (8001b70 <ReadADC_voltage_current+0x4c0>)
 8001b14:	f008 fdd0 	bl	800a6b8 <iprintf>
    printf("Raw data curren: %d \n", value_voltage2);
 8001b18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4815      	ldr	r0, [pc, #84]	@ (8001b74 <ReadADC_voltage_current+0x4c4>)
 8001b1e:	f008 fdcb 	bl	800a6b8 <iprintf>
}
 8001b22:	bf00      	nop
 8001b24:	3748      	adds	r7, #72	@ 0x48
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	f3af 8000 	nop.w
 8001b30:	9999999a 	.word	0x9999999a
 8001b34:	3fc99999 	.word	0x3fc99999
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	3fe99999 	.word	0x3fe99999
 8001b40:	200003d4 	.word	0x200003d4
 8001b44:	200003e8 	.word	0x200003e8
 8001b48:	45610000 	.word	0x45610000
 8001b4c:	200003e0 	.word	0x200003e0
 8001b50:	200003c8 	.word	0x200003c8
 8001b54:	200003cc 	.word	0x200003cc
 8001b58:	200003d0 	.word	0x200003d0
 8001b5c:	0800dfa8 	.word	0x0800dfa8
 8001b60:	0800dfbc 	.word	0x0800dfbc
 8001b64:	200003d8 	.word	0x200003d8
 8001b68:	0800dfd0 	.word	0x0800dfd0
 8001b6c:	200003dc 	.word	0x200003dc
 8001b70:	0800dfe4 	.word	0x0800dfe4
 8001b74:	0800dff8 	.word	0x0800dff8

08001b78 <write_value>:

// Fungsi untuk menghapus dan menulis nilai ke flash memory
void write_value(float value, uint32_t address) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b82:	6038      	str	r0, [r7, #0]
	uint8_t write_enable_cmd = 0x06;
 8001b84:	2306      	movs	r3, #6
 8001b86:	75fb      	strb	r3, [r7, #23]
    uint8_t data[sizeof(value)];
    memcpy(data, &value, sizeof(value));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	613b      	str	r3, [r7, #16]

    // Perintah Erase Sector (4 KB)
    uint8_t erase_cmd[4];
    erase_cmd[0] = 0x20;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	733b      	strb	r3, [r7, #12]
    erase_cmd[1] = (address >> 16) & 0xFF;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	737b      	strb	r3, [r7, #13]
    erase_cmd[2] = (address >> 8) & 0xFF;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	73bb      	strb	r3, [r7, #14]
    erase_cmd[3] = address & 0xFF;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	73fb      	strb	r3, [r7, #15]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2110      	movs	r1, #16
 8001baa:	4832      	ldr	r0, [pc, #200]	@ (8001c74 <write_value+0xfc>)
 8001bac:	f002 fad4 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 8001bb0:	f107 0117 	add.w	r1, r7, #23
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	2201      	movs	r2, #1
 8001bba:	482f      	ldr	r0, [pc, #188]	@ (8001c78 <write_value+0x100>)
 8001bbc:	f005 fc28 	bl	8007410 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	482b      	ldr	r0, [pc, #172]	@ (8001c74 <write_value+0xfc>)
 8001bc6:	f002 fac7 	bl	8004158 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	4829      	ldr	r0, [pc, #164]	@ (8001c74 <write_value+0xfc>)
 8001bd0:	f002 fac2 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, erase_cmd, 4, HAL_MAX_DELAY);
 8001bd4:	f107 010c 	add.w	r1, r7, #12
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <write_value+0x100>)
 8001be0:	f005 fc16 	bl	8007410 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2110      	movs	r1, #16
 8001be8:	4822      	ldr	r0, [pc, #136]	@ (8001c74 <write_value+0xfc>)
 8001bea:	f002 fab5 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001bee:	2064      	movs	r0, #100	@ 0x64
 8001bf0:	f000 fd36 	bl	8002660 <HAL_Delay>


    // Perintah Write Data
    uint8_t write_cmd[4];
    write_cmd[0] = 0x02;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	723b      	strb	r3, [r7, #8]
    write_cmd[1] = (address >> 16) & 0xFF;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	727b      	strb	r3, [r7, #9]
    write_cmd[2] = (address >> 8) & 0xFF;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	72bb      	strb	r3, [r7, #10]
    write_cmd[3] = address & 0xFF;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	72fb      	strb	r3, [r7, #11]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2110      	movs	r1, #16
 8001c12:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <write_value+0xfc>)
 8001c14:	f002 faa0 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 8001c18:	f107 0117 	add.w	r1, r7, #23
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	2201      	movs	r2, #1
 8001c22:	4815      	ldr	r0, [pc, #84]	@ (8001c78 <write_value+0x100>)
 8001c24:	f005 fbf4 	bl	8007410 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	4811      	ldr	r0, [pc, #68]	@ (8001c74 <write_value+0xfc>)
 8001c2e:	f002 fa93 	bl	8004158 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2110      	movs	r1, #16
 8001c36:	480f      	ldr	r0, [pc, #60]	@ (8001c74 <write_value+0xfc>)
 8001c38:	f002 fa8e 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, write_cmd, 4, HAL_MAX_DELAY);
 8001c3c:	f107 0108 	add.w	r1, r7, #8
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295
 8001c44:	2204      	movs	r2, #4
 8001c46:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <write_value+0x100>)
 8001c48:	f005 fbe2 	bl	8007410 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 8001c4c:	f107 0110 	add.w	r1, r7, #16
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
 8001c54:	2204      	movs	r2, #4
 8001c56:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <write_value+0x100>)
 8001c58:	f005 fbda 	bl	8007410 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2110      	movs	r1, #16
 8001c60:	4804      	ldr	r0, [pc, #16]	@ (8001c74 <write_value+0xfc>)
 8001c62:	f002 fa79 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001c66:	2032      	movs	r0, #50	@ 0x32
 8001c68:	f000 fcfa 	bl	8002660 <HAL_Delay>
}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	42020000 	.word	0x42020000
 8001c78:	20000258 	.word	0x20000258

08001c7c <ReadData>:

// Fungsi untuk membaca data dari flash memory
void ReadData(uint32_t address, uint32_t length) {
 8001c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
 8001c88:	466b      	mov	r3, sp
 8001c8a:	461e      	mov	r6, r3
    uint8_t cmd[4];
    cmd[0] = 0x03;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	73fb      	strb	r3, [r7, #15]

    uint8_t data[length];
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	3b01      	subs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4688      	mov	r8, r1
 8001cb2:	4699      	mov	r9, r3
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	461d      	mov	r5, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	00eb      	lsls	r3, r5, #3
 8001cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cdc:	00e2      	lsls	r2, r4, #3
 8001cde:	1dcb      	adds	r3, r1, #7
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce8:	466b      	mov	r3, sp
 8001cea:	3300      	adds	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	4811      	ldr	r0, [pc, #68]	@ (8001d38 <ReadData+0xbc>)
 8001cf4:	f002 fa30 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8001cf8:	f107 010c 	add.w	r1, r7, #12
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	2204      	movs	r2, #4
 8001d02:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <ReadData+0xc0>)
 8001d04:	f005 fb84 	bl	8007410 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	480a      	ldr	r0, [pc, #40]	@ (8001d3c <ReadData+0xc0>)
 8001d14:	f005 fd7e 	bl	8007814 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2110      	movs	r1, #16
 8001d1c:	4806      	ldr	r0, [pc, #24]	@ (8001d38 <ReadData+0xbc>)
 8001d1e:	f002 fa1b 	bl	8004158 <HAL_GPIO_WritePin>

    memcpy(&read_data_float, data, sizeof(read_data_float));
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <ReadData+0xc4>)
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	46b5      	mov	sp, r6
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d38:	42020000 	.word	0x42020000
 8001d3c:	20000258 	.word	0x20000258
 8001d40:	200003e4 	.word	0x200003e4

08001d44 <Beep_Beep>:

// Fungsi untuk menghasilkan bunyi beep pada buzzer
void Beep_Beep(void) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4819      	ldr	r0, [pc, #100]	@ (8001db4 <Beep_Beep+0x70>)
 8001d4e:	f006 f897 	bl	8007e80 <HAL_TIM_PWM_Start>
	for (int i = 0; i < 2; i++) {
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	e024      	b.n	8001da2 <Beep_Beep+0x5e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <Beep_Beep+0x70>)
 8001d5c:	f006 f890 	bl	8007e80 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <Beep_Beep+0x70>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 8001d6a:	2064      	movs	r0, #100	@ 0x64
 8001d6c:	f000 fc78 	bl	8002660 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d70:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <Beep_Beep+0x70>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d78:	2032      	movs	r0, #50	@ 0x32
 8001d7a:	f000 fc71 	bl	8002660 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <Beep_Beep+0x70>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d86:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d88:	2032      	movs	r0, #50	@ 0x32
 8001d8a:	f000 fc69 	bl	8002660 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <Beep_Beep+0x70>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d96:	2032      	movs	r0, #50	@ 0x32
 8001d98:	f000 fc62 	bl	8002660 <HAL_Delay>
	for (int i = 0; i < 2; i++) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	ddd7      	ble.n	8001d58 <Beep_Beep+0x14>
	}
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200002e8 	.word	0x200002e8

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <Error_Handler+0x8>

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0ae      	sub	sp, #184	@ 0xb8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	2288      	movs	r2, #136	@ 0x88
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f008 fcd4 	bl	800a7a2 <memset>
  if(hadc->Instance==ADC1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a41      	ldr	r2, [pc, #260]	@ (8001f04 <HAL_ADC_MspInit+0x130>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d17a      	bne.n	8001efa <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001e04:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 f92f 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001e24:	f7ff ffc8 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e2e:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e38:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6a:	4a27      	ldr	r2, [pc, #156]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e74:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_ADC_MspInit+0x134>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = ACS_BATT2_Pin|ADC_BATT2_Pin;
 8001ea0:	2311      	movs	r3, #17
 8001ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4814      	ldr	r0, [pc, #80]	@ (8001f0c <HAL_ADC_MspInit+0x138>)
 8001eba:	f001 fffb 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ACS_BATT1_Pin;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(ACS_BATT1_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480e      	ldr	r0, [pc, #56]	@ (8001f10 <HAL_ADC_MspInit+0x13c>)
 8001ed8:	f001 ffec 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_BATT1_Pin;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(ADC_BATT1_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <HAL_ADC_MspInit+0x140>)
 8001ef6:	f001 ffdd 	bl	8003eb4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	37b8      	adds	r7, #184	@ 0xb8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	42028000 	.word	0x42028000
 8001f08:	44020c00 	.word	0x44020c00
 8001f0c:	42020800 	.word	0x42020800
 8001f10:	42020000 	.word	0x42020000
 8001f14:	42020400 	.word	0x42020400

08001f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0ae      	sub	sp, #184	@ 0xb8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	2288      	movs	r2, #136	@ 0x88
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f008 fc32 	bl	800a7a2 <memset>
  if(hspi->Instance==SPI1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a38      	ldr	r2, [pc, #224]	@ (8002024 <HAL_SPI_MspInit+0x10c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d169      	bne.n	800201c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f5a:	f107 0318 	add.w	r3, r7, #24
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 f88c 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001f6a:	f7ff ff25 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f74:	4a2c      	ldr	r2, [pc, #176]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001f76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f7a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001f80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f92:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_SPI_MspInit+0x110>)
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc8:	23c0      	movs	r3, #192	@ 0xc0
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fea:	4619      	mov	r1, r3
 8001fec:	480f      	ldr	r0, [pc, #60]	@ (800202c <HAL_SPI_MspInit+0x114>)
 8001fee:	f001 ff61 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200a:	2305      	movs	r3, #5
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	@ (8002030 <HAL_SPI_MspInit+0x118>)
 8002018:	f001 ff4c 	bl	8003eb4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800201c:	bf00      	nop
 800201e:	37b8      	adds	r7, #184	@ 0xb8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013000 	.word	0x40013000
 8002028:	44020c00 	.word	0x44020c00
 800202c:	42020000 	.word	0x42020000
 8002030:	42020400 	.word	0x42020400

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_TIM_Base_MspInit+0x3c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_TIM_Base_MspInit+0x40>)
 8002048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800204c:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_TIM_Base_MspInit+0x40>)
 800204e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002052:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <HAL_TIM_Base_MspInit+0x40>)
 8002058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800205c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40012c00 	.word	0x40012c00
 8002074:	44020c00 	.word	0x44020c00

08002078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a13      	ldr	r2, [pc, #76]	@ (80020e4 <HAL_TIM_MspPostInit+0x6c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d11f      	bne.n	80020da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_TIM_MspPostInit+0x70>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a0:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <HAL_TIM_MspPostInit+0x70>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_TIM_MspPostInit+0x70>)
 80020ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <HAL_TIM_MspPostInit+0x74>)
 80020d6:	f001 feed 	bl	8003eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40012c00 	.word	0x40012c00
 80020e8:	44020c00 	.word	0x44020c00
 80020ec:	42020000 	.word	0x42020000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0ac      	sub	sp, #176	@ 0xb0
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2288      	movs	r2, #136	@ 0x88
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f008 fb46 	bl	800a7a2 <memset>
  if(huart->Instance==USART1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <HAL_UART_MspInit+0xc4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d145      	bne.n	80021ac <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002120:	f04f 0201 	mov.w	r2, #1
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800212c:	2300      	movs	r3, #0
 800212e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4618      	mov	r0, r3
 8002136:	f002 ffa1 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002140:	f7ff fe3a 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002144:	4b1c      	ldr	r3, [pc, #112]	@ (80021b8 <HAL_UART_MspInit+0xc8>)
 8002146:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800214a:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_UART_MspInit+0xc8>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002154:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_UART_MspInit+0xc8>)
 8002156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800215a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_UART_MspInit+0xc8>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002168:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <HAL_UART_MspInit+0xc8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <HAL_UART_MspInit+0xc8>)
 8002174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002180:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800219a:	2307      	movs	r3, #7
 800219c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021a4:	4619      	mov	r1, r3
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <HAL_UART_MspInit+0xcc>)
 80021a8:	f001 fe84 	bl	8003eb4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80021ac:	bf00      	nop
 80021ae:	37b0      	adds	r7, #176	@ 0xb0
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40013800 	.word	0x40013800
 80021b8:	44020c00 	.word	0x44020c00
 80021bc:	42020000 	.word	0x42020000

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <NMI_Handler+0x4>

080021c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <MemManage_Handler+0x4>

080021d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002216:	f000 fa03 	bl	8002620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}

0800221e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  return 1;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_kill>:

int _kill(int pid, int sig)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002238:	f008 fb06 	bl	800a848 <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	2216      	movs	r2, #22
 8002240:	601a      	str	r2, [r3, #0]
  return -1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_exit>:

void _exit (int status)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002256:	f04f 31ff 	mov.w	r1, #4294967295
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffe7 	bl	800222e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <_exit+0x12>

08002264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e00a      	b.n	800228c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002276:	f3af 8000 	nop.w
 800227a:	4601      	mov	r1, r0
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf0      	blt.n	8002276 <_read+0x12>
  }

  return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e009      	b.n	80022c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe febb 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf1      	blt.n	80022b0 <_write+0x12>
  }
  return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_close>:

int _close(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_isatty>:

int _isatty(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	@ (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f008 fa6a 	bl	800a848 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	@ (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20008000 	.word	0x20008000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	200003f0 	.word	0x200003f0
 80023a8:	20000548 	.word	0x20000548

080023ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023b2:	4b30      	ldr	r3, [pc, #192]	@ (8002474 <SystemInit+0xc8>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002474 <SystemInit+0xc8>)
 80023ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80023c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <SystemInit+0xcc>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80023c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <SystemInit+0xcc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80023ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002478 <SystemInit+0xcc>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80023d4:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <SystemInit+0xcc>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4927      	ldr	r1, [pc, #156]	@ (8002478 <SystemInit+0xcc>)
 80023da:	4b28      	ldr	r3, [pc, #160]	@ (800247c <SystemInit+0xd0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <SystemInit+0xcc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80023e6:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <SystemInit+0xcc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <SystemInit+0xcc>)
 80023ee:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <SystemInit+0xd4>)
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80023f2:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <SystemInit+0xcc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002478 <SystemInit+0xcc>)
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <SystemInit+0xd4>)
 80023fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <SystemInit+0xcc>)
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002404:	4b1c      	ldr	r3, [pc, #112]	@ (8002478 <SystemInit+0xcc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1b      	ldr	r2, [pc, #108]	@ (8002478 <SystemInit+0xcc>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <SystemInit+0xcc>)
 8002412:	2200      	movs	r2, #0
 8002414:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002416:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <SystemInit+0xc8>)
 8002418:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800241c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <SystemInit+0xd8>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002426:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800242e:	d003      	beq.n	8002438 <SystemInit+0x8c>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002436:	d117      	bne.n	8002468 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <SystemInit+0xd8>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002444:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <SystemInit+0xd8>)
 8002446:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <SystemInit+0xdc>)
 8002448:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <SystemInit+0xd8>)
 800244c:	4a0f      	ldr	r2, [pc, #60]	@ (800248c <SystemInit+0xe0>)
 800244e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <SystemInit+0xd8>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <SystemInit+0xd8>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <SystemInit+0xd8>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a08      	ldr	r2, [pc, #32]	@ (8002484 <SystemInit+0xd8>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	61d3      	str	r3, [r2, #28]
  }
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00
 8002478:	44020c00 	.word	0x44020c00
 800247c:	fae2eae3 	.word	0xfae2eae3
 8002480:	01010280 	.word	0x01010280
 8002484:	40022000 	.word	0x40022000
 8002488:	08192a3b 	.word	0x08192a3b
 800248c:	4c5d6e7f 	.word	0x4c5d6e7f

08002490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002494:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002496:	e003      	b.n	80024a0 <LoopCopyDataInit>

08002498 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800249a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800249c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800249e:	3104      	adds	r1, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024a0:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024a8:	d3f6      	bcc.n	8002498 <CopyDataInit>
	ldr	r2, =_sbss
 80024aa:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024ac:	e002      	b.n	80024b4 <LoopFillZerobss>

080024ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024b0:	f842 3b04 	str.w	r3, [r2], #4

080024b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024b4:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <LoopForever+0x16>)
	cmp	r2, r3
 80024b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024b8:	d3f9      	bcc.n	80024ae <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ba:	f7ff ff77 	bl	80023ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024be:	f008 f9c9 	bl	800a854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c2:	f7fe fdc9 	bl	8001058 <main>

080024c6 <LoopForever>:

LoopForever:
    b LoopForever
 80024c6:	e7fe      	b.n	80024c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80024c8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80024cc:	0800e490 	.word	0x0800e490
	ldr	r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024d4:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80024d8:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80024dc:	20000544 	.word	0x20000544

080024e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC1_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f001 fc0e 	bl	8003d0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024ee:	f002 fc3b 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <HAL_Init+0x44>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	490b      	ldr	r1, [pc, #44]	@ (800252c <HAL_Init+0x48>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <HAL_Init+0x4c>)
 8002506:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002508:	2004      	movs	r0, #4
 800250a:	f001 fc45 	bl	8003d98 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	200f      	movs	r0, #15
 8002510:	f000 f810 	bl	8002534 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e002      	b.n	8002524 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800251e:	f7ff fc51 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	44020c00 	.word	0x44020c00
 800252c:	0800e010 	.word	0x0800e010
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002540:	4b33      	ldr	r3, [pc, #204]	@ (8002610 <HAL_InitTick+0xdc>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e05c      	b.n	8002606 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800254c:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_InitTick+0xe0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b04      	cmp	r3, #4
 8002556:	d10c      	bne.n	8002572 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002558:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <HAL_InitTick+0xe4>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <HAL_InitTick+0xdc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e037      	b.n	80025e2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002572:	f001 fc69 	bl	8003e48 <HAL_SYSTICK_GetCLKSourceConfig>
 8002576:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d023      	beq.n	80025c6 <HAL_InitTick+0x92>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d82d      	bhi.n	80025e0 <HAL_InitTick+0xac>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_InitTick+0x5e>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d00d      	beq.n	80025ac <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002590:	e026      	b.n	80025e0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002592:	4b21      	ldr	r3, [pc, #132]	@ (8002618 <HAL_InitTick+0xe4>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <HAL_InitTick+0xdc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80025a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e01a      	b.n	80025e2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_InitTick+0xdc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	60fb      	str	r3, [r7, #12]
        break;
 80025c4:	e00d      	b.n	80025e2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_InitTick+0xdc>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	60fb      	str	r3, [r7, #12]
        break;
 80025de:	e000      	b.n	80025e2 <HAL_InitTick+0xae>
        break;
 80025e0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f001 fbb6 	bl	8003d54 <HAL_SYSTICK_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e009      	b.n	8002606 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f2:	2200      	movs	r2, #0
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	f04f 30ff 	mov.w	r0, #4294967295
 80025fa:	f001 fb91 	bl	8003d20 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80025fe:	4a07      	ldr	r2, [pc, #28]	@ (800261c <HAL_InitTick+0xe8>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000008 	.word	0x20000008
 8002614:	e000e010 	.word	0xe000e010
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_IncTick+0x20>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_IncTick+0x24>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4413      	add	r3, r2
 8002630:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <HAL_IncTick+0x24>)
 8002632:	6013      	str	r3, [r2, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008
 8002644:	200003f4 	.word	0x200003f4

08002648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return uwTick;
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <HAL_GetTick+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200003f4 	.word	0x200003f4

08002660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff ffee 	bl	8002648 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d005      	beq.n	8002686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_Delay+0x44>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002686:	bf00      	nop
 8002688:	f7ff ffde 	bl	8002648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	429a      	cmp	r2, r3
 8002696:	d8f7      	bhi.n	8002688 <HAL_Delay+0x28>
  {
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	609a      	str	r2, [r3, #8]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800271e:	f043 0202 	orr.w	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800273e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	42028000 	.word	0x42028000

0800275c <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3360      	adds	r3, #96	@ 0x60
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <LL_ADC_SetOffset+0x44>)
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	4313      	orrs	r3, r2
 800278c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	03fff000 	.word	0x03fff000

080027a4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3360      	adds	r3, #96	@ 0x60
 80027b2:	461a      	mov	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3360      	adds	r3, #96	@ 0x60
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3360      	adds	r3, #96	@ 0x60
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	431a      	orrs	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	@ 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	615a      	str	r2, [r3, #20]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3330      	adds	r3, #48	@ 0x30
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	211f      	movs	r1, #31
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	401a      	ands	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	f003 011f 	and.w	r1, r3, #31
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3314      	adds	r3, #20
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0e5b      	lsrs	r3, r3, #25
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	4413      	add	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0d1b      	lsrs	r3, r3, #20
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2107      	movs	r1, #7
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	0d1b      	lsrs	r3, r3, #20
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	431a      	orrs	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0318 	and.w	r3, r3, #24
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002990:	40d9      	lsrs	r1, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	400b      	ands	r3, r1
 8002996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	000fffff 	.word	0x000fffff

080029b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6093      	str	r3, [r2, #8]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ec:	d101      	bne.n	80029f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a3c:	d101      	bne.n	8002a42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a8c:	f043 0202 	orr.w	r2, r3, #2
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <LL_ADC_IsEnabled+0x18>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <LL_ADC_IsEnabled+0x1a>
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsDisableOngoing+0x18>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsDisableOngoing+0x1a>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b00:	f043 0204 	orr.w	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b28:	f043 0210 	orr.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d101      	bne.n	8002b54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d101      	bne.n	8002ba2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e131      	b.n	8002e2e <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff f8fb 	bl	8001dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fef1 	bl	80029d8 <LL_ADC_IsDeepPowerDownEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d004      	beq.n	8002c06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fed7 	bl	80029b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff0c 	bl	8002a28 <LL_ADC_IsInternalRegulatorEnabled>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fef0 	bl	8002a00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c20:	4b85      	ldr	r3, [pc, #532]	@ (8002e38 <HAL_ADC_Init+0x288>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	4a85      	ldr	r2, [pc, #532]	@ (8002e3c <HAL_ADC_Init+0x28c>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	3301      	adds	r3, #1
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f9      	bne.n	8002c36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff feee 	bl	8002a28 <LL_ADC_IsInternalRegulatorEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	f043 0210 	orr.w	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff62 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 8002c78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 80ca 	bne.w	8002e1c <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80c6 	bne.w	8002e1c <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c98:	f043 0202 	orr.w	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fefb 	bl	8002aa0 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cb0:	4863      	ldr	r0, [pc, #396]	@ (8002e40 <HAL_ADC_Init+0x290>)
 8002cb2:	f7ff fef5 	bl	8002aa0 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4860      	ldr	r0, [pc, #384]	@ (8002e44 <HAL_ADC_Init+0x294>)
 8002cc4:	f7ff fcf0 	bl	80026a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e5b      	ldrb	r3, [r3, #25]
 8002ccc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cd8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cde:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	045b      	lsls	r3, r3, #17
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b48      	ldr	r3, [pc, #288]	@ (8002e48 <HAL_ADC_Init+0x298>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff1b 	bl	8002b8a <LL_ADC_INJ_IsConversionOngoing>
 8002d54:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d13d      	bne.n	8002dd8 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d13a      	bne.n	8002dd8 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7e1b      	ldrb	r3, [r3, #24]
 8002d66:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7e:	f023 0302 	bic.w	r3, r3, #2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d118      	bne.n	8002dc8 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002db8:	430a      	orrs	r2, r1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	e007      	b.n	8002dd8 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10c      	bne.n	8002dfa <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f023 010f 	bic.w	r1, r3, #15
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	1e5a      	subs	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002df8:	e007      	b.n	8002e0a <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 020f 	bic.w	r2, r2, #15
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e1a:	e007      	b.n	8002e2c <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e20:	f043 0210 	orr.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	053e2d63 	.word	0x053e2d63
 8002e40:	42028000 	.word	0x42028000
 8002e44:	42028300 	.word	0x42028300
 8002e48:	fff04007 	.word	0xfff04007

08002e4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fe6f 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d14f      	bne.n	8002f04 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_Start+0x26>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e04b      	b.n	8002f0a <HAL_ADC_Start+0xbe>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fdd4 	bl	8003a28 <ADC_Enable>
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d137      	bne.n	8002efa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eaa:	d106      	bne.n	8002eba <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f023 0206 	bic.w	r2, r3, #6
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	221c      	movs	r2, #28
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ee6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fdfa 	bl	8002aec <LL_ADC_REG_StartConversion>
 8002ef8:	e006      	b.n	8002f08 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002f02:	e001      	b.n	8002f08 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_Stop+0x16>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e023      	b.n	8002f70 <HAL_ADC_Stop+0x5e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f30:	2103      	movs	r1, #3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fcbc 	bl	80038b0 <ADC_ConversionStop>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d111      	bne.n	8002f66 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fdf2 	bl	8003b2c <ADC_Disable>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d102      	bne.n	8002f90 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e010      	b.n	8002fb2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06f      	b.n	800308e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002fae:	2304      	movs	r3, #4
 8002fb0:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fb2:	f7ff fb49 	bl	8002648 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fb8:	e021      	b.n	8002ffe <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d01d      	beq.n	8002ffe <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fc2:	f7ff fb41 	bl	8002648 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <HAL_ADC_PollForConversion+0x60>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d112      	bne.n	8002ffe <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e047      	b.n	800308e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0d6      	beq.n	8002fba <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fc3b 	bl	8002898 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01c      	beq.n	8003062 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7e5b      	ldrb	r3, [r3, #25]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d118      	bne.n	8003062 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d111      	bne.n	8003062 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d104      	bne.n	800307a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2208      	movs	r2, #8
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e008      	b.n	800308c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	220c      	movs	r2, #12
 800308a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0b6      	sub	sp, #216	@ 0xd8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x22>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e3d8      	b.n	8003884 <HAL_ADC_ConfigChannel+0x7d4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fd2c 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 83bd 	bne.w	8003866 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d104      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fb1b 	bl	8002734 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	f7ff fbd7 	bl	80028be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fd11 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 800311a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fd31 	bl	8002b8a <LL_ADC_INJ_IsConversionOngoing>
 8003128:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800312c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 81d9 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 81d4 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003148:	d10f      	bne.n	800316a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	4619      	mov	r1, r3
 8003156:	f7ff fbde 	bl	8002916 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fb85 	bl	8002872 <LL_ADC_SetSamplingTimeCommonConfig>
 8003168:	e00e      	b.n	8003188 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	461a      	mov	r2, r3
 8003178:	f7ff fbcd 	bl	8002916 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fb75 	bl	8002872 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d022      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031ba:	f7ff facf 	bl	800275c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7ff fb1b 	bl	8002806 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x136>
 80031e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031e4:	e000      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x138>
 80031e6:	2300      	movs	r3, #0
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff fb27 	bl	800283c <LL_ADC_SetOffsetSaturation>
 80031ee:	e17b      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fad4 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_ADC_ConfigChannel+0x16c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fac9 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	f003 021f 	and.w	r2, r3, #31
 800321a:	e01e      	b.n	800325a <HAL_ADC_ConfigChannel+0x1aa>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fabe 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800323a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800323e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8003242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e004      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800324e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003262:	2b00      	cmp	r3, #0
 8003264:	d105      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x1c2>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0e9b      	lsrs	r3, r3, #26
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	e018      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x1f4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800328a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800328e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8003296:	2320      	movs	r3, #32
 8003298:	e004      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 800329a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fa8d 	bl	80027d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fa71 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x232>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fa66 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80032d8:	4603      	mov	r3, r0
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	e01e      	b.n	8003320 <HAL_ADC_ConfigChannel+0x270>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fa5b 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003308:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e004      	b.n	800331e <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8003314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x288>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	e018      	b.n	800336a <HAL_ADC_ConfigChannel+0x2ba>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800334c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e004      	b.n	800336a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800336a:	429a      	cmp	r2, r3
 800336c:	d106      	bne.n	800337c <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fa2a 	bl	80027d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2102      	movs	r1, #2
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fa0e 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x2f8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fa03 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	e01e      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x336>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f9f8 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80033c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80033ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e004      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80033da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x34e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	e016      	b.n	800342c <HAL_ADC_ConfigChannel+0x37c>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003410:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e004      	b.n	800342c <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8003422:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800342c:	429a      	cmp	r2, r3
 800342e:	d106      	bne.n	800343e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f9c9 	bl	80027d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2103      	movs	r1, #3
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f9ad 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <HAL_ADC_ConfigChannel+0x3ba>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2103      	movs	r1, #3
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f9a2 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	e017      	b.n	800349a <HAL_ADC_ConfigChannel+0x3ea>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2103      	movs	r1, #3
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f997 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003484:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 800348c:	2320      	movs	r3, #32
 800348e:	e003      	b.n	8003498 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8003490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x402>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0e9b      	lsrs	r3, r3, #26
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	e011      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x426>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80034c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80034c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80034ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d106      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	2103      	movs	r1, #3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f974 	bl	80027d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fad7 	bl	8002aa0 <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f040 813f 	bne.w	8003778 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	461a      	mov	r2, r3
 8003508:	f7ff fa30 	bl	800296c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a8e      	ldr	r2, [pc, #568]	@ (800374c <HAL_ADC_ConfigChannel+0x69c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f040 8130 	bne.w	8003778 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x490>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	3301      	adds	r3, #1
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2b09      	cmp	r3, #9
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e019      	b.n	8003574 <HAL_ADC_ConfigChannel+0x4c4>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800354e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003550:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800355c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2b09      	cmp	r3, #9
 800356c:	bf94      	ite	ls
 800356e:	2301      	movls	r3, #1
 8003570:	2300      	movhi	r3, #0
 8003572:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003574:	2b00      	cmp	r3, #0
 8003576:	d079      	beq.n	800366c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x4e4>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	3301      	adds	r3, #1
 800358c:	069b      	lsls	r3, r3, #26
 800358e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003592:	e015      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x510>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 80035ac:	2320      	movs	r3, #32
 80035ae:	e003      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 80035b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	069b      	lsls	r3, r3, #26
 80035bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x530>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	3301      	adds	r3, #1
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	e017      	b.n	8003610 <HAL_ADC_ConfigChannel+0x560>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80035f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80035fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	ea42 0103 	orr.w	r1, r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x586>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	3301      	adds	r3, #1
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	051b      	lsls	r3, r3, #20
 8003634:	e018      	b.n	8003668 <HAL_ADC_ConfigChannel+0x5b8>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8003652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003668:	430b      	orrs	r3, r1
 800366a:	e080      	b.n	800376e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003674:	2b00      	cmp	r3, #0
 8003676:	d107      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x5d8>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0e9b      	lsrs	r3, r3, #26
 800367e:	3301      	adds	r3, #1
 8003680:	069b      	lsls	r3, r3, #26
 8003682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003686:	e015      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x604>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e003      	b.n	80036ac <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	069b      	lsls	r3, r3, #26
 80036b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x624>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	e017      	b.n	8003704 <HAL_ADC_ConfigChannel+0x654>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	61fb      	str	r3, [r7, #28]
  return result;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80036ec:	2320      	movs	r3, #32
 80036ee:	e003      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	ea42 0103 	orr.w	r1, r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x680>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	3301      	adds	r3, #1
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	3b1e      	subs	r3, #30
 8003728:	051b      	lsls	r3, r3, #20
 800372a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800372e:	e01d      	b.n	800376c <HAL_ADC_ConfigChannel+0x6bc>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	613b      	str	r3, [r7, #16]
  return result;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e005      	b.n	8003758 <HAL_ADC_ConfigChannel+0x6a8>
 800374c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f003 021f 	and.w	r2, r3, #31
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	3b1e      	subs	r3, #30
 8003766:	051b      	lsls	r3, r3, #20
 8003768:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003772:	4619      	mov	r1, r3
 8003774:	f7ff f8cf 	bl	8002916 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b43      	ldr	r3, [pc, #268]	@ (800388c <HAL_ADC_ConfigChannel+0x7dc>)
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d079      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003784:	4842      	ldr	r0, [pc, #264]	@ (8003890 <HAL_ADC_ConfigChannel+0x7e0>)
 8003786:	f7fe ffb5 	bl	80026f4 <LL_ADC_GetCommonPathInternalCh>
 800378a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a40      	ldr	r2, [pc, #256]	@ (8003894 <HAL_ADC_ConfigChannel+0x7e4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d124      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11e      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003898 <HAL_ADC_ConfigChannel+0x7e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d164      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037b6:	4619      	mov	r1, r3
 80037b8:	4835      	ldr	r0, [pc, #212]	@ (8003890 <HAL_ADC_ConfigChannel+0x7e0>)
 80037ba:	f7fe ff88 	bl	80026ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037be:	4b37      	ldr	r3, [pc, #220]	@ (800389c <HAL_ADC_ConfigChannel+0x7ec>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	4a36      	ldr	r2, [pc, #216]	@ (80038a0 <HAL_ADC_ConfigChannel+0x7f0>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	3301      	adds	r3, #1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037d2:	e002      	b.n	80037da <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f9      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e0:	e04a      	b.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <HAL_ADC_ConfigChannel+0x7f4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d113      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <HAL_ADC_ConfigChannel+0x7e8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d13a      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380a:	4619      	mov	r1, r3
 800380c:	4820      	ldr	r0, [pc, #128]	@ (8003890 <HAL_ADC_ConfigChannel+0x7e0>)
 800380e:	f7fe ff5e 	bl	80026ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003812:	e031      	b.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a23      	ldr	r2, [pc, #140]	@ (80038a8 <HAL_ADC_ConfigChannel+0x7f8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d113      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800381e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <HAL_ADC_ConfigChannel+0x7e8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d121      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003838:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800383c:	4619      	mov	r1, r3
 800383e:	4814      	ldr	r0, [pc, #80]	@ (8003890 <HAL_ADC_ConfigChannel+0x7e0>)
 8003840:	f7fe ff45 	bl	80026ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003844:	e018      	b.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_ADC_ConfigChannel+0x7fc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d113      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a10      	ldr	r2, [pc, #64]	@ (8003898 <HAL_ADC_ConfigChannel+0x7e8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe ff56 	bl	8002710 <LL_ADC_EnableChannelVDDcore>
 8003864:	e008      	b.n	8003878 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003880:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003884:	4618      	mov	r0, r3
 8003886:	37d8      	adds	r7, #216	@ 0xd8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	80080000 	.word	0x80080000
 8003890:	42028300 	.word	0x42028300
 8003894:	c3210000 	.word	0xc3210000
 8003898:	42028000 	.word	0x42028000
 800389c:	20000000 	.word	0x20000000
 80038a0:	053e2d63 	.word	0x053e2d63
 80038a4:	88600004 	.word	0x88600004
 80038a8:	c7520000 	.word	0xc7520000
 80038ac:	99200040 	.word	0x99200040

080038b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f938 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 80038cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f959 	bl	8002b8a <LL_ADC_INJ_IsConversionOngoing>
 80038d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8098 	beq.w	8003a18 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02a      	beq.n	800394c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7e5b      	ldrb	r3, [r3, #25]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d126      	bne.n	800394c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	7e1b      	ldrb	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d122      	bne.n	800394c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003906:	2301      	movs	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800390a:	e014      	b.n	8003936 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4a45      	ldr	r2, [pc, #276]	@ (8003a24 <ADC_ConversionStop+0x174>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d90d      	bls.n	8003930 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003918:	f043 0210 	orr.w	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e074      	b.n	8003a1a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3301      	adds	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d1e3      	bne.n	800390c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2240      	movs	r2, #64	@ 0x40
 800394a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d014      	beq.n	800397c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f8f0 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f8ad 	bl	8002ac6 <LL_ADC_IsDisableOngoing>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff f8cc 	bl	8002b14 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d014      	beq.n	80039ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f8ff 	bl	8002b8a <LL_ADC_INJ_IsConversionOngoing>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff f895 	bl	8002ac6 <LL_ADC_IsDisableOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f8db 	bl	8002b62 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d005      	beq.n	80039be <ADC_ConversionStop+0x10e>
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d105      	bne.n	80039c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80039b8:	230c      	movs	r3, #12
 80039ba:	617b      	str	r3, [r7, #20]
        break;
 80039bc:	e005      	b.n	80039ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80039be:	2308      	movs	r3, #8
 80039c0:	617b      	str	r3, [r7, #20]
        break;
 80039c2:	e002      	b.n	80039ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80039c4:	2304      	movs	r3, #4
 80039c6:	617b      	str	r3, [r7, #20]
        break;
 80039c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80039ca:	f7fe fe3d 	bl	8002648 <HAL_GetTick>
 80039ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039d0:	e01b      	b.n	8003a0a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039d2:	f7fe fe39 	bl	8002648 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d914      	bls.n	8003a0a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f2:	f043 0210 	orr.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1dc      	bne.n	80039d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	a33fffff 	.word	0xa33fffff

08003a28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f831 	bl	8002aa0 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d166      	bne.n	8003b12 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <ADC_Enable+0xf4>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e052      	b.n	8003b14 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe ffec 	bl	8002a50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a78:	4829      	ldr	r0, [pc, #164]	@ (8003b20 <ADC_Enable+0xf8>)
 8003a7a:	f7fe fe3b 	bl	80026f4 <LL_ADC_GetCommonPathInternalCh>
 8003a7e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d010      	beq.n	8003aaa <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a88:	4b26      	ldr	r3, [pc, #152]	@ (8003b24 <ADC_Enable+0xfc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	4a26      	ldr	r2, [pc, #152]	@ (8003b28 <ADC_Enable+0x100>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a9c:	e002      	b.n	8003aa4 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f9      	bne.n	8003a9e <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003aaa:	f7fe fdcd 	bl	8002648 <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ab0:	e028      	b.n	8003b04 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fff2 	bl	8002aa0 <LL_ADC_IsEnabled>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe ffc2 	bl	8002a50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003acc:	f7fe fdbc 	bl	8002648 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d914      	bls.n	8003b04 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d00d      	beq.n	8003b04 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aec:	f043 0210 	orr.w	r2, r3, #16
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d1cf      	bne.n	8003ab2 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	8000003f 	.word	0x8000003f
 8003b20:	42028300 	.word	0x42028300
 8003b24:	20000000 	.word	0x20000000
 8003b28:	053e2d63 	.word	0x053e2d63

08003b2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe ffc4 	bl	8002ac6 <LL_ADC_IsDisableOngoing>
 8003b3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe ffab 	bl	8002aa0 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d047      	beq.n	8003be0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d144      	bne.n	8003be0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 030d 	and.w	r3, r3, #13
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10c      	bne.n	8003b7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe ff85 	bl	8002a78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2203      	movs	r2, #3
 8003b74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b76:	f7fe fd67 	bl	8002648 <HAL_GetTick>
 8003b7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7c:	e029      	b.n	8003bd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e023      	b.n	8003be2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b9a:	f7fe fd55 	bl	8002648 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d914      	bls.n	8003bd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1dc      	bne.n	8003b9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db0a      	blt.n	8003c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	490c      	ldr	r1, [pc, #48]	@ (8003c9c <__NVIC_SetPriority+0x4c>)
 8003c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	440b      	add	r3, r1
 8003c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c78:	e00a      	b.n	8003c90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4908      	ldr	r1, [pc, #32]	@ (8003ca0 <__NVIC_SetPriority+0x50>)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3b04      	subs	r3, #4
 8003c88:	0112      	lsls	r2, r2, #4
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	761a      	strb	r2, [r3, #24]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000e100 	.word	0xe000e100
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	@ 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f1c3 0307 	rsb	r3, r3, #7
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	bf28      	it	cs
 8003cc2:	2304      	movcs	r3, #4
 8003cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d902      	bls.n	8003cd4 <NVIC_EncodePriority+0x30>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3b03      	subs	r3, #3
 8003cd2:	e000      	b.n	8003cd6 <NVIC_EncodePriority+0x32>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cec:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	43d9      	mvns	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	4313      	orrs	r3, r2
         );
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3724      	adds	r7, #36	@ 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff6a 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2e:	f7ff ff81 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003d32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6978      	ldr	r0, [r7, #20]
 8003d3a:	f7ff ffb3 	bl	8003ca4 <NVIC_EncodePriority>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff82 	bl	8003c50 <__NVIC_SetPriority>
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d64:	d301      	bcc.n	8003d6a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d66:	2301      	movs	r3, #1
 8003d68:	e00d      	b.n	8003d86 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <HAL_SYSTICK_Config+0x40>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003d72:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <HAL_SYSTICK_Config+0x40>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_SYSTICK_Config+0x40>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <HAL_SYSTICK_Config+0x40>)
 8003d7e:	f043 0303 	orr.w	r3, r3, #3
 8003d82:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000e010 	.word	0xe000e010

08003d98 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d844      	bhi.n	8003e30 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003da6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dcf 	.word	0x08003dcf
 8003db0:	08003ded 	.word	0x08003ded
 8003db4:	08003e0f 	.word	0x08003e0f
 8003db8:	08003e31 	.word	0x08003e31
 8003dbc:	08003dc1 	.word	0x08003dc1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dc6:	f043 0304 	orr.w	r3, r3, #4
 8003dca:	6013      	str	r3, [r2, #0]
      break;
 8003dcc:	e031      	b.n	8003e32 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003dce:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003dda:	4b1a      	ldr	r3, [pc, #104]	@ (8003e44 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003ddc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003de0:	4a18      	ldr	r2, [pc, #96]	@ (8003e44 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003de2:	f023 030c 	bic.w	r3, r3, #12
 8003de6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003dea:	e022      	b.n	8003e32 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003dec:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003df2:	f023 0304 	bic.w	r3, r3, #4
 8003df6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003df8:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dfe:	f023 030c 	bic.w	r3, r3, #12
 8003e02:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003e0c:	e011      	b.n	8003e32 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a0b      	ldr	r2, [pc, #44]	@ (8003e40 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e20:	f023 030c 	bic.w	r3, r3, #12
 8003e24:	4a07      	ldr	r2, [pc, #28]	@ (8003e44 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003e26:	f043 0308 	orr.w	r3, r3, #8
 8003e2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003e2e:	e000      	b.n	8003e32 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003e30:	bf00      	nop
  }
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010
 8003e44:	44020c00 	.word	0x44020c00

08003e48 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003e4e:	4b17      	ldr	r3, [pc, #92]	@ (8003eac <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003e5a:	2304      	movs	r3, #4
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e01e      	b.n	8003e9e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d00f      	beq.n	8003e92 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d80f      	bhi.n	8003e98 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d003      	beq.n	8003e8c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003e84:	e008      	b.n	8003e98 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
        break;
 8003e8a:	e008      	b.n	8003e9e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	607b      	str	r3, [r7, #4]
        break;
 8003e90:	e005      	b.n	8003e9e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003e92:	2302      	movs	r3, #2
 8003e94:	607b      	str	r3, [r7, #4]
        break;
 8003e96:	e002      	b.n	8003e9e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	607b      	str	r3, [r7, #4]
        break;
 8003e9c:	bf00      	nop
    }
  }
  return systick_source;
 8003e9e:	687b      	ldr	r3, [r7, #4]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e010 	.word	0xe000e010
 8003eb0:	44020c00 	.word	0x44020c00

08003eb4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003ec2:	e136      	b.n	8004132 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8128 	beq.w	800412c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x38>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b12      	cmp	r3, #18
 8003eea:	d125      	bne.n	8003f38 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	08da      	lsrs	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3208      	adds	r2, #8
 8003ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	220f      	movs	r2, #15
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	6979      	ldr	r1, [r7, #20]
 8003f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d00b      	beq.n	8003f8c <HAL_GPIO_Init+0xd8>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d007      	beq.n	8003f8c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f80:	2b11      	cmp	r3, #17
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b12      	cmp	r3, #18
 8003f8a:	d130      	bne.n	8003fee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 0201 	and.w	r2, r3, #1
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d017      	beq.n	8004026 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4013      	ands	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d07c      	beq.n	800412c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004032:	4a47      	ldr	r2, [pc, #284]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	3318      	adds	r3, #24
 800403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	220f      	movs	r2, #15
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0a9a      	lsrs	r2, r3, #10
 800405a:	4b3e      	ldr	r3, [pc, #248]	@ (8004154 <HAL_GPIO_Init+0x2a0>)
 800405c:	4013      	ands	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	f002 0203 	and.w	r2, r2, #3
 8004064:	00d2      	lsls	r2, r2, #3
 8004066:	4093      	lsls	r3, r2
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800406e:	4938      	ldr	r1, [pc, #224]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	3318      	adds	r3, #24
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800407c:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4013      	ands	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80040a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80040a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4013      	ands	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80040ca:	4a21      	ldr	r2, [pc, #132]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80040d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	43db      	mvns	r3, r3
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4013      	ands	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80040f6:	4a16      	ldr	r2, [pc, #88]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80040fe:	4b14      	ldr	r3, [pc, #80]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004104:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	43db      	mvns	r3, r3
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4013      	ands	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004124:	4a0a      	ldr	r2, [pc, #40]	@ (8004150 <HAL_GPIO_Init+0x29c>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3301      	adds	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	f47f aec1 	bne.w	8003ec4 <HAL_GPIO_Init+0x10>
  }
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	44022000 	.word	0x44022000
 8004154:	002f7f7f 	.word	0x002f7f7f

08004158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
 8004164:	4613      	mov	r3, r2
 8004166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004168:	787b      	ldrb	r3, [r7, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004174:	e002      	b.n	800417c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f000 bc28 	b.w	80049ec <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419c:	4b94      	ldr	r3, [pc, #592]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f003 0318 	and.w	r3, r3, #24
 80041a4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80041a6:	4b92      	ldr	r3, [pc, #584]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05b      	beq.n	8004274 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x46>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b18      	cmp	r3, #24
 80041c6:	d114      	bne.n	80041f2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d111      	bne.n	80041f2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f000 bc08 	b.w	80049ec <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80041dc:	4b84      	ldr	r3, [pc, #528]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	4981      	ldr	r1, [pc, #516]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80041f0:	e040      	b.n	8004274 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d023      	beq.n	8004242 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041fa:	4b7d      	ldr	r3, [pc, #500]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7c      	ldr	r2, [pc, #496]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fe fa1f 	bl	8002648 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800420e:	f7fe fa1b 	bl	8002648 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e3e5      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004220:	4b73      	ldr	r3, [pc, #460]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800422c:	4b70      	ldr	r3, [pc, #448]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	496d      	ldr	r1, [pc, #436]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800423c:	4313      	orrs	r3, r2
 800423e:	618b      	str	r3, [r1, #24]
 8004240:	e018      	b.n	8004274 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004242:	4b6b      	ldr	r3, [pc, #428]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6a      	ldr	r2, [pc, #424]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe f9fb 	bl	8002648 <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004256:	f7fe f9f7 	bl	8002648 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e3c1      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004268:	4b61      	ldr	r3, [pc, #388]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80a0 	beq.w	80043c2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b10      	cmp	r3, #16
 8004286:	d005      	beq.n	8004294 <HAL_RCC_OscConfig+0x10c>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b18      	cmp	r3, #24
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 8092 	bne.w	80043c2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e3a4      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x132>
 80042ac:	4b50      	ldr	r3, [pc, #320]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a4f      	ldr	r2, [pc, #316]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e058      	b.n	800436c <HAL_RCC_OscConfig+0x1e4>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d112      	bne.n	80042e8 <HAL_RCC_OscConfig+0x160>
 80042c2:	4b4b      	ldr	r3, [pc, #300]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a4a      	ldr	r2, [pc, #296]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b48      	ldr	r3, [pc, #288]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a47      	ldr	r2, [pc, #284]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b45      	ldr	r3, [pc, #276]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a44      	ldr	r2, [pc, #272]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e041      	b.n	800436c <HAL_RCC_OscConfig+0x1e4>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x190>
 80042f2:	4b3f      	ldr	r3, [pc, #252]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3e      	ldr	r2, [pc, #248]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b3c      	ldr	r3, [pc, #240]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a3b      	ldr	r2, [pc, #236]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004304:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b39      	ldr	r3, [pc, #228]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a38      	ldr	r2, [pc, #224]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e029      	b.n	800436c <HAL_RCC_OscConfig+0x1e4>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004320:	d112      	bne.n	8004348 <HAL_RCC_OscConfig+0x1c0>
 8004322:	4b33      	ldr	r3, [pc, #204]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a32      	ldr	r2, [pc, #200]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b30      	ldr	r3, [pc, #192]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2f      	ldr	r2, [pc, #188]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b2d      	ldr	r3, [pc, #180]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2c      	ldr	r2, [pc, #176]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e011      	b.n	800436c <HAL_RCC_OscConfig+0x1e4>
 8004348:	4b29      	ldr	r3, [pc, #164]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a28      	ldr	r2, [pc, #160]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b26      	ldr	r3, [pc, #152]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a25      	ldr	r2, [pc, #148]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004366:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800436a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fe f968 	bl	8002648 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800437c:	f7fe f964 	bl	8002648 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e32e      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800438e:	4b18      	ldr	r3, [pc, #96]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x1f4>
 800439a:	e012      	b.n	80043c2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe f954 	bl	8002648 <HAL_GetTick>
 80043a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80043a4:	f7fe f950 	bl	8002648 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e31a      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b6:	4b0e      	ldr	r3, [pc, #56]	@ (80043f0 <HAL_RCC_OscConfig+0x268>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 809a 	beq.w	8004504 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x25a>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b18      	cmp	r3, #24
 80043da:	d149      	bne.n	8004470 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d146      	bne.n	8004470 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e2fe      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
 80043ee:	bf00      	nop
 80043f0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11c      	bne.n	8004434 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80043fa:	4b9a      	ldr	r3, [pc, #616]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0218 	and.w	r2, r3, #24
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d014      	beq.n	8004434 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800440a:	4b96      	ldr	r3, [pc, #600]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 0218 	bic.w	r2, r3, #24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	4993      	ldr	r1, [pc, #588]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800441c:	f000 fdd0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004420:	4b91      	ldr	r3, [pc, #580]	@ (8004668 <HAL_RCC_OscConfig+0x4e0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe f885 	bl	8002534 <HAL_InitTick>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e2db      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fe f908 	bl	8002648 <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800443c:	f7fe f904 	bl	8002648 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e2ce      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444e:	4b85      	ldr	r3, [pc, #532]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800445a:	4b82      	ldr	r3, [pc, #520]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	497e      	ldr	r1, [pc, #504]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800446e:	e049      	b.n	8004504 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004478:	4b7a      	ldr	r3, [pc, #488]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 0218 	bic.w	r2, r3, #24
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4977      	ldr	r1, [pc, #476]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800448a:	4b76      	ldr	r3, [pc, #472]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a75      	ldr	r2, [pc, #468]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe f8d7 	bl	8002648 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800449e:	f7fe f8d3 	bl	8002648 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e29d      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80044bc:	4b69      	ldr	r3, [pc, #420]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	4966      	ldr	r1, [pc, #408]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
 80044d0:	e018      	b.n	8004504 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b64      	ldr	r3, [pc, #400]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a63      	ldr	r2, [pc, #396]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fe f8b3 	bl	8002648 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80044e6:	f7fe f8af 	bl	8002648 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e279      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03c      	beq.n	800458a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01c      	beq.n	8004552 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004518:	4b52      	ldr	r3, [pc, #328]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800451a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800451e:	4a51      	ldr	r2, [pc, #324]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004520:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004524:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fe f88e 	bl	8002648 <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004530:	f7fe f88a 	bl	8002648 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e254      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004542:	4b48      	ldr	r3, [pc, #288]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ef      	beq.n	8004530 <HAL_RCC_OscConfig+0x3a8>
 8004550:	e01b      	b.n	800458a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004552:	4b44      	ldr	r3, [pc, #272]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004558:	4a42      	ldr	r2, [pc, #264]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800455a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800455e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe f871 	bl	8002648 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800456a:	f7fe f86d 	bl	8002648 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e237      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800457c:	4b39      	ldr	r3, [pc, #228]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800457e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ef      	bne.n	800456a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80d2 	beq.w	800473c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004598:	4b34      	ldr	r3, [pc, #208]	@ (800466c <HAL_RCC_OscConfig+0x4e4>)
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d118      	bne.n	80045d6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80045a4:	4b31      	ldr	r3, [pc, #196]	@ (800466c <HAL_RCC_OscConfig+0x4e4>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	4a30      	ldr	r2, [pc, #192]	@ (800466c <HAL_RCC_OscConfig+0x4e4>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b0:	f7fe f84a 	bl	8002648 <HAL_GetTick>
 80045b4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b8:	f7fe f846 	bl	8002648 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e210      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045ca:	4b28      	ldr	r3, [pc, #160]	@ (800466c <HAL_RCC_OscConfig+0x4e4>)
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d108      	bne.n	80045f0 <HAL_RCC_OscConfig+0x468>
 80045de:	4b21      	ldr	r3, [pc, #132]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80045e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045ee:	e074      	b.n	80046da <HAL_RCC_OscConfig+0x552>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d118      	bne.n	800462a <HAL_RCC_OscConfig+0x4a2>
 80045f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 80045fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045fe:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004608:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800460a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800460e:	4a15      	ldr	r2, [pc, #84]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004614:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004618:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800461a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800461e:	4a11      	ldr	r2, [pc, #68]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004628:	e057      	b.n	80046da <HAL_RCC_OscConfig+0x552>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d11e      	bne.n	8004670 <HAL_RCC_OscConfig+0x4e8>
 8004632:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004638:	4a0a      	ldr	r2, [pc, #40]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004648:	4a06      	ldr	r2, [pc, #24]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800464a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004652:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 8004654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004658:	4a02      	ldr	r2, [pc, #8]	@ (8004664 <HAL_RCC_OscConfig+0x4dc>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004662:	e03a      	b.n	80046da <HAL_RCC_OscConfig+0x552>
 8004664:	44020c00 	.word	0x44020c00
 8004668:	20000004 	.word	0x20000004
 800466c:	44020800 	.word	0x44020800
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b85      	cmp	r3, #133	@ 0x85
 8004676:	d118      	bne.n	80046aa <HAL_RCC_OscConfig+0x522>
 8004678:	4ba2      	ldr	r3, [pc, #648]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800467a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800467e:	4aa1      	ldr	r2, [pc, #644]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004688:	4b9e      	ldr	r3, [pc, #632]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800468a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800468e:	4a9d      	ldr	r2, [pc, #628]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004694:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004698:	4b9a      	ldr	r3, [pc, #616]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800469a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469e:	4a99      	ldr	r2, [pc, #612]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046a8:	e017      	b.n	80046da <HAL_RCC_OscConfig+0x552>
 80046aa:	4b96      	ldr	r3, [pc, #600]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046b0:	4a94      	ldr	r2, [pc, #592]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046ba:	4b92      	ldr	r3, [pc, #584]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c0:	4a90      	ldr	r2, [pc, #576]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046d0:	4a8c      	ldr	r2, [pc, #560]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80046d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fd ffb1 	bl	8002648 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd ffad 	bl	8002648 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e175      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004700:	4b80      	ldr	r3, [pc, #512]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ed      	beq.n	80046ea <HAL_RCC_OscConfig+0x562>
 800470e:	e015      	b.n	800473c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fd ff9a 	bl	8002648 <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd ff96 	bl	8002648 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e15e      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800472e:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ed      	bne.n	8004718 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d036      	beq.n	80047b6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	d019      	beq.n	8004784 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004750:	4b6c      	ldr	r3, [pc, #432]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a6b      	ldr	r2, [pc, #428]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004756:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800475a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fd ff74 	bl	8002648 <HAL_GetTick>
 8004760:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004764:	f7fd ff70 	bl	8002648 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e13a      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004776:	4b63      	ldr	r3, [pc, #396]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x5dc>
 8004782:	e018      	b.n	80047b6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004784:	4b5f      	ldr	r3, [pc, #380]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a5e      	ldr	r2, [pc, #376]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800478a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800478e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd ff5a 	bl	8002648 <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004798:	f7fd ff56 	bl	8002648 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e120      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80047aa:	4b56      	ldr	r3, [pc, #344]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8115 	beq.w	80049ea <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b18      	cmp	r3, #24
 80047c4:	f000 80af 	beq.w	8004926 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f040 8086 	bne.w	80048de <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80047d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a4b      	ldr	r2, [pc, #300]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80047d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fd ff33 	bl	8002648 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80047e6:	f7fd ff2f 	bl	8002648 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0f9      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047f8:	4b42      	ldr	r3, [pc, #264]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004804:	4b3f      	ldr	r3, [pc, #252]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800480c:	f023 0303 	bic.w	r3, r3, #3
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004818:	0212      	lsls	r2, r2, #8
 800481a:	430a      	orrs	r2, r1
 800481c:	4939      	ldr	r1, [pc, #228]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	628b      	str	r3, [r1, #40]	@ 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004826:	3b01      	subs	r3, #1
 8004828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	3b01      	subs	r3, #1
 8004832:	025b      	lsls	r3, r3, #9
 8004834:	b29b      	uxth	r3, r3
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	3b01      	subs	r3, #1
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	3b01      	subs	r3, #1
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004852:	492c      	ldr	r1, [pc, #176]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004858:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	4a29      	ldr	r2, [pc, #164]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800485e:	f023 0310 	bic.w	r3, r3, #16
 8004862:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004868:	4a26      	ldr	r2, [pc, #152]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800486e:	4b25      	ldr	r3, [pc, #148]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	4a24      	ldr	r2, [pc, #144]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004874:	f043 0310 	orr.w	r3, r3, #16
 8004878:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800487a:	4b22      	ldr	r3, [pc, #136]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	f023 020c 	bic.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	491f      	ldr	r1, [pc, #124]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800488c:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	f023 0220 	bic.w	r2, r3, #32
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004898:	491a      	ldr	r1, [pc, #104]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800489e:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a15      	ldr	r2, [pc, #84]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fd fec7 	bl	8002648 <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048be:	f7fd fec3 	bl	8002648 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e08d      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80048d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x736>
 80048dc:	e085      	b.n	80049ea <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a08      	ldr	r2, [pc, #32]	@ (8004904 <HAL_RCC_OscConfig+0x77c>)
 80048e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fead 	bl	8002648 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048f2:	f7fd fea9 	bl	8002648 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d903      	bls.n	8004908 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e073      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
 8004904:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004908:	4b3a      	ldr	r3, [pc, #232]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ee      	bne.n	80048f2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004914:	4b37      	ldr	r3, [pc, #220]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	4a36      	ldr	r2, [pc, #216]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 800491a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	6293      	str	r3, [r2, #40]	@ 0x28
 8004924:	e061      	b.n	80049ea <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004926:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800492c:	4b31      	ldr	r3, [pc, #196]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 800492e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004930:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	2b01      	cmp	r3, #1
 8004938:	d031      	beq.n	800499e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0203 	and.w	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d12a      	bne.n	800499e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d122      	bne.n	800499e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004962:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004964:	429a      	cmp	r2, r3
 8004966:	d11a      	bne.n	800499e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	0a5b      	lsrs	r3, r3, #9
 800496c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004974:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d111      	bne.n	800499e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d108      	bne.n	800499e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	0e1b      	lsrs	r3, r3, #24
 8004990:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e024      	b.n	80049ec <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80049a2:	4b14      	ldr	r3, [pc, #80]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	08db      	lsrs	r3, r3, #3
 80049a8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d01a      	beq.n	80049ea <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80049b4:	4b0f      	ldr	r3, [pc, #60]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	4a0e      	ldr	r2, [pc, #56]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd fe42 	bl	8002648 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80049c6:	bf00      	nop
 80049c8:	f7fd fe3e 	bl	8002648 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d0f9      	beq.n	80049c8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	4a06      	ldr	r2, [pc, #24]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80049de:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e2:	4a04      	ldr	r2, [pc, #16]	@ (80049f4 <HAL_RCC_OscConfig+0x86c>)
 80049e4:	f043 0310 	orr.w	r3, r3, #16
 80049e8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	44020c00 	.word	0x44020c00

080049f8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e19e      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b83      	ldr	r3, [pc, #524]	@ (8004c1c <HAL_RCC_ClockConfig+0x224>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d910      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b80      	ldr	r3, [pc, #512]	@ (8004c1c <HAL_RCC_ClockConfig+0x224>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 020f 	bic.w	r2, r3, #15
 8004a22:	497e      	ldr	r1, [pc, #504]	@ (8004c1c <HAL_RCC_ClockConfig+0x224>)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c1c <HAL_RCC_ClockConfig+0x224>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e186      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d012      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	4b74      	ldr	r3, [pc, #464]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d909      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004a5a:	4b71      	ldr	r3, [pc, #452]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	496d      	ldr	r1, [pc, #436]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	4b68      	ldr	r3, [pc, #416]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d909      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a8c:	4b64      	ldr	r3, [pc, #400]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	4961      	ldr	r1, [pc, #388]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d010      	beq.n	8004ace <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d908      	bls.n	8004ace <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004abc:	4b58      	ldr	r3, [pc, #352]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4955      	ldr	r1, [pc, #340]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d010      	beq.n	8004afc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	4b50      	ldr	r3, [pc, #320]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d908      	bls.n	8004afc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004aea:	4b4d      	ldr	r3, [pc, #308]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 020f 	bic.w	r2, r3, #15
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	494a      	ldr	r1, [pc, #296]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8093 	beq.w	8004c30 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b12:	4b43      	ldr	r3, [pc, #268]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d121      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e113      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d115      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e107      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004b42:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0fb      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b52:	4b33      	ldr	r3, [pc, #204]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0f3      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004b62:	4b2f      	ldr	r3, [pc, #188]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f023 0203 	bic.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	492c      	ldr	r1, [pc, #176]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b74:	f7fd fd68 	bl	8002648 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d112      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b84:	f7fd fd60 	bl	8002648 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e0d7      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b9a:	4b21      	ldr	r3, [pc, #132]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0318 	and.w	r3, r3, #24
 8004ba2:	2b18      	cmp	r3, #24
 8004ba4:	d1ee      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x18c>
 8004ba6:	e043      	b.n	8004c30 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d112      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb2:	f7fd fd49 	bl	8002648 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0c0      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc8:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0318 	and.w	r3, r3, #24
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d1ee      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x1ba>
 8004bd4:	e02c      	b.n	8004c30 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d122      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fd fd32 	bl	8002648 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0a9      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <HAL_RCC_ClockConfig+0x228>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0318 	and.w	r3, r3, #24
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d1ee      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x1e8>
 8004c02:	e015      	b.n	8004c30 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fd fd20 	bl	8002648 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d906      	bls.n	8004c24 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e097      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
 8004c1a:	bf00      	nop
 8004c1c:	40022000 	.word	0x40022000
 8004c20:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c24:	4b4b      	ldr	r3, [pc, #300]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 0318 	and.w	r3, r3, #24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e9      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b44      	ldr	r3, [pc, #272]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d208      	bcs.n	8004c5e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004c4c:	4b41      	ldr	r3, [pc, #260]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f023 020f 	bic.w	r2, r3, #15
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	493e      	ldr	r1, [pc, #248]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d58 <HAL_RCC_ClockConfig+0x360>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d210      	bcs.n	8004c8e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d58 <HAL_RCC_ClockConfig+0x360>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 020f 	bic.w	r2, r3, #15
 8004c74:	4938      	ldr	r1, [pc, #224]	@ (8004d58 <HAL_RCC_ClockConfig+0x360>)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7c:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <HAL_RCC_ClockConfig+0x360>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d001      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e05d      	b.n	8004d4a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d010      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d208      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004caa:	4b2a      	ldr	r3, [pc, #168]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	4927      	ldr	r1, [pc, #156]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d012      	beq.n	8004cee <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d209      	bcs.n	8004cee <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004cda:	4b1e      	ldr	r3, [pc, #120]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	491a      	ldr	r1, [pc, #104]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d012      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d209      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	490e      	ldr	r1, [pc, #56]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004d20:	f000 f822 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <HAL_RCC_ClockConfig+0x35c>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	490b      	ldr	r1, [pc, #44]	@ (8004d5c <HAL_RCC_ClockConfig+0x364>)
 8004d30:	5ccb      	ldrb	r3, [r1, r3]
 8004d32:	fa22 f303 	lsr.w	r3, r2, r3
 8004d36:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <HAL_RCC_ClockConfig+0x368>)
 8004d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <HAL_RCC_ClockConfig+0x36c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fbf8 	bl	8002534 <HAL_InitTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004d48:	7afb      	ldrb	r3, [r7, #11]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	44020c00 	.word	0x44020c00
 8004d58:	40022000 	.word	0x40022000
 8004d5c:	0800e010 	.word	0x0800e010
 8004d60:	20000000 	.word	0x20000000
 8004d64:	20000004 	.word	0x20000004

08004d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	@ 0x24
 8004d6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0318 	and.w	r3, r3, #24
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e107      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d80:	4b87      	ldr	r3, [pc, #540]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f003 0318 	and.w	r3, r3, #24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d112      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d8c:	4b84      	ldr	r3, [pc, #528]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d98:	4b81      	ldr	r3, [pc, #516]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	4a81      	ldr	r2, [pc, #516]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x240>)
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e0f1      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004dac:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x240>)
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e0ee      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004db2:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 0318 	and.w	r3, r3, #24
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d102      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x244>)
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e0e5      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc4:	4b76      	ldr	r3, [pc, #472]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f003 0318 	and.w	r3, r3, #24
 8004dcc:	2b18      	cmp	r3, #24
 8004dce:	f040 80dd 	bne.w	8004f8c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004dd2:	4b73      	ldr	r3, [pc, #460]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004ddc:	4b70      	ldr	r3, [pc, #448]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004de8:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004df4:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80b7 	beq.w	8004f86 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d003      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0xbe>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d056      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x16a>
 8004e24:	e077      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004e26:	4b5e      	ldr	r3, [pc, #376]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d02d      	beq.n	8004e8e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e32:	4b5b      	ldr	r3, [pc, #364]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5c:	4b50      	ldr	r3, [pc, #320]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e64:	ee07 3a90 	vmov	s15, r3
 8004e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e70:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x248>
 8004e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e88:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004e8c:	e065      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e98:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x24c>
 8004e9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x248>
 8004eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ecc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ed0:	e043      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004edc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004fb8 <HAL_RCC_GetSysClockFreq+0x250>
 8004ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x248>
 8004efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f10:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004f14:	e021      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f20:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fbc <HAL_RCC_GetSysClockFreq+0x254>
 8004f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f28:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x248>
 8004f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f54:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004f58:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004f5a:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	0a5b      	lsrs	r3, r3, #9
 8004f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f64:	3301      	adds	r3, #1
 8004f66:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f72:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7e:	ee17 3a90 	vmov	r3, s15
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e004      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e001      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004f8c:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f8e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004f90:	69fb      	ldr	r3, [r7, #28]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	44020c00 	.word	0x44020c00
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	03d09000 	.word	0x03d09000
 8004fac:	017d7840 	.word	0x017d7840
 8004fb0:	46000000 	.word	0x46000000
 8004fb4:	4c742400 	.word	0x4c742400
 8004fb8:	4bbebc20 	.word	0x4bbebc20
 8004fbc:	4a742400 	.word	0x4a742400

08004fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fc4:	f7ff fed0 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b08      	ldr	r3, [pc, #32]	@ (8004fec <HAL_RCC_GetHCLKFreq+0x2c>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004fce:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fd2:	4907      	ldr	r1, [pc, #28]	@ (8004ff0 <HAL_RCC_GetHCLKFreq+0x30>)
 8004fd4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004fd6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	4a05      	ldr	r2, [pc, #20]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x34>)
 8004fe0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004fe2:	4b04      	ldr	r3, [pc, #16]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x34>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	44020c00 	.word	0x44020c00
 8004ff0:	0800e010 	.word	0x0800e010
 8004ff4:	20000000 	.word	0x20000000

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ffc:	f7ff ffe0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	44020c00 	.word	0x44020c00
 8005020:	0800e020 	.word	0x0800e020

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005028:	f7ff ffca 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <HAL_RCC_GetPCLK2Freq+0x28>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	44020c00 	.word	0x44020c00
 800504c:	0800e020 	.word	0x0800e020

08005050 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005054:	f7ff ffb4 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_RCC_GetPCLK3Freq+0x24>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	0b1b      	lsrs	r3, r3, #12
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4904      	ldr	r1, [pc, #16]	@ (8005078 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	44020c00 	.word	0x44020c00
 8005078:	0800e020 	.word	0x0800e020

0800507c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005080:	b0aa      	sub	sp, #168	@ 0xa8
 8005082:	af00      	add	r7, sp, #0
 8005084:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005088:	2300      	movs	r3, #0
 800508a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800508e:	2300      	movs	r3, #0
 8005090:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005094:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80050a0:	2500      	movs	r5, #0
 80050a2:	ea54 0305 	orrs.w	r3, r4, r5
 80050a6:	d00b      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80050a8:	4bb8      	ldr	r3, [pc, #736]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ae:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80050b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	4ab4      	ldr	r2, [pc, #720]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050ba:	430b      	orrs	r3, r1
 80050bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f002 0801 	and.w	r8, r2, #1
 80050cc:	f04f 0900 	mov.w	r9, #0
 80050d0:	ea58 0309 	orrs.w	r3, r8, r9
 80050d4:	d038      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80050d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050dc:	2b05      	cmp	r3, #5
 80050de:	d819      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80050e0:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	0800511d 	.word	0x0800511d
 80050ec:	08005101 	.word	0x08005101
 80050f0:	08005115 	.word	0x08005115
 80050f4:	0800511d 	.word	0x0800511d
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	0800511d 	.word	0x0800511d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005100:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005104:	3308      	adds	r3, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f001 ffee 	bl	80070e8 <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8005112:	e004      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800511c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10c      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005126:	4b99      	ldr	r3, [pc, #612]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800512c:	f023 0107 	bic.w	r1, r3, #7
 8005130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	4a95      	ldr	r2, [pc, #596]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005138:	430b      	orrs	r3, r1
 800513a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800513e:	e003      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005144:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005148:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f002 0a02 	and.w	sl, r2, #2
 8005154:	f04f 0b00 	mov.w	fp, #0
 8005158:	ea5a 030b 	orrs.w	r3, sl, fp
 800515c:	d03c      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800515e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	2b28      	cmp	r3, #40	@ 0x28
 8005166:	d01b      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005168:	2b28      	cmp	r3, #40	@ 0x28
 800516a:	d815      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800516c:	2b20      	cmp	r3, #32
 800516e:	d019      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005170:	2b20      	cmp	r3, #32
 8005172:	d811      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005174:	2b18      	cmp	r3, #24
 8005176:	d017      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005178:	2b18      	cmp	r3, #24
 800517a:	d80d      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005180:	2b08      	cmp	r3, #8
 8005182:	d109      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005184:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005188:	3308      	adds	r3, #8
 800518a:	4618      	mov	r0, r3
 800518c:	f001 ffac 	bl	80070e8 <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8005196:	e00a      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800519e:	e006      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80051a0:	bf00      	nop
 80051a2:	e004      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80051a4:	bf00      	nop
 80051a6:	e002      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80051ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80051b6:	4b75      	ldr	r3, [pc, #468]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051bc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	4a71      	ldr	r2, [pc, #452]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80051c8:	430b      	orrs	r3, r1
 80051ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051d4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f002 0304 	and.w	r3, r2, #4
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051f2:	460b      	mov	r3, r1
 80051f4:	4313      	orrs	r3, r2
 80051f6:	d040      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80051f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005202:	d01e      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005204:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005208:	d817      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800520a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800520e:	d01a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8005210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005214:	d811      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005216:	2bc0      	cmp	r3, #192	@ 0xc0
 8005218:	d017      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800521a:	2bc0      	cmp	r3, #192	@ 0xc0
 800521c:	d80d      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d015      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d109      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005226:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800522a:	3308      	adds	r3, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f001 ff5b 	bl	80070e8 <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005238:	e00a      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800524e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005250:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005258:	4b4c      	ldr	r3, [pc, #304]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800525a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800525e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005262:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005268:	4a48      	ldr	r2, [pc, #288]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800526a:	430b      	orrs	r3, r1
 800526c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005270:	e003      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005276:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800527a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005286:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005290:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005294:	460b      	mov	r3, r1
 8005296:	4313      	orrs	r3, r2
 8005298:	d043      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800529a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80052a4:	d021      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80052a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80052aa:	d81a      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80052ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052b0:	d01d      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x272>
 80052b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052b6:	d814      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80052b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052bc:	d019      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80052be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052c2:	d80e      	bhi.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d016      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80052c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052cc:	d109      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052d2:	3308      	adds	r3, #8
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 ff07 	bl	80070e8 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80052e0:	e00a      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052e8:	e006      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052ea:	bf00      	nop
 80052ec:	e004      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052ee:	bf00      	nop
 80052f0:	e002      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80052f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10c      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005300:	4b22      	ldr	r3, [pc, #136]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005306:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800530a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	4a1e      	ldr	r2, [pc, #120]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005312:	430b      	orrs	r3, r1
 8005314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005318:	e003      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800531e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005322:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800532e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005330:	2300      	movs	r3, #0
 8005332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005334:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005338:	460b      	mov	r3, r1
 800533a:	4313      	orrs	r3, r2
 800533c:	d03e      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800533e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005344:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005348:	d01b      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800534a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800534e:	d814      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005354:	d017      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800535a:	d80e      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d017      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005364:	d109      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005366:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800536a:	3308      	adds	r3, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f001 febb 	bl	80070e8 <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005378:	e00b      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005380:	e007      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8005382:	bf00      	nop
 8005384:	e005      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8005386:	bf00      	nop
 8005388:	e003      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800538a:	bf00      	nop
 800538c:	44020c00 	.word	0x44020c00
        break;
 8005390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005392:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800539a:	4ba5      	ldr	r3, [pc, #660]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800539c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053a0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80053a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	4aa1      	ldr	r2, [pc, #644]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053ac:	430b      	orrs	r3, r1
 80053ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053b2:	e003      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ca:	2300      	movs	r3, #0
 80053cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80053ce:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80053d2:	460b      	mov	r3, r1
 80053d4:	4313      	orrs	r3, r2
 80053d6:	d03b      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80053d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053e2:	d01b      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80053e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053e8:	d814      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80053ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053ee:	d017      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80053f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053f4:	d80e      	bhi.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d014      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80053fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053fe:	d109      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005400:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005404:	3308      	adds	r3, #8
 8005406:	4618      	mov	r0, r3
 8005408:	f001 fe6e 	bl	80070e8 <RCCEx_PLL2_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005412:	e008      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800541a:	e004      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800541c:	bf00      	nop
 800541e:	e002      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005420:	bf00      	nop
 8005422:	e000      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005426:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800542e:	4b80      	ldr	r3, [pc, #512]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005434:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800543c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800543e:	4a7c      	ldr	r2, [pc, #496]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005440:	430b      	orrs	r3, r1
 8005442:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800544c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800545c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800545e:	2300      	movs	r3, #0
 8005460:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005462:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005466:	460b      	mov	r3, r1
 8005468:	4313      	orrs	r3, r2
 800546a:	d033      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800546c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800547c:	d80e      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d012      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005486:	d109      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800548c:	3308      	adds	r3, #8
 800548e:	4618      	mov	r0, r3
 8005490:	f001 fe2a 	bl	80070e8 <RCCEx_PLL2_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800549a:	e006      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80054a2:	e002      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80054a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10c      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80054b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054b8:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80054bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054ca:	e003      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80054d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	2100      	movs	r1, #0
 80054de:	6639      	str	r1, [r7, #96]	@ 0x60
 80054e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80054e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d033      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80054f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054fa:	d015      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80054fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005500:	d80e      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d012      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005506:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800550a:	d109      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800550c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005510:	3308      	adds	r3, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f001 fde8 	bl	80070e8 <RCCEx_PLL2_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800551e:	e006      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005526:	e002      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800552c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800552e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005536:	4b3e      	ldr	r3, [pc, #248]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800553c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005546:	4a3a      	ldr	r2, [pc, #232]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005548:	430b      	orrs	r3, r1
 800554a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800554e:	e003      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005554:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005558:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	2100      	movs	r1, #0
 8005562:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005568:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800556a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d00e      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005574:	4b2e      	ldr	r3, [pc, #184]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800557a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800557e:	61d3      	str	r3, [r2, #28]
 8005580:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005582:	69d9      	ldr	r1, [r3, #28]
 8005584:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558c:	4a28      	ldr	r2, [pc, #160]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800558e:	430b      	orrs	r3, r1
 8005590:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005592:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800559e:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a0:	2300      	movs	r3, #0
 80055a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055a4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80055a8:	460b      	mov	r3, r1
 80055aa:	4313      	orrs	r3, r2
 80055ac:	d046      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80055ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055b8:	d021      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x582>
 80055ba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055be:	d81a      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c4:	d01d      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80055c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ca:	d814      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80055cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055d0:	d019      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055d6:	d80e      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d016      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e0:	d109      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055e6:	3308      	adds	r3, #8
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 fd7d 	bl	80070e8 <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80055f4:	e00a      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800560a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10f      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005614:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005616:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800561a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800561e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005624:	4a02      	ldr	r2, [pc, #8]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005626:	430b      	orrs	r3, r1
 8005628:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800562e:	bf00      	nop
 8005630:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005638:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800563c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800564a:	2300      	movs	r3, #0
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d043      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005658:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800565c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005662:	d021      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8005664:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005668:	d81a      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800566e:	d01d      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005674:	d814      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005676:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800567a:	d019      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800567c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005680:	d80e      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568a:	d109      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800568c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005690:	3308      	adds	r3, #8
 8005692:	4618      	mov	r0, r3
 8005694:	f001 fd28 	bl	80070e8 <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800569e:	e00a      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056a6:	e006      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056a8:	bf00      	nop
 80056aa:	e004      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056ac:	bf00      	nop
 80056ae:	e002      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056b0:	bf00      	nop
 80056b2:	e000      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80056b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80056be:	4bb6      	ldr	r3, [pc, #728]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80056c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	4ab2      	ldr	r2, [pc, #712]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80056d6:	e003      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056dc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80056e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80056ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ee:	2300      	movs	r3, #0
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056f6:	460b      	mov	r3, r1
 80056f8:	4313      	orrs	r3, r2
 80056fa:	d030      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005702:	2b05      	cmp	r3, #5
 8005704:	d80f      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8005706:	2b03      	cmp	r3, #3
 8005708:	d211      	bcs.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800570a:	2b01      	cmp	r3, #1
 800570c:	d911      	bls.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800570e:	2b02      	cmp	r3, #2
 8005710:	d109      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005712:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005716:	3308      	adds	r3, #8
 8005718:	4618      	mov	r0, r3
 800571a:	f001 fce5 	bl	80070e8 <RCCEx_PLL2_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10c      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800573c:	4b96      	ldr	r3, [pc, #600]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800573e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005742:	f023 0107 	bic.w	r1, r3, #7
 8005746:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800574a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800574c:	4a92      	ldr	r2, [pc, #584]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800574e:	430b      	orrs	r3, r1
 8005750:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005754:	e003      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005756:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800575a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800575e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	2100      	movs	r1, #0
 8005768:	63b9      	str	r1, [r7, #56]	@ 0x38
 800576a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005770:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005774:	460b      	mov	r3, r1
 8005776:	4313      	orrs	r3, r2
 8005778:	d022      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800577a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800577e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8005784:	2b08      	cmp	r3, #8
 8005786:	d005      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800578e:	e002      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005790:	bf00      	nop
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800579e:	4b7e      	ldr	r3, [pc, #504]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057a4:	f023 0108 	bic.w	r1, r3, #8
 80057a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ae:	4a7a      	ldr	r2, [pc, #488]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80057bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80057cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ce:	2300      	movs	r3, #0
 80057d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	f000 80b0 	beq.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80057de:	4b6f      	ldr	r3, [pc, #444]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	4a6e      	ldr	r2, [pc, #440]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ea:	f7fc ff2d 	bl	8002648 <HAL_GetTick>
 80057ee:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057f2:	e00b      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f4:	f7fc ff28 	bl	8002648 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d903      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800580c:	4b63      	ldr	r3, [pc, #396]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0ed      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8005818:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800581c:	2b00      	cmp	r3, #0
 800581e:	f040 808a 	bne.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005822:	4b5d      	ldr	r3, [pc, #372]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005830:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d022      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8005838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800583c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800583e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005842:	429a      	cmp	r2, r3
 8005844:	d01b      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005846:	4b54      	ldr	r3, [pc, #336]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800584c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005854:	4b50      	ldr	r3, [pc, #320]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800585a:	4a4f      	ldr	r2, [pc, #316]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005864:	4b4c      	ldr	r3, [pc, #304]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800586a:	4a4b      	ldr	r2, [pc, #300]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005870:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005874:	4a48      	ldr	r2, [pc, #288]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800587a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d019      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fc fedd 	bl	8002648 <HAL_GetTick>
 800588e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005892:	e00d      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005894:	f7fc fed8 	bl	8002648 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d903      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80058ae:	e006      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b0:	4b39      	ldr	r3, [pc, #228]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ea      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80058be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d132      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80058c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80058d6:	4b30      	ldr	r3, [pc, #192]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80058ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058f0:	430b      	orrs	r3, r1
 80058f2:	61d3      	str	r3, [r2, #28]
 80058f4:	e005      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80058f6:	4b28      	ldr	r3, [pc, #160]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4a27      	ldr	r2, [pc, #156]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005900:	61d3      	str	r3, [r2, #28]
 8005902:	4b25      	ldr	r3, [pc, #148]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005908:	4a23      	ldr	r2, [pc, #140]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800590a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005912:	4b21      	ldr	r3, [pc, #132]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005914:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005918:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800591c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005922:	4a1d      	ldr	r2, [pc, #116]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005924:	430b      	orrs	r3, r1
 8005926:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800592a:	e008      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800592c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005930:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8005934:	e003      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005936:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800593a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800593e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005950:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005954:	460b      	mov	r3, r1
 8005956:	4313      	orrs	r3, r2
 8005958:	d038      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800595a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800595e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005960:	2b30      	cmp	r3, #48	@ 0x30
 8005962:	d014      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005964:	2b30      	cmp	r3, #48	@ 0x30
 8005966:	d80e      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005968:	2b20      	cmp	r3, #32
 800596a:	d012      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800596c:	2b20      	cmp	r3, #32
 800596e:	d80a      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d015      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005974:	2b10      	cmp	r3, #16
 8005976:	d106      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005978:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	4a06      	ldr	r2, [pc, #24]	@ (8005998 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005982:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005984:	e00d      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800598c:	e009      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800598e:	bf00      	nop
 8005990:	e007      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005992:	bf00      	nop
 8005994:	e005      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005996:	bf00      	nop
 8005998:	44020c00 	.word	0x44020c00
 800599c:	44020800 	.word	0x44020800
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80059aa:	4bb5      	ldr	r3, [pc, #724]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ba:	49b1      	ldr	r1, [pc, #708]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80059c2:	e003      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80059cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d03c      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80059e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d81d      	bhi.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a0d 	.word	0x08005a0d
 80059fc:	08005a1b 	.word	0x08005a1b
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	08005a37 	.word	0x08005a37
 8005a08:	08005a37 	.word	0x08005a37
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	4a9b      	ldr	r2, [pc, #620]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a16:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005a18:	e00e      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a1e:	3308      	adds	r3, #8
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 fb61 	bl	80070e8 <RCCEx_PLL2_Config>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8005a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10c      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005a40:	4b8f      	ldr	r3, [pc, #572]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a46:	f023 0207 	bic.w	r2, r3, #7
 8005a4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a50:	498b      	ldr	r1, [pc, #556]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a58:	e003      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a5e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005a62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d03c      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d01f      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d819      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a8c:	2b18      	cmp	r3, #24
 8005a8e:	d01d      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005a90:	2b18      	cmp	r3, #24
 8005a92:	d815      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d007      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005a9c:	e010      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9e:	4b78      	ldr	r3, [pc, #480]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	4a77      	ldr	r2, [pc, #476]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005aaa:	e010      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 fb18 	bl	80070e8 <RCCEx_PLL2_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005abe:	e006      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ace:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005adc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	4966      	ldr	r1, [pc, #408]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005aee:	e003      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005af4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4313      	orrs	r3, r2
 8005b12:	d03e      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1e:	d020      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b24:	d819      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b28:	d01d      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b2c:	d815      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005b32:	2b40      	cmp	r3, #64	@ 0x40
 8005b34:	d007      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005b36:	e010      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b38:	4b51      	ldr	r3, [pc, #324]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	4a50      	ldr	r2, [pc, #320]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b44:	e010      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 facb 	bl	80070e8 <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005b60:	e002      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b68:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b70:	4b43      	ldr	r3, [pc, #268]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b76:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b80:	493f      	ldr	r1, [pc, #252]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b8e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d038      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb8:	d00e      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbe:	d815      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc8:	d110      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bca:	4b2d      	ldr	r3, [pc, #180]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	4a2c      	ldr	r2, [pc, #176]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bd6:	e00e      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bdc:	3308      	adds	r3, #8
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fa82 	bl	80070e8 <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bea:	e004      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10c      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005bfe:	4b20      	ldr	r3, [pc, #128]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	491c      	ldr	r1, [pc, #112]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005c16:	e003      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6039      	str	r1, [r7, #0]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d039      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c42:	2b30      	cmp	r3, #48	@ 0x30
 8005c44:	d01e      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005c46:	2b30      	cmp	r3, #48	@ 0x30
 8005c48:	d815      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d002      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d007      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005c52:	e010      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c54:	4b0a      	ldr	r3, [pc, #40]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	4a09      	ldr	r2, [pc, #36]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c60:	e011      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c66:	3308      	adds	r3, #8
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 fa3d 	bl	80070e8 <RCCEx_PLL2_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c74:	e007      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005c7c:	e003      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005c7e:	bf00      	nop
 8005c80:	44020c00 	.word	0x44020c00
        break;
 8005c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c86:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c9e:	4908      	ldr	r1, [pc, #32]	@ (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005ca6:	e003      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005cac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005cb0:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	37a8      	adds	r7, #168	@ 0xa8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cbe:	bf00      	nop
 8005cc0:	44020c00 	.word	0x44020c00

08005cc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b08b      	sub	sp, #44	@ 0x2c
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005ccc:	4bad      	ldr	r3, [pc, #692]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005cd6:	4bab      	ldr	r3, [pc, #684]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005ce0:	4ba8      	ldr	r3, [pc, #672]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cea:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005cec:	4ba5      	ldr	r3, [pc, #660]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005cf6:	4ba3      	ldr	r3, [pc, #652]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8126 	beq.w	8005f66 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d053      	beq.n	8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d86f      	bhi.n	8005e06 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d003      	beq.n	8005d34 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d02b      	beq.n	8005d8a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005d32:	e068      	b.n	8005e06 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d34:	4b93      	ldr	r3, [pc, #588]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	08db      	lsrs	r3, r3, #3
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	4a92      	ldr	r2, [pc, #584]	@ (8005f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
 8005d44:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	ee07 3a90 	vmov	s15, r3
 8005d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d68:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d6c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d88:	e068      	b.n	8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005f90 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005d98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005daa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005dc6:	e049      	b.n	8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005f94 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005de8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005e04:	e02a      	b.n	8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e06:	4b5f      	ldr	r3, [pc, #380]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	08db      	lsrs	r3, r3, #3
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	4a5d      	ldr	r2, [pc, #372]	@ (8005f88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005e12:	fa22 f303 	lsr.w	r3, r2, r3
 8005e16:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	ee07 3a90 	vmov	s15, r3
 8005e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e3e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e5a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e5c:	4b49      	ldr	r3, [pc, #292]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e68:	d121      	bne.n	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005e6a:	4b46      	ldr	r3, [pc, #280]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e76:	4b43      	ldr	r3, [pc, #268]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7a:	0a5b      	lsrs	r3, r3, #9
 8005e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e90:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e006      	b.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	e002      	b.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eb4:	4b33      	ldr	r3, [pc, #204]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ec0:	d121      	bne.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005ec2:	4b30      	ldr	r3, [pc, #192]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d017      	beq.n	8005efe <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ece:	4b2d      	ldr	r3, [pc, #180]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed2:	0c1b      	lsrs	r3, r3, #16
 8005ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005ee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ee8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f18:	d121      	bne.n	8005f5e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d017      	beq.n	8005f56 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f26:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2a:	0e1b      	lsrs	r3, r3, #24
 8005f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f30:	ee07 3a90 	vmov	s15, r3
 8005f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005f40:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f4c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005f54:	e010      	b.n	8005f78 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	e00c      	b.n	8005f78 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	609a      	str	r2, [r3, #8]
}
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	372c      	adds	r7, #44	@ 0x2c
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	44020c00 	.word	0x44020c00
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	46000000 	.word	0x46000000
 8005f90:	4a742400 	.word	0x4a742400
 8005f94:	4bbebc20 	.word	0x4bbebc20

08005f98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b08b      	sub	sp, #44	@ 0x2c
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005fa0:	4bad      	ldr	r3, [pc, #692]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005faa:	4bab      	ldr	r3, [pc, #684]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	0a1b      	lsrs	r3, r3, #8
 8005fba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fbe:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005fc0:	4ba5      	ldr	r3, [pc, #660]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005fca:	4ba3      	ldr	r3, [pc, #652]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	08db      	lsrs	r3, r3, #3
 8005fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8126 	beq.w	800623a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d053      	beq.n	800609c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d86f      	bhi.n	80060da <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d003      	beq.n	8006008 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d02b      	beq.n	800605e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006006:	e068      	b.n	80060da <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006008:	4b93      	ldr	r3, [pc, #588]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	08db      	lsrs	r3, r3, #3
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	4a92      	ldr	r2, [pc, #584]	@ (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006040:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006058:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800605c:	e068      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006068:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006264 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800606c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a04 	vldr	s12, [r7, #16]
 800607e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800609a:	e049      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80060bc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80060c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80060d8:	e02a      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060da:	4b5f      	ldr	r3, [pc, #380]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	4a5d      	ldr	r2, [pc, #372]	@ (800625c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80060e6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ea:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006112:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800612e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006130:	4b49      	ldr	r3, [pc, #292]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613c:	d121      	bne.n	8006182 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800613e:	4b46      	ldr	r3, [pc, #280]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800614a:	4b43      	ldr	r3, [pc, #268]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	0a5b      	lsrs	r3, r3, #9
 8006150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800615c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006160:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006164:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800616c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006170:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e006      	b.n	8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e002      	b.n	8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006188:	4b33      	ldr	r3, [pc, #204]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006194:	d121      	bne.n	80061da <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006196:	4b30      	ldr	r3, [pc, #192]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80061b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80061bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	605a      	str	r2, [r3, #4]
 80061d8:	e002      	b.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ec:	d121      	bne.n	8006232 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d017      	beq.n	800622a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061fa:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	0e1b      	lsrs	r3, r3, #24
 8006200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006204:	ee07 3a90 	vmov	s15, r3
 8006208:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800620c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006210:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006214:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006220:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006228:	e010      	b.n	800624c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	609a      	str	r2, [r3, #8]
}
 8006230:	e00c      	b.n	800624c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	e008      	b.n	800624c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
}
 800624c:	bf00      	nop
 800624e:	372c      	adds	r7, #44	@ 0x2c
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	44020c00 	.word	0x44020c00
 800625c:	03d09000 	.word	0x03d09000
 8006260:	46000000 	.word	0x46000000
 8006264:	4a742400 	.word	0x4a742400
 8006268:	4bbebc20 	.word	0x4bbebc20

0800626c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	@ 0x30
 8006270:	af00      	add	r7, sp, #0
 8006272:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800627e:	430b      	orrs	r3, r1
 8006280:	d14b      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006282:	4bc4      	ldr	r3, [pc, #784]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800628e:	4bc1      	ldr	r3, [pc, #772]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d108      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a2:	d104      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80062a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062aa:	f000 bf14 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80062ae:	4bb9      	ldr	r3, [pc, #740]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062bc:	d108      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062c4:	d104      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80062c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062cc:	f000 bf03 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80062d0:	4bb0      	ldr	r3, [pc, #704]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062dc:	d119      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80062de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e4:	d115      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062e6:	4bab      	ldr	r3, [pc, #684]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80062ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062f2:	d30a      	bcc.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80062f4:	4ba7      	ldr	r3, [pc, #668]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	0a1b      	lsrs	r3, r3, #8
 80062fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062fe:	4aa6      	ldr	r2, [pc, #664]	@ (8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006306:	f000 bee6 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800630e:	f000 bee2 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006316:	f000 bede 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800631a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800631e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8006322:	ea52 0301 	orrs.w	r3, r2, r1
 8006326:	f000 838e 	beq.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800632a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800632e:	2a01      	cmp	r2, #1
 8006330:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8006334:	f080 86cc 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8006340:	ea52 0301 	orrs.w	r3, r2, r1
 8006344:	f000 82aa 	beq.w	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	2a01      	cmp	r2, #1
 800634e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8006352:	f080 86bd 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635a:	f1a3 0110 	sub.w	r1, r3, #16
 800635e:	ea52 0301 	orrs.w	r3, r2, r1
 8006362:	f000 8681 	beq.w	8007068 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8006366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636a:	2a01      	cmp	r2, #1
 800636c:	f173 0310 	sbcs.w	r3, r3, #16
 8006370:	f080 86ae 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006378:	1f19      	subs	r1, r3, #4
 800637a:	ea52 0301 	orrs.w	r3, r2, r1
 800637e:	f000 84b1 	beq.w	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	2a01      	cmp	r2, #1
 8006388:	f173 0304 	sbcs.w	r3, r3, #4
 800638c:	f080 86a0 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006394:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006398:	430b      	orrs	r3, r1
 800639a:	f000 85aa 	beq.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800639e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a2:	497e      	ldr	r1, [pc, #504]	@ (800659c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80063a4:	428a      	cmp	r2, r1
 80063a6:	f173 0300 	sbcs.w	r3, r3, #0
 80063aa:	f080 8691 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80063b6:	430b      	orrs	r3, r1
 80063b8:	f000 8532 	beq.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80063bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c0:	4977      	ldr	r1, [pc, #476]	@ (80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80063c2:	428a      	cmp	r2, r1
 80063c4:	f173 0300 	sbcs.w	r3, r3, #0
 80063c8:	f080 8682 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80063d4:	430b      	orrs	r3, r1
 80063d6:	f000 84bc 	beq.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80063da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063de:	4971      	ldr	r1, [pc, #452]	@ (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80063e0:	428a      	cmp	r2, r1
 80063e2:	f173 0300 	sbcs.w	r3, r3, #0
 80063e6:	f080 8673 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ee:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80063f2:	430b      	orrs	r3, r1
 80063f4:	f000 85f2 	beq.w	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80063f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fc:	496a      	ldr	r1, [pc, #424]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80063fe:	428a      	cmp	r2, r1
 8006400:	f173 0300 	sbcs.w	r3, r3, #0
 8006404:	f080 8664 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006410:	430b      	orrs	r3, r1
 8006412:	f000 81e5 	beq.w	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641a:	4964      	ldr	r1, [pc, #400]	@ (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800641c:	428a      	cmp	r2, r1
 800641e:	f173 0300 	sbcs.w	r3, r3, #0
 8006422:	f080 8655 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800642e:	430b      	orrs	r3, r1
 8006430:	f000 83cc 	beq.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006438:	495d      	ldr	r1, [pc, #372]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800643a:	428a      	cmp	r2, r1
 800643c:	f173 0300 	sbcs.w	r3, r3, #0
 8006440:	f080 8646 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006448:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800644c:	430b      	orrs	r3, r1
 800644e:	f000 8331 	beq.w	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8006452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006456:	4957      	ldr	r1, [pc, #348]	@ (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006458:	428a      	cmp	r2, r1
 800645a:	f173 0300 	sbcs.w	r3, r3, #0
 800645e:	f080 8637 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006466:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800646a:	430b      	orrs	r3, r1
 800646c:	f000 82bb 	beq.w	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8006470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006474:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8006478:	f173 0300 	sbcs.w	r3, r3, #0
 800647c:	f080 8628 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006484:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006488:	430b      	orrs	r3, r1
 800648a:	f000 826d 	beq.w	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800648e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006492:	f244 0101 	movw	r1, #16385	@ 0x4001
 8006496:	428a      	cmp	r2, r1
 8006498:	f173 0300 	sbcs.w	r3, r3, #0
 800649c:	f080 8618 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80064a8:	430b      	orrs	r3, r1
 80064aa:	f000 821e 	beq.w	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80064ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80064b6:	428a      	cmp	r2, r1
 80064b8:	f173 0300 	sbcs.w	r3, r3, #0
 80064bc:	f080 8608 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80064c8:	430b      	orrs	r3, r1
 80064ca:	f000 8137 	beq.w	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80064ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80064d6:	428a      	cmp	r2, r1
 80064d8:	f173 0300 	sbcs.w	r3, r3, #0
 80064dc:	f080 85f8 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e4:	1f11      	subs	r1, r2, #4
 80064e6:	430b      	orrs	r3, r1
 80064e8:	f000 80d2 	beq.w	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80064ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f0:	2a05      	cmp	r2, #5
 80064f2:	f173 0300 	sbcs.w	r3, r3, #0
 80064f6:	f080 85eb 	bcs.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fe:	1e51      	subs	r1, r2, #1
 8006500:	430b      	orrs	r3, r1
 8006502:	d006      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006508:	1e91      	subs	r1, r2, #2
 800650a:	430b      	orrs	r3, r1
 800650c:	d06c      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800650e:	f000 bddf 	b.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006512:	4b20      	ldr	r3, [pc, #128]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006524:	f7fe fd7e 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8006528:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800652a:	f000 bdd4 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800652e:	4b19      	ldr	r3, [pc, #100]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006536:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800653a:	d10a      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006542:	f107 030c 	add.w	r3, r7, #12
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fd26 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006550:	e048      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006560:	2b03      	cmp	r3, #3
 8006562:	d109      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006564:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	4a12      	ldr	r2, [pc, #72]	@ (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006576:	e035      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006578:	4b06      	ldr	r3, [pc, #24]	@ (8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d11c      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	2b04      	cmp	r3, #4
 800658a:	d119      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800658c:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006590:	e028      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006592:	bf00      	nop
 8006594:	44020c00 	.word	0x44020c00
 8006598:	017d7840 	.word	0x017d7840
 800659c:	20000001 	.word	0x20000001
 80065a0:	10000001 	.word	0x10000001
 80065a4:	08000001 	.word	0x08000001
 80065a8:	04000001 	.word	0x04000001
 80065ac:	00200001 	.word	0x00200001
 80065b0:	00040001 	.word	0x00040001
 80065b4:	00020001 	.word	0x00020001
 80065b8:	03d09000 	.word	0x03d09000
 80065bc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80065c0:	4b9f      	ldr	r3, [pc, #636]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d106      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	2b05      	cmp	r3, #5
 80065d2:	d103      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80065d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065da:	e003      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065e0:	f000 bd79 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80065e4:	f000 bd77 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065e8:	4b95      	ldr	r3, [pc, #596]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065f2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fe fcfd 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80065fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006600:	f000 bd69 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006604:	4b8e      	ldr	r3, [pc, #568]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800660c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006610:	d10a      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	2b08      	cmp	r3, #8
 8006616:	d107      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fcbb 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006626:	e031      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006628:	4b85      	ldr	r3, [pc, #532]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d10c      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	2b18      	cmp	r3, #24
 8006638:	d109      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800663a:	4b81      	ldr	r3, [pc, #516]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a7f      	ldr	r2, [pc, #508]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664c:	e01e      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800664e:	4b7c      	ldr	r3, [pc, #496]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800665a:	d105      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2b20      	cmp	r3, #32
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8006662:	4b79      	ldr	r3, [pc, #484]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006666:	e011      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006668:	4b75      	ldr	r3, [pc, #468]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800666a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	2b28      	cmp	r3, #40	@ 0x28
 800667a:	d103      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800667c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006682:	e003      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006688:	f000 bd25 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800668c:	f000 bd23 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006690:	4b6b      	ldr	r3, [pc, #428]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006696:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800669a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7fe fca9 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80066a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80066a8:	f000 bd15 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80066ac:	4b64      	ldr	r3, [pc, #400]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b8:	d10a      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80066ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066bc:	2b40      	cmp	r3, #64	@ 0x40
 80066be:	d107      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fc67 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ce:	e033      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80066d0:	4b5b      	ldr	r3, [pc, #364]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d10c      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	2bc0      	cmp	r3, #192	@ 0xc0
 80066e0:	d109      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066e2:	4b57      	ldr	r3, [pc, #348]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	08db      	lsrs	r3, r3, #3
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	4a55      	ldr	r2, [pc, #340]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80066ee:	fa22 f303 	lsr.w	r3, r2, r3
 80066f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f4:	e020      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80066f6:	4b52      	ldr	r3, [pc, #328]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800670c:	4b4e      	ldr	r3, [pc, #312]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006712:	4b4b      	ldr	r3, [pc, #300]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d107      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006726:	d103      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8006728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800672e:	e003      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006734:	f000 bccf 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006738:	f000 bccd 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800673c:	4b40      	ldr	r3, [pc, #256]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800673e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006742:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006746:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800674e:	f7fe fc7f 	bl	8005050 <HAL_RCC_GetPCLK3Freq>
 8006752:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006754:	f000 bcbf 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800675e:	d108      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006760:	f107 030c 	add.w	r3, r7, #12
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fc17 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800676e:	f000 bcb2 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006772:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d10d      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006786:	4b2e      	ldr	r3, [pc, #184]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	08db      	lsrs	r3, r3, #3
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	4a2c      	ldr	r2, [pc, #176]	@ (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006798:	e020      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800679a:	4b29      	ldr	r3, [pc, #164]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a6:	d106      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067ae:	d102      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80067b6:	4b22      	ldr	r3, [pc, #136]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80067b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80067c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80067ca:	d103      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80067cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067d2:	e003      	b.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067d8:	f000 bc7d 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80067dc:	f000 bc7b 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80067e0:	4b17      	ldr	r3, [pc, #92]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80067e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80067f2:	f7fe fbe5 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 80067f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80067f8:	f000 bc6d 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d104      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe fab1 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8006806:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8006808:	f000 bc65 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	2b02      	cmp	r3, #2
 8006810:	d108      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006812:	f107 030c 	add.w	r3, r7, #12
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fbbe 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006820:	f000 bc59 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006824:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006830:	d10e      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	2b03      	cmp	r3, #3
 8006836:	d10b      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8006838:	4b04      	ldr	r3, [pc, #16]	@ (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800683c:	e02c      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800683e:	bf00      	nop
 8006840:	44020c00 	.word	0x44020c00
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
 800684c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006850:	4b95      	ldr	r3, [pc, #596]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d10c      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	2b04      	cmp	r3, #4
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006862:	4b91      	ldr	r3, [pc, #580]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	4a8f      	ldr	r2, [pc, #572]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006876:	4b8c      	ldr	r3, [pc, #560]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800687e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006882:	d105      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	2b05      	cmp	r3, #5
 8006888:	d102      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800688a:	4b89      	ldr	r3, [pc, #548]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800688e:	e003      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006894:	f000 bc1f 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006898:	f000 bc1d 	b.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800689c:	4b82      	ldr	r3, [pc, #520]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800689e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80068a8:	4b7f      	ldr	r3, [pc, #508]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d106      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80068bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c2:	e011      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80068c4:	4b78      	ldr	r3, [pc, #480]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d2:	d106      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d103      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80068da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80068e6:	e3f6      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80068e8:	e3f5      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068ea:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d103      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fe fb7c 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8006900:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006902:	e3e8      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fb41 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800691a:	e3dc      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800691c:	4b62      	ldr	r3, [pc, #392]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d10d      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692e:	d109      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006930:	4b5d      	ldr	r3, [pc, #372]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	4a5c      	ldr	r2, [pc, #368]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006942:	e010      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006944:	4b58      	ldr	r3, [pc, #352]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800694c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006950:	d106      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006958:	d102      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800695a:	4b55      	ldr	r3, [pc, #340]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	e002      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006964:	e3b7      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006966:	e3b6      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006968:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800696a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800696e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800697a:	f7fe fb3d 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 800697e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006980:	e3a9      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8006982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006988:	d107      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698a:	f107 030c 	add.w	r3, r7, #12
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fb02 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006998:	e39d      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800699a:	4b43      	ldr	r3, [pc, #268]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d10d      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80069a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069ac:	d109      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069ae:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	4a3c      	ldr	r2, [pc, #240]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c0:	e010      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80069c2:	4b39      	ldr	r3, [pc, #228]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ce:	d106      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80069d6:	d102      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80069d8:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80069da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069dc:	e002      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069e2:	e378      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80069e4:	e377      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80069e6:	4b30      	ldr	r3, [pc, #192]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069ec:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe fafe 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80069fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069fe:	e36a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a06:	d107      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a08:	f107 030c 	add.w	r3, r7, #12
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff fac3 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a16:	e35e      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006a18:	4b23      	ldr	r3, [pc, #140]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d10d      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a2a:	d109      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a3e:	e34a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a44:	e347      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006a46:	4b18      	ldr	r3, [pc, #96]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a4c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a58:	f7fe fafa 	bl	8005050 <HAL_RCC_GetPCLK3Freq>
 8006a5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a5e:	e33a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a66:	d107      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a68:	f107 030c 	add.w	r3, r7, #12
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fa93 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a76:	e32e      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d10d      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a8c:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	4a05      	ldr	r2, [pc, #20]	@ (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a9e:	e31a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006aa4:	e317      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006aa6:	bf00      	nop
 8006aa8:	44020c00 	.word	0x44020c00
 8006aac:	03d09000 	.word	0x03d09000
 8006ab0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ab4:	4b9b      	ldr	r3, [pc, #620]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ab6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006aba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ac6:	d044      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ace:	d879      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad6:	d02d      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ade:	d871      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae6:	d017      	beq.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aee:	d869      	bhi.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afc:	d004      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8006afe:	e061      	b.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b00:	f7fe faa6 	bl	8005050 <HAL_RCC_GetPCLK3Freq>
 8006b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006b06:	e060      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fa43 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b16:	e058      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b18:	4b82      	ldr	r3, [pc, #520]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d103      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b2c:	e04d      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b32:	e04a      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b34:	4b7b      	ldr	r3, [pc, #492]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b42:	d103      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006b44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b4a:	e03e      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b50:	e03b      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b52:	4b74      	ldr	r3, [pc, #464]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b5e:	4b71      	ldr	r3, [pc, #452]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d10c      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b70:	4b6c      	ldr	r3, [pc, #432]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b82:	e01e      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b84:	4b67      	ldr	r3, [pc, #412]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b98:	d102      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b9a:	4b64      	ldr	r3, [pc, #400]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b9e:	e010      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ba0:	4b60      	ldr	r3, [pc, #384]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bac:	d106      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb4:	d102      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8006bc2:	e002      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bc8:	bf00      	nop
          }
        }
        break;
 8006bca:	e284      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bcc:	4b55      	ldr	r3, [pc, #340]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006bce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006bd2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bde:	d044      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006be6:	d879      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bee:	d02d      	beq.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf6:	d871      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bfe:	d017      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c06:	d869      	bhi.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8006c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c14:	d004      	beq.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006c16:	e061      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fe f9ee 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006c1e:	e060      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff f9b7 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c2e:	e058      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c30:	4b3c      	ldr	r3, [pc, #240]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d103      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c44:	e04d      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c4a:	e04a      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c4c:	4b35      	ldr	r3, [pc, #212]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c5a:	d103      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8006c5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c62:	e03e      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c68:	e03b      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c70:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c76:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d10c      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c88:	4b26      	ldr	r3, [pc, #152]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	4a25      	ldr	r2, [pc, #148]	@ (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9a:	e01e      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c9c:	4b21      	ldr	r3, [pc, #132]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb0:	d102      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb6:	e010      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc4:	d106      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006cce:	4b18      	ldr	r3, [pc, #96]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd2:	e002      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006cd8:	e003      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006cda:	e002      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ce0:	bf00      	nop
          }
        }
        break;
 8006ce2:	e1f8      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cfc:	d105      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006d08:	e1e5      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d10:	d110      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d12:	f107 0318 	add.w	r3, r7, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe ffd4 	bl	8005cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d20:	e1d9      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006d22:	bf00      	nop
 8006d24:	44020c00 	.word	0x44020c00
 8006d28:	03d09000 	.word	0x03d09000
 8006d2c:	003d0900 	.word	0x003d0900
 8006d30:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3a:	d107      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d3c:	f107 030c 	add.w	r3, r7, #12
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff f929 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d4a:	e1c4      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d50:	e1c1      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d52:	4b9d      	ldr	r3, [pc, #628]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d859      	bhi.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006d64:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6a:	bf00      	nop
 8006d6c:	08006d81 	.word	0x08006d81
 8006d70:	08006d91 	.word	0x08006d91
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da7 	.word	0x08006da7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fe ff9d 	bl	8005cc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d8e:	e046      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff f8ff 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d9e:	e03e      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006da0:	4b8a      	ldr	r3, [pc, #552]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006da4:	e03b      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006da6:	4b88      	ldr	r3, [pc, #544]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006db0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006db2:	4b85      	ldr	r3, [pc, #532]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dc4:	4b80      	ldr	r3, [pc, #512]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a80      	ldr	r2, [pc, #512]	@ (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd6:	e01e      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de4:	d106      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d102      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006dee:	4b79      	ldr	r3, [pc, #484]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df2:	e010      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006df4:	4b74      	ldr	r3, [pc, #464]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e0a:	4b73      	ldr	r3, [pc, #460]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	e002      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006e14:	e003      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8006e16:	e002      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e1c:	bf00      	nop
          }
        }
        break;
 8006e1e:	e15a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e20:	4b69      	ldr	r3, [pc, #420]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d022      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	2b20      	cmp	r3, #32
 8006e36:	d858      	bhi.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d019      	beq.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	2b18      	cmp	r3, #24
 8006e42:	d852      	bhi.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d008      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006e50:	e04b      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e52:	f107 0318 	add.w	r3, r7, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe ff34 	bl	8005cc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e60:	e046      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f896 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e70:	e03e      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e72:	4b56      	ldr	r3, [pc, #344]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e76:	e03b      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e78:	4b53      	ldr	r3, [pc, #332]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e7e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e84:	4b50      	ldr	r3, [pc, #320]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d10c      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e96:	4b4c      	ldr	r3, [pc, #304]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ea8:	e01e      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eaa:	4b47      	ldr	r3, [pc, #284]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb6:	d106      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ec0:	4b44      	ldr	r3, [pc, #272]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ec4:	e010      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ec6:	4b40      	ldr	r3, [pc, #256]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed2:	d106      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eda:	d102      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006edc:	4b3e      	ldr	r3, [pc, #248]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee0:	e002      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006ee6:	e003      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006eee:	bf00      	nop
          }
        }
        break;
 8006ef0:	e0f1      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006ef2:	4b35      	ldr	r3, [pc, #212]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ef8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f04:	d023      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f0c:	d858      	bhi.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f12:	d019      	beq.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f18:	d852      	bhi.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	2b40      	cmp	r3, #64	@ 0x40
 8006f24:	d008      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006f26:	e04b      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f28:	f107 0318 	add.w	r3, r7, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fec9 	bl	8005cc4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f36:	e046      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f82b 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f46:	e03e      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006f48:	4b20      	ldr	r3, [pc, #128]	@ (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f4c:	e03b      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f6c:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	08db      	lsrs	r3, r3, #3
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f7e:	e01e      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f80:	4b11      	ldr	r3, [pc, #68]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f94:	d102      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f96:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f9a:	e010      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fb0:	d102      	bne.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fb6:	e002      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006fbc:	e003      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006fbe:	e002      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006fc4:	bf00      	nop
          }
        }
        break;
 8006fc6:	e086      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006fc8:	44020c00 	.word	0x44020c00
 8006fcc:	00bb8000 	.word	0x00bb8000
 8006fd0:	03d09000 	.word	0x03d09000
 8006fd4:	003d0900 	.word	0x003d0900
 8006fd8:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006fdc:	4b40      	ldr	r3, [pc, #256]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fe2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff4:	d105      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d102      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8006ffc:	4b39      	ldr	r3, [pc, #228]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007000:	e031      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007002:	4b37      	ldr	r3, [pc, #220]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700e:	d10a      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007012:	2b10      	cmp	r3, #16
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007016:	f107 0318 	add.w	r3, r7, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fe52 	bl	8005cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007024:	e01f      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007026:	4b2e      	ldr	r3, [pc, #184]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d106      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	2b20      	cmp	r3, #32
 8007038:	d103      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007040:	e011      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007042:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800704c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007050:	d106      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	2b30      	cmp	r3, #48	@ 0x30
 8007056:	d103      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8007058:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800705e:	e002      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8007064:	e037      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007066:	e036      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007068:	4b1d      	ldr	r3, [pc, #116]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800706a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800706e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007072:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007076:	2b10      	cmp	r3, #16
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800707a:	f107 0318 	add.w	r3, r7, #24
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fe20 	bl	8005cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8007088:	e025      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800708a:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007096:	d10a      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	2b20      	cmp	r3, #32
 800709c:	d107      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800709e:	f107 030c 	add.w	r3, r7, #12
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe ff78 	bl	8005f98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ac:	e00f      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80070ae:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ba:	d105      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	2b30      	cmp	r3, #48	@ 0x30
 80070c0:	d102      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80070c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070d4:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3730      	adds	r7, #48	@ 0x30
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	44020c00 	.word	0x44020c00
 80070e4:	02dc6c00 	.word	0x02dc6c00

080070e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80070f0:	4b48      	ldr	r3, [pc, #288]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a47      	ldr	r2, [pc, #284]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80070f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070fc:	f7fb faa4 	bl	8002648 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007102:	e008      	b.n	8007116 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007104:	f7fb faa0 	bl	8002648 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e07a      	b.n	800720c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007116:	4b3f      	ldr	r3, [pc, #252]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007122:	4b3c      	ldr	r3, [pc, #240]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6811      	ldr	r1, [r2, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6852      	ldr	r2, [r2, #4]
 8007136:	0212      	lsls	r2, r2, #8
 8007138:	430a      	orrs	r2, r1
 800713a:	4936      	ldr	r1, [pc, #216]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	3b01      	subs	r3, #1
 8007146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	025b      	lsls	r3, r3, #9
 8007152:	b29b      	uxth	r3, r3
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	3b01      	subs	r3, #1
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	3b01      	subs	r3, #1
 800716a:	061b      	lsls	r3, r3, #24
 800716c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007170:	4928      	ldr	r1, [pc, #160]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007172:	4313      	orrs	r3, r2
 8007174:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007176:	4b27      	ldr	r3, [pc, #156]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	f023 020c 	bic.w	r2, r3, #12
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	4924      	ldr	r1, [pc, #144]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007184:	4313      	orrs	r3, r2
 8007186:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007188:	4b22      	ldr	r3, [pc, #136]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	f023 0220 	bic.w	r2, r3, #32
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	491f      	ldr	r1, [pc, #124]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800719a:	4b1e      	ldr	r3, [pc, #120]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 800719c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	491c      	ldr	r1, [pc, #112]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80071a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	4a19      	ldr	r2, [pc, #100]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80071b4:	4b17      	ldr	r3, [pc, #92]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6a12      	ldr	r2, [r2, #32]
 80071c4:	00d2      	lsls	r2, r2, #3
 80071c6:	4913      	ldr	r1, [pc, #76]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80071cc:	4b11      	ldr	r3, [pc, #68]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d0:	4a10      	ldr	r2, [pc, #64]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071d2:	f043 0310 	orr.w	r3, r3, #16
 80071d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80071d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 80071de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071e4:	f7fb fa30 	bl	8002648 <HAL_GetTick>
 80071e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ea:	e008      	b.n	80071fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071ec:	f7fb fa2c 	bl	8002648 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e006      	b.n	800720c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071fe:	4b05      	ldr	r3, [pc, #20]	@ (8007214 <RCCEx_PLL2_Config+0x12c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800720a:	2300      	movs	r3, #0

}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	44020c00 	.word	0x44020c00

08007218 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0e7      	b.n	80073fa <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d105      	bne.n	8007244 <HAL_SPI_Init+0x2c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b0f      	cmp	r3, #15
 800723e:	d901      	bls.n	8007244 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0da      	b.n	80073fa <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fd47 	bl	8007cd8 <SPI_GetPacketSize>
 800724a:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <HAL_SPI_Init+0x42>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b08      	cmp	r3, #8
 8007258:	d811      	bhi.n	800727e <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800725e:	4a69      	ldr	r2, [pc, #420]	@ (8007404 <HAL_SPI_Init+0x1ec>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a67      	ldr	r2, [pc, #412]	@ (8007408 <HAL_SPI_Init+0x1f0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_SPI_Init+0x60>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a66      	ldr	r2, [pc, #408]	@ (800740c <HAL_SPI_Init+0x1f4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d104      	bne.n	8007282 <HAL_SPI_Init+0x6a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b10      	cmp	r3, #16
 800727c:	d901      	bls.n	8007282 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e0bb      	b.n	80073fa <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fa fe3e 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80072be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c8:	d119      	bne.n	80072fe <HAL_SPI_Init+0xe6>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072d2:	d103      	bne.n	80072dc <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10c      	bne.n	80072fe <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ec:	d107      	bne.n	80072fe <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00f      	beq.n	800732a <HAL_SPI_Init+0x112>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b06      	cmp	r3, #6
 8007310:	d90b      	bls.n	800732a <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e007      	b.n	800733a <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007338:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007342:	431a      	orrs	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734c:	ea42 0103 	orr.w	r1, r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a6:	ea42 0103 	orr.w	r1, r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40013000 	.word	0x40013000
 8007408:	40003800 	.word	0x40003800
 800740c:	40003c00 	.word	0x40003c00

08007410 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	4613      	mov	r3, r2
 800741e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3320      	adds	r3, #32
 8007426:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007428:	f7fb f90e 	bl	8002648 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b01      	cmp	r3, #1
 8007438:	d001      	beq.n	800743e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
 800743c:	e1e5      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <HAL_SPI_Transmit+0x3a>
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e1dd      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_SPI_Transmit+0x4c>
 8007458:	2302      	movs	r3, #2
 800745a:	e1d6      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2203      	movs	r2, #3
 8007468:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	88fa      	ldrh	r2, [r7, #6]
 800747e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80074b4:	d108      	bne.n	80074c8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e009      	b.n	80074dc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80074da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	88f9      	ldrh	r1, [r7, #6]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007508:	d107      	bne.n	800751a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007518:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b0f      	cmp	r3, #15
 8007520:	d956      	bls.n	80075d0 <HAL_SPI_Transmit+0x1c0>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a8d      	ldr	r2, [pc, #564]	@ (800775c <HAL_SPI_Transmit+0x34c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d04a      	beq.n	80075c2 <HAL_SPI_Transmit+0x1b2>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a8b      	ldr	r2, [pc, #556]	@ (8007760 <HAL_SPI_Transmit+0x350>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d045      	beq.n	80075c2 <HAL_SPI_Transmit+0x1b2>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a8a      	ldr	r2, [pc, #552]	@ (8007764 <HAL_SPI_Transmit+0x354>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d147      	bne.n	80075d0 <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007540:	e03f      	b.n	80075c2 <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d114      	bne.n	800757a <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007560:	1d1a      	adds	r2, r3, #4
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007578:	e023      	b.n	80075c2 <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800757a:	f7fb f865 	bl	8002648 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d803      	bhi.n	8007592 <HAL_SPI_Transmit+0x182>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d102      	bne.n	8007598 <HAL_SPI_Transmit+0x188>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d114      	bne.n	80075c2 <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 facf 	bl	8007b3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e123      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1b9      	bne.n	8007542 <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80075ce:	e0f6      	b.n	80077be <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	f240 80eb 	bls.w	80077b0 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80075da:	e05d      	b.n	8007698 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d132      	bne.n	8007650 <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d918      	bls.n	8007628 <HAL_SPI_Transmit+0x218>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d014      	beq.n	8007628 <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800760e:	1d1a      	adds	r2, r3, #4
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b02      	subs	r3, #2
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007626:	e037      	b.n	8007698 <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800762c:	881a      	ldrh	r2, [r3, #0]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007636:	1c9a      	adds	r2, r3, #2
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800764e:	e023      	b.n	8007698 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007650:	f7fa fffa 	bl	8002648 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d803      	bhi.n	8007668 <HAL_SPI_Transmit+0x258>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d102      	bne.n	800766e <HAL_SPI_Transmit+0x25e>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d114      	bne.n	8007698 <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 fa64 	bl	8007b3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800767a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e0b8      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d19b      	bne.n	80075dc <HAL_SPI_Transmit+0x1cc>
 80076a4:	e08b      	b.n	80077be <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d159      	bne.n	8007768 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d918      	bls.n	80076f2 <HAL_SPI_Transmit+0x2e2>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c4:	2b40      	cmp	r3, #64	@ 0x40
 80076c6:	d914      	bls.n	80076f2 <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d8:	1d1a      	adds	r2, r3, #4
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b04      	subs	r3, #4
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076f0:	e05e      	b.n	80077b0 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d917      	bls.n	800772e <HAL_SPI_Transmit+0x31e>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d013      	beq.n	800772e <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007714:	1c9a      	adds	r2, r3, #2
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b02      	subs	r3, #2
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800772c:	e040      	b.n	80077b0 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3320      	adds	r3, #32
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007758:	e02a      	b.n	80077b0 <HAL_SPI_Transmit+0x3a0>
 800775a:	bf00      	nop
 800775c:	40013000 	.word	0x40013000
 8007760:	40003800 	.word	0x40003800
 8007764:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007768:	f7fa ff6e 	bl	8002648 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	429a      	cmp	r2, r3
 8007776:	d803      	bhi.n	8007780 <HAL_SPI_Transmit+0x370>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d102      	bne.n	8007786 <HAL_SPI_Transmit+0x376>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d114      	bne.n	80077b0 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f9d8 	bl	8007b3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e02c      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f47f af74 	bne.w	80076a6 <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2200      	movs	r2, #0
 80077c6:	2108      	movs	r1, #8
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 fa57 	bl	8007c7c <SPI_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077da:	f043 0220 	orr.w	r2, r3, #32
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f9a9 	bl	8007b3c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8007808:	2300      	movs	r3, #0
  }
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop

08007814 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3330      	adds	r3, #48	@ 0x30
 800782a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800782c:	f7fa ff0c 	bl	8002648 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d001      	beq.n	8007842 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800783e:	2302      	movs	r3, #2
 8007840:	e172      	b.n	8007b28 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_SPI_Receive+0x3a>
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e16a      	b.n	8007b28 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_SPI_Receive+0x4c>
 800785c:	2302      	movs	r3, #2
 800785e:	e163      	b.n	8007b28 <HAL_SPI_Receive+0x314>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2204      	movs	r2, #4
 800786c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80078b8:	d108      	bne.n	80078cc <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e009      	b.n	80078e0 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80078de:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	0c1b      	lsrs	r3, r3, #16
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	88f9      	ldrh	r1, [r7, #6]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800790c:	d107      	bne.n	800791e <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d957      	bls.n	80079d6 <HAL_SPI_Receive+0x1c2>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a81      	ldr	r2, [pc, #516]	@ (8007b30 <HAL_SPI_Receive+0x31c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d04b      	beq.n	80079c8 <HAL_SPI_Receive+0x1b4>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a7f      	ldr	r2, [pc, #508]	@ (8007b34 <HAL_SPI_Receive+0x320>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d046      	beq.n	80079c8 <HAL_SPI_Receive+0x1b4>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b38 <HAL_SPI_Receive+0x324>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d148      	bne.n	80079d6 <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007944:	e040      	b.n	80079c8 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	f248 0308 	movw	r3, #32776	@ 0x8008
 8007950:	4013      	ands	r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d014      	beq.n	8007980 <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800795e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007960:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007966:	1d1a      	adds	r2, r3, #4
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800797e:	e023      	b.n	80079c8 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007980:	f7fa fe62 	bl	8002648 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d803      	bhi.n	8007998 <HAL_SPI_Receive+0x184>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d102      	bne.n	800799e <HAL_SPI_Receive+0x18a>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d114      	bne.n	80079c8 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f8cc 	bl	8007b3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e0af      	b.n	8007b28 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1b8      	bne.n	8007946 <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80079d4:	e095      	b.n	8007b02 <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b07      	cmp	r3, #7
 80079dc:	f240 808b 	bls.w	8007af6 <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80079e0:	e03f      	b.n	8007a62 <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d114      	bne.n	8007a1a <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	8812      	ldrh	r2, [r2, #0]
 80079f8:	b292      	uxth	r2, r2
 80079fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a00:	1c9a      	adds	r2, r3, #2
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007a18:	e023      	b.n	8007a62 <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a1a:	f7fa fe15 	bl	8002648 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d803      	bhi.n	8007a32 <HAL_SPI_Receive+0x21e>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d102      	bne.n	8007a38 <HAL_SPI_Receive+0x224>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d114      	bne.n	8007a62 <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f87f 	bl	8007b3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e062      	b.n	8007b28 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1b9      	bne.n	80079e2 <HAL_SPI_Receive+0x1ce>
 8007a6e:	e048      	b.n	8007b02 <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d117      	bne.n	8007aae <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a8a:	7812      	ldrb	r2, [r2, #0]
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007aac:	e023      	b.n	8007af6 <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aae:	f7fa fdcb 	bl	8002648 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d803      	bhi.n	8007ac6 <HAL_SPI_Receive+0x2b2>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d102      	bne.n	8007acc <HAL_SPI_Receive+0x2b8>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d114      	bne.n	8007af6 <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f835 	bl	8007b3c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ad8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e018      	b.n	8007b28 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1b6      	bne.n	8007a70 <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f81a 	bl	8007b3c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8007b26:	2300      	movs	r3, #0
  }
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40013000 	.word	0x40013000
 8007b34:	40003800 	.word	0x40003800
 8007b38:	40003c00 	.word	0x40003c00

08007b3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0208 	orr.w	r2, r2, #8
 8007b5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0210 	orr.w	r2, r2, #16
 8007b6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0201 	bic.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007b8a:	f023 0303 	bic.w	r3, r3, #3
 8007b8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007b9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	d014      	beq.n	8007bd6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f003 0320 	and.w	r3, r3, #32
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00f      	beq.n	8007bd6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0220 	orr.w	r2, r2, #32
 8007bd4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d014      	beq.n	8007c0c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00f      	beq.n	8007c0c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf2:	f043 0204 	orr.w	r2, r3, #4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00f      	beq.n	8007c36 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c1c:	f043 0201 	orr.w	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00f      	beq.n	8007c60 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c46:	f043 0208 	orr.w	r2, r3, #8
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c8c:	e010      	b.n	8007cb0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8e:	f7fa fcdb 	bl	8002648 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d803      	bhi.n	8007ca6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d102      	bne.n	8007cac <SPI_WaitOnFlagUntilTimeout+0x30>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e00f      	b.n	8007cd0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695a      	ldr	r2, [r3, #20]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	bf0c      	ite	eq
 8007cc0:	2301      	moveq	r3, #1
 8007cc2:	2300      	movne	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d0df      	beq.n	8007c8e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3307      	adds	r3, #7
 8007cf6:	08db      	lsrs	r3, r3, #3
 8007cf8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e049      	b.n	8007db4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fa f97d 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f000 fb97 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e049      	b.n	8007e62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f841 	bl	8007e6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f000 fb40 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <HAL_TIM_PWM_Start+0x24>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	e03c      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d109      	bne.n	8007ebe <HAL_TIM_PWM_Start+0x3e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	bf14      	ite	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	2300      	moveq	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	e02f      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d109      	bne.n	8007ed8 <HAL_TIM_PWM_Start+0x58>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	bf14      	ite	ne
 8007ed0:	2301      	movne	r3, #1
 8007ed2:	2300      	moveq	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e022      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b0c      	cmp	r3, #12
 8007edc:	d109      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0x72>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	e015      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d109      	bne.n	8007f0c <HAL_TIM_PWM_Start+0x8c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e008      	b.n	8007f1e <HAL_TIM_PWM_Start+0x9e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e06f      	b.n	8008006 <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_TIM_PWM_Start+0xb6>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f34:	e023      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_PWM_Start+0xc6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f44:	e01b      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_PWM_Start+0xd6>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f54:	e013      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b0c      	cmp	r3, #12
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_PWM_Start+0xe6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f64:	e00b      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d104      	bne.n	8007f76 <HAL_TIM_PWM_Start+0xf6>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f74:	e003      	b.n	8007f7e <HAL_TIM_PWM_Start+0xfe>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fdc6 	bl	8008b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1f      	ldr	r2, [pc, #124]	@ (8008010 <HAL_TIM_PWM_Start+0x190>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d107      	bne.n	8007fa6 <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a19      	ldr	r2, [pc, #100]	@ (8008010 <HAL_TIM_PWM_Start+0x190>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d009      	beq.n	8007fc4 <HAL_TIM_PWM_Start+0x144>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb8:	d004      	beq.n	8007fc4 <HAL_TIM_PWM_Start+0x144>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a15      	ldr	r2, [pc, #84]	@ (8008014 <HAL_TIM_PWM_Start+0x194>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d115      	bne.n	8007ff0 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	4b13      	ldr	r3, [pc, #76]	@ (8008018 <HAL_TIM_PWM_Start+0x198>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b06      	cmp	r3, #6
 8007fd4:	d015      	beq.n	8008002 <HAL_TIM_PWM_Start+0x182>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fdc:	d011      	beq.n	8008002 <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0201 	orr.w	r2, r2, #1
 8007fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fee:	e008      	b.n	8008002 <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	e000      	b.n	8008004 <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008002:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40000400 	.word	0x40000400
 8008018:	00010007 	.word	0x00010007

0800801c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008036:	2302      	movs	r3, #2
 8008038:	e0ff      	b.n	800823a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b14      	cmp	r3, #20
 8008046:	f200 80f0 	bhi.w	800822a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	080080a5 	.word	0x080080a5
 8008054:	0800822b 	.word	0x0800822b
 8008058:	0800822b 	.word	0x0800822b
 800805c:	0800822b 	.word	0x0800822b
 8008060:	080080e5 	.word	0x080080e5
 8008064:	0800822b 	.word	0x0800822b
 8008068:	0800822b 	.word	0x0800822b
 800806c:	0800822b 	.word	0x0800822b
 8008070:	08008127 	.word	0x08008127
 8008074:	0800822b 	.word	0x0800822b
 8008078:	0800822b 	.word	0x0800822b
 800807c:	0800822b 	.word	0x0800822b
 8008080:	08008167 	.word	0x08008167
 8008084:	0800822b 	.word	0x0800822b
 8008088:	0800822b 	.word	0x0800822b
 800808c:	0800822b 	.word	0x0800822b
 8008090:	080081a9 	.word	0x080081a9
 8008094:	0800822b 	.word	0x0800822b
 8008098:	0800822b 	.word	0x0800822b
 800809c:	0800822b 	.word	0x0800822b
 80080a0:	080081e9 	.word	0x080081e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fa4e 	bl	800854c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699a      	ldr	r2, [r3, #24]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0208 	orr.w	r2, r2, #8
 80080be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0204 	bic.w	r2, r2, #4
 80080ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6999      	ldr	r1, [r3, #24]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	619a      	str	r2, [r3, #24]
      break;
 80080e2:	e0a5      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fa96 	bl	800861c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800810e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6999      	ldr	r1, [r3, #24]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	021a      	lsls	r2, r3, #8
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	619a      	str	r2, [r3, #24]
      break;
 8008124:	e084      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fae3 	bl	80086f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0208 	orr.w	r2, r2, #8
 8008140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0204 	bic.w	r2, r2, #4
 8008150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69d9      	ldr	r1, [r3, #28]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	61da      	str	r2, [r3, #28]
      break;
 8008164:	e064      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fb2f 	bl	80087d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69da      	ldr	r2, [r3, #28]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69da      	ldr	r2, [r3, #28]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69d9      	ldr	r1, [r3, #28]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	021a      	lsls	r2, r3, #8
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	61da      	str	r2, [r3, #28]
      break;
 80081a6:	e043      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68b9      	ldr	r1, [r7, #8]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fb7c 	bl	80088ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0208 	orr.w	r2, r2, #8
 80081c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0204 	bic.w	r2, r2, #4
 80081d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	691a      	ldr	r2, [r3, #16]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80081e6:	e023      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fba8 	bl	8008944 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008202:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008212:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	021a      	lsls	r2, r3, #8
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008228:	e002      	b.n	8008230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	75fb      	strb	r3, [r7, #23]
      break;
 800822e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop

08008244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIM_ConfigClockSource+0x1c>
 800825c:	2302      	movs	r3, #2
 800825e:	e0fe      	b.n	800845e <HAL_TIM_ConfigClockSource+0x21a>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800827e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800828a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800829c:	f000 80c9 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 80082a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082a4:	f200 80ce 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 80082a8:	4a6f      	ldr	r2, [pc, #444]	@ (8008468 <HAL_TIM_ConfigClockSource+0x224>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	f000 80c1 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 80082b0:	4a6d      	ldr	r2, [pc, #436]	@ (8008468 <HAL_TIM_ConfigClockSource+0x224>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	f200 80c6 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 80082b8:	4a6c      	ldr	r2, [pc, #432]	@ (800846c <HAL_TIM_ConfigClockSource+0x228>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	f000 80b9 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 80082c0:	4a6a      	ldr	r2, [pc, #424]	@ (800846c <HAL_TIM_ConfigClockSource+0x228>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	f200 80be 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 80082c8:	4a69      	ldr	r2, [pc, #420]	@ (8008470 <HAL_TIM_ConfigClockSource+0x22c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	f000 80b1 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 80082d0:	4a67      	ldr	r2, [pc, #412]	@ (8008470 <HAL_TIM_ConfigClockSource+0x22c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	f200 80b6 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 80082d8:	4a66      	ldr	r2, [pc, #408]	@ (8008474 <HAL_TIM_ConfigClockSource+0x230>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	f000 80a9 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 80082e0:	4a64      	ldr	r2, [pc, #400]	@ (8008474 <HAL_TIM_ConfigClockSource+0x230>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	f200 80ae 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 80082e8:	4a63      	ldr	r2, [pc, #396]	@ (8008478 <HAL_TIM_ConfigClockSource+0x234>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	f000 80a1 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 80082f0:	4a61      	ldr	r2, [pc, #388]	@ (8008478 <HAL_TIM_ConfigClockSource+0x234>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	f200 80a6 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 80082f8:	4a60      	ldr	r2, [pc, #384]	@ (800847c <HAL_TIM_ConfigClockSource+0x238>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	f000 8099 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 8008300:	4a5e      	ldr	r2, [pc, #376]	@ (800847c <HAL_TIM_ConfigClockSource+0x238>)
 8008302:	4293      	cmp	r3, r2
 8008304:	f200 809e 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008308:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800830c:	f000 8091 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 8008310:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008314:	f200 8096 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831c:	f000 8089 	beq.w	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 8008320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008324:	f200 808e 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800832c:	d03e      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0x168>
 800832e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008332:	f200 8087 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800833a:	f000 8086 	beq.w	800844a <HAL_TIM_ConfigClockSource+0x206>
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008342:	d87f      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008344:	2b70      	cmp	r3, #112	@ 0x70
 8008346:	d01a      	beq.n	800837e <HAL_TIM_ConfigClockSource+0x13a>
 8008348:	2b70      	cmp	r3, #112	@ 0x70
 800834a:	d87b      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 800834c:	2b60      	cmp	r3, #96	@ 0x60
 800834e:	d050      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008350:	2b60      	cmp	r3, #96	@ 0x60
 8008352:	d877      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008354:	2b50      	cmp	r3, #80	@ 0x50
 8008356:	d03c      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x18e>
 8008358:	2b50      	cmp	r3, #80	@ 0x50
 800835a:	d873      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 800835c:	2b40      	cmp	r3, #64	@ 0x40
 800835e:	d058      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x1ce>
 8008360:	2b40      	cmp	r3, #64	@ 0x40
 8008362:	d86f      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008364:	2b30      	cmp	r3, #48	@ 0x30
 8008366:	d064      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 8008368:	2b30      	cmp	r3, #48	@ 0x30
 800836a:	d86b      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 800836c:	2b20      	cmp	r3, #32
 800836e:	d060      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 8008370:	2b20      	cmp	r3, #32
 8008372:	d867      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d05c      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 8008378:	2b10      	cmp	r3, #16
 800837a:	d05a      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x1ee>
 800837c:	e062      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800838e:	f000 fba3 	bl	8008ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	609a      	str	r2, [r3, #8]
      break;
 80083aa:	e04f      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083bc:	f000 fb8c 	bl	8008ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083ce:	609a      	str	r2, [r3, #8]
      break;
 80083d0:	e03c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 fafe 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2150      	movs	r1, #80	@ 0x50
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fb57 	bl	8008a9e <TIM_ITRx_SetConfig>
      break;
 80083f0:	e02c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fb1d 	bl	8008a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2160      	movs	r1, #96	@ 0x60
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fb47 	bl	8008a9e <TIM_ITRx_SetConfig>
      break;
 8008410:	e01c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800841e:	461a      	mov	r2, r3
 8008420:	f000 fade 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2140      	movs	r1, #64	@ 0x40
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fb37 	bl	8008a9e <TIM_ITRx_SetConfig>
      break;
 8008430:	e00c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f000 fb2e 	bl	8008a9e <TIM_ITRx_SetConfig>
      break;
 8008442:	e003      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]
      break;
 8008448:	e000      	b.n	800844c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800844a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	00100070 	.word	0x00100070
 800846c:	00100060 	.word	0x00100060
 8008470:	00100050 	.word	0x00100050
 8008474:	00100040 	.word	0x00100040
 8008478:	00100030 	.word	0x00100030
 800847c:	00100020 	.word	0x00100020

08008480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a2c      	ldr	r2, [pc, #176]	@ (8008544 <TIM_Base_SetConfig+0xc4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d007      	beq.n	80084a8 <TIM_Base_SetConfig+0x28>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849e:	d003      	beq.n	80084a8 <TIM_Base_SetConfig+0x28>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a29      	ldr	r2, [pc, #164]	@ (8008548 <TIM_Base_SetConfig+0xc8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d108      	bne.n	80084ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a21      	ldr	r2, [pc, #132]	@ (8008544 <TIM_Base_SetConfig+0xc4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <TIM_Base_SetConfig+0x52>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c8:	d003      	beq.n	80084d2 <TIM_Base_SetConfig+0x52>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008548 <TIM_Base_SetConfig+0xc8>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a0e      	ldr	r2, [pc, #56]	@ (8008544 <TIM_Base_SetConfig+0xc4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d103      	bne.n	8008518 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691a      	ldr	r2, [r3, #16]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b01      	cmp	r3, #1
 8008528:	d105      	bne.n	8008536 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f023 0201 	bic.w	r2, r3, #1
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	611a      	str	r2, [r3, #16]
  }
}
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40012c00 	.word	0x40012c00
 8008548:	40000400 	.word	0x40000400

0800854c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f023 0201 	bic.w	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800857a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800857e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f023 0302 	bic.w	r3, r3, #2
 8008598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <TIM_OC1_SetConfig+0xcc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d10c      	bne.n	80085c6 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f023 0308 	bic.w	r3, r3, #8
 80085b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f023 0304 	bic.w	r3, r3, #4
 80085c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a13      	ldr	r2, [pc, #76]	@ (8008618 <TIM_OC1_SetConfig+0xcc>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d111      	bne.n	80085f2 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	621a      	str	r2, [r3, #32]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	40012c00 	.word	0x40012c00

0800861c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f023 0210 	bic.w	r2, r3, #16
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800864a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800864e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1e      	ldr	r2, [pc, #120]	@ (80086f4 <TIM_OC2_SetConfig+0xd8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10d      	bne.n	800869c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	011b      	lsls	r3, r3, #4
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800869a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a15      	ldr	r2, [pc, #84]	@ (80086f4 <TIM_OC2_SetConfig+0xd8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d113      	bne.n	80086cc <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	621a      	str	r2, [r3, #32]
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40012c00 	.word	0x40012c00

080086f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800872a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0303 	bic.w	r3, r3, #3
 8008732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a1d      	ldr	r2, [pc, #116]	@ (80087cc <TIM_OC3_SetConfig+0xd4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d10d      	bne.n	8008776 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a14      	ldr	r2, [pc, #80]	@ (80087cc <TIM_OC3_SetConfig+0xd4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d113      	bne.n	80087a6 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800878c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	621a      	str	r2, [r3, #32]
}
 80087c0:	bf00      	nop
 80087c2:	371c      	adds	r7, #28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	40012c00 	.word	0x40012c00

080087d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800880a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800881e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	031b      	lsls	r3, r3, #12
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a1e      	ldr	r2, [pc, #120]	@ (80088a8 <TIM_OC4_SetConfig+0xd8>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d10d      	bne.n	8008850 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800883a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	031b      	lsls	r3, r3, #12
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800884e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a15      	ldr	r2, [pc, #84]	@ (80088a8 <TIM_OC4_SetConfig+0xd8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d113      	bne.n	8008880 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800885e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008866:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	019b      	lsls	r3, r3, #6
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	019b      	lsls	r3, r3, #6
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	4313      	orrs	r3, r2
 800887e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	621a      	str	r2, [r3, #32]
}
 800889a:	bf00      	nop
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40012c00 	.word	0x40012c00

080088ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80088f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a0f      	ldr	r2, [pc, #60]	@ (8008940 <TIM_OC5_SetConfig+0x94>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d109      	bne.n	800891a <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800890c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	621a      	str	r2, [r3, #32]
}
 8008934:	bf00      	nop
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	40012c00 	.word	0x40012c00

08008944 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800898a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	051b      	lsls	r3, r3, #20
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a10      	ldr	r2, [pc, #64]	@ (80089dc <TIM_OC6_SetConfig+0x98>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d109      	bne.n	80089b4 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	029b      	lsls	r3, r3, #10
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40012c00 	.word	0x40012c00

080089e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 030a 	bic.w	r3, r3, #10
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f023 0210 	bic.w	r2, r3, #16
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	031b      	lsls	r3, r3, #12
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f043 0307 	orr.w	r3, r3, #7
 8008ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	609a      	str	r2, [r3, #8]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	021a      	lsls	r2, r3, #8
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	609a      	str	r2, [r3, #8]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f003 031f 	and.w	r3, r3, #31
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a1a      	ldr	r2, [r3, #32]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f003 031f 	and.w	r3, r3, #31
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b50:	431a      	orrs	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	621a      	str	r2, [r3, #32]
}
 8008b56:	bf00      	nop
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d101      	bne.n	8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	e051      	b.n	8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a22      	ldr	r2, [pc, #136]	@ (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d108      	bne.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008bac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a14      	ldr	r2, [pc, #80]	@ (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d009      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008be8:	d004      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a10      	ldr	r2, [pc, #64]	@ (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d10c      	bne.n	8008c0e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	40012c00 	.word	0x40012c00
 8008c30:	40000400 	.word	0x40000400

08008c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e06e      	b.n	8008d2e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	041b      	lsls	r3, r3, #16
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a17      	ldr	r2, [pc, #92]	@ (8008d3c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d11c      	bne.n	8008d1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	051b      	lsls	r3, r3, #20
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40012c00 	.word	0x40012c00

08008d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e042      	b.n	8008dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d106      	bne.n	8008d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7f9 f9c3 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2224      	movs	r2, #36	@ 0x24
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa44 	bl	8009218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8c3 	bl	8008f1c <UART_SetConfig>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e01b      	b.n	8008dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fac3 	bl	800935c <UART_CheckIdleState>
 8008dd6:	4603      	mov	r3, r0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	@ 0x28
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	f040 808b 	bne.w	8008f12 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <HAL_UART_Transmit+0x28>
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e083      	b.n	8008f14 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e16:	2b80      	cmp	r3, #128	@ 0x80
 8008e18:	d107      	bne.n	8008e2a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e28:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2221      	movs	r2, #33	@ 0x21
 8008e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e3a:	f7f9 fc05 	bl	8002648 <HAL_GetTick>
 8008e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	88fa      	ldrh	r2, [r7, #6]
 8008e44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	88fa      	ldrh	r2, [r7, #6]
 8008e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e58:	d108      	bne.n	8008e6c <HAL_UART_Transmit+0x8c>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d104      	bne.n	8008e6c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	e003      	b.n	8008e74 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e74:	e030      	b.n	8008ed8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2180      	movs	r1, #128	@ 0x80
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 fb15 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e03d      	b.n	8008f14 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	e007      	b.n	8008ec6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1c8      	bne.n	8008e76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2200      	movs	r2, #0
 8008eec:	2140      	movs	r1, #64	@ 0x40
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 fade 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d005      	beq.n	8008f06 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e006      	b.n	8008f14 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e000      	b.n	8008f14 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008f12:	2302      	movs	r3, #2
  }
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3720      	adds	r7, #32
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f20:	b094      	sub	sp, #80	@ 0x50
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	498a      	ldr	r1, [pc, #552]	@ (8009174 <UART_SetConfig+0x258>)
 8008f4c:	4019      	ands	r1, r3
 8008f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f54:	430b      	orrs	r3, r1
 8008f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f64:	68d9      	ldr	r1, [r3, #12]
 8008f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	ea40 0301 	orr.w	r3, r0, r1
 8008f6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8009178 <UART_SetConfig+0x25c>)
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d004      	beq.n	8008f8a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f86:	4313      	orrs	r3, r2
 8008f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008f94:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	f023 000f 	bic.w	r0, r3, #15
 8008fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	ea40 0301 	orr.w	r3, r0, r1
 8008fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800917c <UART_SetConfig+0x260>)
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d102      	bne.n	8008fca <UART_SetConfig+0xae>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fc8:	e01a      	b.n	8009000 <UART_SetConfig+0xe4>
 8008fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	4b6c      	ldr	r3, [pc, #432]	@ (8009180 <UART_SetConfig+0x264>)
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d102      	bne.n	8008fda <UART_SetConfig+0xbe>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fd8:	e012      	b.n	8009000 <UART_SetConfig+0xe4>
 8008fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b69      	ldr	r3, [pc, #420]	@ (8009184 <UART_SetConfig+0x268>)
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d102      	bne.n	8008fea <UART_SetConfig+0xce>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fe8:	e00a      	b.n	8009000 <UART_SetConfig+0xe4>
 8008fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4b62      	ldr	r3, [pc, #392]	@ (8009178 <UART_SetConfig+0x25c>)
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d103      	bne.n	8008ffc <UART_SetConfig+0xe0>
 8008ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ffa:	e001      	b.n	8009000 <UART_SetConfig+0xe4>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	4b5c      	ldr	r3, [pc, #368]	@ (8009178 <UART_SetConfig+0x25c>)
 8009006:	429a      	cmp	r2, r3
 8009008:	d171      	bne.n	80090ee <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800900a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800900c:	2200      	movs	r2, #0
 800900e:	623b      	str	r3, [r7, #32]
 8009010:	627a      	str	r2, [r7, #36]	@ 0x24
 8009012:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009016:	f7fd f929 	bl	800626c <HAL_RCCEx_GetPeriphCLKFreq>
 800901a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800901c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 80e2 	beq.w	80091e8 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009028:	4a57      	ldr	r2, [pc, #348]	@ (8009188 <UART_SetConfig+0x26c>)
 800902a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800902e:	461a      	mov	r2, r3
 8009030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009032:	fbb3 f3f2 	udiv	r3, r3, r2
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4613      	mov	r3, r2
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	4413      	add	r3, r2
 8009042:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009044:	429a      	cmp	r2, r3
 8009046:	d305      	bcc.n	8009054 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800904e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009050:	429a      	cmp	r2, r3
 8009052:	d903      	bls.n	800905c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800905a:	e0c5      	b.n	80091e8 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800905e:	2200      	movs	r2, #0
 8009060:	61bb      	str	r3, [r7, #24]
 8009062:	61fa      	str	r2, [r7, #28]
 8009064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009068:	4a47      	ldr	r2, [pc, #284]	@ (8009188 <UART_SetConfig+0x26c>)
 800906a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800906e:	b29b      	uxth	r3, r3
 8009070:	2200      	movs	r2, #0
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	617a      	str	r2, [r7, #20]
 8009076:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800907a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800907e:	f7f7 fe17 	bl	8000cb0 <__aeabi_uldivmod>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4610      	mov	r0, r2
 8009088:	4619      	mov	r1, r3
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	020b      	lsls	r3, r1, #8
 8009094:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009098:	0202      	lsls	r2, r0, #8
 800909a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800909c:	6849      	ldr	r1, [r1, #4]
 800909e:	0849      	lsrs	r1, r1, #1
 80090a0:	2000      	movs	r0, #0
 80090a2:	460c      	mov	r4, r1
 80090a4:	4605      	mov	r5, r0
 80090a6:	eb12 0804 	adds.w	r8, r2, r4
 80090aa:	eb43 0905 	adc.w	r9, r3, r5
 80090ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	60bb      	str	r3, [r7, #8]
 80090b6:	60fa      	str	r2, [r7, #12]
 80090b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090bc:	4640      	mov	r0, r8
 80090be:	4649      	mov	r1, r9
 80090c0:	f7f7 fdf6 	bl	8000cb0 <__aeabi_uldivmod>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4613      	mov	r3, r2
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090d2:	d308      	bcc.n	80090e6 <UART_SetConfig+0x1ca>
 80090d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090da:	d204      	bcs.n	80090e6 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 80090dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090e2:	60da      	str	r2, [r3, #12]
 80090e4:	e080      	b.n	80091e8 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80090ec:	e07c      	b.n	80091e8 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090f6:	d149      	bne.n	800918c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090fa:	2200      	movs	r2, #0
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009104:	f7fd f8b2 	bl	800626c <HAL_RCCEx_GetPeriphCLKFreq>
 8009108:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800910a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	d06b      	beq.n	80091e8 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009114:	4a1c      	ldr	r2, [pc, #112]	@ (8009188 <UART_SetConfig+0x26c>)
 8009116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911a:	461a      	mov	r2, r3
 800911c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800911e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009122:	005a      	lsls	r2, r3, #1
 8009124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	085b      	lsrs	r3, r3, #1
 800912a:	441a      	add	r2, r3
 800912c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	fbb2 f3f3 	udiv	r3, r2, r3
 8009134:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009138:	2b0f      	cmp	r3, #15
 800913a:	d916      	bls.n	800916a <UART_SetConfig+0x24e>
 800913c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009142:	d212      	bcs.n	800916a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009146:	b29b      	uxth	r3, r3
 8009148:	f023 030f 	bic.w	r3, r3, #15
 800914c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800914e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009150:	085b      	lsrs	r3, r3, #1
 8009152:	b29b      	uxth	r3, r3
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	b29a      	uxth	r2, r3
 800915a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800915c:	4313      	orrs	r3, r2
 800915e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009166:	60da      	str	r2, [r3, #12]
 8009168:	e03e      	b.n	80091e8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009170:	e03a      	b.n	80091e8 <UART_SetConfig+0x2cc>
 8009172:	bf00      	nop
 8009174:	cfff69f3 	.word	0xcfff69f3
 8009178:	44002400 	.word	0x44002400
 800917c:	40013800 	.word	0x40013800
 8009180:	40004400 	.word	0x40004400
 8009184:	40004800 	.word	0x40004800
 8009188:	0800e028 	.word	0x0800e028
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800918c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800918e:	2200      	movs	r2, #0
 8009190:	469a      	mov	sl, r3
 8009192:	4693      	mov	fp, r2
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	f7fd f868 	bl	800626c <HAL_RCCEx_GetPeriphCLKFreq>
 800919c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800919e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d021      	beq.n	80091e8 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a8:	4a1a      	ldr	r2, [pc, #104]	@ (8009214 <UART_SetConfig+0x2f8>)
 80091aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ae:	461a      	mov	r2, r3
 80091b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80091b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	441a      	add	r2, r3
 80091be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d909      	bls.n	80091e2 <UART_SetConfig+0x2c6>
 80091ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d4:	d205      	bcs.n	80091e2 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d8:	b29a      	uxth	r2, r3
 80091da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	e002      	b.n	80091e8 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ea:	2201      	movs	r2, #1
 80091ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fa:	2200      	movs	r2, #0
 80091fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009200:	2200      	movs	r2, #0
 8009202:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009204:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009208:	4618      	mov	r0, r3
 800920a:	3750      	adds	r7, #80	@ 0x50
 800920c:	46bd      	mov	sp, r7
 800920e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009212:	bf00      	nop
 8009214:	0800e028 	.word	0x0800e028

08009218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00a      	beq.n	80092ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01a      	beq.n	800932e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009316:	d10a      	bne.n	800932e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	605a      	str	r2, [r3, #4]
  }
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b098      	sub	sp, #96	@ 0x60
 8009360:	af02      	add	r7, sp, #8
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800936c:	f7f9 f96c 	bl	8002648 <HAL_GetTick>
 8009370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b08      	cmp	r3, #8
 800937e:	d12f      	bne.n	80093e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009388:	2200      	movs	r2, #0
 800938a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f88e 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d022      	beq.n	80093e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093dc:	2303      	movs	r3, #3
 80093de:	e063      	b.n	80094a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0304 	and.w	r3, r3, #4
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d149      	bne.n	8009482 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093f6:	2200      	movs	r2, #0
 80093f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f857 	bl	80094b0 <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d03c      	beq.n	8009482 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	623b      	str	r3, [r7, #32]
   return(result);
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800941c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009426:	633b      	str	r3, [r7, #48]	@ 0x30
 8009428:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800942c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e6      	bne.n	8009408 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	60fb      	str	r3, [r7, #12]
   return(result);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800945a:	61fa      	str	r2, [r7, #28]
 800945c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	69b9      	ldr	r1, [r7, #24]
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	617b      	str	r3, [r7, #20]
   return(result);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e012      	b.n	80094a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3758      	adds	r7, #88	@ 0x58
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094c0:	e04f      	b.n	8009562 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c8:	d04b      	beq.n	8009562 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ca:	f7f9 f8bd 	bl	8002648 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d302      	bcc.n	80094e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e04e      	b.n	8009582 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d037      	beq.n	8009562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b80      	cmp	r3, #128	@ 0x80
 80094f6:	d034      	beq.n	8009562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b40      	cmp	r3, #64	@ 0x40
 80094fc:	d031      	beq.n	8009562 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	2b08      	cmp	r3, #8
 800950a:	d110      	bne.n	800952e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2208      	movs	r2, #8
 8009512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f838 	bl	800958a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2208      	movs	r2, #8
 800951e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e029      	b.n	8009582 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800953c:	d111      	bne.n	8009562 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f81e 	bl	800958a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e00f      	b.n	8009582 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69da      	ldr	r2, [r3, #28]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4013      	ands	r3, r2
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	429a      	cmp	r2, r3
 8009570:	bf0c      	ite	eq
 8009572:	2301      	moveq	r3, #1
 8009574:	2300      	movne	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	429a      	cmp	r2, r3
 800957e:	d0a0      	beq.n	80094c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800958a:	b480      	push	{r7}
 800958c:	b095      	sub	sp, #84	@ 0x54
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800959a:	e853 3f00 	ldrex	r3, [r3]
 800959e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80095b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095b8:	e841 2300 	strex	r3, r2, [r1]
 80095bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e6      	bne.n	8009592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3308      	adds	r3, #8
 80095ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095da:	f023 0301 	bic.w	r3, r3, #1
 80095de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3308      	adds	r3, #8
 80095e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e3      	bne.n	80095c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009600:	2b01      	cmp	r3, #1
 8009602:	d118      	bne.n	8009636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	60bb      	str	r3, [r7, #8]
   return(result);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f023 0310 	bic.w	r3, r3, #16
 8009618:	647b      	str	r3, [r7, #68]	@ 0x44
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6979      	ldr	r1, [r7, #20]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	613b      	str	r3, [r7, #16]
   return(result);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800964a:	bf00      	nop
 800964c:	3754      	adds	r7, #84	@ 0x54
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_UARTEx_DisableFifoMode+0x16>
 8009668:	2302      	movs	r3, #2
 800966a:	e027      	b.n	80096bc <HAL_UARTEx_DisableFifoMode+0x66>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2224      	movs	r2, #36	@ 0x24
 8009678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 0201 	bic.w	r2, r2, #1
 8009692:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800969a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096dc:	2302      	movs	r3, #2
 80096de:	e02d      	b.n	800973c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2224      	movs	r2, #36	@ 0x24
 80096ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0201 	bic.w	r2, r2, #1
 8009706:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	430a      	orrs	r2, r1
 800971a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f84f 	bl	80097c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009758:	2302      	movs	r3, #2
 800975a:	e02d      	b.n	80097b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2224      	movs	r2, #36	@ 0x24
 8009768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0201 	bic.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f811 	bl	80097c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d108      	bne.n	80097e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097e0:	e031      	b.n	8009846 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097e2:	2308      	movs	r3, #8
 80097e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097e6:	2308      	movs	r3, #8
 80097e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	0e5b      	lsrs	r3, r3, #25
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	0f5b      	lsrs	r3, r3, #29
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	7b3a      	ldrb	r2, [r7, #12]
 800980e:	4911      	ldr	r1, [pc, #68]	@ (8009854 <UARTEx_SetNbDataToProcess+0x94>)
 8009810:	5c8a      	ldrb	r2, [r1, r2]
 8009812:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009816:	7b3a      	ldrb	r2, [r7, #12]
 8009818:	490f      	ldr	r1, [pc, #60]	@ (8009858 <UARTEx_SetNbDataToProcess+0x98>)
 800981a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800981c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009820:	b29a      	uxth	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	7b7a      	ldrb	r2, [r7, #13]
 800982c:	4909      	ldr	r1, [pc, #36]	@ (8009854 <UARTEx_SetNbDataToProcess+0x94>)
 800982e:	5c8a      	ldrb	r2, [r1, r2]
 8009830:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009834:	7b7a      	ldrb	r2, [r7, #13]
 8009836:	4908      	ldr	r1, [pc, #32]	@ (8009858 <UARTEx_SetNbDataToProcess+0x98>)
 8009838:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800983a:	fb93 f3f2 	sdiv	r3, r3, r2
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	0800e040 	.word	0x0800e040
 8009858:	0800e048 	.word	0x0800e048

0800985c <__cvt>:
 800985c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	ec57 6b10 	vmov	r6, r7, d0
 8009864:	2f00      	cmp	r7, #0
 8009866:	460c      	mov	r4, r1
 8009868:	4619      	mov	r1, r3
 800986a:	463b      	mov	r3, r7
 800986c:	bfb4      	ite	lt
 800986e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009872:	2300      	movge	r3, #0
 8009874:	4691      	mov	r9, r2
 8009876:	bfbf      	itttt	lt
 8009878:	4632      	movlt	r2, r6
 800987a:	461f      	movlt	r7, r3
 800987c:	232d      	movlt	r3, #45	@ 0x2d
 800987e:	4616      	movlt	r6, r2
 8009880:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009884:	700b      	strb	r3, [r1, #0]
 8009886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009888:	f023 0820 	bic.w	r8, r3, #32
 800988c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009890:	d005      	beq.n	800989e <__cvt+0x42>
 8009892:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009896:	d100      	bne.n	800989a <__cvt+0x3e>
 8009898:	3401      	adds	r4, #1
 800989a:	2102      	movs	r1, #2
 800989c:	e000      	b.n	80098a0 <__cvt+0x44>
 800989e:	2103      	movs	r1, #3
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	4622      	mov	r2, r4
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	ab02      	add	r3, sp, #8
 80098a8:	ec47 6b10 	vmov	d0, r6, r7
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4653      	mov	r3, sl
 80098b0:	f001 f89a 	bl	800a9e8 <_dtoa_r>
 80098b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098b8:	4605      	mov	r5, r0
 80098ba:	d119      	bne.n	80098f0 <__cvt+0x94>
 80098bc:	f019 0f01 	tst.w	r9, #1
 80098c0:	d00e      	beq.n	80098e0 <__cvt+0x84>
 80098c2:	eb00 0904 	add.w	r9, r0, r4
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	4630      	mov	r0, r6
 80098cc:	4639      	mov	r1, r7
 80098ce:	f7f7 f90f 	bl	8000af0 <__aeabi_dcmpeq>
 80098d2:	b108      	cbz	r0, 80098d8 <__cvt+0x7c>
 80098d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098d8:	2230      	movs	r2, #48	@ 0x30
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	454b      	cmp	r3, r9
 80098de:	d31e      	bcc.n	800991e <__cvt+0xc2>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	4628      	mov	r0, r5
 80098e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098e6:	1b5b      	subs	r3, r3, r5
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	b004      	add	sp, #16
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098f4:	eb00 0904 	add.w	r9, r0, r4
 80098f8:	d1e5      	bne.n	80098c6 <__cvt+0x6a>
 80098fa:	7803      	ldrb	r3, [r0, #0]
 80098fc:	2b30      	cmp	r3, #48	@ 0x30
 80098fe:	d10a      	bne.n	8009916 <__cvt+0xba>
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	4630      	mov	r0, r6
 8009906:	4639      	mov	r1, r7
 8009908:	f7f7 f8f2 	bl	8000af0 <__aeabi_dcmpeq>
 800990c:	b918      	cbnz	r0, 8009916 <__cvt+0xba>
 800990e:	f1c4 0401 	rsb	r4, r4, #1
 8009912:	f8ca 4000 	str.w	r4, [sl]
 8009916:	f8da 3000 	ldr.w	r3, [sl]
 800991a:	4499      	add	r9, r3
 800991c:	e7d3      	b.n	80098c6 <__cvt+0x6a>
 800991e:	1c59      	adds	r1, r3, #1
 8009920:	9103      	str	r1, [sp, #12]
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	e7d9      	b.n	80098da <__cvt+0x7e>

08009926 <__exponent>:
 8009926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009928:	2900      	cmp	r1, #0
 800992a:	7002      	strb	r2, [r0, #0]
 800992c:	bfba      	itte	lt
 800992e:	4249      	neglt	r1, r1
 8009930:	232d      	movlt	r3, #45	@ 0x2d
 8009932:	232b      	movge	r3, #43	@ 0x2b
 8009934:	2909      	cmp	r1, #9
 8009936:	7043      	strb	r3, [r0, #1]
 8009938:	dd28      	ble.n	800998c <__exponent+0x66>
 800993a:	f10d 0307 	add.w	r3, sp, #7
 800993e:	270a      	movs	r7, #10
 8009940:	461d      	mov	r5, r3
 8009942:	461a      	mov	r2, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	fbb1 f6f7 	udiv	r6, r1, r7
 800994a:	fb07 1416 	mls	r4, r7, r6, r1
 800994e:	3430      	adds	r4, #48	@ 0x30
 8009950:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009954:	460c      	mov	r4, r1
 8009956:	4631      	mov	r1, r6
 8009958:	2c63      	cmp	r4, #99	@ 0x63
 800995a:	dcf2      	bgt.n	8009942 <__exponent+0x1c>
 800995c:	3130      	adds	r1, #48	@ 0x30
 800995e:	1e94      	subs	r4, r2, #2
 8009960:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009964:	1c41      	adds	r1, r0, #1
 8009966:	4623      	mov	r3, r4
 8009968:	42ab      	cmp	r3, r5
 800996a:	d30a      	bcc.n	8009982 <__exponent+0x5c>
 800996c:	f10d 0309 	add.w	r3, sp, #9
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	42ac      	cmp	r4, r5
 8009974:	bf88      	it	hi
 8009976:	2300      	movhi	r3, #0
 8009978:	3302      	adds	r3, #2
 800997a:	4403      	add	r3, r0
 800997c:	1a18      	subs	r0, r3, r0
 800997e:	b003      	add	sp, #12
 8009980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009982:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009986:	f801 6f01 	strb.w	r6, [r1, #1]!
 800998a:	e7ed      	b.n	8009968 <__exponent+0x42>
 800998c:	2330      	movs	r3, #48	@ 0x30
 800998e:	3130      	adds	r1, #48	@ 0x30
 8009990:	7083      	strb	r3, [r0, #2]
 8009992:	1d03      	adds	r3, r0, #4
 8009994:	70c1      	strb	r1, [r0, #3]
 8009996:	e7f1      	b.n	800997c <__exponent+0x56>

08009998 <_printf_float>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	b08d      	sub	sp, #52	@ 0x34
 800999e:	460c      	mov	r4, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	461f      	mov	r7, r3
 80099a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099a8:	4605      	mov	r5, r0
 80099aa:	f000 ff03 	bl	800a7b4 <_localeconv_r>
 80099ae:	6803      	ldr	r3, [r0, #0]
 80099b0:	4618      	mov	r0, r3
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	f7f6 fc70 	bl	8000298 <strlen>
 80099b8:	2300      	movs	r3, #0
 80099ba:	9005      	str	r0, [sp, #20]
 80099bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80099be:	f8d8 3000 	ldr.w	r3, [r8]
 80099c2:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099c6:	3307      	adds	r3, #7
 80099c8:	f8d4 b000 	ldr.w	fp, [r4]
 80099cc:	f023 0307 	bic.w	r3, r3, #7
 80099d0:	f103 0208 	add.w	r2, r3, #8
 80099d4:	f8c8 2000 	str.w	r2, [r8]
 80099d8:	f04f 32ff 	mov.w	r2, #4294967295
 80099dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	4b9d      	ldr	r3, [pc, #628]	@ (8009c60 <_printf_float+0x2c8>)
 80099ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80099f4:	f7f7 f8ae 	bl	8000b54 <__aeabi_dcmpun>
 80099f8:	bb70      	cbnz	r0, 8009a58 <_printf_float+0xc0>
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	4b98      	ldr	r3, [pc, #608]	@ (8009c60 <_printf_float+0x2c8>)
 8009a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a04:	f7f7 f888 	bl	8000b18 <__aeabi_dcmple>
 8009a08:	bb30      	cbnz	r0, 8009a58 <_printf_float+0xc0>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4649      	mov	r1, r9
 8009a12:	f7f7 f877 	bl	8000b04 <__aeabi_dcmplt>
 8009a16:	b110      	cbz	r0, 8009a1e <_printf_float+0x86>
 8009a18:	232d      	movs	r3, #45	@ 0x2d
 8009a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a1e:	4a91      	ldr	r2, [pc, #580]	@ (8009c64 <_printf_float+0x2cc>)
 8009a20:	4b91      	ldr	r3, [pc, #580]	@ (8009c68 <_printf_float+0x2d0>)
 8009a22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a26:	bf94      	ite	ls
 8009a28:	4690      	movls	r8, r2
 8009a2a:	4698      	movhi	r8, r3
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	f02b 0304 	bic.w	r3, fp, #4
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	4633      	mov	r3, r6
 8009a3c:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a3e:	4621      	mov	r1, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	9700      	str	r7, [sp, #0]
 8009a44:	f000 f9d2 	bl	8009dec <_printf_common>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f040 808d 	bne.w	8009b68 <_printf_float+0x1d0>
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	b00d      	add	sp, #52	@ 0x34
 8009a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a58:	4642      	mov	r2, r8
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f7 f878 	bl	8000b54 <__aeabi_dcmpun>
 8009a64:	b140      	cbz	r0, 8009a78 <_printf_float+0xe0>
 8009a66:	464b      	mov	r3, r9
 8009a68:	4a80      	ldr	r2, [pc, #512]	@ (8009c6c <_printf_float+0x2d4>)
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfbc      	itt	lt
 8009a6e:	232d      	movlt	r3, #45	@ 0x2d
 8009a70:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a74:	4b7e      	ldr	r3, [pc, #504]	@ (8009c70 <_printf_float+0x2d8>)
 8009a76:	e7d4      	b.n	8009a22 <_printf_float+0x8a>
 8009a78:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	9206      	str	r2, [sp, #24]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	d13b      	bne.n	8009afc <_printf_float+0x164>
 8009a84:	2306      	movs	r3, #6
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4628      	mov	r0, r5
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a96:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a9a:	ab09      	add	r3, sp, #36	@ 0x24
 8009a9c:	ec49 8b10 	vmov	d0, r8, r9
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009aa6:	6861      	ldr	r1, [r4, #4]
 8009aa8:	f7ff fed8 	bl	800985c <__cvt>
 8009aac:	9b06      	ldr	r3, [sp, #24]
 8009aae:	4680      	mov	r8, r0
 8009ab0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ab2:	2b47      	cmp	r3, #71	@ 0x47
 8009ab4:	d129      	bne.n	8009b0a <_printf_float+0x172>
 8009ab6:	1cc8      	adds	r0, r1, #3
 8009ab8:	db02      	blt.n	8009ac0 <_printf_float+0x128>
 8009aba:	6863      	ldr	r3, [r4, #4]
 8009abc:	4299      	cmp	r1, r3
 8009abe:	dd41      	ble.n	8009b44 <_printf_float+0x1ac>
 8009ac0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ac4:	fa5f fa8a 	uxtb.w	sl, sl
 8009ac8:	3901      	subs	r1, #1
 8009aca:	4652      	mov	r2, sl
 8009acc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ad0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ad2:	f7ff ff28 	bl	8009926 <__exponent>
 8009ad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ad8:	4681      	mov	r9, r0
 8009ada:	1813      	adds	r3, r2, r0
 8009adc:	2a01      	cmp	r2, #1
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	dc02      	bgt.n	8009ae8 <_printf_float+0x150>
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	07d2      	lsls	r2, r2, #31
 8009ae6:	d501      	bpl.n	8009aec <_printf_float+0x154>
 8009ae8:	3301      	adds	r3, #1
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0a2      	beq.n	8009a3a <_printf_float+0xa2>
 8009af4:	232d      	movs	r3, #45	@ 0x2d
 8009af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009afa:	e79e      	b.n	8009a3a <_printf_float+0xa2>
 8009afc:	9a06      	ldr	r2, [sp, #24]
 8009afe:	2a47      	cmp	r2, #71	@ 0x47
 8009b00:	d1c2      	bne.n	8009a88 <_printf_float+0xf0>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1c0      	bne.n	8009a88 <_printf_float+0xf0>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7bd      	b.n	8009a86 <_printf_float+0xee>
 8009b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b0e:	d9db      	bls.n	8009ac8 <_printf_float+0x130>
 8009b10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b14:	d118      	bne.n	8009b48 <_printf_float+0x1b0>
 8009b16:	2900      	cmp	r1, #0
 8009b18:	6863      	ldr	r3, [r4, #4]
 8009b1a:	dd0b      	ble.n	8009b34 <_printf_float+0x19c>
 8009b1c:	6121      	str	r1, [r4, #16]
 8009b1e:	b913      	cbnz	r3, 8009b26 <_printf_float+0x18e>
 8009b20:	6822      	ldr	r2, [r4, #0]
 8009b22:	07d0      	lsls	r0, r2, #31
 8009b24:	d502      	bpl.n	8009b2c <_printf_float+0x194>
 8009b26:	3301      	adds	r3, #1
 8009b28:	440b      	add	r3, r1
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	f04f 0900 	mov.w	r9, #0
 8009b30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b32:	e7db      	b.n	8009aec <_printf_float+0x154>
 8009b34:	b913      	cbnz	r3, 8009b3c <_printf_float+0x1a4>
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	07d2      	lsls	r2, r2, #31
 8009b3a:	d501      	bpl.n	8009b40 <_printf_float+0x1a8>
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	e7f4      	b.n	8009b2a <_printf_float+0x192>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e7f2      	b.n	8009b2a <_printf_float+0x192>
 8009b44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	db05      	blt.n	8009b5a <_printf_float+0x1c2>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	6121      	str	r1, [r4, #16]
 8009b52:	07d8      	lsls	r0, r3, #31
 8009b54:	d5ea      	bpl.n	8009b2c <_printf_float+0x194>
 8009b56:	1c4b      	adds	r3, r1, #1
 8009b58:	e7e7      	b.n	8009b2a <_printf_float+0x192>
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	bfd4      	ite	le
 8009b5e:	f1c1 0202 	rsble	r2, r1, #2
 8009b62:	2201      	movgt	r2, #1
 8009b64:	4413      	add	r3, r2
 8009b66:	e7e0      	b.n	8009b2a <_printf_float+0x192>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	055a      	lsls	r2, r3, #21
 8009b6c:	d407      	bmi.n	8009b7e <_printf_float+0x1e6>
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	4642      	mov	r2, r8
 8009b72:	4631      	mov	r1, r6
 8009b74:	4628      	mov	r0, r5
 8009b76:	47b8      	blx	r7
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d12b      	bne.n	8009bd4 <_printf_float+0x23c>
 8009b7c:	e767      	b.n	8009a4e <_printf_float+0xb6>
 8009b7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b82:	f240 80dd 	bls.w	8009d40 <_printf_float+0x3a8>
 8009b86:	2200      	movs	r2, #0
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b8e:	f7f6 ffaf 	bl	8000af0 <__aeabi_dcmpeq>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d033      	beq.n	8009bfe <_printf_float+0x266>
 8009b96:	2301      	movs	r3, #1
 8009b98:	4a36      	ldr	r2, [pc, #216]	@ (8009c74 <_printf_float+0x2dc>)
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f43f af54 	beq.w	8009a4e <_printf_float+0xb6>
 8009ba6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009baa:	4543      	cmp	r3, r8
 8009bac:	db02      	blt.n	8009bb4 <_printf_float+0x21c>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	07d8      	lsls	r0, r3, #31
 8009bb2:	d50f      	bpl.n	8009bd4 <_printf_float+0x23c>
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	f43f af45 	beq.w	8009a4e <_printf_float+0xb6>
 8009bc4:	f04f 0900 	mov.w	r9, #0
 8009bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bcc:	f104 0a1a 	add.w	sl, r4, #26
 8009bd0:	45c8      	cmp	r8, r9
 8009bd2:	dc09      	bgt.n	8009be8 <_printf_float+0x250>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	079b      	lsls	r3, r3, #30
 8009bd8:	f100 8103 	bmi.w	8009de2 <_printf_float+0x44a>
 8009bdc:	68e0      	ldr	r0, [r4, #12]
 8009bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be0:	4298      	cmp	r0, r3
 8009be2:	bfb8      	it	lt
 8009be4:	4618      	movlt	r0, r3
 8009be6:	e734      	b.n	8009a52 <_printf_float+0xba>
 8009be8:	2301      	movs	r3, #1
 8009bea:	4652      	mov	r2, sl
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	47b8      	blx	r7
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	f43f af2b 	beq.w	8009a4e <_printf_float+0xb6>
 8009bf8:	f109 0901 	add.w	r9, r9, #1
 8009bfc:	e7e8      	b.n	8009bd0 <_printf_float+0x238>
 8009bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dc39      	bgt.n	8009c78 <_printf_float+0x2e0>
 8009c04:	2301      	movs	r3, #1
 8009c06:	4a1b      	ldr	r2, [pc, #108]	@ (8009c74 <_printf_float+0x2dc>)
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f af1d 	beq.w	8009a4e <_printf_float+0xb6>
 8009c14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c18:	ea59 0303 	orrs.w	r3, r9, r3
 8009c1c:	d102      	bne.n	8009c24 <_printf_float+0x28c>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	07d9      	lsls	r1, r3, #31
 8009c22:	d5d7      	bpl.n	8009bd4 <_printf_float+0x23c>
 8009c24:	4631      	mov	r1, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f af0d 	beq.w	8009a4e <_printf_float+0xb6>
 8009c34:	f04f 0a00 	mov.w	sl, #0
 8009c38:	f104 0b1a 	add.w	fp, r4, #26
 8009c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3e:	425b      	negs	r3, r3
 8009c40:	4553      	cmp	r3, sl
 8009c42:	dc01      	bgt.n	8009c48 <_printf_float+0x2b0>
 8009c44:	464b      	mov	r3, r9
 8009c46:	e793      	b.n	8009b70 <_printf_float+0x1d8>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	465a      	mov	r2, fp
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f aefb 	beq.w	8009a4e <_printf_float+0xb6>
 8009c58:	f10a 0a01 	add.w	sl, sl, #1
 8009c5c:	e7ee      	b.n	8009c3c <_printf_float+0x2a4>
 8009c5e:	bf00      	nop
 8009c60:	7fefffff 	.word	0x7fefffff
 8009c64:	0800e050 	.word	0x0800e050
 8009c68:	0800e054 	.word	0x0800e054
 8009c6c:	0800e058 	.word	0x0800e058
 8009c70:	0800e05c 	.word	0x0800e05c
 8009c74:	0800e060 	.word	0x0800e060
 8009c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c7e:	4553      	cmp	r3, sl
 8009c80:	bfa8      	it	ge
 8009c82:	4653      	movge	r3, sl
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	4699      	mov	r9, r3
 8009c88:	dc36      	bgt.n	8009cf8 <_printf_float+0x360>
 8009c8a:	f04f 0b00 	mov.w	fp, #0
 8009c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c92:	f104 021a 	add.w	r2, r4, #26
 8009c96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c98:	9306      	str	r3, [sp, #24]
 8009c9a:	eba3 0309 	sub.w	r3, r3, r9
 8009c9e:	455b      	cmp	r3, fp
 8009ca0:	dc31      	bgt.n	8009d06 <_printf_float+0x36e>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	459a      	cmp	sl, r3
 8009ca6:	dc3a      	bgt.n	8009d1e <_printf_float+0x386>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	07da      	lsls	r2, r3, #31
 8009cac:	d437      	bmi.n	8009d1e <_printf_float+0x386>
 8009cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb0:	ebaa 0903 	sub.w	r9, sl, r3
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	ebaa 0303 	sub.w	r3, sl, r3
 8009cba:	4599      	cmp	r9, r3
 8009cbc:	bfa8      	it	ge
 8009cbe:	4699      	movge	r9, r3
 8009cc0:	f1b9 0f00 	cmp.w	r9, #0
 8009cc4:	dc33      	bgt.n	8009d2e <_printf_float+0x396>
 8009cc6:	f04f 0800 	mov.w	r8, #0
 8009cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cce:	f104 0b1a 	add.w	fp, r4, #26
 8009cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8009cd8:	eba3 0309 	sub.w	r3, r3, r9
 8009cdc:	4543      	cmp	r3, r8
 8009cde:	f77f af79 	ble.w	8009bd4 <_printf_float+0x23c>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	465a      	mov	r2, fp
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f aeae 	beq.w	8009a4e <_printf_float+0xb6>
 8009cf2:	f108 0801 	add.w	r8, r8, #1
 8009cf6:	e7ec      	b.n	8009cd2 <_printf_float+0x33a>
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	d1c2      	bne.n	8009c8a <_printf_float+0x2f2>
 8009d04:	e6a3      	b.n	8009a4e <_printf_float+0xb6>
 8009d06:	2301      	movs	r3, #1
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	9206      	str	r2, [sp, #24]
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f ae9c 	beq.w	8009a4e <_printf_float+0xb6>
 8009d16:	f10b 0b01 	add.w	fp, fp, #1
 8009d1a:	9a06      	ldr	r2, [sp, #24]
 8009d1c:	e7bb      	b.n	8009c96 <_printf_float+0x2fe>
 8009d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d1c0      	bne.n	8009cae <_printf_float+0x316>
 8009d2c:	e68f      	b.n	8009a4e <_printf_float+0xb6>
 8009d2e:	9a06      	ldr	r2, [sp, #24]
 8009d30:	464b      	mov	r3, r9
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	4442      	add	r2, r8
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d1c3      	bne.n	8009cc6 <_printf_float+0x32e>
 8009d3e:	e686      	b.n	8009a4e <_printf_float+0xb6>
 8009d40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d44:	f1ba 0f01 	cmp.w	sl, #1
 8009d48:	dc01      	bgt.n	8009d4e <_printf_float+0x3b6>
 8009d4a:	07db      	lsls	r3, r3, #31
 8009d4c:	d536      	bpl.n	8009dbc <_printf_float+0x424>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4642      	mov	r2, r8
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f ae78 	beq.w	8009a4e <_printf_float+0xb6>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4628      	mov	r0, r5
 8009d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f ae70 	beq.w	8009a4e <_printf_float+0xb6>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2300      	movs	r3, #0
 8009d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d7a:	f7f6 feb9 	bl	8000af0 <__aeabi_dcmpeq>
 8009d7e:	b9c0      	cbnz	r0, 8009db2 <_printf_float+0x41a>
 8009d80:	4653      	mov	r3, sl
 8009d82:	f108 0201 	add.w	r2, r8, #1
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d10c      	bne.n	8009daa <_printf_float+0x412>
 8009d90:	e65d      	b.n	8009a4e <_printf_float+0xb6>
 8009d92:	2301      	movs	r3, #1
 8009d94:	465a      	mov	r2, fp
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f ae56 	beq.w	8009a4e <_printf_float+0xb6>
 8009da2:	f108 0801 	add.w	r8, r8, #1
 8009da6:	45d0      	cmp	r8, sl
 8009da8:	dbf3      	blt.n	8009d92 <_printf_float+0x3fa>
 8009daa:	464b      	mov	r3, r9
 8009dac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009db0:	e6df      	b.n	8009b72 <_printf_float+0x1da>
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	f104 0b1a 	add.w	fp, r4, #26
 8009dba:	e7f4      	b.n	8009da6 <_printf_float+0x40e>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4642      	mov	r2, r8
 8009dc0:	e7e1      	b.n	8009d86 <_printf_float+0x3ee>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	464a      	mov	r2, r9
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b8      	blx	r7
 8009dcc:	3001      	adds	r0, #1
 8009dce:	f43f ae3e 	beq.w	8009a4e <_printf_float+0xb6>
 8009dd2:	f108 0801 	add.w	r8, r8, #1
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dda:	1a5b      	subs	r3, r3, r1
 8009ddc:	4543      	cmp	r3, r8
 8009dde:	dcf0      	bgt.n	8009dc2 <_printf_float+0x42a>
 8009de0:	e6fc      	b.n	8009bdc <_printf_float+0x244>
 8009de2:	f04f 0800 	mov.w	r8, #0
 8009de6:	f104 0919 	add.w	r9, r4, #25
 8009dea:	e7f4      	b.n	8009dd6 <_printf_float+0x43e>

08009dec <_printf_common>:
 8009dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df0:	4616      	mov	r6, r2
 8009df2:	4698      	mov	r8, r3
 8009df4:	688a      	ldr	r2, [r1, #8]
 8009df6:	4607      	mov	r7, r0
 8009df8:	690b      	ldr	r3, [r1, #16]
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bfb8      	it	lt
 8009e04:	4613      	movlt	r3, r2
 8009e06:	6033      	str	r3, [r6, #0]
 8009e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e0c:	b10a      	cbz	r2, 8009e12 <_printf_common+0x26>
 8009e0e:	3301      	adds	r3, #1
 8009e10:	6033      	str	r3, [r6, #0]
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	0699      	lsls	r1, r3, #26
 8009e16:	bf42      	ittt	mi
 8009e18:	6833      	ldrmi	r3, [r6, #0]
 8009e1a:	3302      	addmi	r3, #2
 8009e1c:	6033      	strmi	r3, [r6, #0]
 8009e1e:	6825      	ldr	r5, [r4, #0]
 8009e20:	f015 0506 	ands.w	r5, r5, #6
 8009e24:	d106      	bne.n	8009e34 <_printf_common+0x48>
 8009e26:	f104 0a19 	add.w	sl, r4, #25
 8009e2a:	68e3      	ldr	r3, [r4, #12]
 8009e2c:	6832      	ldr	r2, [r6, #0]
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	42ab      	cmp	r3, r5
 8009e32:	dc2b      	bgt.n	8009e8c <_printf_common+0xa0>
 8009e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	3b00      	subs	r3, #0
 8009e3c:	bf18      	it	ne
 8009e3e:	2301      	movne	r3, #1
 8009e40:	0692      	lsls	r2, r2, #26
 8009e42:	d430      	bmi.n	8009ea6 <_printf_common+0xba>
 8009e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	47c8      	blx	r9
 8009e4e:	3001      	adds	r0, #1
 8009e50:	d023      	beq.n	8009e9a <_printf_common+0xae>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	341a      	adds	r4, #26
 8009e56:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009e5a:	f003 0306 	and.w	r3, r3, #6
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	bf0a      	itet	eq
 8009e62:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009e66:	2500      	movne	r5, #0
 8009e68:	6833      	ldreq	r3, [r6, #0]
 8009e6a:	f04f 0600 	mov.w	r6, #0
 8009e6e:	bf08      	it	eq
 8009e70:	1aed      	subeq	r5, r5, r3
 8009e72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e76:	bf08      	it	eq
 8009e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	bfc4      	itt	gt
 8009e80:	1a9b      	subgt	r3, r3, r2
 8009e82:	18ed      	addgt	r5, r5, r3
 8009e84:	42b5      	cmp	r5, r6
 8009e86:	d11a      	bne.n	8009ebe <_printf_common+0xd2>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e008      	b.n	8009e9e <_printf_common+0xb2>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4652      	mov	r2, sl
 8009e90:	4641      	mov	r1, r8
 8009e92:	4638      	mov	r0, r7
 8009e94:	47c8      	blx	r9
 8009e96:	3001      	adds	r0, #1
 8009e98:	d103      	bne.n	8009ea2 <_printf_common+0xb6>
 8009e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea2:	3501      	adds	r5, #1
 8009ea4:	e7c1      	b.n	8009e2a <_printf_common+0x3e>
 8009ea6:	18e1      	adds	r1, r4, r3
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	2030      	movs	r0, #48	@ 0x30
 8009eac:	3302      	adds	r3, #2
 8009eae:	4422      	add	r2, r4
 8009eb0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ebc:	e7c2      	b.n	8009e44 <_printf_common+0x58>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	47c8      	blx	r9
 8009ec8:	3001      	adds	r0, #1
 8009eca:	d0e6      	beq.n	8009e9a <_printf_common+0xae>
 8009ecc:	3601      	adds	r6, #1
 8009ece:	e7d9      	b.n	8009e84 <_printf_common+0x98>

08009ed0 <_printf_i>:
 8009ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed4:	7e0f      	ldrb	r7, [r1, #24]
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	4680      	mov	r8, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	2f78      	cmp	r7, #120	@ 0x78
 8009ede:	469a      	mov	sl, r3
 8009ee0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ee2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ee6:	d807      	bhi.n	8009ef8 <_printf_i+0x28>
 8009ee8:	2f62      	cmp	r7, #98	@ 0x62
 8009eea:	d80a      	bhi.n	8009f02 <_printf_i+0x32>
 8009eec:	2f00      	cmp	r7, #0
 8009eee:	f000 80d2 	beq.w	800a096 <_printf_i+0x1c6>
 8009ef2:	2f58      	cmp	r7, #88	@ 0x58
 8009ef4:	f000 80b9 	beq.w	800a06a <_printf_i+0x19a>
 8009ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009efc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f00:	e03a      	b.n	8009f78 <_printf_i+0xa8>
 8009f02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f06:	2b15      	cmp	r3, #21
 8009f08:	d8f6      	bhi.n	8009ef8 <_printf_i+0x28>
 8009f0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009f10 <_printf_i+0x40>)
 8009f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f7d 	.word	0x08009f7d
 8009f18:	08009ef9 	.word	0x08009ef9
 8009f1c:	08009ef9 	.word	0x08009ef9
 8009f20:	08009ef9 	.word	0x08009ef9
 8009f24:	08009ef9 	.word	0x08009ef9
 8009f28:	08009f7d 	.word	0x08009f7d
 8009f2c:	08009ef9 	.word	0x08009ef9
 8009f30:	08009ef9 	.word	0x08009ef9
 8009f34:	08009ef9 	.word	0x08009ef9
 8009f38:	08009ef9 	.word	0x08009ef9
 8009f3c:	0800a07d 	.word	0x0800a07d
 8009f40:	08009fa7 	.word	0x08009fa7
 8009f44:	0800a037 	.word	0x0800a037
 8009f48:	08009ef9 	.word	0x08009ef9
 8009f4c:	08009ef9 	.word	0x08009ef9
 8009f50:	0800a09f 	.word	0x0800a09f
 8009f54:	08009ef9 	.word	0x08009ef9
 8009f58:	08009fa7 	.word	0x08009fa7
 8009f5c:	08009ef9 	.word	0x08009ef9
 8009f60:	08009ef9 	.word	0x08009ef9
 8009f64:	0800a03f 	.word	0x0800a03f
 8009f68:	6833      	ldr	r3, [r6, #0]
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6032      	str	r2, [r6, #0]
 8009f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e09d      	b.n	800a0b8 <_printf_i+0x1e8>
 8009f7c:	6833      	ldr	r3, [r6, #0]
 8009f7e:	6820      	ldr	r0, [r4, #0]
 8009f80:	1d19      	adds	r1, r3, #4
 8009f82:	6031      	str	r1, [r6, #0]
 8009f84:	0606      	lsls	r6, r0, #24
 8009f86:	d501      	bpl.n	8009f8c <_printf_i+0xbc>
 8009f88:	681d      	ldr	r5, [r3, #0]
 8009f8a:	e003      	b.n	8009f94 <_printf_i+0xc4>
 8009f8c:	0645      	lsls	r5, r0, #25
 8009f8e:	d5fb      	bpl.n	8009f88 <_printf_i+0xb8>
 8009f90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f94:	2d00      	cmp	r5, #0
 8009f96:	da03      	bge.n	8009fa0 <_printf_i+0xd0>
 8009f98:	232d      	movs	r3, #45	@ 0x2d
 8009f9a:	426d      	negs	r5, r5
 8009f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fa0:	4859      	ldr	r0, [pc, #356]	@ (800a108 <_printf_i+0x238>)
 8009fa2:	230a      	movs	r3, #10
 8009fa4:	e011      	b.n	8009fca <_printf_i+0xfa>
 8009fa6:	6821      	ldr	r1, [r4, #0]
 8009fa8:	6833      	ldr	r3, [r6, #0]
 8009faa:	0608      	lsls	r0, r1, #24
 8009fac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fb0:	d402      	bmi.n	8009fb8 <_printf_i+0xe8>
 8009fb2:	0649      	lsls	r1, r1, #25
 8009fb4:	bf48      	it	mi
 8009fb6:	b2ad      	uxthmi	r5, r5
 8009fb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fba:	6033      	str	r3, [r6, #0]
 8009fbc:	4852      	ldr	r0, [pc, #328]	@ (800a108 <_printf_i+0x238>)
 8009fbe:	bf14      	ite	ne
 8009fc0:	230a      	movne	r3, #10
 8009fc2:	2308      	moveq	r3, #8
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fca:	6866      	ldr	r6, [r4, #4]
 8009fcc:	2e00      	cmp	r6, #0
 8009fce:	60a6      	str	r6, [r4, #8]
 8009fd0:	bfa2      	ittt	ge
 8009fd2:	6821      	ldrge	r1, [r4, #0]
 8009fd4:	f021 0104 	bicge.w	r1, r1, #4
 8009fd8:	6021      	strge	r1, [r4, #0]
 8009fda:	b90d      	cbnz	r5, 8009fe0 <_printf_i+0x110>
 8009fdc:	2e00      	cmp	r6, #0
 8009fde:	d04b      	beq.n	800a078 <_printf_i+0x1a8>
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fe6:	fb03 5711 	mls	r7, r3, r1, r5
 8009fea:	5dc7      	ldrb	r7, [r0, r7]
 8009fec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ff0:	462f      	mov	r7, r5
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	42bb      	cmp	r3, r7
 8009ff6:	d9f4      	bls.n	8009fe2 <_printf_i+0x112>
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d10b      	bne.n	800a014 <_printf_i+0x144>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	07df      	lsls	r7, r3, #31
 800a000:	d508      	bpl.n	800a014 <_printf_i+0x144>
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	6861      	ldr	r1, [r4, #4]
 800a006:	4299      	cmp	r1, r3
 800a008:	bfde      	ittt	le
 800a00a:	2330      	movle	r3, #48	@ 0x30
 800a00c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a010:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a014:	1b92      	subs	r2, r2, r6
 800a016:	6122      	str	r2, [r4, #16]
 800a018:	464b      	mov	r3, r9
 800a01a:	aa03      	add	r2, sp, #12
 800a01c:	4621      	mov	r1, r4
 800a01e:	4640      	mov	r0, r8
 800a020:	f8cd a000 	str.w	sl, [sp]
 800a024:	f7ff fee2 	bl	8009dec <_printf_common>
 800a028:	3001      	adds	r0, #1
 800a02a:	d14a      	bne.n	800a0c2 <_printf_i+0x1f2>
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	b004      	add	sp, #16
 800a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	f043 0320 	orr.w	r3, r3, #32
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	2778      	movs	r7, #120	@ 0x78
 800a040:	4832      	ldr	r0, [pc, #200]	@ (800a10c <_printf_i+0x23c>)
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a048:	061f      	lsls	r7, r3, #24
 800a04a:	6831      	ldr	r1, [r6, #0]
 800a04c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a050:	d402      	bmi.n	800a058 <_printf_i+0x188>
 800a052:	065f      	lsls	r7, r3, #25
 800a054:	bf48      	it	mi
 800a056:	b2ad      	uxthmi	r5, r5
 800a058:	6031      	str	r1, [r6, #0]
 800a05a:	07d9      	lsls	r1, r3, #31
 800a05c:	bf44      	itt	mi
 800a05e:	f043 0320 	orrmi.w	r3, r3, #32
 800a062:	6023      	strmi	r3, [r4, #0]
 800a064:	b11d      	cbz	r5, 800a06e <_printf_i+0x19e>
 800a066:	2310      	movs	r3, #16
 800a068:	e7ac      	b.n	8009fc4 <_printf_i+0xf4>
 800a06a:	4827      	ldr	r0, [pc, #156]	@ (800a108 <_printf_i+0x238>)
 800a06c:	e7e9      	b.n	800a042 <_printf_i+0x172>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	f023 0320 	bic.w	r3, r3, #32
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	e7f6      	b.n	800a066 <_printf_i+0x196>
 800a078:	4616      	mov	r6, r2
 800a07a:	e7bd      	b.n	8009ff8 <_printf_i+0x128>
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	6825      	ldr	r5, [r4, #0]
 800a080:	1d18      	adds	r0, r3, #4
 800a082:	6961      	ldr	r1, [r4, #20]
 800a084:	6030      	str	r0, [r6, #0]
 800a086:	062e      	lsls	r6, r5, #24
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	d501      	bpl.n	800a090 <_printf_i+0x1c0>
 800a08c:	6019      	str	r1, [r3, #0]
 800a08e:	e002      	b.n	800a096 <_printf_i+0x1c6>
 800a090:	0668      	lsls	r0, r5, #25
 800a092:	d5fb      	bpl.n	800a08c <_printf_i+0x1bc>
 800a094:	8019      	strh	r1, [r3, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	4616      	mov	r6, r2
 800a09a:	6123      	str	r3, [r4, #16]
 800a09c:	e7bc      	b.n	800a018 <_printf_i+0x148>
 800a09e:	6833      	ldr	r3, [r6, #0]
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	6032      	str	r2, [r6, #0]
 800a0a6:	681e      	ldr	r6, [r3, #0]
 800a0a8:	6862      	ldr	r2, [r4, #4]
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f000 fbf9 	bl	800a8a2 <memchr>
 800a0b0:	b108      	cbz	r0, 800a0b6 <_printf_i+0x1e6>
 800a0b2:	1b80      	subs	r0, r0, r6
 800a0b4:	6060      	str	r0, [r4, #4]
 800a0b6:	6863      	ldr	r3, [r4, #4]
 800a0b8:	6123      	str	r3, [r4, #16]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0c0:	e7aa      	b.n	800a018 <_printf_i+0x148>
 800a0c2:	6923      	ldr	r3, [r4, #16]
 800a0c4:	4632      	mov	r2, r6
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	47d0      	blx	sl
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d0ad      	beq.n	800a02c <_printf_i+0x15c>
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	079b      	lsls	r3, r3, #30
 800a0d4:	d413      	bmi.n	800a0fe <_printf_i+0x22e>
 800a0d6:	68e0      	ldr	r0, [r4, #12]
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	4298      	cmp	r0, r3
 800a0dc:	bfb8      	it	lt
 800a0de:	4618      	movlt	r0, r3
 800a0e0:	e7a6      	b.n	800a030 <_printf_i+0x160>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	47d0      	blx	sl
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d09d      	beq.n	800a02c <_printf_i+0x15c>
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	68e3      	ldr	r3, [r4, #12]
 800a0f4:	9903      	ldr	r1, [sp, #12]
 800a0f6:	1a5b      	subs	r3, r3, r1
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	dcf2      	bgt.n	800a0e2 <_printf_i+0x212>
 800a0fc:	e7eb      	b.n	800a0d6 <_printf_i+0x206>
 800a0fe:	2500      	movs	r5, #0
 800a100:	f104 0619 	add.w	r6, r4, #25
 800a104:	e7f5      	b.n	800a0f2 <_printf_i+0x222>
 800a106:	bf00      	nop
 800a108:	0800e062 	.word	0x0800e062
 800a10c:	0800e073 	.word	0x0800e073

0800a110 <_scanf_float>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	b087      	sub	sp, #28
 800a116:	4617      	mov	r7, r2
 800a118:	4680      	mov	r8, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	9303      	str	r3, [sp, #12]
 800a11e:	688b      	ldr	r3, [r1, #8]
 800a120:	1e5a      	subs	r2, r3, #1
 800a122:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a126:	460a      	mov	r2, r1
 800a128:	bf89      	itett	hi
 800a12a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a12e:	f04f 0b00 	movls.w	fp, #0
 800a132:	eb03 0b05 	addhi.w	fp, r3, r5
 800a136:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a13a:	f04f 0500 	mov.w	r5, #0
 800a13e:	bf88      	it	hi
 800a140:	608b      	strhi	r3, [r1, #8]
 800a142:	680b      	ldr	r3, [r1, #0]
 800a144:	46aa      	mov	sl, r5
 800a146:	46a9      	mov	r9, r5
 800a148:	9502      	str	r5, [sp, #8]
 800a14a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a14e:	f842 3b1c 	str.w	r3, [r2], #28
 800a152:	4616      	mov	r6, r2
 800a154:	9201      	str	r2, [sp, #4]
 800a156:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a15a:	68a2      	ldr	r2, [r4, #8]
 800a15c:	b152      	cbz	r2, 800a174 <_scanf_float+0x64>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2b4e      	cmp	r3, #78	@ 0x4e
 800a164:	d864      	bhi.n	800a230 <_scanf_float+0x120>
 800a166:	2b40      	cmp	r3, #64	@ 0x40
 800a168:	d83c      	bhi.n	800a1e4 <_scanf_float+0xd4>
 800a16a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a16e:	b2c8      	uxtb	r0, r1
 800a170:	280e      	cmp	r0, #14
 800a172:	d93a      	bls.n	800a1ea <_scanf_float+0xda>
 800a174:	f1b9 0f00 	cmp.w	r9, #0
 800a178:	d003      	beq.n	800a182 <_scanf_float+0x72>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a186:	f1ba 0f01 	cmp.w	sl, #1
 800a18a:	f200 8117 	bhi.w	800a3bc <_scanf_float+0x2ac>
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	429e      	cmp	r6, r3
 800a192:	f200 8108 	bhi.w	800a3a6 <_scanf_float+0x296>
 800a196:	2001      	movs	r0, #1
 800a198:	b007      	add	sp, #28
 800a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a1a2:	2a0d      	cmp	r2, #13
 800a1a4:	d8e6      	bhi.n	800a174 <_scanf_float+0x64>
 800a1a6:	a101      	add	r1, pc, #4	@ (adr r1, 800a1ac <_scanf_float+0x9c>)
 800a1a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1ac:	0800a2f3 	.word	0x0800a2f3
 800a1b0:	0800a175 	.word	0x0800a175
 800a1b4:	0800a175 	.word	0x0800a175
 800a1b8:	0800a175 	.word	0x0800a175
 800a1bc:	0800a353 	.word	0x0800a353
 800a1c0:	0800a32b 	.word	0x0800a32b
 800a1c4:	0800a175 	.word	0x0800a175
 800a1c8:	0800a175 	.word	0x0800a175
 800a1cc:	0800a301 	.word	0x0800a301
 800a1d0:	0800a175 	.word	0x0800a175
 800a1d4:	0800a175 	.word	0x0800a175
 800a1d8:	0800a175 	.word	0x0800a175
 800a1dc:	0800a175 	.word	0x0800a175
 800a1e0:	0800a2b9 	.word	0x0800a2b9
 800a1e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a1e8:	e7db      	b.n	800a1a2 <_scanf_float+0x92>
 800a1ea:	290e      	cmp	r1, #14
 800a1ec:	d8c2      	bhi.n	800a174 <_scanf_float+0x64>
 800a1ee:	a001      	add	r0, pc, #4	@ (adr r0, 800a1f4 <_scanf_float+0xe4>)
 800a1f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a1f4:	0800a2a9 	.word	0x0800a2a9
 800a1f8:	0800a175 	.word	0x0800a175
 800a1fc:	0800a2a9 	.word	0x0800a2a9
 800a200:	0800a33f 	.word	0x0800a33f
 800a204:	0800a175 	.word	0x0800a175
 800a208:	0800a251 	.word	0x0800a251
 800a20c:	0800a28f 	.word	0x0800a28f
 800a210:	0800a28f 	.word	0x0800a28f
 800a214:	0800a28f 	.word	0x0800a28f
 800a218:	0800a28f 	.word	0x0800a28f
 800a21c:	0800a28f 	.word	0x0800a28f
 800a220:	0800a28f 	.word	0x0800a28f
 800a224:	0800a28f 	.word	0x0800a28f
 800a228:	0800a28f 	.word	0x0800a28f
 800a22c:	0800a28f 	.word	0x0800a28f
 800a230:	2b6e      	cmp	r3, #110	@ 0x6e
 800a232:	d809      	bhi.n	800a248 <_scanf_float+0x138>
 800a234:	2b60      	cmp	r3, #96	@ 0x60
 800a236:	d8b2      	bhi.n	800a19e <_scanf_float+0x8e>
 800a238:	2b54      	cmp	r3, #84	@ 0x54
 800a23a:	d07b      	beq.n	800a334 <_scanf_float+0x224>
 800a23c:	2b59      	cmp	r3, #89	@ 0x59
 800a23e:	d199      	bne.n	800a174 <_scanf_float+0x64>
 800a240:	2d07      	cmp	r5, #7
 800a242:	d197      	bne.n	800a174 <_scanf_float+0x64>
 800a244:	2508      	movs	r5, #8
 800a246:	e02c      	b.n	800a2a2 <_scanf_float+0x192>
 800a248:	2b74      	cmp	r3, #116	@ 0x74
 800a24a:	d073      	beq.n	800a334 <_scanf_float+0x224>
 800a24c:	2b79      	cmp	r3, #121	@ 0x79
 800a24e:	e7f6      	b.n	800a23e <_scanf_float+0x12e>
 800a250:	6821      	ldr	r1, [r4, #0]
 800a252:	05c8      	lsls	r0, r1, #23
 800a254:	d51b      	bpl.n	800a28e <_scanf_float+0x17e>
 800a256:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a25a:	f109 0901 	add.w	r9, r9, #1
 800a25e:	6021      	str	r1, [r4, #0]
 800a260:	f1bb 0f00 	cmp.w	fp, #0
 800a264:	d003      	beq.n	800a26e <_scanf_float+0x15e>
 800a266:	3201      	adds	r2, #1
 800a268:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a26c:	60a2      	str	r2, [r4, #8]
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	3b01      	subs	r3, #1
 800a272:	60a3      	str	r3, [r4, #8]
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	3301      	adds	r3, #1
 800a278:	6123      	str	r3, [r4, #16]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	607b      	str	r3, [r7, #4]
 800a282:	f340 8087 	ble.w	800a394 <_scanf_float+0x284>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	3301      	adds	r3, #1
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	e765      	b.n	800a15a <_scanf_float+0x4a>
 800a28e:	eb1a 0105 	adds.w	r1, sl, r5
 800a292:	f47f af6f 	bne.w	800a174 <_scanf_float+0x64>
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	460d      	mov	r5, r1
 800a29a:	468a      	mov	sl, r1
 800a29c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a2a0:	6022      	str	r2, [r4, #0]
 800a2a2:	f806 3b01 	strb.w	r3, [r6], #1
 800a2a6:	e7e2      	b.n	800a26e <_scanf_float+0x15e>
 800a2a8:	6822      	ldr	r2, [r4, #0]
 800a2aa:	0610      	lsls	r0, r2, #24
 800a2ac:	f57f af62 	bpl.w	800a174 <_scanf_float+0x64>
 800a2b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2b4:	6022      	str	r2, [r4, #0]
 800a2b6:	e7f4      	b.n	800a2a2 <_scanf_float+0x192>
 800a2b8:	f1ba 0f00 	cmp.w	sl, #0
 800a2bc:	d10e      	bne.n	800a2dc <_scanf_float+0x1cc>
 800a2be:	f1b9 0f00 	cmp.w	r9, #0
 800a2c2:	d10e      	bne.n	800a2e2 <_scanf_float+0x1d2>
 800a2c4:	6822      	ldr	r2, [r4, #0]
 800a2c6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a2ca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a2ce:	d108      	bne.n	800a2e2 <_scanf_float+0x1d2>
 800a2d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2d4:	f04f 0a01 	mov.w	sl, #1
 800a2d8:	6022      	str	r2, [r4, #0]
 800a2da:	e7e2      	b.n	800a2a2 <_scanf_float+0x192>
 800a2dc:	f1ba 0f02 	cmp.w	sl, #2
 800a2e0:	d055      	beq.n	800a38e <_scanf_float+0x27e>
 800a2e2:	2d01      	cmp	r5, #1
 800a2e4:	d002      	beq.n	800a2ec <_scanf_float+0x1dc>
 800a2e6:	2d04      	cmp	r5, #4
 800a2e8:	f47f af44 	bne.w	800a174 <_scanf_float+0x64>
 800a2ec:	3501      	adds	r5, #1
 800a2ee:	b2ed      	uxtb	r5, r5
 800a2f0:	e7d7      	b.n	800a2a2 <_scanf_float+0x192>
 800a2f2:	f1ba 0f01 	cmp.w	sl, #1
 800a2f6:	f47f af3d 	bne.w	800a174 <_scanf_float+0x64>
 800a2fa:	f04f 0a02 	mov.w	sl, #2
 800a2fe:	e7d0      	b.n	800a2a2 <_scanf_float+0x192>
 800a300:	b97d      	cbnz	r5, 800a322 <_scanf_float+0x212>
 800a302:	f1b9 0f00 	cmp.w	r9, #0
 800a306:	f47f af38 	bne.w	800a17a <_scanf_float+0x6a>
 800a30a:	6822      	ldr	r2, [r4, #0]
 800a30c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a310:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a314:	f040 8107 	bne.w	800a526 <_scanf_float+0x416>
 800a318:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a31c:	2501      	movs	r5, #1
 800a31e:	6022      	str	r2, [r4, #0]
 800a320:	e7bf      	b.n	800a2a2 <_scanf_float+0x192>
 800a322:	2d03      	cmp	r5, #3
 800a324:	d0e2      	beq.n	800a2ec <_scanf_float+0x1dc>
 800a326:	2d05      	cmp	r5, #5
 800a328:	e7de      	b.n	800a2e8 <_scanf_float+0x1d8>
 800a32a:	2d02      	cmp	r5, #2
 800a32c:	f47f af22 	bne.w	800a174 <_scanf_float+0x64>
 800a330:	2503      	movs	r5, #3
 800a332:	e7b6      	b.n	800a2a2 <_scanf_float+0x192>
 800a334:	2d06      	cmp	r5, #6
 800a336:	f47f af1d 	bne.w	800a174 <_scanf_float+0x64>
 800a33a:	2507      	movs	r5, #7
 800a33c:	e7b1      	b.n	800a2a2 <_scanf_float+0x192>
 800a33e:	6822      	ldr	r2, [r4, #0]
 800a340:	0591      	lsls	r1, r2, #22
 800a342:	f57f af17 	bpl.w	800a174 <_scanf_float+0x64>
 800a346:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a34a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a34e:	6022      	str	r2, [r4, #0]
 800a350:	e7a7      	b.n	800a2a2 <_scanf_float+0x192>
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a358:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a35c:	d006      	beq.n	800a36c <_scanf_float+0x25c>
 800a35e:	0550      	lsls	r0, r2, #21
 800a360:	f57f af08 	bpl.w	800a174 <_scanf_float+0x64>
 800a364:	f1b9 0f00 	cmp.w	r9, #0
 800a368:	f000 80dd 	beq.w	800a526 <_scanf_float+0x416>
 800a36c:	0591      	lsls	r1, r2, #22
 800a36e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a372:	bf58      	it	pl
 800a374:	9902      	ldrpl	r1, [sp, #8]
 800a376:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a37a:	bf58      	it	pl
 800a37c:	eba9 0101 	subpl.w	r1, r9, r1
 800a380:	6022      	str	r2, [r4, #0]
 800a382:	f04f 0900 	mov.w	r9, #0
 800a386:	bf58      	it	pl
 800a388:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a38c:	e789      	b.n	800a2a2 <_scanf_float+0x192>
 800a38e:	f04f 0a03 	mov.w	sl, #3
 800a392:	e786      	b.n	800a2a2 <_scanf_float+0x192>
 800a394:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a398:	4639      	mov	r1, r7
 800a39a:	4640      	mov	r0, r8
 800a39c:	4798      	blx	r3
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f43f aedb 	beq.w	800a15a <_scanf_float+0x4a>
 800a3a4:	e6e6      	b.n	800a174 <_scanf_float+0x64>
 800a3a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3aa:	463a      	mov	r2, r7
 800a3ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4798      	blx	r3
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	e6e8      	b.n	800a18e <_scanf_float+0x7e>
 800a3bc:	1e6b      	subs	r3, r5, #1
 800a3be:	2b06      	cmp	r3, #6
 800a3c0:	d824      	bhi.n	800a40c <_scanf_float+0x2fc>
 800a3c2:	2d02      	cmp	r5, #2
 800a3c4:	d836      	bhi.n	800a434 <_scanf_float+0x324>
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	429e      	cmp	r6, r3
 800a3ca:	f67f aee4 	bls.w	800a196 <_scanf_float+0x86>
 800a3ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4798      	blx	r3
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	6123      	str	r3, [r4, #16]
 800a3e2:	e7f0      	b.n	800a3c6 <_scanf_float+0x2b6>
 800a3e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3e8:	463a      	mov	r2, r7
 800a3ea:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	4798      	blx	r3
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	6123      	str	r3, [r4, #16]
 800a3f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3fc:	fa5f fa8a 	uxtb.w	sl, sl
 800a400:	f1ba 0f02 	cmp.w	sl, #2
 800a404:	d1ee      	bne.n	800a3e4 <_scanf_float+0x2d4>
 800a406:	3d03      	subs	r5, #3
 800a408:	b2ed      	uxtb	r5, r5
 800a40a:	1b76      	subs	r6, r6, r5
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	05da      	lsls	r2, r3, #23
 800a410:	d52f      	bpl.n	800a472 <_scanf_float+0x362>
 800a412:	055b      	lsls	r3, r3, #21
 800a414:	d511      	bpl.n	800a43a <_scanf_float+0x32a>
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	429e      	cmp	r6, r3
 800a41a:	f67f aebc 	bls.w	800a196 <_scanf_float+0x86>
 800a41e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a422:	463a      	mov	r2, r7
 800a424:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a428:	4640      	mov	r0, r8
 800a42a:	4798      	blx	r3
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	3b01      	subs	r3, #1
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	e7f0      	b.n	800a416 <_scanf_float+0x306>
 800a434:	46aa      	mov	sl, r5
 800a436:	46b3      	mov	fp, r6
 800a438:	e7de      	b.n	800a3f8 <_scanf_float+0x2e8>
 800a43a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a43e:	1e75      	subs	r5, r6, #1
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	2965      	cmp	r1, #101	@ 0x65
 800a444:	f103 33ff 	add.w	r3, r3, #4294967295
 800a448:	6123      	str	r3, [r4, #16]
 800a44a:	d00c      	beq.n	800a466 <_scanf_float+0x356>
 800a44c:	2945      	cmp	r1, #69	@ 0x45
 800a44e:	d00a      	beq.n	800a466 <_scanf_float+0x356>
 800a450:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a454:	463a      	mov	r2, r7
 800a456:	4640      	mov	r0, r8
 800a458:	1eb5      	subs	r5, r6, #2
 800a45a:	4798      	blx	r3
 800a45c:	6923      	ldr	r3, [r4, #16]
 800a45e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a462:	3b01      	subs	r3, #1
 800a464:	6123      	str	r3, [r4, #16]
 800a466:	462e      	mov	r6, r5
 800a468:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a46c:	463a      	mov	r2, r7
 800a46e:	4640      	mov	r0, r8
 800a470:	4798      	blx	r3
 800a472:	6822      	ldr	r2, [r4, #0]
 800a474:	f012 0210 	ands.w	r2, r2, #16
 800a478:	d001      	beq.n	800a47e <_scanf_float+0x36e>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e68c      	b.n	800a198 <_scanf_float+0x88>
 800a47e:	7032      	strb	r2, [r6, #0]
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a48a:	d11c      	bne.n	800a4c6 <_scanf_float+0x3b6>
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	454b      	cmp	r3, r9
 800a490:	eba3 0209 	sub.w	r2, r3, r9
 800a494:	d123      	bne.n	800a4de <_scanf_float+0x3ce>
 800a496:	2200      	movs	r2, #0
 800a498:	9901      	ldr	r1, [sp, #4]
 800a49a:	4640      	mov	r0, r8
 800a49c:	f002 fc28 	bl	800ccf0 <_strtod_r>
 800a4a0:	6821      	ldr	r1, [r4, #0]
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	f011 0f02 	tst.w	r1, #2
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	ec57 6b10 	vmov	r6, r7, d0
 800a4ae:	f103 0204 	add.w	r2, r3, #4
 800a4b2:	d01f      	beq.n	800a4f4 <_scanf_float+0x3e4>
 800a4b4:	9903      	ldr	r1, [sp, #12]
 800a4b6:	600a      	str	r2, [r1, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	e9c3 6700 	strd	r6, r7, [r3]
 800a4be:	68e3      	ldr	r3, [r4, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	60e3      	str	r3, [r4, #12]
 800a4c4:	e7d9      	b.n	800a47a <_scanf_float+0x36a>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0e4      	beq.n	800a496 <_scanf_float+0x386>
 800a4cc:	9905      	ldr	r1, [sp, #20]
 800a4ce:	230a      	movs	r3, #10
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	3101      	adds	r1, #1
 800a4d4:	f002 fc8c 	bl	800cdf0 <_strtol_r>
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	9e05      	ldr	r6, [sp, #20]
 800a4dc:	1ac2      	subs	r2, r0, r3
 800a4de:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a4e2:	4912      	ldr	r1, [pc, #72]	@ (800a52c <_scanf_float+0x41c>)
 800a4e4:	429e      	cmp	r6, r3
 800a4e6:	bf28      	it	cs
 800a4e8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f000 f8f5 	bl	800a6dc <siprintf>
 800a4f2:	e7d0      	b.n	800a496 <_scanf_float+0x386>
 800a4f4:	f011 0f04 	tst.w	r1, #4
 800a4f8:	9903      	ldr	r1, [sp, #12]
 800a4fa:	600a      	str	r2, [r1, #0]
 800a4fc:	d1dc      	bne.n	800a4b8 <_scanf_float+0x3a8>
 800a4fe:	681d      	ldr	r5, [r3, #0]
 800a500:	4632      	mov	r2, r6
 800a502:	463b      	mov	r3, r7
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 fb24 	bl	8000b54 <__aeabi_dcmpun>
 800a50c:	b128      	cbz	r0, 800a51a <_scanf_float+0x40a>
 800a50e:	4808      	ldr	r0, [pc, #32]	@ (800a530 <_scanf_float+0x420>)
 800a510:	f000 f9d6 	bl	800a8c0 <nanf>
 800a514:	ed85 0a00 	vstr	s0, [r5]
 800a518:	e7d1      	b.n	800a4be <_scanf_float+0x3ae>
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f6 fb77 	bl	8000c10 <__aeabi_d2f>
 800a522:	6028      	str	r0, [r5, #0]
 800a524:	e7cb      	b.n	800a4be <_scanf_float+0x3ae>
 800a526:	f04f 0900 	mov.w	r9, #0
 800a52a:	e62a      	b.n	800a182 <_scanf_float+0x72>
 800a52c:	0800e084 	.word	0x0800e084
 800a530:	0800e41d 	.word	0x0800e41d

0800a534 <std>:
 800a534:	2300      	movs	r3, #0
 800a536:	b510      	push	{r4, lr}
 800a538:	4604      	mov	r4, r0
 800a53a:	6083      	str	r3, [r0, #8]
 800a53c:	8181      	strh	r1, [r0, #12]
 800a53e:	4619      	mov	r1, r3
 800a540:	6643      	str	r3, [r0, #100]	@ 0x64
 800a542:	81c2      	strh	r2, [r0, #14]
 800a544:	2208      	movs	r2, #8
 800a546:	6183      	str	r3, [r0, #24]
 800a548:	e9c0 3300 	strd	r3, r3, [r0]
 800a54c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a550:	305c      	adds	r0, #92	@ 0x5c
 800a552:	f000 f926 	bl	800a7a2 <memset>
 800a556:	4b0d      	ldr	r3, [pc, #52]	@ (800a58c <std+0x58>)
 800a558:	6224      	str	r4, [r4, #32]
 800a55a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a55c:	4b0c      	ldr	r3, [pc, #48]	@ (800a590 <std+0x5c>)
 800a55e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a560:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <std+0x60>)
 800a562:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <std+0x64>)
 800a566:	6323      	str	r3, [r4, #48]	@ 0x30
 800a568:	4b0c      	ldr	r3, [pc, #48]	@ (800a59c <std+0x68>)
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d006      	beq.n	800a57c <std+0x48>
 800a56e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a572:	4294      	cmp	r4, r2
 800a574:	d002      	beq.n	800a57c <std+0x48>
 800a576:	33d0      	adds	r3, #208	@ 0xd0
 800a578:	429c      	cmp	r4, r3
 800a57a:	d105      	bne.n	800a588 <std+0x54>
 800a57c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a584:	f000 b98a 	b.w	800a89c <__retarget_lock_init_recursive>
 800a588:	bd10      	pop	{r4, pc}
 800a58a:	bf00      	nop
 800a58c:	0800a71d 	.word	0x0800a71d
 800a590:	0800a73f 	.word	0x0800a73f
 800a594:	0800a777 	.word	0x0800a777
 800a598:	0800a79b 	.word	0x0800a79b
 800a59c:	200003f8 	.word	0x200003f8

0800a5a0 <stdio_exit_handler>:
 800a5a0:	4a02      	ldr	r2, [pc, #8]	@ (800a5ac <stdio_exit_handler+0xc>)
 800a5a2:	4903      	ldr	r1, [pc, #12]	@ (800a5b0 <stdio_exit_handler+0x10>)
 800a5a4:	4803      	ldr	r0, [pc, #12]	@ (800a5b4 <stdio_exit_handler+0x14>)
 800a5a6:	f000 b869 	b.w	800a67c <_fwalk_sglue>
 800a5aa:	bf00      	nop
 800a5ac:	2000000c 	.word	0x2000000c
 800a5b0:	0800d431 	.word	0x0800d431
 800a5b4:	2000001c 	.word	0x2000001c

0800a5b8 <cleanup_stdio>:
 800a5b8:	6841      	ldr	r1, [r0, #4]
 800a5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ec <cleanup_stdio+0x34>)
 800a5bc:	4299      	cmp	r1, r3
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	d001      	beq.n	800a5c8 <cleanup_stdio+0x10>
 800a5c4:	f002 ff34 	bl	800d430 <_fflush_r>
 800a5c8:	68a1      	ldr	r1, [r4, #8]
 800a5ca:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <cleanup_stdio+0x38>)
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	d002      	beq.n	800a5d6 <cleanup_stdio+0x1e>
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f002 ff2d 	bl	800d430 <_fflush_r>
 800a5d6:	68e1      	ldr	r1, [r4, #12]
 800a5d8:	4b06      	ldr	r3, [pc, #24]	@ (800a5f4 <cleanup_stdio+0x3c>)
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	d004      	beq.n	800a5e8 <cleanup_stdio+0x30>
 800a5de:	4620      	mov	r0, r4
 800a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e4:	f002 bf24 	b.w	800d430 <_fflush_r>
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	200003f8 	.word	0x200003f8
 800a5f0:	20000460 	.word	0x20000460
 800a5f4:	200004c8 	.word	0x200004c8

0800a5f8 <global_stdio_init.part.0>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a628 <global_stdio_init.part.0+0x30>)
 800a5fc:	2104      	movs	r1, #4
 800a5fe:	4c0b      	ldr	r4, [pc, #44]	@ (800a62c <global_stdio_init.part.0+0x34>)
 800a600:	4a0b      	ldr	r2, [pc, #44]	@ (800a630 <global_stdio_init.part.0+0x38>)
 800a602:	4620      	mov	r0, r4
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	2200      	movs	r2, #0
 800a608:	f7ff ff94 	bl	800a534 <std>
 800a60c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a610:	2201      	movs	r2, #1
 800a612:	2109      	movs	r1, #9
 800a614:	f7ff ff8e 	bl	800a534 <std>
 800a618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a61c:	2202      	movs	r2, #2
 800a61e:	2112      	movs	r1, #18
 800a620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a624:	f7ff bf86 	b.w	800a534 <std>
 800a628:	20000530 	.word	0x20000530
 800a62c:	200003f8 	.word	0x200003f8
 800a630:	0800a5a1 	.word	0x0800a5a1

0800a634 <__sfp_lock_acquire>:
 800a634:	4801      	ldr	r0, [pc, #4]	@ (800a63c <__sfp_lock_acquire+0x8>)
 800a636:	f000 b932 	b.w	800a89e <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	20000539 	.word	0x20000539

0800a640 <__sfp_lock_release>:
 800a640:	4801      	ldr	r0, [pc, #4]	@ (800a648 <__sfp_lock_release+0x8>)
 800a642:	f000 b92d 	b.w	800a8a0 <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	20000539 	.word	0x20000539

0800a64c <__sinit>:
 800a64c:	b510      	push	{r4, lr}
 800a64e:	4604      	mov	r4, r0
 800a650:	f7ff fff0 	bl	800a634 <__sfp_lock_acquire>
 800a654:	6a23      	ldr	r3, [r4, #32]
 800a656:	b11b      	cbz	r3, 800a660 <__sinit+0x14>
 800a658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65c:	f7ff bff0 	b.w	800a640 <__sfp_lock_release>
 800a660:	4b04      	ldr	r3, [pc, #16]	@ (800a674 <__sinit+0x28>)
 800a662:	6223      	str	r3, [r4, #32]
 800a664:	4b04      	ldr	r3, [pc, #16]	@ (800a678 <__sinit+0x2c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1f5      	bne.n	800a658 <__sinit+0xc>
 800a66c:	f7ff ffc4 	bl	800a5f8 <global_stdio_init.part.0>
 800a670:	e7f2      	b.n	800a658 <__sinit+0xc>
 800a672:	bf00      	nop
 800a674:	0800a5b9 	.word	0x0800a5b9
 800a678:	20000530 	.word	0x20000530

0800a67c <_fwalk_sglue>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4607      	mov	r7, r0
 800a682:	4688      	mov	r8, r1
 800a684:	4614      	mov	r4, r2
 800a686:	2600      	movs	r6, #0
 800a688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a68c:	f1b9 0901 	subs.w	r9, r9, #1
 800a690:	d505      	bpl.n	800a69e <_fwalk_sglue+0x22>
 800a692:	6824      	ldr	r4, [r4, #0]
 800a694:	2c00      	cmp	r4, #0
 800a696:	d1f7      	bne.n	800a688 <_fwalk_sglue+0xc>
 800a698:	4630      	mov	r0, r6
 800a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d907      	bls.n	800a6b4 <_fwalk_sglue+0x38>
 800a6a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	d003      	beq.n	800a6b4 <_fwalk_sglue+0x38>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	47c0      	blx	r8
 800a6b2:	4306      	orrs	r6, r0
 800a6b4:	3568      	adds	r5, #104	@ 0x68
 800a6b6:	e7e9      	b.n	800a68c <_fwalk_sglue+0x10>

0800a6b8 <iprintf>:
 800a6b8:	b40f      	push	{r0, r1, r2, r3}
 800a6ba:	b507      	push	{r0, r1, r2, lr}
 800a6bc:	4906      	ldr	r1, [pc, #24]	@ (800a6d8 <iprintf+0x20>)
 800a6be:	ab04      	add	r3, sp, #16
 800a6c0:	6808      	ldr	r0, [r1, #0]
 800a6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c6:	6881      	ldr	r1, [r0, #8]
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	f002 fd15 	bl	800d0f8 <_vfiprintf_r>
 800a6ce:	b003      	add	sp, #12
 800a6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6d4:	b004      	add	sp, #16
 800a6d6:	4770      	bx	lr
 800a6d8:	20000018 	.word	0x20000018

0800a6dc <siprintf>:
 800a6dc:	b40e      	push	{r1, r2, r3}
 800a6de:	b500      	push	{lr}
 800a6e0:	b09c      	sub	sp, #112	@ 0x70
 800a6e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a6e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a6e8:	9002      	str	r0, [sp, #8]
 800a6ea:	9006      	str	r0, [sp, #24]
 800a6ec:	9107      	str	r1, [sp, #28]
 800a6ee:	9104      	str	r1, [sp, #16]
 800a6f0:	4808      	ldr	r0, [pc, #32]	@ (800a714 <siprintf+0x38>)
 800a6f2:	4909      	ldr	r1, [pc, #36]	@ (800a718 <siprintf+0x3c>)
 800a6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f8:	9105      	str	r1, [sp, #20]
 800a6fa:	a902      	add	r1, sp, #8
 800a6fc:	6800      	ldr	r0, [r0, #0]
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	f002 fbd4 	bl	800ceac <_svfiprintf_r>
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	b01c      	add	sp, #112	@ 0x70
 800a70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a710:	b003      	add	sp, #12
 800a712:	4770      	bx	lr
 800a714:	20000018 	.word	0x20000018
 800a718:	ffff0208 	.word	0xffff0208

0800a71c <__sread>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	460c      	mov	r4, r1
 800a720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a724:	f000 f86c 	bl	800a800 <_read_r>
 800a728:	2800      	cmp	r0, #0
 800a72a:	bfab      	itete	ge
 800a72c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a72e:	89a3      	ldrhlt	r3, [r4, #12]
 800a730:	181b      	addge	r3, r3, r0
 800a732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a736:	bfac      	ite	ge
 800a738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a73a:	81a3      	strhlt	r3, [r4, #12]
 800a73c:	bd10      	pop	{r4, pc}

0800a73e <__swrite>:
 800a73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a742:	461f      	mov	r7, r3
 800a744:	898b      	ldrh	r3, [r1, #12]
 800a746:	4605      	mov	r5, r0
 800a748:	460c      	mov	r4, r1
 800a74a:	05db      	lsls	r3, r3, #23
 800a74c:	4616      	mov	r6, r2
 800a74e:	d505      	bpl.n	800a75c <__swrite+0x1e>
 800a750:	2302      	movs	r3, #2
 800a752:	2200      	movs	r2, #0
 800a754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a758:	f000 f840 	bl	800a7dc <_lseek_r>
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	4632      	mov	r2, r6
 800a760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a764:	4628      	mov	r0, r5
 800a766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	463b      	mov	r3, r7
 800a76e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a772:	f000 b857 	b.w	800a824 <_write_r>

0800a776 <__sseek>:
 800a776:	b510      	push	{r4, lr}
 800a778:	460c      	mov	r4, r1
 800a77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77e:	f000 f82d 	bl	800a7dc <_lseek_r>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	bf15      	itete	ne
 800a788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a78a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a78e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a792:	81a3      	strheq	r3, [r4, #12]
 800a794:	bf18      	it	ne
 800a796:	81a3      	strhne	r3, [r4, #12]
 800a798:	bd10      	pop	{r4, pc}

0800a79a <__sclose>:
 800a79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79e:	f000 b80d 	b.w	800a7bc <_close_r>

0800a7a2 <memset>:
 800a7a2:	4402      	add	r2, r0
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d100      	bne.n	800a7ac <memset+0xa>
 800a7aa:	4770      	bx	lr
 800a7ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b0:	e7f9      	b.n	800a7a6 <memset+0x4>
	...

0800a7b4 <_localeconv_r>:
 800a7b4:	4800      	ldr	r0, [pc, #0]	@ (800a7b8 <_localeconv_r+0x4>)
 800a7b6:	4770      	bx	lr
 800a7b8:	20000158 	.word	0x20000158

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4d05      	ldr	r5, [pc, #20]	@ (800a7d8 <_close_r+0x1c>)
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f7 fd85 	bl	80022d6 <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000534 	.word	0x20000534

0800a7dc <_lseek_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4d06      	ldr	r5, [pc, #24]	@ (800a7fc <_lseek_r+0x20>)
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	602a      	str	r2, [r5, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f7f7 fd9a 	bl	8002324 <_lseek>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_lseek_r+0x1e>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_lseek_r+0x1e>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20000534 	.word	0x20000534

0800a800 <_read_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4604      	mov	r4, r0
 800a804:	4d06      	ldr	r5, [pc, #24]	@ (800a820 <_read_r+0x20>)
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7f7 fd28 	bl	8002264 <_read>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_read_r+0x1e>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_read_r+0x1e>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20000534 	.word	0x20000534

0800a824 <_write_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4604      	mov	r4, r0
 800a828:	4d06      	ldr	r5, [pc, #24]	@ (800a844 <_write_r+0x20>)
 800a82a:	4608      	mov	r0, r1
 800a82c:	4611      	mov	r1, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	602a      	str	r2, [r5, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f7f7 fd33 	bl	800229e <_write>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_write_r+0x1e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_write_r+0x1e>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	20000534 	.word	0x20000534

0800a848 <__errno>:
 800a848:	4b01      	ldr	r3, [pc, #4]	@ (800a850 <__errno+0x8>)
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	20000018 	.word	0x20000018

0800a854 <__libc_init_array>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4d0d      	ldr	r5, [pc, #52]	@ (800a88c <__libc_init_array+0x38>)
 800a858:	2600      	movs	r6, #0
 800a85a:	4c0d      	ldr	r4, [pc, #52]	@ (800a890 <__libc_init_array+0x3c>)
 800a85c:	1b64      	subs	r4, r4, r5
 800a85e:	10a4      	asrs	r4, r4, #2
 800a860:	42a6      	cmp	r6, r4
 800a862:	d109      	bne.n	800a878 <__libc_init_array+0x24>
 800a864:	4d0b      	ldr	r5, [pc, #44]	@ (800a894 <__libc_init_array+0x40>)
 800a866:	2600      	movs	r6, #0
 800a868:	4c0b      	ldr	r4, [pc, #44]	@ (800a898 <__libc_init_array+0x44>)
 800a86a:	f003 fb8f 	bl	800df8c <_init>
 800a86e:	1b64      	subs	r4, r4, r5
 800a870:	10a4      	asrs	r4, r4, #2
 800a872:	42a6      	cmp	r6, r4
 800a874:	d105      	bne.n	800a882 <__libc_init_array+0x2e>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87c:	3601      	adds	r6, #1
 800a87e:	4798      	blx	r3
 800a880:	e7ee      	b.n	800a860 <__libc_init_array+0xc>
 800a882:	f855 3b04 	ldr.w	r3, [r5], #4
 800a886:	3601      	adds	r6, #1
 800a888:	4798      	blx	r3
 800a88a:	e7f2      	b.n	800a872 <__libc_init_array+0x1e>
 800a88c:	0800e488 	.word	0x0800e488
 800a890:	0800e488 	.word	0x0800e488
 800a894:	0800e488 	.word	0x0800e488
 800a898:	0800e48c 	.word	0x0800e48c

0800a89c <__retarget_lock_init_recursive>:
 800a89c:	4770      	bx	lr

0800a89e <__retarget_lock_acquire_recursive>:
 800a89e:	4770      	bx	lr

0800a8a0 <__retarget_lock_release_recursive>:
 800a8a0:	4770      	bx	lr

0800a8a2 <memchr>:
 800a8a2:	b2c9      	uxtb	r1, r1
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4402      	add	r2, r0
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	d101      	bne.n	800a8b4 <memchr+0x12>
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e003      	b.n	800a8bc <memchr+0x1a>
 800a8b4:	7804      	ldrb	r4, [r0, #0]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	428c      	cmp	r4, r1
 800a8ba:	d1f6      	bne.n	800a8aa <memchr+0x8>
 800a8bc:	bd10      	pop	{r4, pc}
	...

0800a8c0 <nanf>:
 800a8c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a8c8 <nanf+0x8>
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	7fc00000 	.word	0x7fc00000

0800a8cc <quorem>:
 800a8cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d0:	6903      	ldr	r3, [r0, #16]
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	690c      	ldr	r4, [r1, #16]
 800a8d6:	42a3      	cmp	r3, r4
 800a8d8:	f2c0 8083 	blt.w	800a9e2 <quorem+0x116>
 800a8dc:	3c01      	subs	r4, #1
 800a8de:	f100 0514 	add.w	r5, r0, #20
 800a8e2:	f101 0814 	add.w	r8, r1, #20
 800a8e6:	00a3      	lsls	r3, r4, #2
 800a8e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8f6:	9301      	str	r3, [sp, #4]
 800a8f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	429a      	cmp	r2, r3
 800a900:	fbb2 f6f3 	udiv	r6, r2, r3
 800a904:	d331      	bcc.n	800a96a <quorem+0x9e>
 800a906:	f04f 0a00 	mov.w	sl, #0
 800a90a:	46c4      	mov	ip, r8
 800a90c:	46ae      	mov	lr, r5
 800a90e:	46d3      	mov	fp, sl
 800a910:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a914:	b298      	uxth	r0, r3
 800a916:	45e1      	cmp	r9, ip
 800a918:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a91c:	fb06 a000 	mla	r0, r6, r0, sl
 800a920:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a924:	b280      	uxth	r0, r0
 800a926:	fb06 2303 	mla	r3, r6, r3, r2
 800a92a:	f8de 2000 	ldr.w	r2, [lr]
 800a92e:	b292      	uxth	r2, r2
 800a930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a934:	eba2 0200 	sub.w	r2, r2, r0
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f8de 0000 	ldr.w	r0, [lr]
 800a93e:	445a      	add	r2, fp
 800a940:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a944:	b292      	uxth	r2, r2
 800a946:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a94a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a94e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a952:	f84e 2b04 	str.w	r2, [lr], #4
 800a956:	d2db      	bcs.n	800a910 <quorem+0x44>
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	58eb      	ldr	r3, [r5, r3]
 800a95c:	b92b      	cbnz	r3, 800a96a <quorem+0x9e>
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	3b04      	subs	r3, #4
 800a962:	429d      	cmp	r5, r3
 800a964:	461a      	mov	r2, r3
 800a966:	d330      	bcc.n	800a9ca <quorem+0xfe>
 800a968:	613c      	str	r4, [r7, #16]
 800a96a:	4638      	mov	r0, r7
 800a96c:	f001 f9c6 	bl	800bcfc <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	db26      	blt.n	800a9c2 <quorem+0xf6>
 800a974:	4629      	mov	r1, r5
 800a976:	2000      	movs	r0, #0
 800a978:	f858 2b04 	ldr.w	r2, [r8], #4
 800a97c:	f8d1 c000 	ldr.w	ip, [r1]
 800a980:	fa1f fe82 	uxth.w	lr, r2
 800a984:	45c1      	cmp	r9, r8
 800a986:	fa1f f38c 	uxth.w	r3, ip
 800a98a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a98e:	eba3 030e 	sub.w	r3, r3, lr
 800a992:	4403      	add	r3, r0
 800a994:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a998:	b29b      	uxth	r3, r3
 800a99a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a99e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9a6:	f841 3b04 	str.w	r3, [r1], #4
 800a9aa:	d2e5      	bcs.n	800a978 <quorem+0xac>
 800a9ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9b4:	b922      	cbnz	r2, 800a9c0 <quorem+0xf4>
 800a9b6:	3b04      	subs	r3, #4
 800a9b8:	429d      	cmp	r5, r3
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	d30b      	bcc.n	800a9d6 <quorem+0x10a>
 800a9be:	613c      	str	r4, [r7, #16]
 800a9c0:	3601      	adds	r6, #1
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	b003      	add	sp, #12
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	6812      	ldr	r2, [r2, #0]
 800a9cc:	3b04      	subs	r3, #4
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	d1ca      	bne.n	800a968 <quorem+0x9c>
 800a9d2:	3c01      	subs	r4, #1
 800a9d4:	e7c5      	b.n	800a962 <quorem+0x96>
 800a9d6:	6812      	ldr	r2, [r2, #0]
 800a9d8:	3b04      	subs	r3, #4
 800a9da:	2a00      	cmp	r2, #0
 800a9dc:	d1ef      	bne.n	800a9be <quorem+0xf2>
 800a9de:	3c01      	subs	r4, #1
 800a9e0:	e7ea      	b.n	800a9b8 <quorem+0xec>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e7ee      	b.n	800a9c4 <quorem+0xf8>
	...

0800a9e8 <_dtoa_r>:
 800a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ec:	69c7      	ldr	r7, [r0, #28]
 800a9ee:	b099      	sub	sp, #100	@ 0x64
 800a9f0:	4683      	mov	fp, r0
 800a9f2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a9f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9fa:	ec55 4b10 	vmov	r4, r5, d0
 800a9fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa02:	b97f      	cbnz	r7, 800aa24 <_dtoa_r+0x3c>
 800aa04:	2010      	movs	r0, #16
 800aa06:	f000 fdfd 	bl	800b604 <malloc>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa10:	b920      	cbnz	r0, 800aa1c <_dtoa_r+0x34>
 800aa12:	4ba7      	ldr	r3, [pc, #668]	@ (800acb0 <_dtoa_r+0x2c8>)
 800aa14:	21ef      	movs	r1, #239	@ 0xef
 800aa16:	48a7      	ldr	r0, [pc, #668]	@ (800acb4 <_dtoa_r+0x2cc>)
 800aa18:	f002 fe1a 	bl	800d650 <__assert_func>
 800aa1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa20:	6007      	str	r7, [r0, #0]
 800aa22:	60c7      	str	r7, [r0, #12]
 800aa24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa28:	6819      	ldr	r1, [r3, #0]
 800aa2a:	b159      	cbz	r1, 800aa44 <_dtoa_r+0x5c>
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	2301      	movs	r3, #1
 800aa30:	4658      	mov	r0, fp
 800aa32:	4093      	lsls	r3, r2
 800aa34:	604a      	str	r2, [r1, #4]
 800aa36:	608b      	str	r3, [r1, #8]
 800aa38:	f000 feda 	bl	800b7f0 <_Bfree>
 800aa3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	1e2b      	subs	r3, r5, #0
 800aa46:	bfb7      	itett	lt
 800aa48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa4c:	2300      	movge	r3, #0
 800aa4e:	2201      	movlt	r2, #1
 800aa50:	9303      	strlt	r3, [sp, #12]
 800aa52:	bfa8      	it	ge
 800aa54:	6033      	strge	r3, [r6, #0]
 800aa56:	9f03      	ldr	r7, [sp, #12]
 800aa58:	4b97      	ldr	r3, [pc, #604]	@ (800acb8 <_dtoa_r+0x2d0>)
 800aa5a:	bfb8      	it	lt
 800aa5c:	6032      	strlt	r2, [r6, #0]
 800aa5e:	43bb      	bics	r3, r7
 800aa60:	d112      	bne.n	800aa88 <_dtoa_r+0xa0>
 800aa62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa6e:	4323      	orrs	r3, r4
 800aa70:	f000 854c 	beq.w	800b50c <_dtoa_r+0xb24>
 800aa74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa76:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800accc <_dtoa_r+0x2e4>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 854e 	beq.w	800b51c <_dtoa_r+0xb34>
 800aa80:	f10a 0303 	add.w	r3, sl, #3
 800aa84:	f000 bd48 	b.w	800b518 <_dtoa_r+0xb30>
 800aa88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	ec51 0b17 	vmov	r0, r1, d7
 800aa94:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa98:	f7f6 f82a 	bl	8000af0 <__aeabi_dcmpeq>
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	b158      	cbz	r0, 800aab8 <_dtoa_r+0xd0>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aaa8:	b113      	cbz	r3, 800aab0 <_dtoa_r+0xc8>
 800aaaa:	4b84      	ldr	r3, [pc, #528]	@ (800acbc <_dtoa_r+0x2d4>)
 800aaac:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800acd0 <_dtoa_r+0x2e8>
 800aab4:	f000 bd32 	b.w	800b51c <_dtoa_r+0xb34>
 800aab8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aabc:	aa16      	add	r2, sp, #88	@ 0x58
 800aabe:	a917      	add	r1, sp, #92	@ 0x5c
 800aac0:	4658      	mov	r0, fp
 800aac2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aac6:	f001 fa41 	bl	800bf4c <__d2b>
 800aaca:	4681      	mov	r9, r0
 800aacc:	2e00      	cmp	r6, #0
 800aace:	d075      	beq.n	800abbc <_dtoa_r+0x1d4>
 800aad0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aad2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aad6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aade:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aae6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aaea:	4619      	mov	r1, r3
 800aaec:	2200      	movs	r2, #0
 800aaee:	4b74      	ldr	r3, [pc, #464]	@ (800acc0 <_dtoa_r+0x2d8>)
 800aaf0:	f7f5 fbde 	bl	80002b0 <__aeabi_dsub>
 800aaf4:	a368      	add	r3, pc, #416	@ (adr r3, 800ac98 <_dtoa_r+0x2b0>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fd91 	bl	8000620 <__aeabi_dmul>
 800aafe:	a368      	add	r3, pc, #416	@ (adr r3, 800aca0 <_dtoa_r+0x2b8>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7f5 fbd6 	bl	80002b4 <__adddf3>
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7f5 fd1d 	bl	800054c <__aeabi_i2d>
 800ab12:	a365      	add	r3, pc, #404	@ (adr r3, 800aca8 <_dtoa_r+0x2c0>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fd82 	bl	8000620 <__aeabi_dmul>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fbc6 	bl	80002b4 <__adddf3>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	f7f6 f828 	bl	8000b80 <__aeabi_d2iz>
 800ab30:	2200      	movs	r2, #0
 800ab32:	4607      	mov	r7, r0
 800ab34:	2300      	movs	r3, #0
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 ffe3 	bl	8000b04 <__aeabi_dcmplt>
 800ab3e:	b140      	cbz	r0, 800ab52 <_dtoa_r+0x16a>
 800ab40:	4638      	mov	r0, r7
 800ab42:	f7f5 fd03 	bl	800054c <__aeabi_i2d>
 800ab46:	4622      	mov	r2, r4
 800ab48:	462b      	mov	r3, r5
 800ab4a:	f7f5 ffd1 	bl	8000af0 <__aeabi_dcmpeq>
 800ab4e:	b900      	cbnz	r0, 800ab52 <_dtoa_r+0x16a>
 800ab50:	3f01      	subs	r7, #1
 800ab52:	2f16      	cmp	r7, #22
 800ab54:	d851      	bhi.n	800abfa <_dtoa_r+0x212>
 800ab56:	4b5b      	ldr	r3, [pc, #364]	@ (800acc4 <_dtoa_r+0x2dc>)
 800ab58:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f7f5 ffce 	bl	8000b04 <__aeabi_dcmplt>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d048      	beq.n	800abfe <_dtoa_r+0x216>
 800ab6c:	3f01      	subs	r7, #1
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab72:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab74:	1b9b      	subs	r3, r3, r6
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	bf46      	itte	mi
 800ab7a:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab7e:	2300      	movmi	r3, #0
 800ab80:	f04f 0800 	movpl.w	r8, #0
 800ab84:	9208      	str	r2, [sp, #32]
 800ab86:	bf48      	it	mi
 800ab88:	9308      	strmi	r3, [sp, #32]
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	db39      	blt.n	800ac02 <_dtoa_r+0x21a>
 800ab8e:	9b08      	ldr	r3, [sp, #32]
 800ab90:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab92:	443b      	add	r3, r7
 800ab94:	9308      	str	r3, [sp, #32]
 800ab96:	2300      	movs	r3, #0
 800ab98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d864      	bhi.n	800ac6a <_dtoa_r+0x282>
 800aba0:	2b05      	cmp	r3, #5
 800aba2:	bfc5      	ittet	gt
 800aba4:	3b04      	subgt	r3, #4
 800aba6:	2400      	movgt	r4, #0
 800aba8:	2401      	movle	r4, #1
 800abaa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800abac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abae:	3b02      	subs	r3, #2
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d865      	bhi.n	800ac80 <_dtoa_r+0x298>
 800abb4:	e8df f003 	tbb	[pc, r3]
 800abb8:	5737392c 	.word	0x5737392c
 800abbc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800abc0:	441e      	add	r6, r3
 800abc2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abc6:	2b20      	cmp	r3, #32
 800abc8:	bfc9      	itett	gt
 800abca:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abce:	f1c3 0320 	rsble	r3, r3, #32
 800abd2:	409f      	lslgt	r7, r3
 800abd4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abd8:	bfd8      	it	le
 800abda:	fa04 f003 	lslle.w	r0, r4, r3
 800abde:	f106 36ff 	add.w	r6, r6, #4294967295
 800abe2:	bfc4      	itt	gt
 800abe4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800abe8:	ea47 0003 	orrgt.w	r0, r7, r3
 800abec:	f7f5 fc9e 	bl	800052c <__aeabi_ui2d>
 800abf0:	2201      	movs	r2, #1
 800abf2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abf6:	9214      	str	r2, [sp, #80]	@ 0x50
 800abf8:	e777      	b.n	800aaea <_dtoa_r+0x102>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e7b8      	b.n	800ab70 <_dtoa_r+0x188>
 800abfe:	9012      	str	r0, [sp, #72]	@ 0x48
 800ac00:	e7b7      	b.n	800ab72 <_dtoa_r+0x18a>
 800ac02:	427b      	negs	r3, r7
 800ac04:	eba8 0807 	sub.w	r8, r8, r7
 800ac08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac0e:	e7c4      	b.n	800ab9a <_dtoa_r+0x1b2>
 800ac10:	2300      	movs	r3, #0
 800ac12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dc35      	bgt.n	800ac86 <_dtoa_r+0x29e>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	9307      	str	r3, [sp, #28]
 800ac22:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac24:	e00b      	b.n	800ac3e <_dtoa_r+0x256>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e7f3      	b.n	800ac12 <_dtoa_r+0x22a>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac30:	18fb      	adds	r3, r7, r3
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	3301      	adds	r3, #1
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	9307      	str	r3, [sp, #28]
 800ac3a:	bfb8      	it	lt
 800ac3c:	2301      	movlt	r3, #1
 800ac3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac42:	2100      	movs	r1, #0
 800ac44:	2204      	movs	r2, #4
 800ac46:	f102 0514 	add.w	r5, r2, #20
 800ac4a:	429d      	cmp	r5, r3
 800ac4c:	d91f      	bls.n	800ac8e <_dtoa_r+0x2a6>
 800ac4e:	6041      	str	r1, [r0, #4]
 800ac50:	4658      	mov	r0, fp
 800ac52:	f000 fd8d 	bl	800b770 <_Balloc>
 800ac56:	4682      	mov	sl, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d13b      	bne.n	800acd4 <_dtoa_r+0x2ec>
 800ac5c:	4b1a      	ldr	r3, [pc, #104]	@ (800acc8 <_dtoa_r+0x2e0>)
 800ac5e:	4602      	mov	r2, r0
 800ac60:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac64:	e6d7      	b.n	800aa16 <_dtoa_r+0x2e>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e7e0      	b.n	800ac2c <_dtoa_r+0x244>
 800ac6a:	2401      	movs	r4, #1
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac72:	f04f 33ff 	mov.w	r3, #4294967295
 800ac76:	2200      	movs	r2, #0
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	9307      	str	r3, [sp, #28]
 800ac7c:	2312      	movs	r3, #18
 800ac7e:	e7d0      	b.n	800ac22 <_dtoa_r+0x23a>
 800ac80:	2301      	movs	r3, #1
 800ac82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac84:	e7f5      	b.n	800ac72 <_dtoa_r+0x28a>
 800ac86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	9307      	str	r3, [sp, #28]
 800ac8c:	e7d7      	b.n	800ac3e <_dtoa_r+0x256>
 800ac8e:	3101      	adds	r1, #1
 800ac90:	0052      	lsls	r2, r2, #1
 800ac92:	e7d8      	b.n	800ac46 <_dtoa_r+0x25e>
 800ac94:	f3af 8000 	nop.w
 800ac98:	636f4361 	.word	0x636f4361
 800ac9c:	3fd287a7 	.word	0x3fd287a7
 800aca0:	8b60c8b3 	.word	0x8b60c8b3
 800aca4:	3fc68a28 	.word	0x3fc68a28
 800aca8:	509f79fb 	.word	0x509f79fb
 800acac:	3fd34413 	.word	0x3fd34413
 800acb0:	0800e096 	.word	0x0800e096
 800acb4:	0800e0ad 	.word	0x0800e0ad
 800acb8:	7ff00000 	.word	0x7ff00000
 800acbc:	0800e061 	.word	0x0800e061
 800acc0:	3ff80000 	.word	0x3ff80000
 800acc4:	0800e1a8 	.word	0x0800e1a8
 800acc8:	0800e105 	.word	0x0800e105
 800accc:	0800e092 	.word	0x0800e092
 800acd0:	0800e060 	.word	0x0800e060
 800acd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acd8:	6018      	str	r0, [r3, #0]
 800acda:	9b07      	ldr	r3, [sp, #28]
 800acdc:	2b0e      	cmp	r3, #14
 800acde:	f200 80a4 	bhi.w	800ae2a <_dtoa_r+0x442>
 800ace2:	2c00      	cmp	r4, #0
 800ace4:	f000 80a1 	beq.w	800ae2a <_dtoa_r+0x442>
 800ace8:	2f00      	cmp	r7, #0
 800acea:	dd33      	ble.n	800ad54 <_dtoa_r+0x36c>
 800acec:	f007 020f 	and.w	r2, r7, #15
 800acf0:	4bac      	ldr	r3, [pc, #688]	@ (800afa4 <_dtoa_r+0x5bc>)
 800acf2:	05f8      	lsls	r0, r7, #23
 800acf4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800acf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acfc:	ed93 7b00 	vldr	d7, [r3]
 800ad00:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad04:	d516      	bpl.n	800ad34 <_dtoa_r+0x34c>
 800ad06:	4ba8      	ldr	r3, [pc, #672]	@ (800afa8 <_dtoa_r+0x5c0>)
 800ad08:	f004 040f 	and.w	r4, r4, #15
 800ad0c:	2603      	movs	r6, #3
 800ad0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad16:	f7f5 fdad 	bl	8000874 <__aeabi_ddiv>
 800ad1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad1e:	4da2      	ldr	r5, [pc, #648]	@ (800afa8 <_dtoa_r+0x5c0>)
 800ad20:	b954      	cbnz	r4, 800ad38 <_dtoa_r+0x350>
 800ad22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad2a:	f7f5 fda3 	bl	8000874 <__aeabi_ddiv>
 800ad2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad32:	e028      	b.n	800ad86 <_dtoa_r+0x39e>
 800ad34:	2602      	movs	r6, #2
 800ad36:	e7f2      	b.n	800ad1e <_dtoa_r+0x336>
 800ad38:	07e1      	lsls	r1, r4, #31
 800ad3a:	d508      	bpl.n	800ad4e <_dtoa_r+0x366>
 800ad3c:	3601      	adds	r6, #1
 800ad3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad46:	f7f5 fc6b 	bl	8000620 <__aeabi_dmul>
 800ad4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad4e:	1064      	asrs	r4, r4, #1
 800ad50:	3508      	adds	r5, #8
 800ad52:	e7e5      	b.n	800ad20 <_dtoa_r+0x338>
 800ad54:	f000 80d2 	beq.w	800aefc <_dtoa_r+0x514>
 800ad58:	427c      	negs	r4, r7
 800ad5a:	4b92      	ldr	r3, [pc, #584]	@ (800afa4 <_dtoa_r+0x5bc>)
 800ad5c:	4d92      	ldr	r5, [pc, #584]	@ (800afa8 <_dtoa_r+0x5c0>)
 800ad5e:	2602      	movs	r6, #2
 800ad60:	f004 020f 	and.w	r2, r4, #15
 800ad64:	1124      	asrs	r4, r4, #4
 800ad66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 fc55 	bl	8000620 <__aeabi_dmul>
 800ad76:	2300      	movs	r3, #0
 800ad78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	f040 80b2 	bne.w	800aee6 <_dtoa_r+0x4fe>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1d3      	bne.n	800ad2e <_dtoa_r+0x346>
 800ad86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 80b7 	beq.w	800af00 <_dtoa_r+0x518>
 800ad92:	2200      	movs	r2, #0
 800ad94:	4b85      	ldr	r3, [pc, #532]	@ (800afac <_dtoa_r+0x5c4>)
 800ad96:	4620      	mov	r0, r4
 800ad98:	4629      	mov	r1, r5
 800ad9a:	f7f5 feb3 	bl	8000b04 <__aeabi_dcmplt>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f000 80ae 	beq.w	800af00 <_dtoa_r+0x518>
 800ada4:	9b07      	ldr	r3, [sp, #28]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 80aa 	beq.w	800af00 <_dtoa_r+0x518>
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dd37      	ble.n	800ae22 <_dtoa_r+0x43a>
 800adb2:	1e7b      	subs	r3, r7, #1
 800adb4:	4620      	mov	r0, r4
 800adb6:	2200      	movs	r2, #0
 800adb8:	4629      	mov	r1, r5
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	3601      	adds	r6, #1
 800adbe:	4b7c      	ldr	r3, [pc, #496]	@ (800afb0 <_dtoa_r+0x5c8>)
 800adc0:	f7f5 fc2e 	bl	8000620 <__aeabi_dmul>
 800adc4:	9c00      	ldr	r4, [sp, #0]
 800adc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adca:	4630      	mov	r0, r6
 800adcc:	f7f5 fbbe 	bl	800054c <__aeabi_i2d>
 800add0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800add4:	f7f5 fc24 	bl	8000620 <__aeabi_dmul>
 800add8:	2200      	movs	r2, #0
 800adda:	4b76      	ldr	r3, [pc, #472]	@ (800afb4 <_dtoa_r+0x5cc>)
 800addc:	f7f5 fa6a 	bl	80002b4 <__adddf3>
 800ade0:	4605      	mov	r5, r0
 800ade2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ade6:	2c00      	cmp	r4, #0
 800ade8:	f040 808d 	bne.w	800af06 <_dtoa_r+0x51e>
 800adec:	2200      	movs	r2, #0
 800adee:	4b72      	ldr	r3, [pc, #456]	@ (800afb8 <_dtoa_r+0x5d0>)
 800adf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf4:	f7f5 fa5c 	bl	80002b0 <__aeabi_dsub>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae00:	462a      	mov	r2, r5
 800ae02:	4633      	mov	r3, r6
 800ae04:	f7f5 fe9c 	bl	8000b40 <__aeabi_dcmpgt>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f040 828b 	bne.w	800b324 <_dtoa_r+0x93c>
 800ae0e:	462a      	mov	r2, r5
 800ae10:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae18:	f7f5 fe74 	bl	8000b04 <__aeabi_dcmplt>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f040 8128 	bne.w	800b072 <_dtoa_r+0x68a>
 800ae22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ae2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f2c0 815a 	blt.w	800b0e6 <_dtoa_r+0x6fe>
 800ae32:	2f0e      	cmp	r7, #14
 800ae34:	f300 8157 	bgt.w	800b0e6 <_dtoa_r+0x6fe>
 800ae38:	4b5a      	ldr	r3, [pc, #360]	@ (800afa4 <_dtoa_r+0x5bc>)
 800ae3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae3e:	ed93 7b00 	vldr	d7, [r3]
 800ae42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	ed8d 7b00 	vstr	d7, [sp]
 800ae4a:	da03      	bge.n	800ae54 <_dtoa_r+0x46c>
 800ae4c:	9b07      	ldr	r3, [sp, #28]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f340 8101 	ble.w	800b056 <_dtoa_r+0x66e>
 800ae54:	4656      	mov	r6, sl
 800ae56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fd07 	bl	8000874 <__aeabi_ddiv>
 800ae66:	f7f5 fe8b 	bl	8000b80 <__aeabi_d2iz>
 800ae6a:	4680      	mov	r8, r0
 800ae6c:	f7f5 fb6e 	bl	800054c <__aeabi_i2d>
 800ae70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae74:	f7f5 fbd4 	bl	8000620 <__aeabi_dmul>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae80:	460b      	mov	r3, r1
 800ae82:	4629      	mov	r1, r5
 800ae84:	f7f5 fa14 	bl	80002b0 <__aeabi_dsub>
 800ae88:	9d07      	ldr	r5, [sp, #28]
 800ae8a:	f806 4b01 	strb.w	r4, [r6], #1
 800ae8e:	eba6 040a 	sub.w	r4, r6, sl
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	42a5      	cmp	r5, r4
 800ae98:	f040 8117 	bne.w	800b0ca <_dtoa_r+0x6e2>
 800ae9c:	f7f5 fa0a 	bl	80002b4 <__adddf3>
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea8:	f7f5 fe4a 	bl	8000b40 <__aeabi_dcmpgt>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	f040 80f9 	bne.w	800b0a4 <_dtoa_r+0x6bc>
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeba:	f7f5 fe19 	bl	8000af0 <__aeabi_dcmpeq>
 800aebe:	b118      	cbz	r0, 800aec8 <_dtoa_r+0x4e0>
 800aec0:	f018 0f01 	tst.w	r8, #1
 800aec4:	f040 80ee 	bne.w	800b0a4 <_dtoa_r+0x6bc>
 800aec8:	4649      	mov	r1, r9
 800aeca:	4658      	mov	r0, fp
 800aecc:	f000 fc90 	bl	800b7f0 <_Bfree>
 800aed0:	2300      	movs	r3, #0
 800aed2:	3701      	adds	r7, #1
 800aed4:	7033      	strb	r3, [r6, #0]
 800aed6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aed8:	601f      	str	r7, [r3, #0]
 800aeda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 831d 	beq.w	800b51c <_dtoa_r+0xb34>
 800aee2:	601e      	str	r6, [r3, #0]
 800aee4:	e31a      	b.n	800b51c <_dtoa_r+0xb34>
 800aee6:	07e2      	lsls	r2, r4, #31
 800aee8:	d505      	bpl.n	800aef6 <_dtoa_r+0x50e>
 800aeea:	3601      	adds	r6, #1
 800aeec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aef0:	f7f5 fb96 	bl	8000620 <__aeabi_dmul>
 800aef4:	2301      	movs	r3, #1
 800aef6:	1064      	asrs	r4, r4, #1
 800aef8:	3508      	adds	r5, #8
 800aefa:	e73f      	b.n	800ad7c <_dtoa_r+0x394>
 800aefc:	2602      	movs	r6, #2
 800aefe:	e742      	b.n	800ad86 <_dtoa_r+0x39e>
 800af00:	9c07      	ldr	r4, [sp, #28]
 800af02:	9704      	str	r7, [sp, #16]
 800af04:	e761      	b.n	800adca <_dtoa_r+0x3e2>
 800af06:	4b27      	ldr	r3, [pc, #156]	@ (800afa4 <_dtoa_r+0x5bc>)
 800af08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af0e:	4454      	add	r4, sl
 800af10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af14:	2900      	cmp	r1, #0
 800af16:	d053      	beq.n	800afc0 <_dtoa_r+0x5d8>
 800af18:	2000      	movs	r0, #0
 800af1a:	4928      	ldr	r1, [pc, #160]	@ (800afbc <_dtoa_r+0x5d4>)
 800af1c:	f7f5 fcaa 	bl	8000874 <__aeabi_ddiv>
 800af20:	4633      	mov	r3, r6
 800af22:	4656      	mov	r6, sl
 800af24:	462a      	mov	r2, r5
 800af26:	f7f5 f9c3 	bl	80002b0 <__aeabi_dsub>
 800af2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af32:	f7f5 fe25 	bl	8000b80 <__aeabi_d2iz>
 800af36:	4605      	mov	r5, r0
 800af38:	f7f5 fb08 	bl	800054c <__aeabi_i2d>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	3530      	adds	r5, #48	@ 0x30
 800af42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af46:	f7f5 f9b3 	bl	80002b0 <__aeabi_dsub>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	f806 5b01 	strb.w	r5, [r6], #1
 800af52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af5a:	f7f5 fdd3 	bl	8000b04 <__aeabi_dcmplt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d171      	bne.n	800b046 <_dtoa_r+0x65e>
 800af62:	2000      	movs	r0, #0
 800af64:	4911      	ldr	r1, [pc, #68]	@ (800afac <_dtoa_r+0x5c4>)
 800af66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af6a:	f7f5 f9a1 	bl	80002b0 <__aeabi_dsub>
 800af6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af72:	f7f5 fdc7 	bl	8000b04 <__aeabi_dcmplt>
 800af76:	2800      	cmp	r0, #0
 800af78:	f040 8095 	bne.w	800b0a6 <_dtoa_r+0x6be>
 800af7c:	42a6      	cmp	r6, r4
 800af7e:	f43f af50 	beq.w	800ae22 <_dtoa_r+0x43a>
 800af82:	2200      	movs	r2, #0
 800af84:	4b0a      	ldr	r3, [pc, #40]	@ (800afb0 <_dtoa_r+0x5c8>)
 800af86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af8a:	f7f5 fb49 	bl	8000620 <__aeabi_dmul>
 800af8e:	2200      	movs	r2, #0
 800af90:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <_dtoa_r+0x5c8>)
 800af92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9a:	f7f5 fb41 	bl	8000620 <__aeabi_dmul>
 800af9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa2:	e7c4      	b.n	800af2e <_dtoa_r+0x546>
 800afa4:	0800e1a8 	.word	0x0800e1a8
 800afa8:	0800e180 	.word	0x0800e180
 800afac:	3ff00000 	.word	0x3ff00000
 800afb0:	40240000 	.word	0x40240000
 800afb4:	401c0000 	.word	0x401c0000
 800afb8:	40140000 	.word	0x40140000
 800afbc:	3fe00000 	.word	0x3fe00000
 800afc0:	4631      	mov	r1, r6
 800afc2:	4656      	mov	r6, sl
 800afc4:	4628      	mov	r0, r5
 800afc6:	f7f5 fb2b 	bl	8000620 <__aeabi_dmul>
 800afca:	9415      	str	r4, [sp, #84]	@ 0x54
 800afcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd4:	f7f5 fdd4 	bl	8000b80 <__aeabi_d2iz>
 800afd8:	4605      	mov	r5, r0
 800afda:	f7f5 fab7 	bl	800054c <__aeabi_i2d>
 800afde:	4602      	mov	r2, r0
 800afe0:	3530      	adds	r5, #48	@ 0x30
 800afe2:	460b      	mov	r3, r1
 800afe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe8:	f7f5 f962 	bl	80002b0 <__aeabi_dsub>
 800afec:	f806 5b01 	strb.w	r5, [r6], #1
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	42a6      	cmp	r6, r4
 800aff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	d124      	bne.n	800b04a <_dtoa_r+0x662>
 800b000:	4bac      	ldr	r3, [pc, #688]	@ (800b2b4 <_dtoa_r+0x8cc>)
 800b002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b006:	f7f5 f955 	bl	80002b4 <__adddf3>
 800b00a:	4602      	mov	r2, r0
 800b00c:	460b      	mov	r3, r1
 800b00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b012:	f7f5 fd95 	bl	8000b40 <__aeabi_dcmpgt>
 800b016:	2800      	cmp	r0, #0
 800b018:	d145      	bne.n	800b0a6 <_dtoa_r+0x6be>
 800b01a:	2000      	movs	r0, #0
 800b01c:	49a5      	ldr	r1, [pc, #660]	@ (800b2b4 <_dtoa_r+0x8cc>)
 800b01e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b022:	f7f5 f945 	bl	80002b0 <__aeabi_dsub>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b02e:	f7f5 fd69 	bl	8000b04 <__aeabi_dcmplt>
 800b032:	2800      	cmp	r0, #0
 800b034:	f43f aef5 	beq.w	800ae22 <_dtoa_r+0x43a>
 800b038:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b03a:	1e73      	subs	r3, r6, #1
 800b03c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b03e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b042:	2b30      	cmp	r3, #48	@ 0x30
 800b044:	d0f8      	beq.n	800b038 <_dtoa_r+0x650>
 800b046:	9f04      	ldr	r7, [sp, #16]
 800b048:	e73e      	b.n	800aec8 <_dtoa_r+0x4e0>
 800b04a:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b8 <_dtoa_r+0x8d0>)
 800b04c:	f7f5 fae8 	bl	8000620 <__aeabi_dmul>
 800b050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b054:	e7bc      	b.n	800afd0 <_dtoa_r+0x5e8>
 800b056:	d10c      	bne.n	800b072 <_dtoa_r+0x68a>
 800b058:	2200      	movs	r2, #0
 800b05a:	4b98      	ldr	r3, [pc, #608]	@ (800b2bc <_dtoa_r+0x8d4>)
 800b05c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b060:	f7f5 fade 	bl	8000620 <__aeabi_dmul>
 800b064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b068:	f7f5 fd60 	bl	8000b2c <__aeabi_dcmpge>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f000 8157 	beq.w	800b320 <_dtoa_r+0x938>
 800b072:	2400      	movs	r4, #0
 800b074:	4625      	mov	r5, r4
 800b076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b078:	4656      	mov	r6, sl
 800b07a:	43db      	mvns	r3, r3
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	2700      	movs	r7, #0
 800b080:	4621      	mov	r1, r4
 800b082:	4658      	mov	r0, fp
 800b084:	f000 fbb4 	bl	800b7f0 <_Bfree>
 800b088:	2d00      	cmp	r5, #0
 800b08a:	d0dc      	beq.n	800b046 <_dtoa_r+0x65e>
 800b08c:	b12f      	cbz	r7, 800b09a <_dtoa_r+0x6b2>
 800b08e:	42af      	cmp	r7, r5
 800b090:	d003      	beq.n	800b09a <_dtoa_r+0x6b2>
 800b092:	4639      	mov	r1, r7
 800b094:	4658      	mov	r0, fp
 800b096:	f000 fbab 	bl	800b7f0 <_Bfree>
 800b09a:	4629      	mov	r1, r5
 800b09c:	4658      	mov	r0, fp
 800b09e:	f000 fba7 	bl	800b7f0 <_Bfree>
 800b0a2:	e7d0      	b.n	800b046 <_dtoa_r+0x65e>
 800b0a4:	9704      	str	r7, [sp, #16]
 800b0a6:	4633      	mov	r3, r6
 800b0a8:	461e      	mov	r6, r3
 800b0aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ae:	2a39      	cmp	r2, #57	@ 0x39
 800b0b0:	d107      	bne.n	800b0c2 <_dtoa_r+0x6da>
 800b0b2:	459a      	cmp	sl, r3
 800b0b4:	d1f8      	bne.n	800b0a8 <_dtoa_r+0x6c0>
 800b0b6:	9a04      	ldr	r2, [sp, #16]
 800b0b8:	3201      	adds	r2, #1
 800b0ba:	9204      	str	r2, [sp, #16]
 800b0bc:	2230      	movs	r2, #48	@ 0x30
 800b0be:	f88a 2000 	strb.w	r2, [sl]
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	3201      	adds	r2, #1
 800b0c6:	701a      	strb	r2, [r3, #0]
 800b0c8:	e7bd      	b.n	800b046 <_dtoa_r+0x65e>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	4b7a      	ldr	r3, [pc, #488]	@ (800b2b8 <_dtoa_r+0x8d0>)
 800b0ce:	f7f5 faa7 	bl	8000620 <__aeabi_dmul>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	460d      	mov	r5, r1
 800b0da:	f7f5 fd09 	bl	8000af0 <__aeabi_dcmpeq>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f43f aebb 	beq.w	800ae5a <_dtoa_r+0x472>
 800b0e4:	e6f0      	b.n	800aec8 <_dtoa_r+0x4e0>
 800b0e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	f000 80db 	beq.w	800b2a4 <_dtoa_r+0x8bc>
 800b0ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0f0:	2a01      	cmp	r2, #1
 800b0f2:	f300 80bf 	bgt.w	800b274 <_dtoa_r+0x88c>
 800b0f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0f8:	2a00      	cmp	r2, #0
 800b0fa:	f000 80b7 	beq.w	800b26c <_dtoa_r+0x884>
 800b0fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b102:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b104:	4646      	mov	r6, r8
 800b106:	9a08      	ldr	r2, [sp, #32]
 800b108:	2101      	movs	r1, #1
 800b10a:	4658      	mov	r0, fp
 800b10c:	4498      	add	r8, r3
 800b10e:	441a      	add	r2, r3
 800b110:	9208      	str	r2, [sp, #32]
 800b112:	f000 fc6d 	bl	800b9f0 <__i2b>
 800b116:	4605      	mov	r5, r0
 800b118:	b15e      	cbz	r6, 800b132 <_dtoa_r+0x74a>
 800b11a:	9b08      	ldr	r3, [sp, #32]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dd08      	ble.n	800b132 <_dtoa_r+0x74a>
 800b120:	42b3      	cmp	r3, r6
 800b122:	9a08      	ldr	r2, [sp, #32]
 800b124:	bfa8      	it	ge
 800b126:	4633      	movge	r3, r6
 800b128:	eba8 0803 	sub.w	r8, r8, r3
 800b12c:	1af6      	subs	r6, r6, r3
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b134:	b1f3      	cbz	r3, 800b174 <_dtoa_r+0x78c>
 800b136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 80b7 	beq.w	800b2ac <_dtoa_r+0x8c4>
 800b13e:	b18c      	cbz	r4, 800b164 <_dtoa_r+0x77c>
 800b140:	4629      	mov	r1, r5
 800b142:	4622      	mov	r2, r4
 800b144:	4658      	mov	r0, fp
 800b146:	f000 fd13 	bl	800bb70 <__pow5mult>
 800b14a:	464a      	mov	r2, r9
 800b14c:	4601      	mov	r1, r0
 800b14e:	4605      	mov	r5, r0
 800b150:	4658      	mov	r0, fp
 800b152:	f000 fc63 	bl	800ba1c <__multiply>
 800b156:	4649      	mov	r1, r9
 800b158:	9004      	str	r0, [sp, #16]
 800b15a:	4658      	mov	r0, fp
 800b15c:	f000 fb48 	bl	800b7f0 <_Bfree>
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	4699      	mov	r9, r3
 800b164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b166:	1b1a      	subs	r2, r3, r4
 800b168:	d004      	beq.n	800b174 <_dtoa_r+0x78c>
 800b16a:	4649      	mov	r1, r9
 800b16c:	4658      	mov	r0, fp
 800b16e:	f000 fcff 	bl	800bb70 <__pow5mult>
 800b172:	4681      	mov	r9, r0
 800b174:	2101      	movs	r1, #1
 800b176:	4658      	mov	r0, fp
 800b178:	f000 fc3a 	bl	800b9f0 <__i2b>
 800b17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b17e:	4604      	mov	r4, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 81cf 	beq.w	800b524 <_dtoa_r+0xb3c>
 800b186:	461a      	mov	r2, r3
 800b188:	4601      	mov	r1, r0
 800b18a:	4658      	mov	r0, fp
 800b18c:	f000 fcf0 	bl	800bb70 <__pow5mult>
 800b190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b192:	4604      	mov	r4, r0
 800b194:	2b01      	cmp	r3, #1
 800b196:	f300 8095 	bgt.w	800b2c4 <_dtoa_r+0x8dc>
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f040 8087 	bne.w	800b2b0 <_dtoa_r+0x8c8>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f040 8089 	bne.w	800b2c0 <_dtoa_r+0x8d8>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1b4:	0d1b      	lsrs	r3, r3, #20
 800b1b6:	051b      	lsls	r3, r3, #20
 800b1b8:	b12b      	cbz	r3, 800b1c6 <_dtoa_r+0x7de>
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	f108 0801 	add.w	r8, r8, #1
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	9308      	str	r3, [sp, #32]
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 81b0 	beq.w	800b530 <_dtoa_r+0xb48>
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1d6:	6918      	ldr	r0, [r3, #16]
 800b1d8:	f000 fbbe 	bl	800b958 <__hi0bits>
 800b1dc:	f1c0 0020 	rsb	r0, r0, #32
 800b1e0:	9b08      	ldr	r3, [sp, #32]
 800b1e2:	4418      	add	r0, r3
 800b1e4:	f010 001f 	ands.w	r0, r0, #31
 800b1e8:	d077      	beq.n	800b2da <_dtoa_r+0x8f2>
 800b1ea:	f1c0 0320 	rsb	r3, r0, #32
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	dd6b      	ble.n	800b2ca <_dtoa_r+0x8e2>
 800b1f2:	f1c0 001c 	rsb	r0, r0, #28
 800b1f6:	9b08      	ldr	r3, [sp, #32]
 800b1f8:	4480      	add	r8, r0
 800b1fa:	4403      	add	r3, r0
 800b1fc:	4406      	add	r6, r0
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	f1b8 0f00 	cmp.w	r8, #0
 800b204:	dd05      	ble.n	800b212 <_dtoa_r+0x82a>
 800b206:	4649      	mov	r1, r9
 800b208:	4642      	mov	r2, r8
 800b20a:	4658      	mov	r0, fp
 800b20c:	f000 fd0a 	bl	800bc24 <__lshift>
 800b210:	4681      	mov	r9, r0
 800b212:	9b08      	ldr	r3, [sp, #32]
 800b214:	2b00      	cmp	r3, #0
 800b216:	dd05      	ble.n	800b224 <_dtoa_r+0x83c>
 800b218:	4621      	mov	r1, r4
 800b21a:	461a      	mov	r2, r3
 800b21c:	4658      	mov	r0, fp
 800b21e:	f000 fd01 	bl	800bc24 <__lshift>
 800b222:	4604      	mov	r4, r0
 800b224:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b226:	2b00      	cmp	r3, #0
 800b228:	d059      	beq.n	800b2de <_dtoa_r+0x8f6>
 800b22a:	4621      	mov	r1, r4
 800b22c:	4648      	mov	r0, r9
 800b22e:	f000 fd65 	bl	800bcfc <__mcmp>
 800b232:	2800      	cmp	r0, #0
 800b234:	da53      	bge.n	800b2de <_dtoa_r+0x8f6>
 800b236:	1e7b      	subs	r3, r7, #1
 800b238:	4649      	mov	r1, r9
 800b23a:	220a      	movs	r2, #10
 800b23c:	4658      	mov	r0, fp
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	2300      	movs	r3, #0
 800b242:	f000 faf7 	bl	800b834 <__multadd>
 800b246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b248:	4681      	mov	r9, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8172 	beq.w	800b534 <_dtoa_r+0xb4c>
 800b250:	2300      	movs	r3, #0
 800b252:	4629      	mov	r1, r5
 800b254:	220a      	movs	r2, #10
 800b256:	4658      	mov	r0, fp
 800b258:	f000 faec 	bl	800b834 <__multadd>
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	4605      	mov	r5, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc67      	bgt.n	800b334 <_dtoa_r+0x94c>
 800b264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b266:	2b02      	cmp	r3, #2
 800b268:	dc41      	bgt.n	800b2ee <_dtoa_r+0x906>
 800b26a:	e063      	b.n	800b334 <_dtoa_r+0x94c>
 800b26c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b26e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b272:	e746      	b.n	800b102 <_dtoa_r+0x71a>
 800b274:	9b07      	ldr	r3, [sp, #28]
 800b276:	1e5c      	subs	r4, r3, #1
 800b278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	bfb7      	itett	lt
 800b27e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b280:	1b1c      	subge	r4, r3, r4
 800b282:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b284:	1ae3      	sublt	r3, r4, r3
 800b286:	bfbe      	ittt	lt
 800b288:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b28a:	2400      	movlt	r4, #0
 800b28c:	18d2      	addlt	r2, r2, r3
 800b28e:	9b07      	ldr	r3, [sp, #28]
 800b290:	bfb8      	it	lt
 800b292:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b294:	2b00      	cmp	r3, #0
 800b296:	bfb5      	itete	lt
 800b298:	eba8 0603 	sublt.w	r6, r8, r3
 800b29c:	4646      	movge	r6, r8
 800b29e:	2300      	movlt	r3, #0
 800b2a0:	9b07      	ldrge	r3, [sp, #28]
 800b2a2:	e730      	b.n	800b106 <_dtoa_r+0x71e>
 800b2a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2a6:	4646      	mov	r6, r8
 800b2a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b2aa:	e735      	b.n	800b118 <_dtoa_r+0x730>
 800b2ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2ae:	e75c      	b.n	800b16a <_dtoa_r+0x782>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e788      	b.n	800b1c6 <_dtoa_r+0x7de>
 800b2b4:	3fe00000 	.word	0x3fe00000
 800b2b8:	40240000 	.word	0x40240000
 800b2bc:	40140000 	.word	0x40140000
 800b2c0:	9b02      	ldr	r3, [sp, #8]
 800b2c2:	e780      	b.n	800b1c6 <_dtoa_r+0x7de>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c8:	e782      	b.n	800b1d0 <_dtoa_r+0x7e8>
 800b2ca:	d099      	beq.n	800b200 <_dtoa_r+0x818>
 800b2cc:	331c      	adds	r3, #28
 800b2ce:	9a08      	ldr	r2, [sp, #32]
 800b2d0:	441a      	add	r2, r3
 800b2d2:	4498      	add	r8, r3
 800b2d4:	441e      	add	r6, r3
 800b2d6:	9208      	str	r2, [sp, #32]
 800b2d8:	e792      	b.n	800b200 <_dtoa_r+0x818>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	e7f6      	b.n	800b2cc <_dtoa_r+0x8e4>
 800b2de:	9b07      	ldr	r3, [sp, #28]
 800b2e0:	9704      	str	r7, [sp, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dc20      	bgt.n	800b328 <_dtoa_r+0x940>
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	dd1e      	ble.n	800b32c <_dtoa_r+0x944>
 800b2ee:	9b00      	ldr	r3, [sp, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f47f aec0 	bne.w	800b076 <_dtoa_r+0x68e>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	2205      	movs	r2, #5
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f000 fa9a 	bl	800b834 <__multadd>
 800b300:	4601      	mov	r1, r0
 800b302:	4604      	mov	r4, r0
 800b304:	4648      	mov	r0, r9
 800b306:	f000 fcf9 	bl	800bcfc <__mcmp>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	f77f aeb3 	ble.w	800b076 <_dtoa_r+0x68e>
 800b310:	2331      	movs	r3, #49	@ 0x31
 800b312:	4656      	mov	r6, sl
 800b314:	f806 3b01 	strb.w	r3, [r6], #1
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	3301      	adds	r3, #1
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	e6ae      	b.n	800b07e <_dtoa_r+0x696>
 800b320:	9c07      	ldr	r4, [sp, #28]
 800b322:	9704      	str	r7, [sp, #16]
 800b324:	4625      	mov	r5, r4
 800b326:	e7f3      	b.n	800b310 <_dtoa_r+0x928>
 800b328:	9b07      	ldr	r3, [sp, #28]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 8104 	beq.w	800b53c <_dtoa_r+0xb54>
 800b334:	2e00      	cmp	r6, #0
 800b336:	dd05      	ble.n	800b344 <_dtoa_r+0x95c>
 800b338:	4629      	mov	r1, r5
 800b33a:	4632      	mov	r2, r6
 800b33c:	4658      	mov	r0, fp
 800b33e:	f000 fc71 	bl	800bc24 <__lshift>
 800b342:	4605      	mov	r5, r0
 800b344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b346:	2b00      	cmp	r3, #0
 800b348:	d05a      	beq.n	800b400 <_dtoa_r+0xa18>
 800b34a:	6869      	ldr	r1, [r5, #4]
 800b34c:	4658      	mov	r0, fp
 800b34e:	f000 fa0f 	bl	800b770 <_Balloc>
 800b352:	4606      	mov	r6, r0
 800b354:	b928      	cbnz	r0, 800b362 <_dtoa_r+0x97a>
 800b356:	4b84      	ldr	r3, [pc, #528]	@ (800b568 <_dtoa_r+0xb80>)
 800b358:	4602      	mov	r2, r0
 800b35a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b35e:	f7ff bb5a 	b.w	800aa16 <_dtoa_r+0x2e>
 800b362:	692a      	ldr	r2, [r5, #16]
 800b364:	f105 010c 	add.w	r1, r5, #12
 800b368:	300c      	adds	r0, #12
 800b36a:	3202      	adds	r2, #2
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	f002 f957 	bl	800d620 <memcpy>
 800b372:	2201      	movs	r2, #1
 800b374:	4631      	mov	r1, r6
 800b376:	4658      	mov	r0, fp
 800b378:	f000 fc54 	bl	800bc24 <__lshift>
 800b37c:	f10a 0301 	add.w	r3, sl, #1
 800b380:	462f      	mov	r7, r5
 800b382:	4605      	mov	r5, r0
 800b384:	9307      	str	r3, [sp, #28]
 800b386:	9b00      	ldr	r3, [sp, #0]
 800b388:	4453      	add	r3, sl
 800b38a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b38c:	9b02      	ldr	r3, [sp, #8]
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	930a      	str	r3, [sp, #40]	@ 0x28
 800b394:	9b07      	ldr	r3, [sp, #28]
 800b396:	4621      	mov	r1, r4
 800b398:	4648      	mov	r0, r9
 800b39a:	3b01      	subs	r3, #1
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	f7ff fa95 	bl	800a8cc <quorem>
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3aa:	4648      	mov	r0, r9
 800b3ac:	f000 fca6 	bl	800bcfc <__mcmp>
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	9008      	str	r0, [sp, #32]
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	4658      	mov	r0, fp
 800b3b8:	f000 fcbc 	bl	800bd34 <__mdiff>
 800b3bc:	68c2      	ldr	r2, [r0, #12]
 800b3be:	4606      	mov	r6, r0
 800b3c0:	bb02      	cbnz	r2, 800b404 <_dtoa_r+0xa1c>
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	4648      	mov	r0, r9
 800b3c6:	f000 fc99 	bl	800bcfc <__mcmp>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	4658      	mov	r0, fp
 800b3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3d2:	f000 fa0d 	bl	800b7f0 <_Bfree>
 800b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3da:	9e07      	ldr	r6, [sp, #28]
 800b3dc:	ea43 0102 	orr.w	r1, r3, r2
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3e2:	4319      	orrs	r1, r3
 800b3e4:	d110      	bne.n	800b408 <_dtoa_r+0xa20>
 800b3e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3ea:	d029      	beq.n	800b440 <_dtoa_r+0xa58>
 800b3ec:	9b08      	ldr	r3, [sp, #32]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	dd02      	ble.n	800b3f8 <_dtoa_r+0xa10>
 800b3f2:	9b02      	ldr	r3, [sp, #8]
 800b3f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3f8:	9b00      	ldr	r3, [sp, #0]
 800b3fa:	f883 8000 	strb.w	r8, [r3]
 800b3fe:	e63f      	b.n	800b080 <_dtoa_r+0x698>
 800b400:	4628      	mov	r0, r5
 800b402:	e7bb      	b.n	800b37c <_dtoa_r+0x994>
 800b404:	2201      	movs	r2, #1
 800b406:	e7e1      	b.n	800b3cc <_dtoa_r+0x9e4>
 800b408:	9b08      	ldr	r3, [sp, #32]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	db04      	blt.n	800b418 <_dtoa_r+0xa30>
 800b40e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b410:	430b      	orrs	r3, r1
 800b412:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b414:	430b      	orrs	r3, r1
 800b416:	d120      	bne.n	800b45a <_dtoa_r+0xa72>
 800b418:	2a00      	cmp	r2, #0
 800b41a:	dded      	ble.n	800b3f8 <_dtoa_r+0xa10>
 800b41c:	4649      	mov	r1, r9
 800b41e:	2201      	movs	r2, #1
 800b420:	4658      	mov	r0, fp
 800b422:	f000 fbff 	bl	800bc24 <__lshift>
 800b426:	4621      	mov	r1, r4
 800b428:	4681      	mov	r9, r0
 800b42a:	f000 fc67 	bl	800bcfc <__mcmp>
 800b42e:	2800      	cmp	r0, #0
 800b430:	dc03      	bgt.n	800b43a <_dtoa_r+0xa52>
 800b432:	d1e1      	bne.n	800b3f8 <_dtoa_r+0xa10>
 800b434:	f018 0f01 	tst.w	r8, #1
 800b438:	d0de      	beq.n	800b3f8 <_dtoa_r+0xa10>
 800b43a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b43e:	d1d8      	bne.n	800b3f2 <_dtoa_r+0xa0a>
 800b440:	2339      	movs	r3, #57	@ 0x39
 800b442:	9a00      	ldr	r2, [sp, #0]
 800b444:	7013      	strb	r3, [r2, #0]
 800b446:	4633      	mov	r3, r6
 800b448:	461e      	mov	r6, r3
 800b44a:	3b01      	subs	r3, #1
 800b44c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b450:	2a39      	cmp	r2, #57	@ 0x39
 800b452:	d052      	beq.n	800b4fa <_dtoa_r+0xb12>
 800b454:	3201      	adds	r2, #1
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	e612      	b.n	800b080 <_dtoa_r+0x698>
 800b45a:	2a00      	cmp	r2, #0
 800b45c:	dd07      	ble.n	800b46e <_dtoa_r+0xa86>
 800b45e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b462:	d0ed      	beq.n	800b440 <_dtoa_r+0xa58>
 800b464:	f108 0301 	add.w	r3, r8, #1
 800b468:	9a00      	ldr	r2, [sp, #0]
 800b46a:	7013      	strb	r3, [r2, #0]
 800b46c:	e608      	b.n	800b080 <_dtoa_r+0x698>
 800b46e:	9b07      	ldr	r3, [sp, #28]
 800b470:	9a07      	ldr	r2, [sp, #28]
 800b472:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b478:	4293      	cmp	r3, r2
 800b47a:	d028      	beq.n	800b4ce <_dtoa_r+0xae6>
 800b47c:	4649      	mov	r1, r9
 800b47e:	2300      	movs	r3, #0
 800b480:	220a      	movs	r2, #10
 800b482:	4658      	mov	r0, fp
 800b484:	f000 f9d6 	bl	800b834 <__multadd>
 800b488:	42af      	cmp	r7, r5
 800b48a:	4681      	mov	r9, r0
 800b48c:	f04f 0300 	mov.w	r3, #0
 800b490:	f04f 020a 	mov.w	r2, #10
 800b494:	4639      	mov	r1, r7
 800b496:	4658      	mov	r0, fp
 800b498:	d107      	bne.n	800b4aa <_dtoa_r+0xac2>
 800b49a:	f000 f9cb 	bl	800b834 <__multadd>
 800b49e:	4607      	mov	r7, r0
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	9b07      	ldr	r3, [sp, #28]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	e774      	b.n	800b394 <_dtoa_r+0x9ac>
 800b4aa:	f000 f9c3 	bl	800b834 <__multadd>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	220a      	movs	r2, #10
 800b4b6:	4658      	mov	r0, fp
 800b4b8:	f000 f9bc 	bl	800b834 <__multadd>
 800b4bc:	4605      	mov	r5, r0
 800b4be:	e7f0      	b.n	800b4a2 <_dtoa_r+0xaba>
 800b4c0:	9b00      	ldr	r3, [sp, #0]
 800b4c2:	2700      	movs	r7, #0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	bfcc      	ite	gt
 800b4c8:	461e      	movgt	r6, r3
 800b4ca:	2601      	movle	r6, #1
 800b4cc:	4456      	add	r6, sl
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	4658      	mov	r0, fp
 800b4d4:	f000 fba6 	bl	800bc24 <__lshift>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	4681      	mov	r9, r0
 800b4dc:	f000 fc0e 	bl	800bcfc <__mcmp>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	dcb0      	bgt.n	800b446 <_dtoa_r+0xa5e>
 800b4e4:	d102      	bne.n	800b4ec <_dtoa_r+0xb04>
 800b4e6:	f018 0f01 	tst.w	r8, #1
 800b4ea:	d1ac      	bne.n	800b446 <_dtoa_r+0xa5e>
 800b4ec:	4633      	mov	r3, r6
 800b4ee:	461e      	mov	r6, r3
 800b4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4f4:	2a30      	cmp	r2, #48	@ 0x30
 800b4f6:	d0fa      	beq.n	800b4ee <_dtoa_r+0xb06>
 800b4f8:	e5c2      	b.n	800b080 <_dtoa_r+0x698>
 800b4fa:	459a      	cmp	sl, r3
 800b4fc:	d1a4      	bne.n	800b448 <_dtoa_r+0xa60>
 800b4fe:	9b04      	ldr	r3, [sp, #16]
 800b500:	3301      	adds	r3, #1
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	2331      	movs	r3, #49	@ 0x31
 800b506:	f88a 3000 	strb.w	r3, [sl]
 800b50a:	e5b9      	b.n	800b080 <_dtoa_r+0x698>
 800b50c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b50e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b56c <_dtoa_r+0xb84>
 800b512:	b11b      	cbz	r3, 800b51c <_dtoa_r+0xb34>
 800b514:	f10a 0308 	add.w	r3, sl, #8
 800b518:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	4650      	mov	r0, sl
 800b51e:	b019      	add	sp, #100	@ 0x64
 800b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b526:	2b01      	cmp	r3, #1
 800b528:	f77f ae37 	ble.w	800b19a <_dtoa_r+0x7b2>
 800b52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b52e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b530:	2001      	movs	r0, #1
 800b532:	e655      	b.n	800b1e0 <_dtoa_r+0x7f8>
 800b534:	9b00      	ldr	r3, [sp, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	f77f aed6 	ble.w	800b2e8 <_dtoa_r+0x900>
 800b53c:	4656      	mov	r6, sl
 800b53e:	4621      	mov	r1, r4
 800b540:	4648      	mov	r0, r9
 800b542:	f7ff f9c3 	bl	800a8cc <quorem>
 800b546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	f806 8b01 	strb.w	r8, [r6], #1
 800b550:	eba6 020a 	sub.w	r2, r6, sl
 800b554:	4293      	cmp	r3, r2
 800b556:	ddb3      	ble.n	800b4c0 <_dtoa_r+0xad8>
 800b558:	4649      	mov	r1, r9
 800b55a:	2300      	movs	r3, #0
 800b55c:	220a      	movs	r2, #10
 800b55e:	4658      	mov	r0, fp
 800b560:	f000 f968 	bl	800b834 <__multadd>
 800b564:	4681      	mov	r9, r0
 800b566:	e7ea      	b.n	800b53e <_dtoa_r+0xb56>
 800b568:	0800e105 	.word	0x0800e105
 800b56c:	0800e089 	.word	0x0800e089

0800b570 <_free_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4605      	mov	r5, r0
 800b574:	2900      	cmp	r1, #0
 800b576:	d041      	beq.n	800b5fc <_free_r+0x8c>
 800b578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b57c:	1f0c      	subs	r4, r1, #4
 800b57e:	2b00      	cmp	r3, #0
 800b580:	bfb8      	it	lt
 800b582:	18e4      	addlt	r4, r4, r3
 800b584:	f000 f8e8 	bl	800b758 <__malloc_lock>
 800b588:	4a1d      	ldr	r2, [pc, #116]	@ (800b600 <_free_r+0x90>)
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	b933      	cbnz	r3, 800b59c <_free_r+0x2c>
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	6014      	str	r4, [r2, #0]
 800b592:	4628      	mov	r0, r5
 800b594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b598:	f000 b8e4 	b.w	800b764 <__malloc_unlock>
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	d908      	bls.n	800b5b2 <_free_r+0x42>
 800b5a0:	6820      	ldr	r0, [r4, #0]
 800b5a2:	1821      	adds	r1, r4, r0
 800b5a4:	428b      	cmp	r3, r1
 800b5a6:	bf01      	itttt	eq
 800b5a8:	6819      	ldreq	r1, [r3, #0]
 800b5aa:	685b      	ldreq	r3, [r3, #4]
 800b5ac:	1809      	addeq	r1, r1, r0
 800b5ae:	6021      	streq	r1, [r4, #0]
 800b5b0:	e7ed      	b.n	800b58e <_free_r+0x1e>
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	b10b      	cbz	r3, 800b5bc <_free_r+0x4c>
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	d9fa      	bls.n	800b5b2 <_free_r+0x42>
 800b5bc:	6811      	ldr	r1, [r2, #0]
 800b5be:	1850      	adds	r0, r2, r1
 800b5c0:	42a0      	cmp	r0, r4
 800b5c2:	d10b      	bne.n	800b5dc <_free_r+0x6c>
 800b5c4:	6820      	ldr	r0, [r4, #0]
 800b5c6:	4401      	add	r1, r0
 800b5c8:	1850      	adds	r0, r2, r1
 800b5ca:	6011      	str	r1, [r2, #0]
 800b5cc:	4283      	cmp	r3, r0
 800b5ce:	d1e0      	bne.n	800b592 <_free_r+0x22>
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	4408      	add	r0, r1
 800b5d6:	6053      	str	r3, [r2, #4]
 800b5d8:	6010      	str	r0, [r2, #0]
 800b5da:	e7da      	b.n	800b592 <_free_r+0x22>
 800b5dc:	d902      	bls.n	800b5e4 <_free_r+0x74>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	e7d6      	b.n	800b592 <_free_r+0x22>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	1821      	adds	r1, r4, r0
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf02      	ittt	eq
 800b5ec:	6819      	ldreq	r1, [r3, #0]
 800b5ee:	685b      	ldreq	r3, [r3, #4]
 800b5f0:	1809      	addeq	r1, r1, r0
 800b5f2:	6063      	str	r3, [r4, #4]
 800b5f4:	bf08      	it	eq
 800b5f6:	6021      	streq	r1, [r4, #0]
 800b5f8:	6054      	str	r4, [r2, #4]
 800b5fa:	e7ca      	b.n	800b592 <_free_r+0x22>
 800b5fc:	bd38      	pop	{r3, r4, r5, pc}
 800b5fe:	bf00      	nop
 800b600:	20000540 	.word	0x20000540

0800b604 <malloc>:
 800b604:	4b02      	ldr	r3, [pc, #8]	@ (800b610 <malloc+0xc>)
 800b606:	4601      	mov	r1, r0
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	f000 b825 	b.w	800b658 <_malloc_r>
 800b60e:	bf00      	nop
 800b610:	20000018 	.word	0x20000018

0800b614 <sbrk_aligned>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4e0f      	ldr	r6, [pc, #60]	@ (800b654 <sbrk_aligned+0x40>)
 800b618:	460c      	mov	r4, r1
 800b61a:	4605      	mov	r5, r0
 800b61c:	6831      	ldr	r1, [r6, #0]
 800b61e:	b911      	cbnz	r1, 800b626 <sbrk_aligned+0x12>
 800b620:	f001 ffee 	bl	800d600 <_sbrk_r>
 800b624:	6030      	str	r0, [r6, #0]
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	f001 ffe9 	bl	800d600 <_sbrk_r>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	d103      	bne.n	800b63a <sbrk_aligned+0x26>
 800b632:	f04f 34ff 	mov.w	r4, #4294967295
 800b636:	4620      	mov	r0, r4
 800b638:	bd70      	pop	{r4, r5, r6, pc}
 800b63a:	1cc4      	adds	r4, r0, #3
 800b63c:	f024 0403 	bic.w	r4, r4, #3
 800b640:	42a0      	cmp	r0, r4
 800b642:	d0f8      	beq.n	800b636 <sbrk_aligned+0x22>
 800b644:	1a21      	subs	r1, r4, r0
 800b646:	4628      	mov	r0, r5
 800b648:	f001 ffda 	bl	800d600 <_sbrk_r>
 800b64c:	3001      	adds	r0, #1
 800b64e:	d1f2      	bne.n	800b636 <sbrk_aligned+0x22>
 800b650:	e7ef      	b.n	800b632 <sbrk_aligned+0x1e>
 800b652:	bf00      	nop
 800b654:	2000053c 	.word	0x2000053c

0800b658 <_malloc_r>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	1ccd      	adds	r5, r1, #3
 800b65e:	4606      	mov	r6, r0
 800b660:	f025 0503 	bic.w	r5, r5, #3
 800b664:	3508      	adds	r5, #8
 800b666:	2d0c      	cmp	r5, #12
 800b668:	bf38      	it	cc
 800b66a:	250c      	movcc	r5, #12
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	db01      	blt.n	800b674 <_malloc_r+0x1c>
 800b670:	42a9      	cmp	r1, r5
 800b672:	d904      	bls.n	800b67e <_malloc_r+0x26>
 800b674:	230c      	movs	r3, #12
 800b676:	6033      	str	r3, [r6, #0]
 800b678:	2000      	movs	r0, #0
 800b67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b754 <_malloc_r+0xfc>
 800b682:	f000 f869 	bl	800b758 <__malloc_lock>
 800b686:	f8d8 3000 	ldr.w	r3, [r8]
 800b68a:	461c      	mov	r4, r3
 800b68c:	bb44      	cbnz	r4, 800b6e0 <_malloc_r+0x88>
 800b68e:	4629      	mov	r1, r5
 800b690:	4630      	mov	r0, r6
 800b692:	f7ff ffbf 	bl	800b614 <sbrk_aligned>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	4604      	mov	r4, r0
 800b69a:	d158      	bne.n	800b74e <_malloc_r+0xf6>
 800b69c:	f8d8 4000 	ldr.w	r4, [r8]
 800b6a0:	4627      	mov	r7, r4
 800b6a2:	2f00      	cmp	r7, #0
 800b6a4:	d143      	bne.n	800b72e <_malloc_r+0xd6>
 800b6a6:	2c00      	cmp	r4, #0
 800b6a8:	d04b      	beq.n	800b742 <_malloc_r+0xea>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	4639      	mov	r1, r7
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	eb04 0903 	add.w	r9, r4, r3
 800b6b4:	f001 ffa4 	bl	800d600 <_sbrk_r>
 800b6b8:	4581      	cmp	r9, r0
 800b6ba:	d142      	bne.n	800b742 <_malloc_r+0xea>
 800b6bc:	6821      	ldr	r1, [r4, #0]
 800b6be:	4630      	mov	r0, r6
 800b6c0:	1a6d      	subs	r5, r5, r1
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	f7ff ffa6 	bl	800b614 <sbrk_aligned>
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d03a      	beq.n	800b742 <_malloc_r+0xea>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	442b      	add	r3, r5
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	bb62      	cbnz	r2, 800b734 <_malloc_r+0xdc>
 800b6da:	f8c8 7000 	str.w	r7, [r8]
 800b6de:	e00f      	b.n	800b700 <_malloc_r+0xa8>
 800b6e0:	6822      	ldr	r2, [r4, #0]
 800b6e2:	1b52      	subs	r2, r2, r5
 800b6e4:	d420      	bmi.n	800b728 <_malloc_r+0xd0>
 800b6e6:	2a0b      	cmp	r2, #11
 800b6e8:	d917      	bls.n	800b71a <_malloc_r+0xc2>
 800b6ea:	1961      	adds	r1, r4, r5
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	6025      	str	r5, [r4, #0]
 800b6f0:	bf18      	it	ne
 800b6f2:	6059      	strne	r1, [r3, #4]
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	bf08      	it	eq
 800b6f8:	f8c8 1000 	streq.w	r1, [r8]
 800b6fc:	5162      	str	r2, [r4, r5]
 800b6fe:	604b      	str	r3, [r1, #4]
 800b700:	4630      	mov	r0, r6
 800b702:	f000 f82f 	bl	800b764 <__malloc_unlock>
 800b706:	f104 000b 	add.w	r0, r4, #11
 800b70a:	1d23      	adds	r3, r4, #4
 800b70c:	f020 0007 	bic.w	r0, r0, #7
 800b710:	1ac2      	subs	r2, r0, r3
 800b712:	bf1c      	itt	ne
 800b714:	1a1b      	subne	r3, r3, r0
 800b716:	50a3      	strne	r3, [r4, r2]
 800b718:	e7af      	b.n	800b67a <_malloc_r+0x22>
 800b71a:	6862      	ldr	r2, [r4, #4]
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	bf0c      	ite	eq
 800b720:	f8c8 2000 	streq.w	r2, [r8]
 800b724:	605a      	strne	r2, [r3, #4]
 800b726:	e7eb      	b.n	800b700 <_malloc_r+0xa8>
 800b728:	4623      	mov	r3, r4
 800b72a:	6864      	ldr	r4, [r4, #4]
 800b72c:	e7ae      	b.n	800b68c <_malloc_r+0x34>
 800b72e:	463c      	mov	r4, r7
 800b730:	687f      	ldr	r7, [r7, #4]
 800b732:	e7b6      	b.n	800b6a2 <_malloc_r+0x4a>
 800b734:	461a      	mov	r2, r3
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	d1fb      	bne.n	800b734 <_malloc_r+0xdc>
 800b73c:	2300      	movs	r3, #0
 800b73e:	6053      	str	r3, [r2, #4]
 800b740:	e7de      	b.n	800b700 <_malloc_r+0xa8>
 800b742:	230c      	movs	r3, #12
 800b744:	4630      	mov	r0, r6
 800b746:	6033      	str	r3, [r6, #0]
 800b748:	f000 f80c 	bl	800b764 <__malloc_unlock>
 800b74c:	e794      	b.n	800b678 <_malloc_r+0x20>
 800b74e:	6005      	str	r5, [r0, #0]
 800b750:	e7d6      	b.n	800b700 <_malloc_r+0xa8>
 800b752:	bf00      	nop
 800b754:	20000540 	.word	0x20000540

0800b758 <__malloc_lock>:
 800b758:	4801      	ldr	r0, [pc, #4]	@ (800b760 <__malloc_lock+0x8>)
 800b75a:	f7ff b8a0 	b.w	800a89e <__retarget_lock_acquire_recursive>
 800b75e:	bf00      	nop
 800b760:	20000538 	.word	0x20000538

0800b764 <__malloc_unlock>:
 800b764:	4801      	ldr	r0, [pc, #4]	@ (800b76c <__malloc_unlock+0x8>)
 800b766:	f7ff b89b 	b.w	800a8a0 <__retarget_lock_release_recursive>
 800b76a:	bf00      	nop
 800b76c:	20000538 	.word	0x20000538

0800b770 <_Balloc>:
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	69c6      	ldr	r6, [r0, #28]
 800b774:	4604      	mov	r4, r0
 800b776:	460d      	mov	r5, r1
 800b778:	b976      	cbnz	r6, 800b798 <_Balloc+0x28>
 800b77a:	2010      	movs	r0, #16
 800b77c:	f7ff ff42 	bl	800b604 <malloc>
 800b780:	4602      	mov	r2, r0
 800b782:	61e0      	str	r0, [r4, #28]
 800b784:	b920      	cbnz	r0, 800b790 <_Balloc+0x20>
 800b786:	4b18      	ldr	r3, [pc, #96]	@ (800b7e8 <_Balloc+0x78>)
 800b788:	216b      	movs	r1, #107	@ 0x6b
 800b78a:	4818      	ldr	r0, [pc, #96]	@ (800b7ec <_Balloc+0x7c>)
 800b78c:	f001 ff60 	bl	800d650 <__assert_func>
 800b790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b794:	6006      	str	r6, [r0, #0]
 800b796:	60c6      	str	r6, [r0, #12]
 800b798:	69e6      	ldr	r6, [r4, #28]
 800b79a:	68f3      	ldr	r3, [r6, #12]
 800b79c:	b183      	cbz	r3, 800b7c0 <_Balloc+0x50>
 800b79e:	69e3      	ldr	r3, [r4, #28]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7a6:	b9b8      	cbnz	r0, 800b7d8 <_Balloc+0x68>
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	fa01 f605 	lsl.w	r6, r1, r5
 800b7b0:	1d72      	adds	r2, r6, #5
 800b7b2:	0092      	lsls	r2, r2, #2
 800b7b4:	f001 ff6a 	bl	800d68c <_calloc_r>
 800b7b8:	b160      	cbz	r0, 800b7d4 <_Balloc+0x64>
 800b7ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7be:	e00e      	b.n	800b7de <_Balloc+0x6e>
 800b7c0:	2221      	movs	r2, #33	@ 0x21
 800b7c2:	2104      	movs	r1, #4
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f001 ff61 	bl	800d68c <_calloc_r>
 800b7ca:	69e3      	ldr	r3, [r4, #28]
 800b7cc:	60f0      	str	r0, [r6, #12]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e4      	bne.n	800b79e <_Balloc+0x2e>
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}
 800b7d8:	6802      	ldr	r2, [r0, #0]
 800b7da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7e4:	e7f7      	b.n	800b7d6 <_Balloc+0x66>
 800b7e6:	bf00      	nop
 800b7e8:	0800e096 	.word	0x0800e096
 800b7ec:	0800e116 	.word	0x0800e116

0800b7f0 <_Bfree>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	69c6      	ldr	r6, [r0, #28]
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	b976      	cbnz	r6, 800b818 <_Bfree+0x28>
 800b7fa:	2010      	movs	r0, #16
 800b7fc:	f7ff ff02 	bl	800b604 <malloc>
 800b800:	4602      	mov	r2, r0
 800b802:	61e8      	str	r0, [r5, #28]
 800b804:	b920      	cbnz	r0, 800b810 <_Bfree+0x20>
 800b806:	4b09      	ldr	r3, [pc, #36]	@ (800b82c <_Bfree+0x3c>)
 800b808:	218f      	movs	r1, #143	@ 0x8f
 800b80a:	4809      	ldr	r0, [pc, #36]	@ (800b830 <_Bfree+0x40>)
 800b80c:	f001 ff20 	bl	800d650 <__assert_func>
 800b810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b814:	6006      	str	r6, [r0, #0]
 800b816:	60c6      	str	r6, [r0, #12]
 800b818:	b13c      	cbz	r4, 800b82a <_Bfree+0x3a>
 800b81a:	69eb      	ldr	r3, [r5, #28]
 800b81c:	6862      	ldr	r2, [r4, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b824:	6021      	str	r1, [r4, #0]
 800b826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b82a:	bd70      	pop	{r4, r5, r6, pc}
 800b82c:	0800e096 	.word	0x0800e096
 800b830:	0800e116 	.word	0x0800e116

0800b834 <__multadd>:
 800b834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b838:	f101 0c14 	add.w	ip, r1, #20
 800b83c:	4607      	mov	r7, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	461e      	mov	r6, r3
 800b842:	690d      	ldr	r5, [r1, #16]
 800b844:	2000      	movs	r0, #0
 800b846:	f8dc 3000 	ldr.w	r3, [ip]
 800b84a:	3001      	adds	r0, #1
 800b84c:	b299      	uxth	r1, r3
 800b84e:	4285      	cmp	r5, r0
 800b850:	fb02 6101 	mla	r1, r2, r1, r6
 800b854:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b858:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b85c:	b289      	uxth	r1, r1
 800b85e:	fb02 3306 	mla	r3, r2, r6, r3
 800b862:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b86a:	f84c 1b04 	str.w	r1, [ip], #4
 800b86e:	dcea      	bgt.n	800b846 <__multadd+0x12>
 800b870:	b30e      	cbz	r6, 800b8b6 <__multadd+0x82>
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	42ab      	cmp	r3, r5
 800b876:	dc19      	bgt.n	800b8ac <__multadd+0x78>
 800b878:	6861      	ldr	r1, [r4, #4]
 800b87a:	4638      	mov	r0, r7
 800b87c:	3101      	adds	r1, #1
 800b87e:	f7ff ff77 	bl	800b770 <_Balloc>
 800b882:	4680      	mov	r8, r0
 800b884:	b928      	cbnz	r0, 800b892 <__multadd+0x5e>
 800b886:	4602      	mov	r2, r0
 800b888:	4b0c      	ldr	r3, [pc, #48]	@ (800b8bc <__multadd+0x88>)
 800b88a:	21ba      	movs	r1, #186	@ 0xba
 800b88c:	480c      	ldr	r0, [pc, #48]	@ (800b8c0 <__multadd+0x8c>)
 800b88e:	f001 fedf 	bl	800d650 <__assert_func>
 800b892:	6922      	ldr	r2, [r4, #16]
 800b894:	f104 010c 	add.w	r1, r4, #12
 800b898:	300c      	adds	r0, #12
 800b89a:	3202      	adds	r2, #2
 800b89c:	0092      	lsls	r2, r2, #2
 800b89e:	f001 febf 	bl	800d620 <memcpy>
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4644      	mov	r4, r8
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	f7ff ffa2 	bl	800b7f0 <_Bfree>
 800b8ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	615e      	str	r6, [r3, #20]
 800b8b4:	6125      	str	r5, [r4, #16]
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8bc:	0800e105 	.word	0x0800e105
 800b8c0:	0800e116 	.word	0x0800e116

0800b8c4 <__s2b>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	4615      	mov	r5, r2
 800b8ca:	461f      	mov	r7, r3
 800b8cc:	2209      	movs	r2, #9
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8da:	2201      	movs	r2, #1
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	db09      	blt.n	800b8f4 <__s2b+0x30>
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff ff45 	bl	800b770 <_Balloc>
 800b8e6:	b940      	cbnz	r0, 800b8fa <__s2b+0x36>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	4b19      	ldr	r3, [pc, #100]	@ (800b950 <__s2b+0x8c>)
 800b8ec:	21d3      	movs	r1, #211	@ 0xd3
 800b8ee:	4819      	ldr	r0, [pc, #100]	@ (800b954 <__s2b+0x90>)
 800b8f0:	f001 feae 	bl	800d650 <__assert_func>
 800b8f4:	0052      	lsls	r2, r2, #1
 800b8f6:	3101      	adds	r1, #1
 800b8f8:	e7f0      	b.n	800b8dc <__s2b+0x18>
 800b8fa:	9b08      	ldr	r3, [sp, #32]
 800b8fc:	2d09      	cmp	r5, #9
 800b8fe:	6143      	str	r3, [r0, #20]
 800b900:	f04f 0301 	mov.w	r3, #1
 800b904:	6103      	str	r3, [r0, #16]
 800b906:	dd16      	ble.n	800b936 <__s2b+0x72>
 800b908:	f104 0909 	add.w	r9, r4, #9
 800b90c:	442c      	add	r4, r5
 800b90e:	46c8      	mov	r8, r9
 800b910:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b914:	4601      	mov	r1, r0
 800b916:	220a      	movs	r2, #10
 800b918:	4630      	mov	r0, r6
 800b91a:	3b30      	subs	r3, #48	@ 0x30
 800b91c:	f7ff ff8a 	bl	800b834 <__multadd>
 800b920:	45a0      	cmp	r8, r4
 800b922:	d1f5      	bne.n	800b910 <__s2b+0x4c>
 800b924:	f1a5 0408 	sub.w	r4, r5, #8
 800b928:	444c      	add	r4, r9
 800b92a:	1b2d      	subs	r5, r5, r4
 800b92c:	1963      	adds	r3, r4, r5
 800b92e:	42bb      	cmp	r3, r7
 800b930:	db04      	blt.n	800b93c <__s2b+0x78>
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b936:	340a      	adds	r4, #10
 800b938:	2509      	movs	r5, #9
 800b93a:	e7f6      	b.n	800b92a <__s2b+0x66>
 800b93c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b940:	4601      	mov	r1, r0
 800b942:	220a      	movs	r2, #10
 800b944:	4630      	mov	r0, r6
 800b946:	3b30      	subs	r3, #48	@ 0x30
 800b948:	f7ff ff74 	bl	800b834 <__multadd>
 800b94c:	e7ee      	b.n	800b92c <__s2b+0x68>
 800b94e:	bf00      	nop
 800b950:	0800e105 	.word	0x0800e105
 800b954:	0800e116 	.word	0x0800e116

0800b958 <__hi0bits>:
 800b958:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b95c:	4603      	mov	r3, r0
 800b95e:	bf36      	itet	cc
 800b960:	0403      	lslcc	r3, r0, #16
 800b962:	2000      	movcs	r0, #0
 800b964:	2010      	movcc	r0, #16
 800b966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b96a:	bf3c      	itt	cc
 800b96c:	021b      	lslcc	r3, r3, #8
 800b96e:	3008      	addcc	r0, #8
 800b970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b974:	bf3c      	itt	cc
 800b976:	011b      	lslcc	r3, r3, #4
 800b978:	3004      	addcc	r0, #4
 800b97a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b97e:	bf3c      	itt	cc
 800b980:	009b      	lslcc	r3, r3, #2
 800b982:	3002      	addcc	r0, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	db05      	blt.n	800b994 <__hi0bits+0x3c>
 800b988:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b98c:	f100 0001 	add.w	r0, r0, #1
 800b990:	bf08      	it	eq
 800b992:	2020      	moveq	r0, #32
 800b994:	4770      	bx	lr

0800b996 <__lo0bits>:
 800b996:	6803      	ldr	r3, [r0, #0]
 800b998:	4602      	mov	r2, r0
 800b99a:	f013 0007 	ands.w	r0, r3, #7
 800b99e:	d00b      	beq.n	800b9b8 <__lo0bits+0x22>
 800b9a0:	07d9      	lsls	r1, r3, #31
 800b9a2:	d421      	bmi.n	800b9e8 <__lo0bits+0x52>
 800b9a4:	0798      	lsls	r0, r3, #30
 800b9a6:	bf47      	ittee	mi
 800b9a8:	085b      	lsrmi	r3, r3, #1
 800b9aa:	2001      	movmi	r0, #1
 800b9ac:	089b      	lsrpl	r3, r3, #2
 800b9ae:	2002      	movpl	r0, #2
 800b9b0:	bf4c      	ite	mi
 800b9b2:	6013      	strmi	r3, [r2, #0]
 800b9b4:	6013      	strpl	r3, [r2, #0]
 800b9b6:	4770      	bx	lr
 800b9b8:	b299      	uxth	r1, r3
 800b9ba:	b909      	cbnz	r1, 800b9c0 <__lo0bits+0x2a>
 800b9bc:	0c1b      	lsrs	r3, r3, #16
 800b9be:	2010      	movs	r0, #16
 800b9c0:	b2d9      	uxtb	r1, r3
 800b9c2:	b909      	cbnz	r1, 800b9c8 <__lo0bits+0x32>
 800b9c4:	3008      	adds	r0, #8
 800b9c6:	0a1b      	lsrs	r3, r3, #8
 800b9c8:	0719      	lsls	r1, r3, #28
 800b9ca:	bf04      	itt	eq
 800b9cc:	091b      	lsreq	r3, r3, #4
 800b9ce:	3004      	addeq	r0, #4
 800b9d0:	0799      	lsls	r1, r3, #30
 800b9d2:	bf04      	itt	eq
 800b9d4:	089b      	lsreq	r3, r3, #2
 800b9d6:	3002      	addeq	r0, #2
 800b9d8:	07d9      	lsls	r1, r3, #31
 800b9da:	d403      	bmi.n	800b9e4 <__lo0bits+0x4e>
 800b9dc:	085b      	lsrs	r3, r3, #1
 800b9de:	f100 0001 	add.w	r0, r0, #1
 800b9e2:	d003      	beq.n	800b9ec <__lo0bits+0x56>
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	4770      	bx	lr
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	4770      	bx	lr
 800b9ec:	2020      	movs	r0, #32
 800b9ee:	4770      	bx	lr

0800b9f0 <__i2b>:
 800b9f0:	b510      	push	{r4, lr}
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	2101      	movs	r1, #1
 800b9f6:	f7ff febb 	bl	800b770 <_Balloc>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	b928      	cbnz	r0, 800ba0a <__i2b+0x1a>
 800b9fe:	4b05      	ldr	r3, [pc, #20]	@ (800ba14 <__i2b+0x24>)
 800ba00:	f240 1145 	movw	r1, #325	@ 0x145
 800ba04:	4804      	ldr	r0, [pc, #16]	@ (800ba18 <__i2b+0x28>)
 800ba06:	f001 fe23 	bl	800d650 <__assert_func>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	6144      	str	r4, [r0, #20]
 800ba0e:	6103      	str	r3, [r0, #16]
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	bf00      	nop
 800ba14:	0800e105 	.word	0x0800e105
 800ba18:	0800e116 	.word	0x0800e116

0800ba1c <__multiply>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	4614      	mov	r4, r2
 800ba22:	690a      	ldr	r2, [r1, #16]
 800ba24:	460f      	mov	r7, r1
 800ba26:	b085      	sub	sp, #20
 800ba28:	6923      	ldr	r3, [r4, #16]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	bfa2      	ittt	ge
 800ba2e:	4623      	movge	r3, r4
 800ba30:	460c      	movge	r4, r1
 800ba32:	461f      	movge	r7, r3
 800ba34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba3e:	6861      	ldr	r1, [r4, #4]
 800ba40:	eb0a 0609 	add.w	r6, sl, r9
 800ba44:	42b3      	cmp	r3, r6
 800ba46:	bfb8      	it	lt
 800ba48:	3101      	addlt	r1, #1
 800ba4a:	f7ff fe91 	bl	800b770 <_Balloc>
 800ba4e:	b930      	cbnz	r0, 800ba5e <__multiply+0x42>
 800ba50:	4602      	mov	r2, r0
 800ba52:	4b45      	ldr	r3, [pc, #276]	@ (800bb68 <__multiply+0x14c>)
 800ba54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba58:	4844      	ldr	r0, [pc, #272]	@ (800bb6c <__multiply+0x150>)
 800ba5a:	f001 fdf9 	bl	800d650 <__assert_func>
 800ba5e:	f100 0514 	add.w	r5, r0, #20
 800ba62:	2200      	movs	r2, #0
 800ba64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba68:	462b      	mov	r3, r5
 800ba6a:	4543      	cmp	r3, r8
 800ba6c:	d321      	bcc.n	800bab2 <__multiply+0x96>
 800ba6e:	f107 0114 	add.w	r1, r7, #20
 800ba72:	f104 0214 	add.w	r2, r4, #20
 800ba76:	f104 0715 	add.w	r7, r4, #21
 800ba7a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba7e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba82:	9302      	str	r3, [sp, #8]
 800ba84:	1b13      	subs	r3, r2, r4
 800ba86:	3b15      	subs	r3, #21
 800ba88:	f023 0303 	bic.w	r3, r3, #3
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	42ba      	cmp	r2, r7
 800ba90:	bf38      	it	cc
 800ba92:	2304      	movcc	r3, #4
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	9b02      	ldr	r3, [sp, #8]
 800ba98:	9103      	str	r1, [sp, #12]
 800ba9a:	428b      	cmp	r3, r1
 800ba9c:	d80c      	bhi.n	800bab8 <__multiply+0x9c>
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	dd03      	ble.n	800baaa <__multiply+0x8e>
 800baa2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d05b      	beq.n	800bb62 <__multiply+0x146>
 800baaa:	6106      	str	r6, [r0, #16]
 800baac:	b005      	add	sp, #20
 800baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab2:	f843 2b04 	str.w	r2, [r3], #4
 800bab6:	e7d8      	b.n	800ba6a <__multiply+0x4e>
 800bab8:	f8b1 a000 	ldrh.w	sl, [r1]
 800babc:	f1ba 0f00 	cmp.w	sl, #0
 800bac0:	d024      	beq.n	800bb0c <__multiply+0xf0>
 800bac2:	f104 0e14 	add.w	lr, r4, #20
 800bac6:	46a9      	mov	r9, r5
 800bac8:	f04f 0c00 	mov.w	ip, #0
 800bacc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bad0:	f8d9 3000 	ldr.w	r3, [r9]
 800bad4:	fa1f fb87 	uxth.w	fp, r7
 800bad8:	4572      	cmp	r2, lr
 800bada:	b29b      	uxth	r3, r3
 800badc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bae0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bae4:	f8d9 7000 	ldr.w	r7, [r9]
 800bae8:	4463      	add	r3, ip
 800baea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800baee:	fb0a c70b 	mla	r7, sl, fp, ip
 800baf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bafc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb00:	f849 3b04 	str.w	r3, [r9], #4
 800bb04:	d8e2      	bhi.n	800bacc <__multiply+0xb0>
 800bb06:	9b01      	ldr	r3, [sp, #4]
 800bb08:	f845 c003 	str.w	ip, [r5, r3]
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	3104      	adds	r1, #4
 800bb10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb14:	f1b9 0f00 	cmp.w	r9, #0
 800bb18:	d021      	beq.n	800bb5e <__multiply+0x142>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	f104 0c14 	add.w	ip, r4, #20
 800bb20:	46ae      	mov	lr, r5
 800bb22:	f04f 0a00 	mov.w	sl, #0
 800bb26:	f8bc b000 	ldrh.w	fp, [ip]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb30:	fb09 770b 	mla	r7, r9, fp, r7
 800bb34:	4457      	add	r7, sl
 800bb36:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb3a:	f84e 3b04 	str.w	r3, [lr], #4
 800bb3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb46:	f8be 3000 	ldrh.w	r3, [lr]
 800bb4a:	4562      	cmp	r2, ip
 800bb4c:	fb09 330a 	mla	r3, r9, sl, r3
 800bb50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb58:	d8e5      	bhi.n	800bb26 <__multiply+0x10a>
 800bb5a:	9f01      	ldr	r7, [sp, #4]
 800bb5c:	51eb      	str	r3, [r5, r7]
 800bb5e:	3504      	adds	r5, #4
 800bb60:	e799      	b.n	800ba96 <__multiply+0x7a>
 800bb62:	3e01      	subs	r6, #1
 800bb64:	e79b      	b.n	800ba9e <__multiply+0x82>
 800bb66:	bf00      	nop
 800bb68:	0800e105 	.word	0x0800e105
 800bb6c:	0800e116 	.word	0x0800e116

0800bb70 <__pow5mult>:
 800bb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb74:	4615      	mov	r5, r2
 800bb76:	f012 0203 	ands.w	r2, r2, #3
 800bb7a:	4607      	mov	r7, r0
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	d007      	beq.n	800bb90 <__pow5mult+0x20>
 800bb80:	3a01      	subs	r2, #1
 800bb82:	4c25      	ldr	r4, [pc, #148]	@ (800bc18 <__pow5mult+0xa8>)
 800bb84:	2300      	movs	r3, #0
 800bb86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb8a:	f7ff fe53 	bl	800b834 <__multadd>
 800bb8e:	4606      	mov	r6, r0
 800bb90:	10ad      	asrs	r5, r5, #2
 800bb92:	d03d      	beq.n	800bc10 <__pow5mult+0xa0>
 800bb94:	69fc      	ldr	r4, [r7, #28]
 800bb96:	b97c      	cbnz	r4, 800bbb8 <__pow5mult+0x48>
 800bb98:	2010      	movs	r0, #16
 800bb9a:	f7ff fd33 	bl	800b604 <malloc>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	61f8      	str	r0, [r7, #28]
 800bba2:	b928      	cbnz	r0, 800bbb0 <__pow5mult+0x40>
 800bba4:	4b1d      	ldr	r3, [pc, #116]	@ (800bc1c <__pow5mult+0xac>)
 800bba6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbaa:	481d      	ldr	r0, [pc, #116]	@ (800bc20 <__pow5mult+0xb0>)
 800bbac:	f001 fd50 	bl	800d650 <__assert_func>
 800bbb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbb4:	6004      	str	r4, [r0, #0]
 800bbb6:	60c4      	str	r4, [r0, #12]
 800bbb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbc0:	b94c      	cbnz	r4, 800bbd6 <__pow5mult+0x66>
 800bbc2:	f240 2171 	movw	r1, #625	@ 0x271
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	f7ff ff12 	bl	800b9f0 <__i2b>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	4604      	mov	r4, r0
 800bbd0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbd4:	6003      	str	r3, [r0, #0]
 800bbd6:	f04f 0900 	mov.w	r9, #0
 800bbda:	07eb      	lsls	r3, r5, #31
 800bbdc:	d50a      	bpl.n	800bbf4 <__pow5mult+0x84>
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4622      	mov	r2, r4
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f7ff ff1a 	bl	800ba1c <__multiply>
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4631      	mov	r1, r6
 800bbec:	4638      	mov	r0, r7
 800bbee:	4646      	mov	r6, r8
 800bbf0:	f7ff fdfe 	bl	800b7f0 <_Bfree>
 800bbf4:	106d      	asrs	r5, r5, #1
 800bbf6:	d00b      	beq.n	800bc10 <__pow5mult+0xa0>
 800bbf8:	6820      	ldr	r0, [r4, #0]
 800bbfa:	b938      	cbnz	r0, 800bc0c <__pow5mult+0x9c>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7ff ff0b 	bl	800ba1c <__multiply>
 800bc06:	6020      	str	r0, [r4, #0]
 800bc08:	f8c0 9000 	str.w	r9, [r0]
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	e7e4      	b.n	800bbda <__pow5mult+0x6a>
 800bc10:	4630      	mov	r0, r6
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	bf00      	nop
 800bc18:	0800e170 	.word	0x0800e170
 800bc1c:	0800e096 	.word	0x0800e096
 800bc20:	0800e116 	.word	0x0800e116

0800bc24 <__lshift>:
 800bc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc28:	460c      	mov	r4, r1
 800bc2a:	4607      	mov	r7, r0
 800bc2c:	4691      	mov	r9, r2
 800bc2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	6849      	ldr	r1, [r1, #4]
 800bc36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc3a:	68a3      	ldr	r3, [r4, #8]
 800bc3c:	f108 0601 	add.w	r6, r8, #1
 800bc40:	42b3      	cmp	r3, r6
 800bc42:	db0b      	blt.n	800bc5c <__lshift+0x38>
 800bc44:	4638      	mov	r0, r7
 800bc46:	f7ff fd93 	bl	800b770 <_Balloc>
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	b948      	cbnz	r0, 800bc62 <__lshift+0x3e>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	4b28      	ldr	r3, [pc, #160]	@ (800bcf4 <__lshift+0xd0>)
 800bc52:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc56:	4828      	ldr	r0, [pc, #160]	@ (800bcf8 <__lshift+0xd4>)
 800bc58:	f001 fcfa 	bl	800d650 <__assert_func>
 800bc5c:	3101      	adds	r1, #1
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	e7ee      	b.n	800bc40 <__lshift+0x1c>
 800bc62:	2300      	movs	r3, #0
 800bc64:	f100 0114 	add.w	r1, r0, #20
 800bc68:	f100 0210 	add.w	r2, r0, #16
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	4553      	cmp	r3, sl
 800bc70:	db33      	blt.n	800bcda <__lshift+0xb6>
 800bc72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc76:	f104 0314 	add.w	r3, r4, #20
 800bc7a:	6920      	ldr	r0, [r4, #16]
 800bc7c:	f019 091f 	ands.w	r9, r9, #31
 800bc80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc88:	d02b      	beq.n	800bce2 <__lshift+0xbe>
 800bc8a:	f1c9 0e20 	rsb	lr, r9, #32
 800bc8e:	468a      	mov	sl, r1
 800bc90:	2200      	movs	r2, #0
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	fa00 f009 	lsl.w	r0, r0, r9
 800bc98:	4310      	orrs	r0, r2
 800bc9a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bca2:	459c      	cmp	ip, r3
 800bca4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bca8:	d8f3      	bhi.n	800bc92 <__lshift+0x6e>
 800bcaa:	ebac 0304 	sub.w	r3, ip, r4
 800bcae:	f104 0015 	add.w	r0, r4, #21
 800bcb2:	3b15      	subs	r3, #21
 800bcb4:	f023 0303 	bic.w	r3, r3, #3
 800bcb8:	3304      	adds	r3, #4
 800bcba:	4584      	cmp	ip, r0
 800bcbc:	bf38      	it	cc
 800bcbe:	2304      	movcc	r3, #4
 800bcc0:	50ca      	str	r2, [r1, r3]
 800bcc2:	b10a      	cbz	r2, 800bcc8 <__lshift+0xa4>
 800bcc4:	f108 0602 	add.w	r6, r8, #2
 800bcc8:	3e01      	subs	r6, #1
 800bcca:	4638      	mov	r0, r7
 800bccc:	4621      	mov	r1, r4
 800bcce:	612e      	str	r6, [r5, #16]
 800bcd0:	f7ff fd8e 	bl	800b7f0 <_Bfree>
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcda:	3301      	adds	r3, #1
 800bcdc:	f842 0f04 	str.w	r0, [r2, #4]!
 800bce0:	e7c5      	b.n	800bc6e <__lshift+0x4a>
 800bce2:	3904      	subs	r1, #4
 800bce4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce8:	459c      	cmp	ip, r3
 800bcea:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcee:	d8f9      	bhi.n	800bce4 <__lshift+0xc0>
 800bcf0:	e7ea      	b.n	800bcc8 <__lshift+0xa4>
 800bcf2:	bf00      	nop
 800bcf4:	0800e105 	.word	0x0800e105
 800bcf8:	0800e116 	.word	0x0800e116

0800bcfc <__mcmp>:
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	690a      	ldr	r2, [r1, #16]
 800bd00:	6900      	ldr	r0, [r0, #16]
 800bd02:	1a80      	subs	r0, r0, r2
 800bd04:	b530      	push	{r4, r5, lr}
 800bd06:	d10e      	bne.n	800bd26 <__mcmp+0x2a>
 800bd08:	3314      	adds	r3, #20
 800bd0a:	3114      	adds	r1, #20
 800bd0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd1c:	4295      	cmp	r5, r2
 800bd1e:	d003      	beq.n	800bd28 <__mcmp+0x2c>
 800bd20:	d205      	bcs.n	800bd2e <__mcmp+0x32>
 800bd22:	f04f 30ff 	mov.w	r0, #4294967295
 800bd26:	bd30      	pop	{r4, r5, pc}
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	d3f3      	bcc.n	800bd14 <__mcmp+0x18>
 800bd2c:	e7fb      	b.n	800bd26 <__mcmp+0x2a>
 800bd2e:	2001      	movs	r0, #1
 800bd30:	e7f9      	b.n	800bd26 <__mcmp+0x2a>
	...

0800bd34 <__mdiff>:
 800bd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	4689      	mov	r9, r1
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	4614      	mov	r4, r2
 800bd40:	4648      	mov	r0, r9
 800bd42:	f7ff ffdb 	bl	800bcfc <__mcmp>
 800bd46:	1e05      	subs	r5, r0, #0
 800bd48:	d112      	bne.n	800bd70 <__mdiff+0x3c>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7ff fd0f 	bl	800b770 <_Balloc>
 800bd52:	4602      	mov	r2, r0
 800bd54:	b928      	cbnz	r0, 800bd62 <__mdiff+0x2e>
 800bd56:	4b41      	ldr	r3, [pc, #260]	@ (800be5c <__mdiff+0x128>)
 800bd58:	f240 2137 	movw	r1, #567	@ 0x237
 800bd5c:	4840      	ldr	r0, [pc, #256]	@ (800be60 <__mdiff+0x12c>)
 800bd5e:	f001 fc77 	bl	800d650 <__assert_func>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd68:	4610      	mov	r0, r2
 800bd6a:	b003      	add	sp, #12
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd70:	bfbc      	itt	lt
 800bd72:	464b      	movlt	r3, r9
 800bd74:	46a1      	movlt	r9, r4
 800bd76:	4630      	mov	r0, r6
 800bd78:	bfb8      	it	lt
 800bd7a:	2501      	movlt	r5, #1
 800bd7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd80:	bfb4      	ite	lt
 800bd82:	461c      	movlt	r4, r3
 800bd84:	2500      	movge	r5, #0
 800bd86:	f7ff fcf3 	bl	800b770 <_Balloc>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	b918      	cbnz	r0, 800bd96 <__mdiff+0x62>
 800bd8e:	4b33      	ldr	r3, [pc, #204]	@ (800be5c <__mdiff+0x128>)
 800bd90:	f240 2145 	movw	r1, #581	@ 0x245
 800bd94:	e7e2      	b.n	800bd5c <__mdiff+0x28>
 800bd96:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd9a:	f104 0e14 	add.w	lr, r4, #20
 800bd9e:	6926      	ldr	r6, [r4, #16]
 800bda0:	f100 0b14 	add.w	fp, r0, #20
 800bda4:	60c5      	str	r5, [r0, #12]
 800bda6:	f109 0514 	add.w	r5, r9, #20
 800bdaa:	f109 0310 	add.w	r3, r9, #16
 800bdae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdb2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bdb6:	46d9      	mov	r9, fp
 800bdb8:	f04f 0c00 	mov.w	ip, #0
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	9b01      	ldr	r3, [sp, #4]
 800bdc0:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdc4:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdc8:	4576      	cmp	r6, lr
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	fa1f f38a 	uxth.w	r3, sl
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	b283      	uxth	r3, r0
 800bdd4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bdd8:	eba1 0303 	sub.w	r3, r1, r3
 800bddc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bde0:	4463      	add	r3, ip
 800bde2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdf0:	f849 3b04 	str.w	r3, [r9], #4
 800bdf4:	d8e3      	bhi.n	800bdbe <__mdiff+0x8a>
 800bdf6:	1b33      	subs	r3, r6, r4
 800bdf8:	3415      	adds	r4, #21
 800bdfa:	3b15      	subs	r3, #21
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	3304      	adds	r3, #4
 800be02:	42a6      	cmp	r6, r4
 800be04:	bf38      	it	cc
 800be06:	2304      	movcc	r3, #4
 800be08:	441d      	add	r5, r3
 800be0a:	445b      	add	r3, fp
 800be0c:	462c      	mov	r4, r5
 800be0e:	461e      	mov	r6, r3
 800be10:	4544      	cmp	r4, r8
 800be12:	d30e      	bcc.n	800be32 <__mdiff+0xfe>
 800be14:	f108 0103 	add.w	r1, r8, #3
 800be18:	1b49      	subs	r1, r1, r5
 800be1a:	3d03      	subs	r5, #3
 800be1c:	f021 0103 	bic.w	r1, r1, #3
 800be20:	45a8      	cmp	r8, r5
 800be22:	bf38      	it	cc
 800be24:	2100      	movcc	r1, #0
 800be26:	440b      	add	r3, r1
 800be28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be2c:	b199      	cbz	r1, 800be56 <__mdiff+0x122>
 800be2e:	6117      	str	r7, [r2, #16]
 800be30:	e79a      	b.n	800bd68 <__mdiff+0x34>
 800be32:	f854 1b04 	ldr.w	r1, [r4], #4
 800be36:	46e6      	mov	lr, ip
 800be38:	fa1f fc81 	uxth.w	ip, r1
 800be3c:	0c08      	lsrs	r0, r1, #16
 800be3e:	4471      	add	r1, lr
 800be40:	44f4      	add	ip, lr
 800be42:	b289      	uxth	r1, r1
 800be44:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be50:	f846 1b04 	str.w	r1, [r6], #4
 800be54:	e7dc      	b.n	800be10 <__mdiff+0xdc>
 800be56:	3f01      	subs	r7, #1
 800be58:	e7e6      	b.n	800be28 <__mdiff+0xf4>
 800be5a:	bf00      	nop
 800be5c:	0800e105 	.word	0x0800e105
 800be60:	0800e116 	.word	0x0800e116

0800be64 <__ulp>:
 800be64:	b082      	sub	sp, #8
 800be66:	4b11      	ldr	r3, [pc, #68]	@ (800beac <__ulp+0x48>)
 800be68:	ed8d 0b00 	vstr	d0, [sp]
 800be6c:	9a01      	ldr	r2, [sp, #4]
 800be6e:	4013      	ands	r3, r2
 800be70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be74:	2b00      	cmp	r3, #0
 800be76:	dc08      	bgt.n	800be8a <__ulp+0x26>
 800be78:	425b      	negs	r3, r3
 800be7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be82:	da04      	bge.n	800be8e <__ulp+0x2a>
 800be84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be88:	4113      	asrs	r3, r2
 800be8a:	2200      	movs	r2, #0
 800be8c:	e008      	b.n	800bea0 <__ulp+0x3c>
 800be8e:	f1a2 0314 	sub.w	r3, r2, #20
 800be92:	2b1e      	cmp	r3, #30
 800be94:	bfd6      	itet	le
 800be96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be9a:	2201      	movgt	r2, #1
 800be9c:	40da      	lsrle	r2, r3
 800be9e:	2300      	movs	r3, #0
 800bea0:	4619      	mov	r1, r3
 800bea2:	4610      	mov	r0, r2
 800bea4:	ec41 0b10 	vmov	d0, r0, r1
 800bea8:	b002      	add	sp, #8
 800beaa:	4770      	bx	lr
 800beac:	7ff00000 	.word	0x7ff00000

0800beb0 <__b2d>:
 800beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb4:	6906      	ldr	r6, [r0, #16]
 800beb6:	f100 0814 	add.w	r8, r0, #20
 800beba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bebe:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bec2:	1f37      	subs	r7, r6, #4
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7ff fd47 	bl	800b958 <__hi0bits>
 800beca:	f1c0 0320 	rsb	r3, r0, #32
 800bece:	280a      	cmp	r0, #10
 800bed0:	600b      	str	r3, [r1, #0]
 800bed2:	491d      	ldr	r1, [pc, #116]	@ (800bf48 <__b2d+0x98>)
 800bed4:	dc16      	bgt.n	800bf04 <__b2d+0x54>
 800bed6:	f1c0 0c0b 	rsb	ip, r0, #11
 800beda:	45b8      	cmp	r8, r7
 800bedc:	f100 0015 	add.w	r0, r0, #21
 800bee0:	fa22 f30c 	lsr.w	r3, r2, ip
 800bee4:	fa02 f000 	lsl.w	r0, r2, r0
 800bee8:	ea43 0501 	orr.w	r5, r3, r1
 800beec:	bf34      	ite	cc
 800beee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bef2:	2300      	movcs	r3, #0
 800bef4:	fa23 f30c 	lsr.w	r3, r3, ip
 800bef8:	4303      	orrs	r3, r0
 800befa:	461c      	mov	r4, r3
 800befc:	ec45 4b10 	vmov	d0, r4, r5
 800bf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf04:	45b8      	cmp	r8, r7
 800bf06:	bf3a      	itte	cc
 800bf08:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf0c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf10:	2300      	movcs	r3, #0
 800bf12:	380b      	subs	r0, #11
 800bf14:	d014      	beq.n	800bf40 <__b2d+0x90>
 800bf16:	f1c0 0120 	rsb	r1, r0, #32
 800bf1a:	4082      	lsls	r2, r0
 800bf1c:	4547      	cmp	r7, r8
 800bf1e:	fa23 f401 	lsr.w	r4, r3, r1
 800bf22:	fa03 f300 	lsl.w	r3, r3, r0
 800bf26:	ea42 0204 	orr.w	r2, r2, r4
 800bf2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf2e:	bf8c      	ite	hi
 800bf30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf34:	2200      	movls	r2, #0
 800bf36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf3a:	40ca      	lsrs	r2, r1
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	e7dc      	b.n	800befa <__b2d+0x4a>
 800bf40:	ea42 0501 	orr.w	r5, r2, r1
 800bf44:	e7d9      	b.n	800befa <__b2d+0x4a>
 800bf46:	bf00      	nop
 800bf48:	3ff00000 	.word	0x3ff00000

0800bf4c <__d2b>:
 800bf4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf50:	460f      	mov	r7, r1
 800bf52:	2101      	movs	r1, #1
 800bf54:	4616      	mov	r6, r2
 800bf56:	ec59 8b10 	vmov	r8, r9, d0
 800bf5a:	f7ff fc09 	bl	800b770 <_Balloc>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	b930      	cbnz	r0, 800bf70 <__d2b+0x24>
 800bf62:	4602      	mov	r2, r0
 800bf64:	4b23      	ldr	r3, [pc, #140]	@ (800bff4 <__d2b+0xa8>)
 800bf66:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf6a:	4823      	ldr	r0, [pc, #140]	@ (800bff8 <__d2b+0xac>)
 800bf6c:	f001 fb70 	bl	800d650 <__assert_func>
 800bf70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf78:	b10d      	cbz	r5, 800bf7e <__d2b+0x32>
 800bf7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	f1b8 0300 	subs.w	r3, r8, #0
 800bf84:	d023      	beq.n	800bfce <__d2b+0x82>
 800bf86:	4668      	mov	r0, sp
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	f7ff fd04 	bl	800b996 <__lo0bits>
 800bf8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf92:	b1d0      	cbz	r0, 800bfca <__d2b+0x7e>
 800bf94:	f1c0 0320 	rsb	r3, r0, #32
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	40c2      	lsrs	r2, r0
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	9201      	str	r2, [sp, #4]
 800bfa2:	6163      	str	r3, [r4, #20]
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	61a3      	str	r3, [r4, #24]
 800bfaa:	bf0c      	ite	eq
 800bfac:	2201      	moveq	r2, #1
 800bfae:	2202      	movne	r2, #2
 800bfb0:	6122      	str	r2, [r4, #16]
 800bfb2:	b1a5      	cbz	r5, 800bfde <__d2b+0x92>
 800bfb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bfb8:	4405      	add	r5, r0
 800bfba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bfbe:	603d      	str	r5, [r7, #0]
 800bfc0:	6030      	str	r0, [r6, #0]
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	b003      	add	sp, #12
 800bfc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfca:	6161      	str	r1, [r4, #20]
 800bfcc:	e7ea      	b.n	800bfa4 <__d2b+0x58>
 800bfce:	a801      	add	r0, sp, #4
 800bfd0:	f7ff fce1 	bl	800b996 <__lo0bits>
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	3020      	adds	r0, #32
 800bfd8:	2201      	movs	r2, #1
 800bfda:	6163      	str	r3, [r4, #20]
 800bfdc:	e7e8      	b.n	800bfb0 <__d2b+0x64>
 800bfde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfe6:	6038      	str	r0, [r7, #0]
 800bfe8:	6918      	ldr	r0, [r3, #16]
 800bfea:	f7ff fcb5 	bl	800b958 <__hi0bits>
 800bfee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bff2:	e7e5      	b.n	800bfc0 <__d2b+0x74>
 800bff4:	0800e105 	.word	0x0800e105
 800bff8:	0800e116 	.word	0x0800e116

0800bffc <__ratio>:
 800bffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	b085      	sub	sp, #20
 800c002:	e9cd 1000 	strd	r1, r0, [sp]
 800c006:	a902      	add	r1, sp, #8
 800c008:	f7ff ff52 	bl	800beb0 <__b2d>
 800c00c:	a903      	add	r1, sp, #12
 800c00e:	9800      	ldr	r0, [sp, #0]
 800c010:	ec55 4b10 	vmov	r4, r5, d0
 800c014:	f7ff ff4c 	bl	800beb0 <__b2d>
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	462f      	mov	r7, r5
 800c01c:	4620      	mov	r0, r4
 800c01e:	6919      	ldr	r1, [r3, #16]
 800c020:	9b00      	ldr	r3, [sp, #0]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	1ac9      	subs	r1, r1, r3
 800c026:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c02a:	ec5b ab10 	vmov	sl, fp, d0
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	46d9      	mov	r9, fp
 800c032:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c036:	2b00      	cmp	r3, #0
 800c038:	bfcd      	iteet	gt
 800c03a:	462a      	movgt	r2, r5
 800c03c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c040:	465a      	movle	r2, fp
 800c042:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c046:	bfd8      	it	le
 800c048:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c04c:	4652      	mov	r2, sl
 800c04e:	4639      	mov	r1, r7
 800c050:	464b      	mov	r3, r9
 800c052:	f7f4 fc0f 	bl	8000874 <__aeabi_ddiv>
 800c056:	ec41 0b10 	vmov	d0, r0, r1
 800c05a:	b005      	add	sp, #20
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c060 <__copybits>:
 800c060:	3901      	subs	r1, #1
 800c062:	f102 0314 	add.w	r3, r2, #20
 800c066:	1149      	asrs	r1, r1, #5
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	3101      	adds	r1, #1
 800c06c:	6914      	ldr	r4, [r2, #16]
 800c06e:	1f05      	subs	r5, r0, #4
 800c070:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c074:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c078:	42a3      	cmp	r3, r4
 800c07a:	d30c      	bcc.n	800c096 <__copybits+0x36>
 800c07c:	1aa3      	subs	r3, r4, r2
 800c07e:	3211      	adds	r2, #17
 800c080:	3b11      	subs	r3, #17
 800c082:	f023 0303 	bic.w	r3, r3, #3
 800c086:	42a2      	cmp	r2, r4
 800c088:	bf88      	it	hi
 800c08a:	2300      	movhi	r3, #0
 800c08c:	4418      	add	r0, r3
 800c08e:	2300      	movs	r3, #0
 800c090:	4288      	cmp	r0, r1
 800c092:	d305      	bcc.n	800c0a0 <__copybits+0x40>
 800c094:	bd70      	pop	{r4, r5, r6, pc}
 800c096:	f853 6b04 	ldr.w	r6, [r3], #4
 800c09a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c09e:	e7eb      	b.n	800c078 <__copybits+0x18>
 800c0a0:	f840 3b04 	str.w	r3, [r0], #4
 800c0a4:	e7f4      	b.n	800c090 <__copybits+0x30>

0800c0a6 <__any_on>:
 800c0a6:	f100 0214 	add.w	r2, r0, #20
 800c0aa:	114b      	asrs	r3, r1, #5
 800c0ac:	6900      	ldr	r0, [r0, #16]
 800c0ae:	4298      	cmp	r0, r3
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	db11      	blt.n	800c0d8 <__any_on+0x32>
 800c0b4:	dd0a      	ble.n	800c0cc <__any_on+0x26>
 800c0b6:	f011 011f 	ands.w	r1, r1, #31
 800c0ba:	d007      	beq.n	800c0cc <__any_on+0x26>
 800c0bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0c0:	fa24 f001 	lsr.w	r0, r4, r1
 800c0c4:	fa00 f101 	lsl.w	r1, r0, r1
 800c0c8:	428c      	cmp	r4, r1
 800c0ca:	d10b      	bne.n	800c0e4 <__any_on+0x3e>
 800c0cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d803      	bhi.n	800c0dc <__any_on+0x36>
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	4603      	mov	r3, r0
 800c0da:	e7f7      	b.n	800c0cc <__any_on+0x26>
 800c0dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	d0f5      	beq.n	800c0d0 <__any_on+0x2a>
 800c0e4:	2001      	movs	r0, #1
 800c0e6:	e7f6      	b.n	800c0d6 <__any_on+0x30>

0800c0e8 <sulp>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	460d      	mov	r5, r1
 800c0ee:	4616      	mov	r6, r2
 800c0f0:	ec45 4b10 	vmov	d0, r4, r5
 800c0f4:	f7ff feb6 	bl	800be64 <__ulp>
 800c0f8:	ec51 0b10 	vmov	r0, r1, d0
 800c0fc:	b17e      	cbz	r6, 800c11e <sulp+0x36>
 800c0fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c102:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c106:	2b00      	cmp	r3, #0
 800c108:	dd09      	ble.n	800c11e <sulp+0x36>
 800c10a:	051b      	lsls	r3, r3, #20
 800c10c:	2400      	movs	r4, #0
 800c10e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c112:	4622      	mov	r2, r4
 800c114:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c118:	462b      	mov	r3, r5
 800c11a:	f7f4 fa81 	bl	8000620 <__aeabi_dmul>
 800c11e:	ec41 0b10 	vmov	d0, r0, r1
 800c122:	bd70      	pop	{r4, r5, r6, pc}
 800c124:	0000      	movs	r0, r0
	...

0800c128 <_strtod_l>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	b09f      	sub	sp, #124	@ 0x7c
 800c12e:	460c      	mov	r4, r1
 800c130:	f04f 0a00 	mov.w	sl, #0
 800c134:	f04f 0b00 	mov.w	fp, #0
 800c138:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c13a:	2200      	movs	r2, #0
 800c13c:	9005      	str	r0, [sp, #20]
 800c13e:	921a      	str	r2, [sp, #104]	@ 0x68
 800c140:	460a      	mov	r2, r1
 800c142:	9219      	str	r2, [sp, #100]	@ 0x64
 800c144:	7811      	ldrb	r1, [r2, #0]
 800c146:	292b      	cmp	r1, #43	@ 0x2b
 800c148:	d04a      	beq.n	800c1e0 <_strtod_l+0xb8>
 800c14a:	d838      	bhi.n	800c1be <_strtod_l+0x96>
 800c14c:	290d      	cmp	r1, #13
 800c14e:	d832      	bhi.n	800c1b6 <_strtod_l+0x8e>
 800c150:	2908      	cmp	r1, #8
 800c152:	d832      	bhi.n	800c1ba <_strtod_l+0x92>
 800c154:	2900      	cmp	r1, #0
 800c156:	d03b      	beq.n	800c1d0 <_strtod_l+0xa8>
 800c158:	2200      	movs	r2, #0
 800c15a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c15c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c15e:	782a      	ldrb	r2, [r5, #0]
 800c160:	2a30      	cmp	r2, #48	@ 0x30
 800c162:	f040 80b3 	bne.w	800c2cc <_strtod_l+0x1a4>
 800c166:	786a      	ldrb	r2, [r5, #1]
 800c168:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c16c:	2a58      	cmp	r2, #88	@ 0x58
 800c16e:	d16e      	bne.n	800c24e <_strtod_l+0x126>
 800c170:	9302      	str	r3, [sp, #8]
 800c172:	a919      	add	r1, sp, #100	@ 0x64
 800c174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c176:	4a90      	ldr	r2, [pc, #576]	@ (800c3b8 <_strtod_l+0x290>)
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	ab1a      	add	r3, sp, #104	@ 0x68
 800c17c:	9805      	ldr	r0, [sp, #20]
 800c17e:	9300      	str	r3, [sp, #0]
 800c180:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c182:	f001 fafd 	bl	800d780 <__gethex>
 800c186:	f010 060f 	ands.w	r6, r0, #15
 800c18a:	4604      	mov	r4, r0
 800c18c:	d005      	beq.n	800c19a <_strtod_l+0x72>
 800c18e:	2e06      	cmp	r6, #6
 800c190:	d128      	bne.n	800c1e4 <_strtod_l+0xbc>
 800c192:	3501      	adds	r5, #1
 800c194:	2300      	movs	r3, #0
 800c196:	9519      	str	r5, [sp, #100]	@ 0x64
 800c198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c19a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f040 858e 	bne.w	800ccbe <_strtod_l+0xb96>
 800c1a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1a4:	b1cb      	cbz	r3, 800c1da <_strtod_l+0xb2>
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c1ac:	ec43 2b10 	vmov	d0, r2, r3
 800c1b0:	b01f      	add	sp, #124	@ 0x7c
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	2920      	cmp	r1, #32
 800c1b8:	d1ce      	bne.n	800c158 <_strtod_l+0x30>
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	e7c1      	b.n	800c142 <_strtod_l+0x1a>
 800c1be:	292d      	cmp	r1, #45	@ 0x2d
 800c1c0:	d1ca      	bne.n	800c158 <_strtod_l+0x30>
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c1c6:	1c51      	adds	r1, r2, #1
 800c1c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1ca:	7852      	ldrb	r2, [r2, #1]
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	d1c5      	bne.n	800c15c <_strtod_l+0x34>
 800c1d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f040 8570 	bne.w	800ccba <_strtod_l+0xb92>
 800c1da:	4652      	mov	r2, sl
 800c1dc:	465b      	mov	r3, fp
 800c1de:	e7e5      	b.n	800c1ac <_strtod_l+0x84>
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	e7ef      	b.n	800c1c4 <_strtod_l+0x9c>
 800c1e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1e6:	b13a      	cbz	r2, 800c1f8 <_strtod_l+0xd0>
 800c1e8:	2135      	movs	r1, #53	@ 0x35
 800c1ea:	a81c      	add	r0, sp, #112	@ 0x70
 800c1ec:	f7ff ff38 	bl	800c060 <__copybits>
 800c1f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1f2:	9805      	ldr	r0, [sp, #20]
 800c1f4:	f7ff fafc 	bl	800b7f0 <_Bfree>
 800c1f8:	3e01      	subs	r6, #1
 800c1fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c1fc:	2e04      	cmp	r6, #4
 800c1fe:	d806      	bhi.n	800c20e <_strtod_l+0xe6>
 800c200:	e8df f006 	tbb	[pc, r6]
 800c204:	201d0314 	.word	0x201d0314
 800c208:	14          	.byte	0x14
 800c209:	00          	.byte	0x00
 800c20a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c20e:	05e1      	lsls	r1, r4, #23
 800c210:	bf48      	it	mi
 800c212:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c21a:	0d1b      	lsrs	r3, r3, #20
 800c21c:	051b      	lsls	r3, r3, #20
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1bb      	bne.n	800c19a <_strtod_l+0x72>
 800c222:	f7fe fb11 	bl	800a848 <__errno>
 800c226:	2322      	movs	r3, #34	@ 0x22
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	e7b6      	b.n	800c19a <_strtod_l+0x72>
 800c22c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c234:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c238:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c23c:	e7e7      	b.n	800c20e <_strtod_l+0xe6>
 800c23e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c3c0 <_strtod_l+0x298>
 800c242:	e7e4      	b.n	800c20e <_strtod_l+0xe6>
 800c244:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c248:	f04f 3aff 	mov.w	sl, #4294967295
 800c24c:	e7df      	b.n	800c20e <_strtod_l+0xe6>
 800c24e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	9219      	str	r2, [sp, #100]	@ 0x64
 800c254:	785b      	ldrb	r3, [r3, #1]
 800c256:	2b30      	cmp	r3, #48	@ 0x30
 800c258:	d0f9      	beq.n	800c24e <_strtod_l+0x126>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d09d      	beq.n	800c19a <_strtod_l+0x72>
 800c25e:	2301      	movs	r3, #1
 800c260:	9309      	str	r3, [sp, #36]	@ 0x24
 800c262:	220a      	movs	r2, #10
 800c264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c266:	930c      	str	r3, [sp, #48]	@ 0x30
 800c268:	2300      	movs	r3, #0
 800c26a:	461f      	mov	r7, r3
 800c26c:	9308      	str	r3, [sp, #32]
 800c26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c270:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c272:	7805      	ldrb	r5, [r0, #0]
 800c274:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c278:	b2d9      	uxtb	r1, r3
 800c27a:	2909      	cmp	r1, #9
 800c27c:	d928      	bls.n	800c2d0 <_strtod_l+0x1a8>
 800c27e:	2201      	movs	r2, #1
 800c280:	494e      	ldr	r1, [pc, #312]	@ (800c3bc <_strtod_l+0x294>)
 800c282:	f001 f9ab 	bl	800d5dc <strncmp>
 800c286:	2800      	cmp	r0, #0
 800c288:	d033      	beq.n	800c2f2 <_strtod_l+0x1ca>
 800c28a:	2000      	movs	r0, #0
 800c28c:	462a      	mov	r2, r5
 800c28e:	463d      	mov	r5, r7
 800c290:	4681      	mov	r9, r0
 800c292:	4603      	mov	r3, r0
 800c294:	2a65      	cmp	r2, #101	@ 0x65
 800c296:	d001      	beq.n	800c29c <_strtod_l+0x174>
 800c298:	2a45      	cmp	r2, #69	@ 0x45
 800c29a:	d114      	bne.n	800c2c6 <_strtod_l+0x19e>
 800c29c:	b91d      	cbnz	r5, 800c2a6 <_strtod_l+0x17e>
 800c29e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2a0:	4302      	orrs	r2, r0
 800c2a2:	d095      	beq.n	800c1d0 <_strtod_l+0xa8>
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c2a8:	1c62      	adds	r2, r4, #1
 800c2aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2ac:	7862      	ldrb	r2, [r4, #1]
 800c2ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800c2b0:	d078      	beq.n	800c3a4 <_strtod_l+0x27c>
 800c2b2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c2b4:	d07c      	beq.n	800c3b0 <_strtod_l+0x288>
 800c2b6:	f04f 0c00 	mov.w	ip, #0
 800c2ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c2be:	2909      	cmp	r1, #9
 800c2c0:	f240 8084 	bls.w	800c3cc <_strtod_l+0x2a4>
 800c2c4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	e0a4      	b.n	800c416 <_strtod_l+0x2ee>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	e7c7      	b.n	800c260 <_strtod_l+0x138>
 800c2d0:	2f08      	cmp	r7, #8
 800c2d2:	f100 0001 	add.w	r0, r0, #1
 800c2d6:	f107 0701 	add.w	r7, r7, #1
 800c2da:	bfd5      	itete	le
 800c2dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c2de:	9908      	ldrgt	r1, [sp, #32]
 800c2e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c2e8:	bfd4      	ite	le
 800c2ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c2ec:	9308      	strgt	r3, [sp, #32]
 800c2ee:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2f0:	e7be      	b.n	800c270 <_strtod_l+0x148>
 800c2f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2f4:	1c5a      	adds	r2, r3, #1
 800c2f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2f8:	785a      	ldrb	r2, [r3, #1]
 800c2fa:	b37f      	cbz	r7, 800c35c <_strtod_l+0x234>
 800c2fc:	4681      	mov	r9, r0
 800c2fe:	463d      	mov	r5, r7
 800c300:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c304:	2b09      	cmp	r3, #9
 800c306:	d912      	bls.n	800c32e <_strtod_l+0x206>
 800c308:	2301      	movs	r3, #1
 800c30a:	e7c3      	b.n	800c294 <_strtod_l+0x16c>
 800c30c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c30e:	3001      	adds	r0, #1
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	9219      	str	r2, [sp, #100]	@ 0x64
 800c314:	785a      	ldrb	r2, [r3, #1]
 800c316:	2a30      	cmp	r2, #48	@ 0x30
 800c318:	d0f8      	beq.n	800c30c <_strtod_l+0x1e4>
 800c31a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c31e:	2b08      	cmp	r3, #8
 800c320:	f200 84d2 	bhi.w	800ccc8 <_strtod_l+0xba0>
 800c324:	4681      	mov	r9, r0
 800c326:	2000      	movs	r0, #0
 800c328:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c32a:	4605      	mov	r5, r0
 800c32c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c32e:	3a30      	subs	r2, #48	@ 0x30
 800c330:	f100 0301 	add.w	r3, r0, #1
 800c334:	d02a      	beq.n	800c38c <_strtod_l+0x264>
 800c336:	4499      	add	r9, r3
 800c338:	eb00 0c05 	add.w	ip, r0, r5
 800c33c:	462b      	mov	r3, r5
 800c33e:	210a      	movs	r1, #10
 800c340:	4563      	cmp	r3, ip
 800c342:	d10d      	bne.n	800c360 <_strtod_l+0x238>
 800c344:	1c69      	adds	r1, r5, #1
 800c346:	4401      	add	r1, r0
 800c348:	4428      	add	r0, r5
 800c34a:	2808      	cmp	r0, #8
 800c34c:	dc16      	bgt.n	800c37c <_strtod_l+0x254>
 800c34e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c350:	230a      	movs	r3, #10
 800c352:	fb03 2300 	mla	r3, r3, r0, r2
 800c356:	930a      	str	r3, [sp, #40]	@ 0x28
 800c358:	2300      	movs	r3, #0
 800c35a:	e018      	b.n	800c38e <_strtod_l+0x266>
 800c35c:	4638      	mov	r0, r7
 800c35e:	e7da      	b.n	800c316 <_strtod_l+0x1ee>
 800c360:	2b08      	cmp	r3, #8
 800c362:	f103 0301 	add.w	r3, r3, #1
 800c366:	dc03      	bgt.n	800c370 <_strtod_l+0x248>
 800c368:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c36a:	434e      	muls	r6, r1
 800c36c:	960a      	str	r6, [sp, #40]	@ 0x28
 800c36e:	e7e7      	b.n	800c340 <_strtod_l+0x218>
 800c370:	2b10      	cmp	r3, #16
 800c372:	bfde      	ittt	le
 800c374:	9e08      	ldrle	r6, [sp, #32]
 800c376:	434e      	mulle	r6, r1
 800c378:	9608      	strle	r6, [sp, #32]
 800c37a:	e7e1      	b.n	800c340 <_strtod_l+0x218>
 800c37c:	280f      	cmp	r0, #15
 800c37e:	dceb      	bgt.n	800c358 <_strtod_l+0x230>
 800c380:	9808      	ldr	r0, [sp, #32]
 800c382:	230a      	movs	r3, #10
 800c384:	fb03 2300 	mla	r3, r3, r0, r2
 800c388:	9308      	str	r3, [sp, #32]
 800c38a:	e7e5      	b.n	800c358 <_strtod_l+0x230>
 800c38c:	4629      	mov	r1, r5
 800c38e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c390:	460d      	mov	r5, r1
 800c392:	1c50      	adds	r0, r2, #1
 800c394:	9019      	str	r0, [sp, #100]	@ 0x64
 800c396:	4618      	mov	r0, r3
 800c398:	7852      	ldrb	r2, [r2, #1]
 800c39a:	e7b1      	b.n	800c300 <_strtod_l+0x1d8>
 800c39c:	f04f 0900 	mov.w	r9, #0
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e77c      	b.n	800c29e <_strtod_l+0x176>
 800c3a4:	f04f 0c00 	mov.w	ip, #0
 800c3a8:	1ca2      	adds	r2, r4, #2
 800c3aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3ac:	78a2      	ldrb	r2, [r4, #2]
 800c3ae:	e784      	b.n	800c2ba <_strtod_l+0x192>
 800c3b0:	f04f 0c01 	mov.w	ip, #1
 800c3b4:	e7f8      	b.n	800c3a8 <_strtod_l+0x280>
 800c3b6:	bf00      	nop
 800c3b8:	0800e288 	.word	0x0800e288
 800c3bc:	0800e270 	.word	0x0800e270
 800c3c0:	7ff00000 	.word	0x7ff00000
 800c3c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3c6:	1c51      	adds	r1, r2, #1
 800c3c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c3ca:	7852      	ldrb	r2, [r2, #1]
 800c3cc:	2a30      	cmp	r2, #48	@ 0x30
 800c3ce:	d0f9      	beq.n	800c3c4 <_strtod_l+0x29c>
 800c3d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c3d4:	2908      	cmp	r1, #8
 800c3d6:	f63f af76 	bhi.w	800c2c6 <_strtod_l+0x19e>
 800c3da:	3a30      	subs	r2, #48	@ 0x30
 800c3dc:	f04f 080a 	mov.w	r8, #10
 800c3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c3e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3e8:	1c56      	adds	r6, r2, #1
 800c3ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800c3ec:	7852      	ldrb	r2, [r2, #1]
 800c3ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c3f2:	f1be 0f09 	cmp.w	lr, #9
 800c3f6:	d939      	bls.n	800c46c <_strtod_l+0x344>
 800c3f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3fe:	1a76      	subs	r6, r6, r1
 800c400:	2e08      	cmp	r6, #8
 800c402:	dc03      	bgt.n	800c40c <_strtod_l+0x2e4>
 800c404:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c406:	4588      	cmp	r8, r1
 800c408:	bfa8      	it	ge
 800c40a:	4688      	movge	r8, r1
 800c40c:	f1bc 0f00 	cmp.w	ip, #0
 800c410:	d001      	beq.n	800c416 <_strtod_l+0x2ee>
 800c412:	f1c8 0800 	rsb	r8, r8, #0
 800c416:	2d00      	cmp	r5, #0
 800c418:	d14e      	bne.n	800c4b8 <_strtod_l+0x390>
 800c41a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c41c:	4308      	orrs	r0, r1
 800c41e:	f47f aebc 	bne.w	800c19a <_strtod_l+0x72>
 800c422:	2b00      	cmp	r3, #0
 800c424:	f47f aed4 	bne.w	800c1d0 <_strtod_l+0xa8>
 800c428:	2a69      	cmp	r2, #105	@ 0x69
 800c42a:	d028      	beq.n	800c47e <_strtod_l+0x356>
 800c42c:	dc25      	bgt.n	800c47a <_strtod_l+0x352>
 800c42e:	2a49      	cmp	r2, #73	@ 0x49
 800c430:	d025      	beq.n	800c47e <_strtod_l+0x356>
 800c432:	2a4e      	cmp	r2, #78	@ 0x4e
 800c434:	f47f aecc 	bne.w	800c1d0 <_strtod_l+0xa8>
 800c438:	499b      	ldr	r1, [pc, #620]	@ (800c6a8 <_strtod_l+0x580>)
 800c43a:	a819      	add	r0, sp, #100	@ 0x64
 800c43c:	f001 fbc0 	bl	800dbc0 <__match>
 800c440:	2800      	cmp	r0, #0
 800c442:	f43f aec5 	beq.w	800c1d0 <_strtod_l+0xa8>
 800c446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b28      	cmp	r3, #40	@ 0x28
 800c44c:	d12e      	bne.n	800c4ac <_strtod_l+0x384>
 800c44e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c450:	4996      	ldr	r1, [pc, #600]	@ (800c6ac <_strtod_l+0x584>)
 800c452:	a819      	add	r0, sp, #100	@ 0x64
 800c454:	f001 fbc8 	bl	800dbe8 <__hexnan>
 800c458:	2805      	cmp	r0, #5
 800c45a:	d127      	bne.n	800c4ac <_strtod_l+0x384>
 800c45c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c45e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c462:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c466:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c46a:	e696      	b.n	800c19a <_strtod_l+0x72>
 800c46c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c46e:	fb08 2101 	mla	r1, r8, r1, r2
 800c472:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c476:	920e      	str	r2, [sp, #56]	@ 0x38
 800c478:	e7b5      	b.n	800c3e6 <_strtod_l+0x2be>
 800c47a:	2a6e      	cmp	r2, #110	@ 0x6e
 800c47c:	e7da      	b.n	800c434 <_strtod_l+0x30c>
 800c47e:	498c      	ldr	r1, [pc, #560]	@ (800c6b0 <_strtod_l+0x588>)
 800c480:	a819      	add	r0, sp, #100	@ 0x64
 800c482:	f001 fb9d 	bl	800dbc0 <__match>
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f aea2 	beq.w	800c1d0 <_strtod_l+0xa8>
 800c48c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c48e:	a819      	add	r0, sp, #100	@ 0x64
 800c490:	4988      	ldr	r1, [pc, #544]	@ (800c6b4 <_strtod_l+0x58c>)
 800c492:	3b01      	subs	r3, #1
 800c494:	9319      	str	r3, [sp, #100]	@ 0x64
 800c496:	f001 fb93 	bl	800dbc0 <__match>
 800c49a:	b910      	cbnz	r0, 800c4a2 <_strtod_l+0x37a>
 800c49c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c49e:	3301      	adds	r3, #1
 800c4a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c4a2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c6c4 <_strtod_l+0x59c>
 800c4a6:	f04f 0a00 	mov.w	sl, #0
 800c4aa:	e676      	b.n	800c19a <_strtod_l+0x72>
 800c4ac:	4882      	ldr	r0, [pc, #520]	@ (800c6b8 <_strtod_l+0x590>)
 800c4ae:	f001 f8c7 	bl	800d640 <nan>
 800c4b2:	ec5b ab10 	vmov	sl, fp, d0
 800c4b6:	e670      	b.n	800c19a <_strtod_l+0x72>
 800c4b8:	eba8 0309 	sub.w	r3, r8, r9
 800c4bc:	2f00      	cmp	r7, #0
 800c4be:	bf08      	it	eq
 800c4c0:	462f      	moveq	r7, r5
 800c4c2:	2d10      	cmp	r5, #16
 800c4c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c4c6:	462c      	mov	r4, r5
 800c4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ca:	bfa8      	it	ge
 800c4cc:	2410      	movge	r4, #16
 800c4ce:	f7f4 f82d 	bl	800052c <__aeabi_ui2d>
 800c4d2:	2d09      	cmp	r5, #9
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	468b      	mov	fp, r1
 800c4d8:	dc13      	bgt.n	800c502 <_strtod_l+0x3da>
 800c4da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f43f ae5c 	beq.w	800c19a <_strtod_l+0x72>
 800c4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e4:	dd78      	ble.n	800c5d8 <_strtod_l+0x4b0>
 800c4e6:	2b16      	cmp	r3, #22
 800c4e8:	dc5f      	bgt.n	800c5aa <_strtod_l+0x482>
 800c4ea:	4974      	ldr	r1, [pc, #464]	@ (800c6bc <_strtod_l+0x594>)
 800c4ec:	4652      	mov	r2, sl
 800c4ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4f2:	465b      	mov	r3, fp
 800c4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f8:	f7f4 f892 	bl	8000620 <__aeabi_dmul>
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	468b      	mov	fp, r1
 800c500:	e64b      	b.n	800c19a <_strtod_l+0x72>
 800c502:	4b6e      	ldr	r3, [pc, #440]	@ (800c6bc <_strtod_l+0x594>)
 800c504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c508:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c50c:	f7f4 f888 	bl	8000620 <__aeabi_dmul>
 800c510:	4682      	mov	sl, r0
 800c512:	468b      	mov	fp, r1
 800c514:	9808      	ldr	r0, [sp, #32]
 800c516:	f7f4 f809 	bl	800052c <__aeabi_ui2d>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	4650      	mov	r0, sl
 800c520:	4659      	mov	r1, fp
 800c522:	f7f3 fec7 	bl	80002b4 <__adddf3>
 800c526:	2d0f      	cmp	r5, #15
 800c528:	4682      	mov	sl, r0
 800c52a:	468b      	mov	fp, r1
 800c52c:	ddd5      	ble.n	800c4da <_strtod_l+0x3b2>
 800c52e:	1b2c      	subs	r4, r5, r4
 800c530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c532:	441c      	add	r4, r3
 800c534:	2c00      	cmp	r4, #0
 800c536:	f340 8096 	ble.w	800c666 <_strtod_l+0x53e>
 800c53a:	f014 030f 	ands.w	r3, r4, #15
 800c53e:	d00a      	beq.n	800c556 <_strtod_l+0x42e>
 800c540:	495e      	ldr	r1, [pc, #376]	@ (800c6bc <_strtod_l+0x594>)
 800c542:	4652      	mov	r2, sl
 800c544:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c548:	465b      	mov	r3, fp
 800c54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c54e:	f7f4 f867 	bl	8000620 <__aeabi_dmul>
 800c552:	4682      	mov	sl, r0
 800c554:	468b      	mov	fp, r1
 800c556:	f034 040f 	bics.w	r4, r4, #15
 800c55a:	d073      	beq.n	800c644 <_strtod_l+0x51c>
 800c55c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c560:	dd48      	ble.n	800c5f4 <_strtod_l+0x4cc>
 800c562:	2400      	movs	r4, #0
 800c564:	46a0      	mov	r8, r4
 800c566:	46a1      	mov	r9, r4
 800c568:	940a      	str	r4, [sp, #40]	@ 0x28
 800c56a:	2322      	movs	r3, #34	@ 0x22
 800c56c:	9a05      	ldr	r2, [sp, #20]
 800c56e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c6c4 <_strtod_l+0x59c>
 800c572:	f04f 0a00 	mov.w	sl, #0
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f43f ae0d 	beq.w	800c19a <_strtod_l+0x72>
 800c580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c582:	9805      	ldr	r0, [sp, #20]
 800c584:	f7ff f934 	bl	800b7f0 <_Bfree>
 800c588:	4649      	mov	r1, r9
 800c58a:	9805      	ldr	r0, [sp, #20]
 800c58c:	f7ff f930 	bl	800b7f0 <_Bfree>
 800c590:	4641      	mov	r1, r8
 800c592:	9805      	ldr	r0, [sp, #20]
 800c594:	f7ff f92c 	bl	800b7f0 <_Bfree>
 800c598:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c59a:	9805      	ldr	r0, [sp, #20]
 800c59c:	f7ff f928 	bl	800b7f0 <_Bfree>
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	9805      	ldr	r0, [sp, #20]
 800c5a4:	f7ff f924 	bl	800b7f0 <_Bfree>
 800c5a8:	e5f7      	b.n	800c19a <_strtod_l+0x72>
 800c5aa:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c5ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	dbbc      	blt.n	800c52e <_strtod_l+0x406>
 800c5b4:	f1c5 050f 	rsb	r5, r5, #15
 800c5b8:	4c40      	ldr	r4, [pc, #256]	@ (800c6bc <_strtod_l+0x594>)
 800c5ba:	4652      	mov	r2, sl
 800c5bc:	465b      	mov	r3, fp
 800c5be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c6:	f7f4 f82b 	bl	8000620 <__aeabi_dmul>
 800c5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5cc:	1b5d      	subs	r5, r3, r5
 800c5ce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c5d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c5d6:	e78f      	b.n	800c4f8 <_strtod_l+0x3d0>
 800c5d8:	3316      	adds	r3, #22
 800c5da:	dba8      	blt.n	800c52e <_strtod_l+0x406>
 800c5dc:	eba9 0808 	sub.w	r8, r9, r8
 800c5e0:	4b36      	ldr	r3, [pc, #216]	@ (800c6bc <_strtod_l+0x594>)
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	4659      	mov	r1, fp
 800c5e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c5ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5ee:	f7f4 f941 	bl	8000874 <__aeabi_ddiv>
 800c5f2:	e783      	b.n	800c4fc <_strtod_l+0x3d4>
 800c5f4:	4b32      	ldr	r3, [pc, #200]	@ (800c6c0 <_strtod_l+0x598>)
 800c5f6:	1124      	asrs	r4, r4, #4
 800c5f8:	4650      	mov	r0, sl
 800c5fa:	4659      	mov	r1, fp
 800c5fc:	9308      	str	r3, [sp, #32]
 800c5fe:	2300      	movs	r3, #0
 800c600:	461e      	mov	r6, r3
 800c602:	2c01      	cmp	r4, #1
 800c604:	dc21      	bgt.n	800c64a <_strtod_l+0x522>
 800c606:	b10b      	cbz	r3, 800c60c <_strtod_l+0x4e4>
 800c608:	4682      	mov	sl, r0
 800c60a:	468b      	mov	fp, r1
 800c60c:	492c      	ldr	r1, [pc, #176]	@ (800c6c0 <_strtod_l+0x598>)
 800c60e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c612:	4652      	mov	r2, sl
 800c614:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c618:	465b      	mov	r3, fp
 800c61a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61e:	f7f3 ffff 	bl	8000620 <__aeabi_dmul>
 800c622:	4b28      	ldr	r3, [pc, #160]	@ (800c6c4 <_strtod_l+0x59c>)
 800c624:	460a      	mov	r2, r1
 800c626:	4682      	mov	sl, r0
 800c628:	400b      	ands	r3, r1
 800c62a:	4927      	ldr	r1, [pc, #156]	@ (800c6c8 <_strtod_l+0x5a0>)
 800c62c:	428b      	cmp	r3, r1
 800c62e:	d898      	bhi.n	800c562 <_strtod_l+0x43a>
 800c630:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c634:	428b      	cmp	r3, r1
 800c636:	bf86      	itte	hi
 800c638:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c6cc <_strtod_l+0x5a4>
 800c63c:	f04f 3aff 	movhi.w	sl, #4294967295
 800c640:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c644:	2300      	movs	r3, #0
 800c646:	9308      	str	r3, [sp, #32]
 800c648:	e07a      	b.n	800c740 <_strtod_l+0x618>
 800c64a:	07e2      	lsls	r2, r4, #31
 800c64c:	d505      	bpl.n	800c65a <_strtod_l+0x532>
 800c64e:	9b08      	ldr	r3, [sp, #32]
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	f7f3 ffe4 	bl	8000620 <__aeabi_dmul>
 800c658:	2301      	movs	r3, #1
 800c65a:	9a08      	ldr	r2, [sp, #32]
 800c65c:	3601      	adds	r6, #1
 800c65e:	1064      	asrs	r4, r4, #1
 800c660:	3208      	adds	r2, #8
 800c662:	9208      	str	r2, [sp, #32]
 800c664:	e7cd      	b.n	800c602 <_strtod_l+0x4da>
 800c666:	d0ed      	beq.n	800c644 <_strtod_l+0x51c>
 800c668:	4264      	negs	r4, r4
 800c66a:	f014 020f 	ands.w	r2, r4, #15
 800c66e:	d00a      	beq.n	800c686 <_strtod_l+0x55e>
 800c670:	4b12      	ldr	r3, [pc, #72]	@ (800c6bc <_strtod_l+0x594>)
 800c672:	4650      	mov	r0, sl
 800c674:	4659      	mov	r1, fp
 800c676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	f7f4 f8f9 	bl	8000874 <__aeabi_ddiv>
 800c682:	4682      	mov	sl, r0
 800c684:	468b      	mov	fp, r1
 800c686:	1124      	asrs	r4, r4, #4
 800c688:	d0dc      	beq.n	800c644 <_strtod_l+0x51c>
 800c68a:	2c1f      	cmp	r4, #31
 800c68c:	dd20      	ble.n	800c6d0 <_strtod_l+0x5a8>
 800c68e:	2400      	movs	r4, #0
 800c690:	46a0      	mov	r8, r4
 800c692:	46a1      	mov	r9, r4
 800c694:	940a      	str	r4, [sp, #40]	@ 0x28
 800c696:	2322      	movs	r3, #34	@ 0x22
 800c698:	9a05      	ldr	r2, [sp, #20]
 800c69a:	f04f 0a00 	mov.w	sl, #0
 800c69e:	f04f 0b00 	mov.w	fp, #0
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	e768      	b.n	800c578 <_strtod_l+0x450>
 800c6a6:	bf00      	nop
 800c6a8:	0800e05d 	.word	0x0800e05d
 800c6ac:	0800e274 	.word	0x0800e274
 800c6b0:	0800e055 	.word	0x0800e055
 800c6b4:	0800e08c 	.word	0x0800e08c
 800c6b8:	0800e41d 	.word	0x0800e41d
 800c6bc:	0800e1a8 	.word	0x0800e1a8
 800c6c0:	0800e180 	.word	0x0800e180
 800c6c4:	7ff00000 	.word	0x7ff00000
 800c6c8:	7ca00000 	.word	0x7ca00000
 800c6cc:	7fefffff 	.word	0x7fefffff
 800c6d0:	f014 0310 	ands.w	r3, r4, #16
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	4659      	mov	r1, fp
 800c6d8:	4ea9      	ldr	r6, [pc, #676]	@ (800c980 <_strtod_l+0x858>)
 800c6da:	bf18      	it	ne
 800c6dc:	236a      	movne	r3, #106	@ 0x6a
 800c6de:	9308      	str	r3, [sp, #32]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	07e2      	lsls	r2, r4, #31
 800c6e4:	d504      	bpl.n	800c6f0 <_strtod_l+0x5c8>
 800c6e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6ea:	f7f3 ff99 	bl	8000620 <__aeabi_dmul>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	1064      	asrs	r4, r4, #1
 800c6f2:	f106 0608 	add.w	r6, r6, #8
 800c6f6:	d1f4      	bne.n	800c6e2 <_strtod_l+0x5ba>
 800c6f8:	b10b      	cbz	r3, 800c6fe <_strtod_l+0x5d6>
 800c6fa:	4682      	mov	sl, r0
 800c6fc:	468b      	mov	fp, r1
 800c6fe:	9b08      	ldr	r3, [sp, #32]
 800c700:	b1b3      	cbz	r3, 800c730 <_strtod_l+0x608>
 800c702:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c706:	4659      	mov	r1, fp
 800c708:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dd0f      	ble.n	800c730 <_strtod_l+0x608>
 800c710:	2b1f      	cmp	r3, #31
 800c712:	dd55      	ble.n	800c7c0 <_strtod_l+0x698>
 800c714:	2b34      	cmp	r3, #52	@ 0x34
 800c716:	f04f 0a00 	mov.w	sl, #0
 800c71a:	bfdb      	ittet	le
 800c71c:	f04f 33ff 	movle.w	r3, #4294967295
 800c720:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c724:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c728:	4093      	lslle	r3, r2
 800c72a:	bfd8      	it	le
 800c72c:	ea03 0b01 	andle.w	fp, r3, r1
 800c730:	2200      	movs	r2, #0
 800c732:	2300      	movs	r3, #0
 800c734:	4650      	mov	r0, sl
 800c736:	4659      	mov	r1, fp
 800c738:	f7f4 f9da 	bl	8000af0 <__aeabi_dcmpeq>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d1a6      	bne.n	800c68e <_strtod_l+0x566>
 800c740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c742:	463a      	mov	r2, r7
 800c744:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	462b      	mov	r3, r5
 800c74a:	9805      	ldr	r0, [sp, #20]
 800c74c:	f7ff f8ba 	bl	800b8c4 <__s2b>
 800c750:	900a      	str	r0, [sp, #40]	@ 0x28
 800c752:	2800      	cmp	r0, #0
 800c754:	f43f af05 	beq.w	800c562 <_strtod_l+0x43a>
 800c758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c75a:	eba9 0308 	sub.w	r3, r9, r8
 800c75e:	2400      	movs	r4, #0
 800c760:	2a00      	cmp	r2, #0
 800c762:	46a0      	mov	r8, r4
 800c764:	bfa8      	it	ge
 800c766:	2300      	movge	r3, #0
 800c768:	9312      	str	r3, [sp, #72]	@ 0x48
 800c76a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c76e:	9316      	str	r3, [sp, #88]	@ 0x58
 800c770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c772:	9805      	ldr	r0, [sp, #20]
 800c774:	6859      	ldr	r1, [r3, #4]
 800c776:	f7fe fffb 	bl	800b770 <_Balloc>
 800c77a:	4681      	mov	r9, r0
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f43f aef4 	beq.w	800c56a <_strtod_l+0x442>
 800c782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c784:	300c      	adds	r0, #12
 800c786:	691a      	ldr	r2, [r3, #16]
 800c788:	f103 010c 	add.w	r1, r3, #12
 800c78c:	3202      	adds	r2, #2
 800c78e:	0092      	lsls	r2, r2, #2
 800c790:	f000 ff46 	bl	800d620 <memcpy>
 800c794:	aa1c      	add	r2, sp, #112	@ 0x70
 800c796:	a91b      	add	r1, sp, #108	@ 0x6c
 800c798:	9805      	ldr	r0, [sp, #20]
 800c79a:	ec4b ab10 	vmov	d0, sl, fp
 800c79e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c7a2:	f7ff fbd3 	bl	800bf4c <__d2b>
 800c7a6:	901a      	str	r0, [sp, #104]	@ 0x68
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	f43f aede 	beq.w	800c56a <_strtod_l+0x442>
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	9805      	ldr	r0, [sp, #20]
 800c7b2:	f7ff f91d 	bl	800b9f0 <__i2b>
 800c7b6:	4680      	mov	r8, r0
 800c7b8:	b948      	cbnz	r0, 800c7ce <_strtod_l+0x6a6>
 800c7ba:	f04f 0800 	mov.w	r8, #0
 800c7be:	e6d4      	b.n	800c56a <_strtod_l+0x442>
 800c7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c8:	ea03 0a0a 	and.w	sl, r3, sl
 800c7cc:	e7b0      	b.n	800c730 <_strtod_l+0x608>
 800c7ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c7d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c7d2:	2d00      	cmp	r5, #0
 800c7d4:	bfa9      	itett	ge
 800c7d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c7d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c7da:	18ef      	addge	r7, r5, r3
 800c7dc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c7de:	bfb8      	it	lt
 800c7e0:	1b5e      	sublt	r6, r3, r5
 800c7e2:	9b08      	ldr	r3, [sp, #32]
 800c7e4:	bfb8      	it	lt
 800c7e6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c7e8:	1aed      	subs	r5, r5, r3
 800c7ea:	4b66      	ldr	r3, [pc, #408]	@ (800c984 <_strtod_l+0x85c>)
 800c7ec:	4415      	add	r5, r2
 800c7ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c7f2:	3d01      	subs	r5, #1
 800c7f4:	429d      	cmp	r5, r3
 800c7f6:	da4f      	bge.n	800c898 <_strtod_l+0x770>
 800c7f8:	1b5b      	subs	r3, r3, r5
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	2b1f      	cmp	r3, #31
 800c7fe:	eba2 0203 	sub.w	r2, r2, r3
 800c802:	dc3d      	bgt.n	800c880 <_strtod_l+0x758>
 800c804:	fa01 f303 	lsl.w	r3, r1, r3
 800c808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c80a:	2300      	movs	r3, #0
 800c80c:	9310      	str	r3, [sp, #64]	@ 0x40
 800c80e:	18bd      	adds	r5, r7, r2
 800c810:	9b08      	ldr	r3, [sp, #32]
 800c812:	4416      	add	r6, r2
 800c814:	42af      	cmp	r7, r5
 800c816:	441e      	add	r6, r3
 800c818:	463b      	mov	r3, r7
 800c81a:	bfa8      	it	ge
 800c81c:	462b      	movge	r3, r5
 800c81e:	42b3      	cmp	r3, r6
 800c820:	bfa8      	it	ge
 800c822:	4633      	movge	r3, r6
 800c824:	2b00      	cmp	r3, #0
 800c826:	bfc2      	ittt	gt
 800c828:	1aed      	subgt	r5, r5, r3
 800c82a:	1af6      	subgt	r6, r6, r3
 800c82c:	1aff      	subgt	r7, r7, r3
 800c82e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c830:	2b00      	cmp	r3, #0
 800c832:	dd16      	ble.n	800c862 <_strtod_l+0x73a>
 800c834:	4641      	mov	r1, r8
 800c836:	461a      	mov	r2, r3
 800c838:	9805      	ldr	r0, [sp, #20]
 800c83a:	f7ff f999 	bl	800bb70 <__pow5mult>
 800c83e:	4680      	mov	r8, r0
 800c840:	2800      	cmp	r0, #0
 800c842:	d0ba      	beq.n	800c7ba <_strtod_l+0x692>
 800c844:	4601      	mov	r1, r0
 800c846:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c848:	9805      	ldr	r0, [sp, #20]
 800c84a:	f7ff f8e7 	bl	800ba1c <__multiply>
 800c84e:	900e      	str	r0, [sp, #56]	@ 0x38
 800c850:	2800      	cmp	r0, #0
 800c852:	f43f ae8a 	beq.w	800c56a <_strtod_l+0x442>
 800c856:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c858:	9805      	ldr	r0, [sp, #20]
 800c85a:	f7fe ffc9 	bl	800b7f0 <_Bfree>
 800c85e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c860:	931a      	str	r3, [sp, #104]	@ 0x68
 800c862:	2d00      	cmp	r5, #0
 800c864:	dc1d      	bgt.n	800c8a2 <_strtod_l+0x77a>
 800c866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dd23      	ble.n	800c8b4 <_strtod_l+0x78c>
 800c86c:	4649      	mov	r1, r9
 800c86e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c870:	9805      	ldr	r0, [sp, #20]
 800c872:	f7ff f97d 	bl	800bb70 <__pow5mult>
 800c876:	4681      	mov	r9, r0
 800c878:	b9e0      	cbnz	r0, 800c8b4 <_strtod_l+0x78c>
 800c87a:	f04f 0900 	mov.w	r9, #0
 800c87e:	e674      	b.n	800c56a <_strtod_l+0x442>
 800c880:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c884:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c886:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c88a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c88e:	35e2      	adds	r5, #226	@ 0xe2
 800c890:	fa01 f305 	lsl.w	r3, r1, r5
 800c894:	9310      	str	r3, [sp, #64]	@ 0x40
 800c896:	e7ba      	b.n	800c80e <_strtod_l+0x6e6>
 800c898:	2300      	movs	r3, #0
 800c89a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c89c:	2301      	movs	r3, #1
 800c89e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8a0:	e7b5      	b.n	800c80e <_strtod_l+0x6e6>
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8a6:	9805      	ldr	r0, [sp, #20]
 800c8a8:	f7ff f9bc 	bl	800bc24 <__lshift>
 800c8ac:	901a      	str	r0, [sp, #104]	@ 0x68
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d1d9      	bne.n	800c866 <_strtod_l+0x73e>
 800c8b2:	e65a      	b.n	800c56a <_strtod_l+0x442>
 800c8b4:	2e00      	cmp	r6, #0
 800c8b6:	dd07      	ble.n	800c8c8 <_strtod_l+0x7a0>
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	9805      	ldr	r0, [sp, #20]
 800c8be:	f7ff f9b1 	bl	800bc24 <__lshift>
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d0d8      	beq.n	800c87a <_strtod_l+0x752>
 800c8c8:	2f00      	cmp	r7, #0
 800c8ca:	dd08      	ble.n	800c8de <_strtod_l+0x7b6>
 800c8cc:	4641      	mov	r1, r8
 800c8ce:	463a      	mov	r2, r7
 800c8d0:	9805      	ldr	r0, [sp, #20]
 800c8d2:	f7ff f9a7 	bl	800bc24 <__lshift>
 800c8d6:	4680      	mov	r8, r0
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	f43f ae46 	beq.w	800c56a <_strtod_l+0x442>
 800c8de:	464a      	mov	r2, r9
 800c8e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8e2:	9805      	ldr	r0, [sp, #20]
 800c8e4:	f7ff fa26 	bl	800bd34 <__mdiff>
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	f43f ae3d 	beq.w	800c56a <_strtod_l+0x442>
 800c8f0:	68c3      	ldr	r3, [r0, #12]
 800c8f2:	4641      	mov	r1, r8
 800c8f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60c3      	str	r3, [r0, #12]
 800c8fa:	f7ff f9ff 	bl	800bcfc <__mcmp>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	da46      	bge.n	800c990 <_strtod_l+0x868>
 800c902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c904:	ea53 030a 	orrs.w	r3, r3, sl
 800c908:	d16c      	bne.n	800c9e4 <_strtod_l+0x8bc>
 800c90a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d168      	bne.n	800c9e4 <_strtod_l+0x8bc>
 800c912:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c916:	0d1b      	lsrs	r3, r3, #20
 800c918:	051b      	lsls	r3, r3, #20
 800c91a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c91e:	d961      	bls.n	800c9e4 <_strtod_l+0x8bc>
 800c920:	6963      	ldr	r3, [r4, #20]
 800c922:	b913      	cbnz	r3, 800c92a <_strtod_l+0x802>
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	2b01      	cmp	r3, #1
 800c928:	dd5c      	ble.n	800c9e4 <_strtod_l+0x8bc>
 800c92a:	4621      	mov	r1, r4
 800c92c:	2201      	movs	r2, #1
 800c92e:	9805      	ldr	r0, [sp, #20]
 800c930:	f7ff f978 	bl	800bc24 <__lshift>
 800c934:	4641      	mov	r1, r8
 800c936:	4604      	mov	r4, r0
 800c938:	f7ff f9e0 	bl	800bcfc <__mcmp>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	dd51      	ble.n	800c9e4 <_strtod_l+0x8bc>
 800c940:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c944:	9a08      	ldr	r2, [sp, #32]
 800c946:	0d1b      	lsrs	r3, r3, #20
 800c948:	051b      	lsls	r3, r3, #20
 800c94a:	2a00      	cmp	r2, #0
 800c94c:	d06b      	beq.n	800ca26 <_strtod_l+0x8fe>
 800c94e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c952:	d868      	bhi.n	800ca26 <_strtod_l+0x8fe>
 800c954:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c958:	f67f ae9d 	bls.w	800c696 <_strtod_l+0x56e>
 800c95c:	4b0a      	ldr	r3, [pc, #40]	@ (800c988 <_strtod_l+0x860>)
 800c95e:	4650      	mov	r0, sl
 800c960:	4659      	mov	r1, fp
 800c962:	2200      	movs	r2, #0
 800c964:	f7f3 fe5c 	bl	8000620 <__aeabi_dmul>
 800c968:	4b08      	ldr	r3, [pc, #32]	@ (800c98c <_strtod_l+0x864>)
 800c96a:	4682      	mov	sl, r0
 800c96c:	468b      	mov	fp, r1
 800c96e:	400b      	ands	r3, r1
 800c970:	2b00      	cmp	r3, #0
 800c972:	f47f ae05 	bne.w	800c580 <_strtod_l+0x458>
 800c976:	2322      	movs	r3, #34	@ 0x22
 800c978:	9a05      	ldr	r2, [sp, #20]
 800c97a:	6013      	str	r3, [r2, #0]
 800c97c:	e600      	b.n	800c580 <_strtod_l+0x458>
 800c97e:	bf00      	nop
 800c980:	0800e2a0 	.word	0x0800e2a0
 800c984:	fffffc02 	.word	0xfffffc02
 800c988:	39500000 	.word	0x39500000
 800c98c:	7ff00000 	.word	0x7ff00000
 800c990:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c994:	d165      	bne.n	800ca62 <_strtod_l+0x93a>
 800c996:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c99c:	b35a      	cbz	r2, 800c9f6 <_strtod_l+0x8ce>
 800c99e:	4a9e      	ldr	r2, [pc, #632]	@ (800cc18 <_strtod_l+0xaf0>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d12b      	bne.n	800c9fc <_strtod_l+0x8d4>
 800c9a4:	9b08      	ldr	r3, [sp, #32]
 800c9a6:	4651      	mov	r1, sl
 800c9a8:	b303      	cbz	r3, 800c9ec <_strtod_l+0x8c4>
 800c9aa:	465a      	mov	r2, fp
 800c9ac:	4b9b      	ldr	r3, [pc, #620]	@ (800cc1c <_strtod_l+0xaf4>)
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c9b8:	d81b      	bhi.n	800c9f2 <_strtod_l+0x8ca>
 800c9ba:	0d1b      	lsrs	r3, r3, #20
 800c9bc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c4:	4299      	cmp	r1, r3
 800c9c6:	d119      	bne.n	800c9fc <_strtod_l+0x8d4>
 800c9c8:	4b95      	ldr	r3, [pc, #596]	@ (800cc20 <_strtod_l+0xaf8>)
 800c9ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d102      	bne.n	800c9d6 <_strtod_l+0x8ae>
 800c9d0:	3101      	adds	r1, #1
 800c9d2:	f43f adca 	beq.w	800c56a <_strtod_l+0x442>
 800c9d6:	4b91      	ldr	r3, [pc, #580]	@ (800cc1c <_strtod_l+0xaf4>)
 800c9d8:	f04f 0a00 	mov.w	sl, #0
 800c9dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9de:	401a      	ands	r2, r3
 800c9e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c9e4:	9b08      	ldr	r3, [sp, #32]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1b8      	bne.n	800c95c <_strtod_l+0x834>
 800c9ea:	e5c9      	b.n	800c580 <_strtod_l+0x458>
 800c9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f0:	e7e8      	b.n	800c9c4 <_strtod_l+0x89c>
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	e7e6      	b.n	800c9c4 <_strtod_l+0x89c>
 800c9f6:	ea53 030a 	orrs.w	r3, r3, sl
 800c9fa:	d0a1      	beq.n	800c940 <_strtod_l+0x818>
 800c9fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9fe:	b1db      	cbz	r3, 800ca38 <_strtod_l+0x910>
 800ca00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca02:	4213      	tst	r3, r2
 800ca04:	d0ee      	beq.n	800c9e4 <_strtod_l+0x8bc>
 800ca06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca08:	4650      	mov	r0, sl
 800ca0a:	9a08      	ldr	r2, [sp, #32]
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	b1bb      	cbz	r3, 800ca40 <_strtod_l+0x918>
 800ca10:	f7ff fb6a 	bl	800c0e8 <sulp>
 800ca14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca18:	ec53 2b10 	vmov	r2, r3, d0
 800ca1c:	f7f3 fc4a 	bl	80002b4 <__adddf3>
 800ca20:	4682      	mov	sl, r0
 800ca22:	468b      	mov	fp, r1
 800ca24:	e7de      	b.n	800c9e4 <_strtod_l+0x8bc>
 800ca26:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ca2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ca2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca36:	e7d5      	b.n	800c9e4 <_strtod_l+0x8bc>
 800ca38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca3a:	ea13 0f0a 	tst.w	r3, sl
 800ca3e:	e7e1      	b.n	800ca04 <_strtod_l+0x8dc>
 800ca40:	f7ff fb52 	bl	800c0e8 <sulp>
 800ca44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca48:	ec53 2b10 	vmov	r2, r3, d0
 800ca4c:	f7f3 fc30 	bl	80002b0 <__aeabi_dsub>
 800ca50:	2200      	movs	r2, #0
 800ca52:	2300      	movs	r3, #0
 800ca54:	4682      	mov	sl, r0
 800ca56:	468b      	mov	fp, r1
 800ca58:	f7f4 f84a 	bl	8000af0 <__aeabi_dcmpeq>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d0c1      	beq.n	800c9e4 <_strtod_l+0x8bc>
 800ca60:	e619      	b.n	800c696 <_strtod_l+0x56e>
 800ca62:	4641      	mov	r1, r8
 800ca64:	4620      	mov	r0, r4
 800ca66:	f7ff fac9 	bl	800bffc <__ratio>
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca70:	ec57 6b10 	vmov	r6, r7, d0
 800ca74:	4630      	mov	r0, r6
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f4 f84e 	bl	8000b18 <__aeabi_dcmple>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d06f      	beq.n	800cb60 <_strtod_l+0xa38>
 800ca80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d17a      	bne.n	800cb7c <_strtod_l+0xa54>
 800ca86:	f1ba 0f00 	cmp.w	sl, #0
 800ca8a:	d158      	bne.n	800cb3e <_strtod_l+0xa16>
 800ca8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d15a      	bne.n	800cb4c <_strtod_l+0xa24>
 800ca96:	2200      	movs	r2, #0
 800ca98:	4b62      	ldr	r3, [pc, #392]	@ (800cc24 <_strtod_l+0xafc>)
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	f7f4 f831 	bl	8000b04 <__aeabi_dcmplt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d159      	bne.n	800cb5a <_strtod_l+0xa32>
 800caa6:	4630      	mov	r0, r6
 800caa8:	4639      	mov	r1, r7
 800caaa:	2200      	movs	r2, #0
 800caac:	4b5e      	ldr	r3, [pc, #376]	@ (800cc28 <_strtod_l+0xb00>)
 800caae:	f7f3 fdb7 	bl	8000620 <__aeabi_dmul>
 800cab2:	4606      	mov	r6, r0
 800cab4:	460f      	mov	r7, r1
 800cab6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800caba:	9606      	str	r6, [sp, #24]
 800cabc:	9307      	str	r3, [sp, #28]
 800cabe:	4d57      	ldr	r5, [pc, #348]	@ (800cc1c <_strtod_l+0xaf4>)
 800cac0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cac4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caca:	401d      	ands	r5, r3
 800cacc:	4b57      	ldr	r3, [pc, #348]	@ (800cc2c <_strtod_l+0xb04>)
 800cace:	429d      	cmp	r5, r3
 800cad0:	f040 80b0 	bne.w	800cc34 <_strtod_l+0xb0c>
 800cad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cad6:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cada:	ec4b ab10 	vmov	d0, sl, fp
 800cade:	f7ff f9c1 	bl	800be64 <__ulp>
 800cae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cae6:	ec51 0b10 	vmov	r0, r1, d0
 800caea:	f7f3 fd99 	bl	8000620 <__aeabi_dmul>
 800caee:	4652      	mov	r2, sl
 800caf0:	465b      	mov	r3, fp
 800caf2:	f7f3 fbdf 	bl	80002b4 <__adddf3>
 800caf6:	460b      	mov	r3, r1
 800caf8:	4948      	ldr	r1, [pc, #288]	@ (800cc1c <_strtod_l+0xaf4>)
 800cafa:	4682      	mov	sl, r0
 800cafc:	4a4c      	ldr	r2, [pc, #304]	@ (800cc30 <_strtod_l+0xb08>)
 800cafe:	4019      	ands	r1, r3
 800cb00:	4291      	cmp	r1, r2
 800cb02:	d942      	bls.n	800cb8a <_strtod_l+0xa62>
 800cb04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb06:	4b46      	ldr	r3, [pc, #280]	@ (800cc20 <_strtod_l+0xaf8>)
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d103      	bne.n	800cb14 <_strtod_l+0x9ec>
 800cb0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb0e:	3301      	adds	r3, #1
 800cb10:	f43f ad2b 	beq.w	800c56a <_strtod_l+0x442>
 800cb14:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800cc20 <_strtod_l+0xaf8>
 800cb18:	f04f 3aff 	mov.w	sl, #4294967295
 800cb1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb1e:	9805      	ldr	r0, [sp, #20]
 800cb20:	f7fe fe66 	bl	800b7f0 <_Bfree>
 800cb24:	4649      	mov	r1, r9
 800cb26:	9805      	ldr	r0, [sp, #20]
 800cb28:	f7fe fe62 	bl	800b7f0 <_Bfree>
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	9805      	ldr	r0, [sp, #20]
 800cb30:	f7fe fe5e 	bl	800b7f0 <_Bfree>
 800cb34:	4621      	mov	r1, r4
 800cb36:	9805      	ldr	r0, [sp, #20]
 800cb38:	f7fe fe5a 	bl	800b7f0 <_Bfree>
 800cb3c:	e618      	b.n	800c770 <_strtod_l+0x648>
 800cb3e:	f1ba 0f01 	cmp.w	sl, #1
 800cb42:	d103      	bne.n	800cb4c <_strtod_l+0xa24>
 800cb44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f43f ada5 	beq.w	800c696 <_strtod_l+0x56e>
 800cb4c:	2600      	movs	r6, #0
 800cb4e:	4f35      	ldr	r7, [pc, #212]	@ (800cc24 <_strtod_l+0xafc>)
 800cb50:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800cbf8 <_strtod_l+0xad0>
 800cb54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb58:	e7b1      	b.n	800cabe <_strtod_l+0x996>
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	4f32      	ldr	r7, [pc, #200]	@ (800cc28 <_strtod_l+0xb00>)
 800cb5e:	e7aa      	b.n	800cab6 <_strtod_l+0x98e>
 800cb60:	4b31      	ldr	r3, [pc, #196]	@ (800cc28 <_strtod_l+0xb00>)
 800cb62:	4630      	mov	r0, r6
 800cb64:	4639      	mov	r1, r7
 800cb66:	2200      	movs	r2, #0
 800cb68:	f7f3 fd5a 	bl	8000620 <__aeabi_dmul>
 800cb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6e:	4606      	mov	r6, r0
 800cb70:	460f      	mov	r7, r1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d09f      	beq.n	800cab6 <_strtod_l+0x98e>
 800cb76:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb7a:	e7a0      	b.n	800cabe <_strtod_l+0x996>
 800cb7c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800cc00 <_strtod_l+0xad8>
 800cb80:	ec57 6b17 	vmov	r6, r7, d7
 800cb84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb88:	e799      	b.n	800cabe <_strtod_l+0x996>
 800cb8a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1c1      	bne.n	800cb1c <_strtod_l+0x9f4>
 800cb98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb9c:	0d1b      	lsrs	r3, r3, #20
 800cb9e:	051b      	lsls	r3, r3, #20
 800cba0:	429d      	cmp	r5, r3
 800cba2:	d1bb      	bne.n	800cb1c <_strtod_l+0x9f4>
 800cba4:	4630      	mov	r0, r6
 800cba6:	4639      	mov	r1, r7
 800cba8:	f7f4 f89a 	bl	8000ce0 <__aeabi_d2lz>
 800cbac:	f7f3 fd0a 	bl	80005c4 <__aeabi_l2d>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cbbc:	f7f3 fb78 	bl	80002b0 <__aeabi_dsub>
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	ea46 060a 	orr.w	r6, r6, sl
 800cbc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbce:	431e      	orrs	r6, r3
 800cbd0:	d06d      	beq.n	800ccae <_strtod_l+0xb86>
 800cbd2:	a30d      	add	r3, pc, #52	@ (adr r3, 800cc08 <_strtod_l+0xae0>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	f7f3 ff94 	bl	8000b04 <__aeabi_dcmplt>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	f47f accf 	bne.w	800c580 <_strtod_l+0x458>
 800cbe2:	a30b      	add	r3, pc, #44	@ (adr r3, 800cc10 <_strtod_l+0xae8>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbec:	f7f3 ffa8 	bl	8000b40 <__aeabi_dcmpgt>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d093      	beq.n	800cb1c <_strtod_l+0x9f4>
 800cbf4:	e4c4      	b.n	800c580 <_strtod_l+0x458>
 800cbf6:	bf00      	nop
 800cbf8:	00000000 	.word	0x00000000
 800cbfc:	bff00000 	.word	0xbff00000
 800cc00:	00000000 	.word	0x00000000
 800cc04:	3ff00000 	.word	0x3ff00000
 800cc08:	94a03595 	.word	0x94a03595
 800cc0c:	3fdfffff 	.word	0x3fdfffff
 800cc10:	35afe535 	.word	0x35afe535
 800cc14:	3fe00000 	.word	0x3fe00000
 800cc18:	000fffff 	.word	0x000fffff
 800cc1c:	7ff00000 	.word	0x7ff00000
 800cc20:	7fefffff 	.word	0x7fefffff
 800cc24:	3ff00000 	.word	0x3ff00000
 800cc28:	3fe00000 	.word	0x3fe00000
 800cc2c:	7fe00000 	.word	0x7fe00000
 800cc30:	7c9fffff 	.word	0x7c9fffff
 800cc34:	9b08      	ldr	r3, [sp, #32]
 800cc36:	b323      	cbz	r3, 800cc82 <_strtod_l+0xb5a>
 800cc38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cc3c:	d821      	bhi.n	800cc82 <_strtod_l+0xb5a>
 800cc3e:	4630      	mov	r0, r6
 800cc40:	4639      	mov	r1, r7
 800cc42:	a327      	add	r3, pc, #156	@ (adr r3, 800cce0 <_strtod_l+0xbb8>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	f7f3 ff66 	bl	8000b18 <__aeabi_dcmple>
 800cc4c:	b1a0      	cbz	r0, 800cc78 <_strtod_l+0xb50>
 800cc4e:	4639      	mov	r1, r7
 800cc50:	4630      	mov	r0, r6
 800cc52:	f7f3 ffbd 	bl	8000bd0 <__aeabi_d2uiz>
 800cc56:	2801      	cmp	r0, #1
 800cc58:	bf38      	it	cc
 800cc5a:	2001      	movcc	r0, #1
 800cc5c:	f7f3 fc66 	bl	800052c <__aeabi_ui2d>
 800cc60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc62:	4606      	mov	r6, r0
 800cc64:	460f      	mov	r7, r1
 800cc66:	b9fb      	cbnz	r3, 800cca8 <_strtod_l+0xb80>
 800cc68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc7e:	1b5b      	subs	r3, r3, r5
 800cc80:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc82:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc8a:	f7ff f8eb 	bl	800be64 <__ulp>
 800cc8e:	4650      	mov	r0, sl
 800cc90:	4659      	mov	r1, fp
 800cc92:	ec53 2b10 	vmov	r2, r3, d0
 800cc96:	f7f3 fcc3 	bl	8000620 <__aeabi_dmul>
 800cc9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc9e:	f7f3 fb09 	bl	80002b4 <__adddf3>
 800cca2:	4682      	mov	sl, r0
 800cca4:	468b      	mov	fp, r1
 800cca6:	e772      	b.n	800cb8e <_strtod_l+0xa66>
 800cca8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ccac:	e7e0      	b.n	800cc70 <_strtod_l+0xb48>
 800ccae:	a30e      	add	r3, pc, #56	@ (adr r3, 800cce8 <_strtod_l+0xbc0>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 ff26 	bl	8000b04 <__aeabi_dcmplt>
 800ccb8:	e79a      	b.n	800cbf0 <_strtod_l+0xac8>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccc0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ccc2:	6013      	str	r3, [r2, #0]
 800ccc4:	f7ff ba6d 	b.w	800c1a2 <_strtod_l+0x7a>
 800ccc8:	2a65      	cmp	r2, #101	@ 0x65
 800ccca:	f43f ab67 	beq.w	800c39c <_strtod_l+0x274>
 800ccce:	2a45      	cmp	r2, #69	@ 0x45
 800ccd0:	f43f ab64 	beq.w	800c39c <_strtod_l+0x274>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	f7ff bba0 	b.w	800c41a <_strtod_l+0x2f2>
 800ccda:	bf00      	nop
 800ccdc:	f3af 8000 	nop.w
 800cce0:	ffc00000 	.word	0xffc00000
 800cce4:	41dfffff 	.word	0x41dfffff
 800cce8:	94a03595 	.word	0x94a03595
 800ccec:	3fcfffff 	.word	0x3fcfffff

0800ccf0 <_strtod_r>:
 800ccf0:	4b01      	ldr	r3, [pc, #4]	@ (800ccf8 <_strtod_r+0x8>)
 800ccf2:	f7ff ba19 	b.w	800c128 <_strtod_l>
 800ccf6:	bf00      	nop
 800ccf8:	20000068 	.word	0x20000068

0800ccfc <_strtol_l.constprop.0>:
 800ccfc:	2b24      	cmp	r3, #36	@ 0x24
 800ccfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd02:	4686      	mov	lr, r0
 800cd04:	4690      	mov	r8, r2
 800cd06:	d801      	bhi.n	800cd0c <_strtol_l.constprop.0+0x10>
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d106      	bne.n	800cd1a <_strtol_l.constprop.0+0x1e>
 800cd0c:	f7fd fd9c 	bl	800a848 <__errno>
 800cd10:	2316      	movs	r3, #22
 800cd12:	6003      	str	r3, [r0, #0]
 800cd14:	2000      	movs	r0, #0
 800cd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	4833      	ldr	r0, [pc, #204]	@ (800cdec <_strtol_l.constprop.0+0xf0>)
 800cd1e:	462a      	mov	r2, r5
 800cd20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd24:	5d06      	ldrb	r6, [r0, r4]
 800cd26:	f016 0608 	ands.w	r6, r6, #8
 800cd2a:	d1f8      	bne.n	800cd1e <_strtol_l.constprop.0+0x22>
 800cd2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800cd2e:	d12d      	bne.n	800cd8c <_strtol_l.constprop.0+0x90>
 800cd30:	782c      	ldrb	r4, [r5, #0]
 800cd32:	2601      	movs	r6, #1
 800cd34:	1c95      	adds	r5, r2, #2
 800cd36:	f033 0210 	bics.w	r2, r3, #16
 800cd3a:	d109      	bne.n	800cd50 <_strtol_l.constprop.0+0x54>
 800cd3c:	2c30      	cmp	r4, #48	@ 0x30
 800cd3e:	d12a      	bne.n	800cd96 <_strtol_l.constprop.0+0x9a>
 800cd40:	782a      	ldrb	r2, [r5, #0]
 800cd42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd46:	2a58      	cmp	r2, #88	@ 0x58
 800cd48:	d125      	bne.n	800cd96 <_strtol_l.constprop.0+0x9a>
 800cd4a:	786c      	ldrb	r4, [r5, #1]
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	3502      	adds	r5, #2
 800cd50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cd54:	2200      	movs	r2, #0
 800cd56:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd5a:	4610      	mov	r0, r2
 800cd5c:	fbbc f9f3 	udiv	r9, ip, r3
 800cd60:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd68:	2f09      	cmp	r7, #9
 800cd6a:	d81b      	bhi.n	800cda4 <_strtol_l.constprop.0+0xa8>
 800cd6c:	463c      	mov	r4, r7
 800cd6e:	42a3      	cmp	r3, r4
 800cd70:	dd27      	ble.n	800cdc2 <_strtol_l.constprop.0+0xc6>
 800cd72:	1c57      	adds	r7, r2, #1
 800cd74:	d007      	beq.n	800cd86 <_strtol_l.constprop.0+0x8a>
 800cd76:	4581      	cmp	r9, r0
 800cd78:	d320      	bcc.n	800cdbc <_strtol_l.constprop.0+0xc0>
 800cd7a:	d101      	bne.n	800cd80 <_strtol_l.constprop.0+0x84>
 800cd7c:	45a2      	cmp	sl, r4
 800cd7e:	db1d      	blt.n	800cdbc <_strtol_l.constprop.0+0xc0>
 800cd80:	fb00 4003 	mla	r0, r0, r3, r4
 800cd84:	2201      	movs	r2, #1
 800cd86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd8a:	e7eb      	b.n	800cd64 <_strtol_l.constprop.0+0x68>
 800cd8c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd8e:	bf04      	itt	eq
 800cd90:	782c      	ldrbeq	r4, [r5, #0]
 800cd92:	1c95      	addeq	r5, r2, #2
 800cd94:	e7cf      	b.n	800cd36 <_strtol_l.constprop.0+0x3a>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1da      	bne.n	800cd50 <_strtol_l.constprop.0+0x54>
 800cd9a:	2c30      	cmp	r4, #48	@ 0x30
 800cd9c:	bf0c      	ite	eq
 800cd9e:	2308      	moveq	r3, #8
 800cda0:	230a      	movne	r3, #10
 800cda2:	e7d5      	b.n	800cd50 <_strtol_l.constprop.0+0x54>
 800cda4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cda8:	2f19      	cmp	r7, #25
 800cdaa:	d801      	bhi.n	800cdb0 <_strtol_l.constprop.0+0xb4>
 800cdac:	3c37      	subs	r4, #55	@ 0x37
 800cdae:	e7de      	b.n	800cd6e <_strtol_l.constprop.0+0x72>
 800cdb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cdb4:	2f19      	cmp	r7, #25
 800cdb6:	d804      	bhi.n	800cdc2 <_strtol_l.constprop.0+0xc6>
 800cdb8:	3c57      	subs	r4, #87	@ 0x57
 800cdba:	e7d8      	b.n	800cd6e <_strtol_l.constprop.0+0x72>
 800cdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc0:	e7e1      	b.n	800cd86 <_strtol_l.constprop.0+0x8a>
 800cdc2:	1c53      	adds	r3, r2, #1
 800cdc4:	d108      	bne.n	800cdd8 <_strtol_l.constprop.0+0xdc>
 800cdc6:	2322      	movs	r3, #34	@ 0x22
 800cdc8:	4660      	mov	r0, ip
 800cdca:	f8ce 3000 	str.w	r3, [lr]
 800cdce:	f1b8 0f00 	cmp.w	r8, #0
 800cdd2:	d0a0      	beq.n	800cd16 <_strtol_l.constprop.0+0x1a>
 800cdd4:	1e69      	subs	r1, r5, #1
 800cdd6:	e006      	b.n	800cde6 <_strtol_l.constprop.0+0xea>
 800cdd8:	b106      	cbz	r6, 800cddc <_strtol_l.constprop.0+0xe0>
 800cdda:	4240      	negs	r0, r0
 800cddc:	f1b8 0f00 	cmp.w	r8, #0
 800cde0:	d099      	beq.n	800cd16 <_strtol_l.constprop.0+0x1a>
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d1f6      	bne.n	800cdd4 <_strtol_l.constprop.0+0xd8>
 800cde6:	f8c8 1000 	str.w	r1, [r8]
 800cdea:	e794      	b.n	800cd16 <_strtol_l.constprop.0+0x1a>
 800cdec:	0800e2c9 	.word	0x0800e2c9

0800cdf0 <_strtol_r>:
 800cdf0:	f7ff bf84 	b.w	800ccfc <_strtol_l.constprop.0>

0800cdf4 <__ssputs_r>:
 800cdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf8:	461f      	mov	r7, r3
 800cdfa:	688e      	ldr	r6, [r1, #8]
 800cdfc:	4682      	mov	sl, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	42be      	cmp	r6, r7
 800ce02:	4690      	mov	r8, r2
 800ce04:	680b      	ldr	r3, [r1, #0]
 800ce06:	d82d      	bhi.n	800ce64 <__ssputs_r+0x70>
 800ce08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce10:	d026      	beq.n	800ce60 <__ssputs_r+0x6c>
 800ce12:	6965      	ldr	r5, [r4, #20]
 800ce14:	6909      	ldr	r1, [r1, #16]
 800ce16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce1a:	eba3 0901 	sub.w	r9, r3, r1
 800ce1e:	1c7b      	adds	r3, r7, #1
 800ce20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce24:	444b      	add	r3, r9
 800ce26:	106d      	asrs	r5, r5, #1
 800ce28:	429d      	cmp	r5, r3
 800ce2a:	bf38      	it	cc
 800ce2c:	461d      	movcc	r5, r3
 800ce2e:	0553      	lsls	r3, r2, #21
 800ce30:	d527      	bpl.n	800ce82 <__ssputs_r+0x8e>
 800ce32:	4629      	mov	r1, r5
 800ce34:	f7fe fc10 	bl	800b658 <_malloc_r>
 800ce38:	4606      	mov	r6, r0
 800ce3a:	b360      	cbz	r0, 800ce96 <__ssputs_r+0xa2>
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	6921      	ldr	r1, [r4, #16]
 800ce40:	f000 fbee 	bl	800d620 <memcpy>
 800ce44:	89a3      	ldrh	r3, [r4, #12]
 800ce46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	6126      	str	r6, [r4, #16]
 800ce52:	444e      	add	r6, r9
 800ce54:	6165      	str	r5, [r4, #20]
 800ce56:	eba5 0509 	sub.w	r5, r5, r9
 800ce5a:	6026      	str	r6, [r4, #0]
 800ce5c:	463e      	mov	r6, r7
 800ce5e:	60a5      	str	r5, [r4, #8]
 800ce60:	42be      	cmp	r6, r7
 800ce62:	d900      	bls.n	800ce66 <__ssputs_r+0x72>
 800ce64:	463e      	mov	r6, r7
 800ce66:	4632      	mov	r2, r6
 800ce68:	4641      	mov	r1, r8
 800ce6a:	6820      	ldr	r0, [r4, #0]
 800ce6c:	f000 fb9c 	bl	800d5a8 <memmove>
 800ce70:	68a3      	ldr	r3, [r4, #8]
 800ce72:	2000      	movs	r0, #0
 800ce74:	1b9b      	subs	r3, r3, r6
 800ce76:	60a3      	str	r3, [r4, #8]
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	4433      	add	r3, r6
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce82:	462a      	mov	r2, r5
 800ce84:	f000 ff5d 	bl	800dd42 <_realloc_r>
 800ce88:	4606      	mov	r6, r0
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d1e0      	bne.n	800ce50 <__ssputs_r+0x5c>
 800ce8e:	6921      	ldr	r1, [r4, #16]
 800ce90:	4650      	mov	r0, sl
 800ce92:	f7fe fb6d 	bl	800b570 <_free_r>
 800ce96:	230c      	movs	r3, #12
 800ce98:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9c:	f8ca 3000 	str.w	r3, [sl]
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	e7e9      	b.n	800ce7e <__ssputs_r+0x8a>
	...

0800ceac <_svfiprintf_r>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	4698      	mov	r8, r3
 800ceb2:	898b      	ldrh	r3, [r1, #12]
 800ceb4:	b09d      	sub	sp, #116	@ 0x74
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	061b      	lsls	r3, r3, #24
 800ceba:	460d      	mov	r5, r1
 800cebc:	4614      	mov	r4, r2
 800cebe:	d510      	bpl.n	800cee2 <_svfiprintf_r+0x36>
 800cec0:	690b      	ldr	r3, [r1, #16]
 800cec2:	b973      	cbnz	r3, 800cee2 <_svfiprintf_r+0x36>
 800cec4:	2140      	movs	r1, #64	@ 0x40
 800cec6:	f7fe fbc7 	bl	800b658 <_malloc_r>
 800ceca:	6028      	str	r0, [r5, #0]
 800cecc:	6128      	str	r0, [r5, #16]
 800cece:	b930      	cbnz	r0, 800cede <_svfiprintf_r+0x32>
 800ced0:	230c      	movs	r3, #12
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	f04f 30ff 	mov.w	r0, #4294967295
 800ced8:	b01d      	add	sp, #116	@ 0x74
 800ceda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cede:	2340      	movs	r3, #64	@ 0x40
 800cee0:	616b      	str	r3, [r5, #20]
 800cee2:	2300      	movs	r3, #0
 800cee4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cee8:	f04f 0901 	mov.w	r9, #1
 800ceec:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d090 <_svfiprintf_r+0x1e4>
 800cef0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cef2:	2320      	movs	r3, #32
 800cef4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cef8:	2330      	movs	r3, #48	@ 0x30
 800cefa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cefe:	4623      	mov	r3, r4
 800cf00:	469a      	mov	sl, r3
 800cf02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf06:	b10a      	cbz	r2, 800cf0c <_svfiprintf_r+0x60>
 800cf08:	2a25      	cmp	r2, #37	@ 0x25
 800cf0a:	d1f9      	bne.n	800cf00 <_svfiprintf_r+0x54>
 800cf0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf10:	d00b      	beq.n	800cf2a <_svfiprintf_r+0x7e>
 800cf12:	465b      	mov	r3, fp
 800cf14:	4622      	mov	r2, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f7ff ff6b 	bl	800cdf4 <__ssputs_r>
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f000 80a7 	beq.w	800d072 <_svfiprintf_r+0x1c6>
 800cf24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf26:	445a      	add	r2, fp
 800cf28:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 809f 	beq.w	800d072 <_svfiprintf_r+0x1c6>
 800cf34:	2300      	movs	r3, #0
 800cf36:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3a:	f10a 0a01 	add.w	sl, sl, #1
 800cf3e:	9304      	str	r3, [sp, #16]
 800cf40:	9307      	str	r3, [sp, #28]
 800cf42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf46:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4c:	4654      	mov	r4, sl
 800cf4e:	2205      	movs	r2, #5
 800cf50:	484f      	ldr	r0, [pc, #316]	@ (800d090 <_svfiprintf_r+0x1e4>)
 800cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf56:	f7fd fca4 	bl	800a8a2 <memchr>
 800cf5a:	9a04      	ldr	r2, [sp, #16]
 800cf5c:	b9d8      	cbnz	r0, 800cf96 <_svfiprintf_r+0xea>
 800cf5e:	06d0      	lsls	r0, r2, #27
 800cf60:	bf44      	itt	mi
 800cf62:	2320      	movmi	r3, #32
 800cf64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf68:	0711      	lsls	r1, r2, #28
 800cf6a:	bf44      	itt	mi
 800cf6c:	232b      	movmi	r3, #43	@ 0x2b
 800cf6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf72:	f89a 3000 	ldrb.w	r3, [sl]
 800cf76:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf78:	d015      	beq.n	800cfa6 <_svfiprintf_r+0xfa>
 800cf7a:	9a07      	ldr	r2, [sp, #28]
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2000      	movs	r0, #0
 800cf80:	f04f 0c0a 	mov.w	ip, #10
 800cf84:	4621      	mov	r1, r4
 800cf86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf8a:	3b30      	subs	r3, #48	@ 0x30
 800cf8c:	2b09      	cmp	r3, #9
 800cf8e:	d94b      	bls.n	800d028 <_svfiprintf_r+0x17c>
 800cf90:	b1b0      	cbz	r0, 800cfc0 <_svfiprintf_r+0x114>
 800cf92:	9207      	str	r2, [sp, #28]
 800cf94:	e014      	b.n	800cfc0 <_svfiprintf_r+0x114>
 800cf96:	eba0 0308 	sub.w	r3, r0, r8
 800cf9a:	46a2      	mov	sl, r4
 800cf9c:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	9304      	str	r3, [sp, #16]
 800cfa4:	e7d2      	b.n	800cf4c <_svfiprintf_r+0xa0>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	1d19      	adds	r1, r3, #4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	9103      	str	r1, [sp, #12]
 800cfb0:	bfbb      	ittet	lt
 800cfb2:	425b      	neglt	r3, r3
 800cfb4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfb8:	9307      	strge	r3, [sp, #28]
 800cfba:	9307      	strlt	r3, [sp, #28]
 800cfbc:	bfb8      	it	lt
 800cfbe:	9204      	strlt	r2, [sp, #16]
 800cfc0:	7823      	ldrb	r3, [r4, #0]
 800cfc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfc4:	d10a      	bne.n	800cfdc <_svfiprintf_r+0x130>
 800cfc6:	7863      	ldrb	r3, [r4, #1]
 800cfc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfca:	d132      	bne.n	800d032 <_svfiprintf_r+0x186>
 800cfcc:	9b03      	ldr	r3, [sp, #12]
 800cfce:	3402      	adds	r4, #2
 800cfd0:	1d1a      	adds	r2, r3, #4
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfd8:	9203      	str	r2, [sp, #12]
 800cfda:	9305      	str	r3, [sp, #20]
 800cfdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0a0 <_svfiprintf_r+0x1f4>
 800cfe0:	2203      	movs	r2, #3
 800cfe2:	7821      	ldrb	r1, [r4, #0]
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	f7fd fc5c 	bl	800a8a2 <memchr>
 800cfea:	b138      	cbz	r0, 800cffc <_svfiprintf_r+0x150>
 800cfec:	eba0 000a 	sub.w	r0, r0, sl
 800cff0:	2240      	movs	r2, #64	@ 0x40
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	3401      	adds	r4, #1
 800cff6:	4082      	lsls	r2, r0
 800cff8:	4313      	orrs	r3, r2
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d000:	2206      	movs	r2, #6
 800d002:	4824      	ldr	r0, [pc, #144]	@ (800d094 <_svfiprintf_r+0x1e8>)
 800d004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d008:	f7fd fc4b 	bl	800a8a2 <memchr>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d036      	beq.n	800d07e <_svfiprintf_r+0x1d2>
 800d010:	4b21      	ldr	r3, [pc, #132]	@ (800d098 <_svfiprintf_r+0x1ec>)
 800d012:	bb1b      	cbnz	r3, 800d05c <_svfiprintf_r+0x1b0>
 800d014:	9b03      	ldr	r3, [sp, #12]
 800d016:	3307      	adds	r3, #7
 800d018:	f023 0307 	bic.w	r3, r3, #7
 800d01c:	3308      	adds	r3, #8
 800d01e:	9303      	str	r3, [sp, #12]
 800d020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d022:	4433      	add	r3, r6
 800d024:	9309      	str	r3, [sp, #36]	@ 0x24
 800d026:	e76a      	b.n	800cefe <_svfiprintf_r+0x52>
 800d028:	fb0c 3202 	mla	r2, ip, r2, r3
 800d02c:	460c      	mov	r4, r1
 800d02e:	2001      	movs	r0, #1
 800d030:	e7a8      	b.n	800cf84 <_svfiprintf_r+0xd8>
 800d032:	2300      	movs	r3, #0
 800d034:	3401      	adds	r4, #1
 800d036:	f04f 0c0a 	mov.w	ip, #10
 800d03a:	4619      	mov	r1, r3
 800d03c:	9305      	str	r3, [sp, #20]
 800d03e:	4620      	mov	r0, r4
 800d040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d044:	3a30      	subs	r2, #48	@ 0x30
 800d046:	2a09      	cmp	r2, #9
 800d048:	d903      	bls.n	800d052 <_svfiprintf_r+0x1a6>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0c6      	beq.n	800cfdc <_svfiprintf_r+0x130>
 800d04e:	9105      	str	r1, [sp, #20]
 800d050:	e7c4      	b.n	800cfdc <_svfiprintf_r+0x130>
 800d052:	fb0c 2101 	mla	r1, ip, r1, r2
 800d056:	4604      	mov	r4, r0
 800d058:	2301      	movs	r3, #1
 800d05a:	e7f0      	b.n	800d03e <_svfiprintf_r+0x192>
 800d05c:	ab03      	add	r3, sp, #12
 800d05e:	462a      	mov	r2, r5
 800d060:	a904      	add	r1, sp, #16
 800d062:	4638      	mov	r0, r7
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	4b0d      	ldr	r3, [pc, #52]	@ (800d09c <_svfiprintf_r+0x1f0>)
 800d068:	f7fc fc96 	bl	8009998 <_printf_float>
 800d06c:	1c42      	adds	r2, r0, #1
 800d06e:	4606      	mov	r6, r0
 800d070:	d1d6      	bne.n	800d020 <_svfiprintf_r+0x174>
 800d072:	89ab      	ldrh	r3, [r5, #12]
 800d074:	065b      	lsls	r3, r3, #25
 800d076:	f53f af2d 	bmi.w	800ced4 <_svfiprintf_r+0x28>
 800d07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d07c:	e72c      	b.n	800ced8 <_svfiprintf_r+0x2c>
 800d07e:	ab03      	add	r3, sp, #12
 800d080:	462a      	mov	r2, r5
 800d082:	a904      	add	r1, sp, #16
 800d084:	4638      	mov	r0, r7
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	4b04      	ldr	r3, [pc, #16]	@ (800d09c <_svfiprintf_r+0x1f0>)
 800d08a:	f7fc ff21 	bl	8009ed0 <_printf_i>
 800d08e:	e7ed      	b.n	800d06c <_svfiprintf_r+0x1c0>
 800d090:	0800e3c9 	.word	0x0800e3c9
 800d094:	0800e3d3 	.word	0x0800e3d3
 800d098:	08009999 	.word	0x08009999
 800d09c:	0800cdf5 	.word	0x0800cdf5
 800d0a0:	0800e3cf 	.word	0x0800e3cf

0800d0a4 <__sfputc_r>:
 800d0a4:	6893      	ldr	r3, [r2, #8]
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	6093      	str	r3, [r2, #8]
 800d0ac:	b410      	push	{r4}
 800d0ae:	da08      	bge.n	800d0c2 <__sfputc_r+0x1e>
 800d0b0:	6994      	ldr	r4, [r2, #24]
 800d0b2:	42a3      	cmp	r3, r4
 800d0b4:	db01      	blt.n	800d0ba <__sfputc_r+0x16>
 800d0b6:	290a      	cmp	r1, #10
 800d0b8:	d103      	bne.n	800d0c2 <__sfputc_r+0x1e>
 800d0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0be:	f000 b9df 	b.w	800d480 <__swbuf_r>
 800d0c2:	6813      	ldr	r3, [r2, #0]
 800d0c4:	1c58      	adds	r0, r3, #1
 800d0c6:	6010      	str	r0, [r2, #0]
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	7019      	strb	r1, [r3, #0]
 800d0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <__sfputs_r>:
 800d0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	460f      	mov	r7, r1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	18d5      	adds	r5, r2, r3
 800d0dc:	42ac      	cmp	r4, r5
 800d0de:	d101      	bne.n	800d0e4 <__sfputs_r+0x12>
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e007      	b.n	800d0f4 <__sfputs_r+0x22>
 800d0e4:	463a      	mov	r2, r7
 800d0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7ff ffda 	bl	800d0a4 <__sfputc_r>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d1f3      	bne.n	800d0dc <__sfputs_r+0xa>
 800d0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0f8 <_vfiprintf_r>:
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	460d      	mov	r5, r1
 800d0fe:	b09d      	sub	sp, #116	@ 0x74
 800d100:	4614      	mov	r4, r2
 800d102:	4698      	mov	r8, r3
 800d104:	4606      	mov	r6, r0
 800d106:	b118      	cbz	r0, 800d110 <_vfiprintf_r+0x18>
 800d108:	6a03      	ldr	r3, [r0, #32]
 800d10a:	b90b      	cbnz	r3, 800d110 <_vfiprintf_r+0x18>
 800d10c:	f7fd fa9e 	bl	800a64c <__sinit>
 800d110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d112:	07d9      	lsls	r1, r3, #31
 800d114:	d405      	bmi.n	800d122 <_vfiprintf_r+0x2a>
 800d116:	89ab      	ldrh	r3, [r5, #12]
 800d118:	059a      	lsls	r2, r3, #22
 800d11a:	d402      	bmi.n	800d122 <_vfiprintf_r+0x2a>
 800d11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d11e:	f7fd fbbe 	bl	800a89e <__retarget_lock_acquire_recursive>
 800d122:	89ab      	ldrh	r3, [r5, #12]
 800d124:	071b      	lsls	r3, r3, #28
 800d126:	d501      	bpl.n	800d12c <_vfiprintf_r+0x34>
 800d128:	692b      	ldr	r3, [r5, #16]
 800d12a:	b99b      	cbnz	r3, 800d154 <_vfiprintf_r+0x5c>
 800d12c:	4629      	mov	r1, r5
 800d12e:	4630      	mov	r0, r6
 800d130:	f000 f9e4 	bl	800d4fc <__swsetup_r>
 800d134:	b170      	cbz	r0, 800d154 <_vfiprintf_r+0x5c>
 800d136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d138:	07dc      	lsls	r4, r3, #31
 800d13a:	d504      	bpl.n	800d146 <_vfiprintf_r+0x4e>
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	b01d      	add	sp, #116	@ 0x74
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d146:	89ab      	ldrh	r3, [r5, #12]
 800d148:	0598      	lsls	r0, r3, #22
 800d14a:	d4f7      	bmi.n	800d13c <_vfiprintf_r+0x44>
 800d14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d14e:	f7fd fba7 	bl	800a8a0 <__retarget_lock_release_recursive>
 800d152:	e7f3      	b.n	800d13c <_vfiprintf_r+0x44>
 800d154:	2300      	movs	r3, #0
 800d156:	f8cd 800c 	str.w	r8, [sp, #12]
 800d15a:	f04f 0901 	mov.w	r9, #1
 800d15e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d314 <_vfiprintf_r+0x21c>
 800d162:	9309      	str	r3, [sp, #36]	@ 0x24
 800d164:	2320      	movs	r3, #32
 800d166:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d16a:	2330      	movs	r3, #48	@ 0x30
 800d16c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d170:	4623      	mov	r3, r4
 800d172:	469a      	mov	sl, r3
 800d174:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d178:	b10a      	cbz	r2, 800d17e <_vfiprintf_r+0x86>
 800d17a:	2a25      	cmp	r2, #37	@ 0x25
 800d17c:	d1f9      	bne.n	800d172 <_vfiprintf_r+0x7a>
 800d17e:	ebba 0b04 	subs.w	fp, sl, r4
 800d182:	d00b      	beq.n	800d19c <_vfiprintf_r+0xa4>
 800d184:	465b      	mov	r3, fp
 800d186:	4622      	mov	r2, r4
 800d188:	4629      	mov	r1, r5
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff ffa1 	bl	800d0d2 <__sfputs_r>
 800d190:	3001      	adds	r0, #1
 800d192:	f000 80a7 	beq.w	800d2e4 <_vfiprintf_r+0x1ec>
 800d196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d198:	445a      	add	r2, fp
 800d19a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d19c:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 809f 	beq.w	800d2e4 <_vfiprintf_r+0x1ec>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	f10a 0a01 	add.w	sl, sl, #1
 800d1b0:	9304      	str	r3, [sp, #16]
 800d1b2:	9307      	str	r3, [sp, #28]
 800d1b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1be:	4654      	mov	r4, sl
 800d1c0:	2205      	movs	r2, #5
 800d1c2:	4854      	ldr	r0, [pc, #336]	@ (800d314 <_vfiprintf_r+0x21c>)
 800d1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c8:	f7fd fb6b 	bl	800a8a2 <memchr>
 800d1cc:	9a04      	ldr	r2, [sp, #16]
 800d1ce:	b9d8      	cbnz	r0, 800d208 <_vfiprintf_r+0x110>
 800d1d0:	06d1      	lsls	r1, r2, #27
 800d1d2:	bf44      	itt	mi
 800d1d4:	2320      	movmi	r3, #32
 800d1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1da:	0713      	lsls	r3, r2, #28
 800d1dc:	bf44      	itt	mi
 800d1de:	232b      	movmi	r3, #43	@ 0x2b
 800d1e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ea:	d015      	beq.n	800d218 <_vfiprintf_r+0x120>
 800d1ec:	9a07      	ldr	r2, [sp, #28]
 800d1ee:	4654      	mov	r4, sl
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	f04f 0c0a 	mov.w	ip, #10
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1fc:	3b30      	subs	r3, #48	@ 0x30
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d94b      	bls.n	800d29a <_vfiprintf_r+0x1a2>
 800d202:	b1b0      	cbz	r0, 800d232 <_vfiprintf_r+0x13a>
 800d204:	9207      	str	r2, [sp, #28]
 800d206:	e014      	b.n	800d232 <_vfiprintf_r+0x13a>
 800d208:	eba0 0308 	sub.w	r3, r0, r8
 800d20c:	46a2      	mov	sl, r4
 800d20e:	fa09 f303 	lsl.w	r3, r9, r3
 800d212:	4313      	orrs	r3, r2
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	e7d2      	b.n	800d1be <_vfiprintf_r+0xc6>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	1d19      	adds	r1, r3, #4
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	9103      	str	r1, [sp, #12]
 800d222:	bfbb      	ittet	lt
 800d224:	425b      	neglt	r3, r3
 800d226:	f042 0202 	orrlt.w	r2, r2, #2
 800d22a:	9307      	strge	r3, [sp, #28]
 800d22c:	9307      	strlt	r3, [sp, #28]
 800d22e:	bfb8      	it	lt
 800d230:	9204      	strlt	r2, [sp, #16]
 800d232:	7823      	ldrb	r3, [r4, #0]
 800d234:	2b2e      	cmp	r3, #46	@ 0x2e
 800d236:	d10a      	bne.n	800d24e <_vfiprintf_r+0x156>
 800d238:	7863      	ldrb	r3, [r4, #1]
 800d23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d23c:	d132      	bne.n	800d2a4 <_vfiprintf_r+0x1ac>
 800d23e:	9b03      	ldr	r3, [sp, #12]
 800d240:	3402      	adds	r4, #2
 800d242:	1d1a      	adds	r2, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d24a:	9203      	str	r2, [sp, #12]
 800d24c:	9305      	str	r3, [sp, #20]
 800d24e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d324 <_vfiprintf_r+0x22c>
 800d252:	2203      	movs	r2, #3
 800d254:	7821      	ldrb	r1, [r4, #0]
 800d256:	4650      	mov	r0, sl
 800d258:	f7fd fb23 	bl	800a8a2 <memchr>
 800d25c:	b138      	cbz	r0, 800d26e <_vfiprintf_r+0x176>
 800d25e:	eba0 000a 	sub.w	r0, r0, sl
 800d262:	2240      	movs	r2, #64	@ 0x40
 800d264:	9b04      	ldr	r3, [sp, #16]
 800d266:	3401      	adds	r4, #1
 800d268:	4082      	lsls	r2, r0
 800d26a:	4313      	orrs	r3, r2
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d272:	2206      	movs	r2, #6
 800d274:	4828      	ldr	r0, [pc, #160]	@ (800d318 <_vfiprintf_r+0x220>)
 800d276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d27a:	f7fd fb12 	bl	800a8a2 <memchr>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d03f      	beq.n	800d302 <_vfiprintf_r+0x20a>
 800d282:	4b26      	ldr	r3, [pc, #152]	@ (800d31c <_vfiprintf_r+0x224>)
 800d284:	bb1b      	cbnz	r3, 800d2ce <_vfiprintf_r+0x1d6>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	3307      	adds	r3, #7
 800d28a:	f023 0307 	bic.w	r3, r3, #7
 800d28e:	3308      	adds	r3, #8
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d294:	443b      	add	r3, r7
 800d296:	9309      	str	r3, [sp, #36]	@ 0x24
 800d298:	e76a      	b.n	800d170 <_vfiprintf_r+0x78>
 800d29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d29e:	460c      	mov	r4, r1
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	e7a8      	b.n	800d1f6 <_vfiprintf_r+0xfe>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	3401      	adds	r4, #1
 800d2a8:	f04f 0c0a 	mov.w	ip, #10
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	9305      	str	r3, [sp, #20]
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b6:	3a30      	subs	r2, #48	@ 0x30
 800d2b8:	2a09      	cmp	r2, #9
 800d2ba:	d903      	bls.n	800d2c4 <_vfiprintf_r+0x1cc>
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0c6      	beq.n	800d24e <_vfiprintf_r+0x156>
 800d2c0:	9105      	str	r1, [sp, #20]
 800d2c2:	e7c4      	b.n	800d24e <_vfiprintf_r+0x156>
 800d2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e7f0      	b.n	800d2b0 <_vfiprintf_r+0x1b8>
 800d2ce:	ab03      	add	r3, sp, #12
 800d2d0:	462a      	mov	r2, r5
 800d2d2:	a904      	add	r1, sp, #16
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	4b11      	ldr	r3, [pc, #68]	@ (800d320 <_vfiprintf_r+0x228>)
 800d2da:	f7fc fb5d 	bl	8009998 <_printf_float>
 800d2de:	4607      	mov	r7, r0
 800d2e0:	1c78      	adds	r0, r7, #1
 800d2e2:	d1d6      	bne.n	800d292 <_vfiprintf_r+0x19a>
 800d2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2e6:	07d9      	lsls	r1, r3, #31
 800d2e8:	d405      	bmi.n	800d2f6 <_vfiprintf_r+0x1fe>
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	059a      	lsls	r2, r3, #22
 800d2ee:	d402      	bmi.n	800d2f6 <_vfiprintf_r+0x1fe>
 800d2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2f2:	f7fd fad5 	bl	800a8a0 <__retarget_lock_release_recursive>
 800d2f6:	89ab      	ldrh	r3, [r5, #12]
 800d2f8:	065b      	lsls	r3, r3, #25
 800d2fa:	f53f af1f 	bmi.w	800d13c <_vfiprintf_r+0x44>
 800d2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d300:	e71e      	b.n	800d140 <_vfiprintf_r+0x48>
 800d302:	ab03      	add	r3, sp, #12
 800d304:	462a      	mov	r2, r5
 800d306:	a904      	add	r1, sp, #16
 800d308:	4630      	mov	r0, r6
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	4b04      	ldr	r3, [pc, #16]	@ (800d320 <_vfiprintf_r+0x228>)
 800d30e:	f7fc fddf 	bl	8009ed0 <_printf_i>
 800d312:	e7e4      	b.n	800d2de <_vfiprintf_r+0x1e6>
 800d314:	0800e3c9 	.word	0x0800e3c9
 800d318:	0800e3d3 	.word	0x0800e3d3
 800d31c:	08009999 	.word	0x08009999
 800d320:	0800d0d3 	.word	0x0800d0d3
 800d324:	0800e3cf 	.word	0x0800e3cf

0800d328 <__sflush_r>:
 800d328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d330:	0716      	lsls	r6, r2, #28
 800d332:	4605      	mov	r5, r0
 800d334:	460c      	mov	r4, r1
 800d336:	d454      	bmi.n	800d3e2 <__sflush_r+0xba>
 800d338:	684b      	ldr	r3, [r1, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	dc02      	bgt.n	800d344 <__sflush_r+0x1c>
 800d33e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d340:	2b00      	cmp	r3, #0
 800d342:	dd48      	ble.n	800d3d6 <__sflush_r+0xae>
 800d344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d346:	2e00      	cmp	r6, #0
 800d348:	d045      	beq.n	800d3d6 <__sflush_r+0xae>
 800d34a:	2300      	movs	r3, #0
 800d34c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d350:	682f      	ldr	r7, [r5, #0]
 800d352:	6a21      	ldr	r1, [r4, #32]
 800d354:	602b      	str	r3, [r5, #0]
 800d356:	d030      	beq.n	800d3ba <__sflush_r+0x92>
 800d358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	0759      	lsls	r1, r3, #29
 800d35e:	d505      	bpl.n	800d36c <__sflush_r+0x44>
 800d360:	6863      	ldr	r3, [r4, #4]
 800d362:	1ad2      	subs	r2, r2, r3
 800d364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d366:	b10b      	cbz	r3, 800d36c <__sflush_r+0x44>
 800d368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d36a:	1ad2      	subs	r2, r2, r3
 800d36c:	2300      	movs	r3, #0
 800d36e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d370:	6a21      	ldr	r1, [r4, #32]
 800d372:	4628      	mov	r0, r5
 800d374:	47b0      	blx	r6
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	d106      	bne.n	800d38a <__sflush_r+0x62>
 800d37c:	6829      	ldr	r1, [r5, #0]
 800d37e:	291d      	cmp	r1, #29
 800d380:	d82b      	bhi.n	800d3da <__sflush_r+0xb2>
 800d382:	4a2a      	ldr	r2, [pc, #168]	@ (800d42c <__sflush_r+0x104>)
 800d384:	410a      	asrs	r2, r1
 800d386:	07d6      	lsls	r6, r2, #31
 800d388:	d427      	bmi.n	800d3da <__sflush_r+0xb2>
 800d38a:	2200      	movs	r2, #0
 800d38c:	04d9      	lsls	r1, r3, #19
 800d38e:	6062      	str	r2, [r4, #4]
 800d390:	6922      	ldr	r2, [r4, #16]
 800d392:	6022      	str	r2, [r4, #0]
 800d394:	d504      	bpl.n	800d3a0 <__sflush_r+0x78>
 800d396:	1c42      	adds	r2, r0, #1
 800d398:	d101      	bne.n	800d39e <__sflush_r+0x76>
 800d39a:	682b      	ldr	r3, [r5, #0]
 800d39c:	b903      	cbnz	r3, 800d3a0 <__sflush_r+0x78>
 800d39e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3a2:	602f      	str	r7, [r5, #0]
 800d3a4:	b1b9      	cbz	r1, 800d3d6 <__sflush_r+0xae>
 800d3a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3aa:	4299      	cmp	r1, r3
 800d3ac:	d002      	beq.n	800d3b4 <__sflush_r+0x8c>
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f7fe f8de 	bl	800b570 <_free_r>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3b8:	e00d      	b.n	800d3d6 <__sflush_r+0xae>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	4628      	mov	r0, r5
 800d3be:	47b0      	blx	r6
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	1c50      	adds	r0, r2, #1
 800d3c4:	d1c9      	bne.n	800d35a <__sflush_r+0x32>
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d0c6      	beq.n	800d35a <__sflush_r+0x32>
 800d3cc:	2b1d      	cmp	r3, #29
 800d3ce:	d001      	beq.n	800d3d4 <__sflush_r+0xac>
 800d3d0:	2b16      	cmp	r3, #22
 800d3d2:	d11d      	bne.n	800d410 <__sflush_r+0xe8>
 800d3d4:	602f      	str	r7, [r5, #0]
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	e021      	b.n	800d41e <__sflush_r+0xf6>
 800d3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3de:	b21b      	sxth	r3, r3
 800d3e0:	e01a      	b.n	800d418 <__sflush_r+0xf0>
 800d3e2:	690f      	ldr	r7, [r1, #16]
 800d3e4:	2f00      	cmp	r7, #0
 800d3e6:	d0f6      	beq.n	800d3d6 <__sflush_r+0xae>
 800d3e8:	0793      	lsls	r3, r2, #30
 800d3ea:	680e      	ldr	r6, [r1, #0]
 800d3ec:	600f      	str	r7, [r1, #0]
 800d3ee:	bf0c      	ite	eq
 800d3f0:	694b      	ldreq	r3, [r1, #20]
 800d3f2:	2300      	movne	r3, #0
 800d3f4:	eba6 0807 	sub.w	r8, r6, r7
 800d3f8:	608b      	str	r3, [r1, #8]
 800d3fa:	f1b8 0f00 	cmp.w	r8, #0
 800d3fe:	ddea      	ble.n	800d3d6 <__sflush_r+0xae>
 800d400:	4643      	mov	r3, r8
 800d402:	463a      	mov	r2, r7
 800d404:	6a21      	ldr	r1, [r4, #32]
 800d406:	4628      	mov	r0, r5
 800d408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d40a:	47b0      	blx	r6
 800d40c:	2800      	cmp	r0, #0
 800d40e:	dc08      	bgt.n	800d422 <__sflush_r+0xfa>
 800d410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d422:	4407      	add	r7, r0
 800d424:	eba8 0800 	sub.w	r8, r8, r0
 800d428:	e7e7      	b.n	800d3fa <__sflush_r+0xd2>
 800d42a:	bf00      	nop
 800d42c:	dfbffffe 	.word	0xdfbffffe

0800d430 <_fflush_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	690b      	ldr	r3, [r1, #16]
 800d434:	4605      	mov	r5, r0
 800d436:	460c      	mov	r4, r1
 800d438:	b913      	cbnz	r3, 800d440 <_fflush_r+0x10>
 800d43a:	2500      	movs	r5, #0
 800d43c:	4628      	mov	r0, r5
 800d43e:	bd38      	pop	{r3, r4, r5, pc}
 800d440:	b118      	cbz	r0, 800d44a <_fflush_r+0x1a>
 800d442:	6a03      	ldr	r3, [r0, #32]
 800d444:	b90b      	cbnz	r3, 800d44a <_fflush_r+0x1a>
 800d446:	f7fd f901 	bl	800a64c <__sinit>
 800d44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d0f3      	beq.n	800d43a <_fflush_r+0xa>
 800d452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d454:	07d0      	lsls	r0, r2, #31
 800d456:	d404      	bmi.n	800d462 <_fflush_r+0x32>
 800d458:	0599      	lsls	r1, r3, #22
 800d45a:	d402      	bmi.n	800d462 <_fflush_r+0x32>
 800d45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d45e:	f7fd fa1e 	bl	800a89e <__retarget_lock_acquire_recursive>
 800d462:	4628      	mov	r0, r5
 800d464:	4621      	mov	r1, r4
 800d466:	f7ff ff5f 	bl	800d328 <__sflush_r>
 800d46a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d46c:	4605      	mov	r5, r0
 800d46e:	07da      	lsls	r2, r3, #31
 800d470:	d4e4      	bmi.n	800d43c <_fflush_r+0xc>
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	059b      	lsls	r3, r3, #22
 800d476:	d4e1      	bmi.n	800d43c <_fflush_r+0xc>
 800d478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d47a:	f7fd fa11 	bl	800a8a0 <__retarget_lock_release_recursive>
 800d47e:	e7dd      	b.n	800d43c <_fflush_r+0xc>

0800d480 <__swbuf_r>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	460e      	mov	r6, r1
 800d484:	4614      	mov	r4, r2
 800d486:	4605      	mov	r5, r0
 800d488:	b118      	cbz	r0, 800d492 <__swbuf_r+0x12>
 800d48a:	6a03      	ldr	r3, [r0, #32]
 800d48c:	b90b      	cbnz	r3, 800d492 <__swbuf_r+0x12>
 800d48e:	f7fd f8dd 	bl	800a64c <__sinit>
 800d492:	69a3      	ldr	r3, [r4, #24]
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	071a      	lsls	r2, r3, #28
 800d49a:	d501      	bpl.n	800d4a0 <__swbuf_r+0x20>
 800d49c:	6923      	ldr	r3, [r4, #16]
 800d49e:	b943      	cbnz	r3, 800d4b2 <__swbuf_r+0x32>
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f000 f82a 	bl	800d4fc <__swsetup_r>
 800d4a8:	b118      	cbz	r0, 800d4b2 <__swbuf_r+0x32>
 800d4aa:	f04f 37ff 	mov.w	r7, #4294967295
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	b2f6      	uxtb	r6, r6
 800d4b6:	6922      	ldr	r2, [r4, #16]
 800d4b8:	4637      	mov	r7, r6
 800d4ba:	1a98      	subs	r0, r3, r2
 800d4bc:	6963      	ldr	r3, [r4, #20]
 800d4be:	4283      	cmp	r3, r0
 800d4c0:	dc05      	bgt.n	800d4ce <__swbuf_r+0x4e>
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f7ff ffb3 	bl	800d430 <_fflush_r>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d1ed      	bne.n	800d4aa <__swbuf_r+0x2a>
 800d4ce:	68a3      	ldr	r3, [r4, #8]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	60a3      	str	r3, [r4, #8]
 800d4d4:	6823      	ldr	r3, [r4, #0]
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	6022      	str	r2, [r4, #0]
 800d4da:	701e      	strb	r6, [r3, #0]
 800d4dc:	1c43      	adds	r3, r0, #1
 800d4de:	6962      	ldr	r2, [r4, #20]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d004      	beq.n	800d4ee <__swbuf_r+0x6e>
 800d4e4:	89a3      	ldrh	r3, [r4, #12]
 800d4e6:	07db      	lsls	r3, r3, #31
 800d4e8:	d5e1      	bpl.n	800d4ae <__swbuf_r+0x2e>
 800d4ea:	2e0a      	cmp	r6, #10
 800d4ec:	d1df      	bne.n	800d4ae <__swbuf_r+0x2e>
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f7ff ff9d 	bl	800d430 <_fflush_r>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0d9      	beq.n	800d4ae <__swbuf_r+0x2e>
 800d4fa:	e7d6      	b.n	800d4aa <__swbuf_r+0x2a>

0800d4fc <__swsetup_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	4b29      	ldr	r3, [pc, #164]	@ (800d5a4 <__swsetup_r+0xa8>)
 800d500:	4605      	mov	r5, r0
 800d502:	460c      	mov	r4, r1
 800d504:	6818      	ldr	r0, [r3, #0]
 800d506:	b118      	cbz	r0, 800d510 <__swsetup_r+0x14>
 800d508:	6a03      	ldr	r3, [r0, #32]
 800d50a:	b90b      	cbnz	r3, 800d510 <__swsetup_r+0x14>
 800d50c:	f7fd f89e 	bl	800a64c <__sinit>
 800d510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d514:	0719      	lsls	r1, r3, #28
 800d516:	d422      	bmi.n	800d55e <__swsetup_r+0x62>
 800d518:	06da      	lsls	r2, r3, #27
 800d51a:	d407      	bmi.n	800d52c <__swsetup_r+0x30>
 800d51c:	2209      	movs	r2, #9
 800d51e:	602a      	str	r2, [r5, #0]
 800d520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d524:	f04f 30ff 	mov.w	r0, #4294967295
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	e033      	b.n	800d594 <__swsetup_r+0x98>
 800d52c:	0758      	lsls	r0, r3, #29
 800d52e:	d512      	bpl.n	800d556 <__swsetup_r+0x5a>
 800d530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d532:	b141      	cbz	r1, 800d546 <__swsetup_r+0x4a>
 800d534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d538:	4299      	cmp	r1, r3
 800d53a:	d002      	beq.n	800d542 <__swsetup_r+0x46>
 800d53c:	4628      	mov	r0, r5
 800d53e:	f7fe f817 	bl	800b570 <_free_r>
 800d542:	2300      	movs	r3, #0
 800d544:	6363      	str	r3, [r4, #52]	@ 0x34
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d54c:	81a3      	strh	r3, [r4, #12]
 800d54e:	2300      	movs	r3, #0
 800d550:	6063      	str	r3, [r4, #4]
 800d552:	6923      	ldr	r3, [r4, #16]
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	f043 0308 	orr.w	r3, r3, #8
 800d55c:	81a3      	strh	r3, [r4, #12]
 800d55e:	6923      	ldr	r3, [r4, #16]
 800d560:	b94b      	cbnz	r3, 800d576 <__swsetup_r+0x7a>
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d56c:	d003      	beq.n	800d576 <__swsetup_r+0x7a>
 800d56e:	4621      	mov	r1, r4
 800d570:	4628      	mov	r0, r5
 800d572:	f000 fc58 	bl	800de26 <__smakebuf_r>
 800d576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d57a:	f013 0201 	ands.w	r2, r3, #1
 800d57e:	d00a      	beq.n	800d596 <__swsetup_r+0x9a>
 800d580:	2200      	movs	r2, #0
 800d582:	60a2      	str	r2, [r4, #8]
 800d584:	6962      	ldr	r2, [r4, #20]
 800d586:	4252      	negs	r2, r2
 800d588:	61a2      	str	r2, [r4, #24]
 800d58a:	6922      	ldr	r2, [r4, #16]
 800d58c:	b942      	cbnz	r2, 800d5a0 <__swsetup_r+0xa4>
 800d58e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d592:	d1c5      	bne.n	800d520 <__swsetup_r+0x24>
 800d594:	bd38      	pop	{r3, r4, r5, pc}
 800d596:	0799      	lsls	r1, r3, #30
 800d598:	bf58      	it	pl
 800d59a:	6962      	ldrpl	r2, [r4, #20]
 800d59c:	60a2      	str	r2, [r4, #8]
 800d59e:	e7f4      	b.n	800d58a <__swsetup_r+0x8e>
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	e7f7      	b.n	800d594 <__swsetup_r+0x98>
 800d5a4:	20000018 	.word	0x20000018

0800d5a8 <memmove>:
 800d5a8:	4288      	cmp	r0, r1
 800d5aa:	b510      	push	{r4, lr}
 800d5ac:	eb01 0402 	add.w	r4, r1, r2
 800d5b0:	d902      	bls.n	800d5b8 <memmove+0x10>
 800d5b2:	4284      	cmp	r4, r0
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	d807      	bhi.n	800d5c8 <memmove+0x20>
 800d5b8:	1e43      	subs	r3, r0, #1
 800d5ba:	42a1      	cmp	r1, r4
 800d5bc:	d008      	beq.n	800d5d0 <memmove+0x28>
 800d5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5c6:	e7f8      	b.n	800d5ba <memmove+0x12>
 800d5c8:	4402      	add	r2, r0
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	428a      	cmp	r2, r1
 800d5ce:	d100      	bne.n	800d5d2 <memmove+0x2a>
 800d5d0:	bd10      	pop	{r4, pc}
 800d5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5da:	e7f7      	b.n	800d5cc <memmove+0x24>

0800d5dc <strncmp>:
 800d5dc:	b510      	push	{r4, lr}
 800d5de:	b16a      	cbz	r2, 800d5fc <strncmp+0x20>
 800d5e0:	3901      	subs	r1, #1
 800d5e2:	1884      	adds	r4, r0, r2
 800d5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d103      	bne.n	800d5f8 <strncmp+0x1c>
 800d5f0:	42a0      	cmp	r0, r4
 800d5f2:	d001      	beq.n	800d5f8 <strncmp+0x1c>
 800d5f4:	2a00      	cmp	r2, #0
 800d5f6:	d1f5      	bne.n	800d5e4 <strncmp+0x8>
 800d5f8:	1ad0      	subs	r0, r2, r3
 800d5fa:	bd10      	pop	{r4, pc}
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	e7fc      	b.n	800d5fa <strncmp+0x1e>

0800d600 <_sbrk_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	2300      	movs	r3, #0
 800d604:	4d05      	ldr	r5, [pc, #20]	@ (800d61c <_sbrk_r+0x1c>)
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	602b      	str	r3, [r5, #0]
 800d60c:	f7f4 fe98 	bl	8002340 <_sbrk>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d102      	bne.n	800d61a <_sbrk_r+0x1a>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	b103      	cbz	r3, 800d61a <_sbrk_r+0x1a>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	20000534 	.word	0x20000534

0800d620 <memcpy>:
 800d620:	440a      	add	r2, r1
 800d622:	1e43      	subs	r3, r0, #1
 800d624:	4291      	cmp	r1, r2
 800d626:	d100      	bne.n	800d62a <memcpy+0xa>
 800d628:	4770      	bx	lr
 800d62a:	b510      	push	{r4, lr}
 800d62c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d630:	4291      	cmp	r1, r2
 800d632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d636:	d1f9      	bne.n	800d62c <memcpy+0xc>
 800d638:	bd10      	pop	{r4, pc}
 800d63a:	0000      	movs	r0, r0
 800d63c:	0000      	movs	r0, r0
	...

0800d640 <nan>:
 800d640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d648 <nan+0x8>
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	00000000 	.word	0x00000000
 800d64c:	7ff80000 	.word	0x7ff80000

0800d650 <__assert_func>:
 800d650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d652:	4614      	mov	r4, r2
 800d654:	461a      	mov	r2, r3
 800d656:	4b09      	ldr	r3, [pc, #36]	@ (800d67c <__assert_func+0x2c>)
 800d658:	4605      	mov	r5, r0
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68d8      	ldr	r0, [r3, #12]
 800d65e:	b954      	cbnz	r4, 800d676 <__assert_func+0x26>
 800d660:	4b07      	ldr	r3, [pc, #28]	@ (800d680 <__assert_func+0x30>)
 800d662:	461c      	mov	r4, r3
 800d664:	9100      	str	r1, [sp, #0]
 800d666:	4907      	ldr	r1, [pc, #28]	@ (800d684 <__assert_func+0x34>)
 800d668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d66c:	462b      	mov	r3, r5
 800d66e:	f000 fba3 	bl	800ddb8 <fiprintf>
 800d672:	f000 fc37 	bl	800dee4 <abort>
 800d676:	4b04      	ldr	r3, [pc, #16]	@ (800d688 <__assert_func+0x38>)
 800d678:	e7f4      	b.n	800d664 <__assert_func+0x14>
 800d67a:	bf00      	nop
 800d67c:	20000018 	.word	0x20000018
 800d680:	0800e41d 	.word	0x0800e41d
 800d684:	0800e3ef 	.word	0x0800e3ef
 800d688:	0800e3e2 	.word	0x0800e3e2

0800d68c <_calloc_r>:
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	fba1 5402 	umull	r5, r4, r1, r2
 800d692:	b93c      	cbnz	r4, 800d6a4 <_calloc_r+0x18>
 800d694:	4629      	mov	r1, r5
 800d696:	f7fd ffdf 	bl	800b658 <_malloc_r>
 800d69a:	4606      	mov	r6, r0
 800d69c:	b928      	cbnz	r0, 800d6aa <_calloc_r+0x1e>
 800d69e:	2600      	movs	r6, #0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
 800d6a4:	220c      	movs	r2, #12
 800d6a6:	6002      	str	r2, [r0, #0]
 800d6a8:	e7f9      	b.n	800d69e <_calloc_r+0x12>
 800d6aa:	462a      	mov	r2, r5
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	f7fd f878 	bl	800a7a2 <memset>
 800d6b2:	e7f5      	b.n	800d6a0 <_calloc_r+0x14>

0800d6b4 <rshift>:
 800d6b4:	6903      	ldr	r3, [r0, #16]
 800d6b6:	114a      	asrs	r2, r1, #5
 800d6b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6c0:	f100 0414 	add.w	r4, r0, #20
 800d6c4:	dd45      	ble.n	800d752 <rshift+0x9e>
 800d6c6:	f011 011f 	ands.w	r1, r1, #31
 800d6ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6d2:	d10c      	bne.n	800d6ee <rshift+0x3a>
 800d6d4:	f100 0710 	add.w	r7, r0, #16
 800d6d8:	4629      	mov	r1, r5
 800d6da:	42b1      	cmp	r1, r6
 800d6dc:	d334      	bcc.n	800d748 <rshift+0x94>
 800d6de:	1a9b      	subs	r3, r3, r2
 800d6e0:	1eea      	subs	r2, r5, #3
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	4296      	cmp	r6, r2
 800d6e6:	bf38      	it	cc
 800d6e8:	2300      	movcc	r3, #0
 800d6ea:	4423      	add	r3, r4
 800d6ec:	e015      	b.n	800d71a <rshift+0x66>
 800d6ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6f2:	f1c1 0820 	rsb	r8, r1, #32
 800d6f6:	f105 0e04 	add.w	lr, r5, #4
 800d6fa:	46a1      	mov	r9, r4
 800d6fc:	40cf      	lsrs	r7, r1
 800d6fe:	4576      	cmp	r6, lr
 800d700:	46f4      	mov	ip, lr
 800d702:	d815      	bhi.n	800d730 <rshift+0x7c>
 800d704:	1a9a      	subs	r2, r3, r2
 800d706:	3501      	adds	r5, #1
 800d708:	0092      	lsls	r2, r2, #2
 800d70a:	3a04      	subs	r2, #4
 800d70c:	42ae      	cmp	r6, r5
 800d70e:	bf38      	it	cc
 800d710:	2200      	movcc	r2, #0
 800d712:	18a3      	adds	r3, r4, r2
 800d714:	50a7      	str	r7, [r4, r2]
 800d716:	b107      	cbz	r7, 800d71a <rshift+0x66>
 800d718:	3304      	adds	r3, #4
 800d71a:	1b1a      	subs	r2, r3, r4
 800d71c:	42a3      	cmp	r3, r4
 800d71e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d722:	bf08      	it	eq
 800d724:	2300      	moveq	r3, #0
 800d726:	6102      	str	r2, [r0, #16]
 800d728:	bf08      	it	eq
 800d72a:	6143      	streq	r3, [r0, #20]
 800d72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d730:	f8dc c000 	ldr.w	ip, [ip]
 800d734:	fa0c fc08 	lsl.w	ip, ip, r8
 800d738:	ea4c 0707 	orr.w	r7, ip, r7
 800d73c:	f849 7b04 	str.w	r7, [r9], #4
 800d740:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d744:	40cf      	lsrs	r7, r1
 800d746:	e7da      	b.n	800d6fe <rshift+0x4a>
 800d748:	f851 cb04 	ldr.w	ip, [r1], #4
 800d74c:	f847 cf04 	str.w	ip, [r7, #4]!
 800d750:	e7c3      	b.n	800d6da <rshift+0x26>
 800d752:	4623      	mov	r3, r4
 800d754:	e7e1      	b.n	800d71a <rshift+0x66>

0800d756 <__hexdig_fun>:
 800d756:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d75a:	2b09      	cmp	r3, #9
 800d75c:	d802      	bhi.n	800d764 <__hexdig_fun+0xe>
 800d75e:	3820      	subs	r0, #32
 800d760:	b2c0      	uxtb	r0, r0
 800d762:	4770      	bx	lr
 800d764:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d768:	2b05      	cmp	r3, #5
 800d76a:	d801      	bhi.n	800d770 <__hexdig_fun+0x1a>
 800d76c:	3847      	subs	r0, #71	@ 0x47
 800d76e:	e7f7      	b.n	800d760 <__hexdig_fun+0xa>
 800d770:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d774:	2b05      	cmp	r3, #5
 800d776:	d801      	bhi.n	800d77c <__hexdig_fun+0x26>
 800d778:	3827      	subs	r0, #39	@ 0x27
 800d77a:	e7f1      	b.n	800d760 <__hexdig_fun+0xa>
 800d77c:	2000      	movs	r0, #0
 800d77e:	4770      	bx	lr

0800d780 <__gethex>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	b085      	sub	sp, #20
 800d786:	468a      	mov	sl, r1
 800d788:	4690      	mov	r8, r2
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	680b      	ldr	r3, [r1, #0]
 800d78e:	9001      	str	r0, [sp, #4]
 800d790:	1c9c      	adds	r4, r3, #2
 800d792:	46a1      	mov	r9, r4
 800d794:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d798:	2830      	cmp	r0, #48	@ 0x30
 800d79a:	d0fa      	beq.n	800d792 <__gethex+0x12>
 800d79c:	eba9 0303 	sub.w	r3, r9, r3
 800d7a0:	f1a3 0b02 	sub.w	fp, r3, #2
 800d7a4:	f7ff ffd7 	bl	800d756 <__hexdig_fun>
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d166      	bne.n	800d87c <__gethex+0xfc>
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	499e      	ldr	r1, [pc, #632]	@ (800da2c <__gethex+0x2ac>)
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	f7ff ff12 	bl	800d5dc <strncmp>
 800d7b8:	4607      	mov	r7, r0
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d165      	bne.n	800d88a <__gethex+0x10a>
 800d7be:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d7c2:	4626      	mov	r6, r4
 800d7c4:	f7ff ffc7 	bl	800d756 <__hexdig_fun>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d060      	beq.n	800d88e <__gethex+0x10e>
 800d7cc:	4623      	mov	r3, r4
 800d7ce:	7818      	ldrb	r0, [r3, #0]
 800d7d0:	4699      	mov	r9, r3
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	2830      	cmp	r0, #48	@ 0x30
 800d7d6:	d0fa      	beq.n	800d7ce <__gethex+0x4e>
 800d7d8:	f7ff ffbd 	bl	800d756 <__hexdig_fun>
 800d7dc:	fab0 f580 	clz	r5, r0
 800d7e0:	f04f 0b01 	mov.w	fp, #1
 800d7e4:	096d      	lsrs	r5, r5, #5
 800d7e6:	464a      	mov	r2, r9
 800d7e8:	4616      	mov	r6, r2
 800d7ea:	3201      	adds	r2, #1
 800d7ec:	7830      	ldrb	r0, [r6, #0]
 800d7ee:	f7ff ffb2 	bl	800d756 <__hexdig_fun>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d1f8      	bne.n	800d7e8 <__gethex+0x68>
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	498c      	ldr	r1, [pc, #560]	@ (800da2c <__gethex+0x2ac>)
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f7ff feee 	bl	800d5dc <strncmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	d13e      	bne.n	800d882 <__gethex+0x102>
 800d804:	b944      	cbnz	r4, 800d818 <__gethex+0x98>
 800d806:	1c74      	adds	r4, r6, #1
 800d808:	4622      	mov	r2, r4
 800d80a:	4616      	mov	r6, r2
 800d80c:	3201      	adds	r2, #1
 800d80e:	7830      	ldrb	r0, [r6, #0]
 800d810:	f7ff ffa1 	bl	800d756 <__hexdig_fun>
 800d814:	2800      	cmp	r0, #0
 800d816:	d1f8      	bne.n	800d80a <__gethex+0x8a>
 800d818:	1ba4      	subs	r4, r4, r6
 800d81a:	00a7      	lsls	r7, r4, #2
 800d81c:	7833      	ldrb	r3, [r6, #0]
 800d81e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d822:	2b50      	cmp	r3, #80	@ 0x50
 800d824:	d13d      	bne.n	800d8a2 <__gethex+0x122>
 800d826:	7873      	ldrb	r3, [r6, #1]
 800d828:	2b2b      	cmp	r3, #43	@ 0x2b
 800d82a:	d032      	beq.n	800d892 <__gethex+0x112>
 800d82c:	2b2d      	cmp	r3, #45	@ 0x2d
 800d82e:	d033      	beq.n	800d898 <__gethex+0x118>
 800d830:	1c71      	adds	r1, r6, #1
 800d832:	2400      	movs	r4, #0
 800d834:	7808      	ldrb	r0, [r1, #0]
 800d836:	f7ff ff8e 	bl	800d756 <__hexdig_fun>
 800d83a:	1e43      	subs	r3, r0, #1
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b18      	cmp	r3, #24
 800d840:	d82f      	bhi.n	800d8a2 <__gethex+0x122>
 800d842:	f1a0 0210 	sub.w	r2, r0, #16
 800d846:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d84a:	f7ff ff84 	bl	800d756 <__hexdig_fun>
 800d84e:	f100 3cff 	add.w	ip, r0, #4294967295
 800d852:	230a      	movs	r3, #10
 800d854:	fa5f fc8c 	uxtb.w	ip, ip
 800d858:	f1bc 0f18 	cmp.w	ip, #24
 800d85c:	d91e      	bls.n	800d89c <__gethex+0x11c>
 800d85e:	b104      	cbz	r4, 800d862 <__gethex+0xe2>
 800d860:	4252      	negs	r2, r2
 800d862:	4417      	add	r7, r2
 800d864:	f8ca 1000 	str.w	r1, [sl]
 800d868:	b1ed      	cbz	r5, 800d8a6 <__gethex+0x126>
 800d86a:	f1bb 0f00 	cmp.w	fp, #0
 800d86e:	bf0c      	ite	eq
 800d870:	2506      	moveq	r5, #6
 800d872:	2500      	movne	r5, #0
 800d874:	4628      	mov	r0, r5
 800d876:	b005      	add	sp, #20
 800d878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87c:	2500      	movs	r5, #0
 800d87e:	462c      	mov	r4, r5
 800d880:	e7b1      	b.n	800d7e6 <__gethex+0x66>
 800d882:	2c00      	cmp	r4, #0
 800d884:	d1c8      	bne.n	800d818 <__gethex+0x98>
 800d886:	4627      	mov	r7, r4
 800d888:	e7c8      	b.n	800d81c <__gethex+0x9c>
 800d88a:	464e      	mov	r6, r9
 800d88c:	462f      	mov	r7, r5
 800d88e:	2501      	movs	r5, #1
 800d890:	e7c4      	b.n	800d81c <__gethex+0x9c>
 800d892:	2400      	movs	r4, #0
 800d894:	1cb1      	adds	r1, r6, #2
 800d896:	e7cd      	b.n	800d834 <__gethex+0xb4>
 800d898:	2401      	movs	r4, #1
 800d89a:	e7fb      	b.n	800d894 <__gethex+0x114>
 800d89c:	fb03 0002 	mla	r0, r3, r2, r0
 800d8a0:	e7cf      	b.n	800d842 <__gethex+0xc2>
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	e7de      	b.n	800d864 <__gethex+0xe4>
 800d8a6:	eba6 0309 	sub.w	r3, r6, r9
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	2b07      	cmp	r3, #7
 800d8b0:	dc0a      	bgt.n	800d8c8 <__gethex+0x148>
 800d8b2:	9801      	ldr	r0, [sp, #4]
 800d8b4:	f7fd ff5c 	bl	800b770 <_Balloc>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	b940      	cbnz	r0, 800d8ce <__gethex+0x14e>
 800d8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800da30 <__gethex+0x2b0>)
 800d8be:	4602      	mov	r2, r0
 800d8c0:	21e4      	movs	r1, #228	@ 0xe4
 800d8c2:	485c      	ldr	r0, [pc, #368]	@ (800da34 <__gethex+0x2b4>)
 800d8c4:	f7ff fec4 	bl	800d650 <__assert_func>
 800d8c8:	3101      	adds	r1, #1
 800d8ca:	105b      	asrs	r3, r3, #1
 800d8cc:	e7ef      	b.n	800d8ae <__gethex+0x12e>
 800d8ce:	f100 0a14 	add.w	sl, r0, #20
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	4655      	mov	r5, sl
 800d8d6:	469b      	mov	fp, r3
 800d8d8:	45b1      	cmp	r9, r6
 800d8da:	d337      	bcc.n	800d94c <__gethex+0x1cc>
 800d8dc:	f845 bb04 	str.w	fp, [r5], #4
 800d8e0:	eba5 050a 	sub.w	r5, r5, sl
 800d8e4:	4658      	mov	r0, fp
 800d8e6:	10ad      	asrs	r5, r5, #2
 800d8e8:	6125      	str	r5, [r4, #16]
 800d8ea:	016d      	lsls	r5, r5, #5
 800d8ec:	f7fe f834 	bl	800b958 <__hi0bits>
 800d8f0:	f8d8 6000 	ldr.w	r6, [r8]
 800d8f4:	1a2d      	subs	r5, r5, r0
 800d8f6:	42b5      	cmp	r5, r6
 800d8f8:	dd54      	ble.n	800d9a4 <__gethex+0x224>
 800d8fa:	1bad      	subs	r5, r5, r6
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	4629      	mov	r1, r5
 800d900:	f7fe fbd1 	bl	800c0a6 <__any_on>
 800d904:	4681      	mov	r9, r0
 800d906:	b178      	cbz	r0, 800d928 <__gethex+0x1a8>
 800d908:	1e6b      	subs	r3, r5, #1
 800d90a:	f04f 0901 	mov.w	r9, #1
 800d90e:	1159      	asrs	r1, r3, #5
 800d910:	f003 021f 	and.w	r2, r3, #31
 800d914:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d918:	fa09 f202 	lsl.w	r2, r9, r2
 800d91c:	420a      	tst	r2, r1
 800d91e:	d003      	beq.n	800d928 <__gethex+0x1a8>
 800d920:	454b      	cmp	r3, r9
 800d922:	dc36      	bgt.n	800d992 <__gethex+0x212>
 800d924:	f04f 0902 	mov.w	r9, #2
 800d928:	442f      	add	r7, r5
 800d92a:	4629      	mov	r1, r5
 800d92c:	4620      	mov	r0, r4
 800d92e:	f7ff fec1 	bl	800d6b4 <rshift>
 800d932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d936:	42bb      	cmp	r3, r7
 800d938:	da42      	bge.n	800d9c0 <__gethex+0x240>
 800d93a:	4621      	mov	r1, r4
 800d93c:	9801      	ldr	r0, [sp, #4]
 800d93e:	f7fd ff57 	bl	800b7f0 <_Bfree>
 800d942:	2300      	movs	r3, #0
 800d944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d946:	25a3      	movs	r5, #163	@ 0xa3
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	e793      	b.n	800d874 <__gethex+0xf4>
 800d94c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d950:	2a2e      	cmp	r2, #46	@ 0x2e
 800d952:	d012      	beq.n	800d97a <__gethex+0x1fa>
 800d954:	2b20      	cmp	r3, #32
 800d956:	d104      	bne.n	800d962 <__gethex+0x1e2>
 800d958:	f845 bb04 	str.w	fp, [r5], #4
 800d95c:	f04f 0b00 	mov.w	fp, #0
 800d960:	465b      	mov	r3, fp
 800d962:	7830      	ldrb	r0, [r6, #0]
 800d964:	9303      	str	r3, [sp, #12]
 800d966:	f7ff fef6 	bl	800d756 <__hexdig_fun>
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	f000 000f 	and.w	r0, r0, #15
 800d970:	4098      	lsls	r0, r3
 800d972:	3304      	adds	r3, #4
 800d974:	ea4b 0b00 	orr.w	fp, fp, r0
 800d978:	e7ae      	b.n	800d8d8 <__gethex+0x158>
 800d97a:	45b1      	cmp	r9, r6
 800d97c:	d8ea      	bhi.n	800d954 <__gethex+0x1d4>
 800d97e:	2201      	movs	r2, #1
 800d980:	492a      	ldr	r1, [pc, #168]	@ (800da2c <__gethex+0x2ac>)
 800d982:	4630      	mov	r0, r6
 800d984:	9303      	str	r3, [sp, #12]
 800d986:	f7ff fe29 	bl	800d5dc <strncmp>
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d1e1      	bne.n	800d954 <__gethex+0x1d4>
 800d990:	e7a2      	b.n	800d8d8 <__gethex+0x158>
 800d992:	1ea9      	subs	r1, r5, #2
 800d994:	4620      	mov	r0, r4
 800d996:	f7fe fb86 	bl	800c0a6 <__any_on>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0c2      	beq.n	800d924 <__gethex+0x1a4>
 800d99e:	f04f 0903 	mov.w	r9, #3
 800d9a2:	e7c1      	b.n	800d928 <__gethex+0x1a8>
 800d9a4:	da09      	bge.n	800d9ba <__gethex+0x23a>
 800d9a6:	1b75      	subs	r5, r6, r5
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	9801      	ldr	r0, [sp, #4]
 800d9ac:	462a      	mov	r2, r5
 800d9ae:	1b7f      	subs	r7, r7, r5
 800d9b0:	f7fe f938 	bl	800bc24 <__lshift>
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	f100 0a14 	add.w	sl, r0, #20
 800d9ba:	f04f 0900 	mov.w	r9, #0
 800d9be:	e7b8      	b.n	800d932 <__gethex+0x1b2>
 800d9c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9c4:	42bd      	cmp	r5, r7
 800d9c6:	dd6f      	ble.n	800daa8 <__gethex+0x328>
 800d9c8:	1bed      	subs	r5, r5, r7
 800d9ca:	42ae      	cmp	r6, r5
 800d9cc:	dc34      	bgt.n	800da38 <__gethex+0x2b8>
 800d9ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d022      	beq.n	800da1c <__gethex+0x29c>
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d024      	beq.n	800da24 <__gethex+0x2a4>
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d115      	bne.n	800da0a <__gethex+0x28a>
 800d9de:	42ae      	cmp	r6, r5
 800d9e0:	d113      	bne.n	800da0a <__gethex+0x28a>
 800d9e2:	2e01      	cmp	r6, #1
 800d9e4:	d10b      	bne.n	800d9fe <__gethex+0x27e>
 800d9e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9ea:	2562      	movs	r5, #98	@ 0x62
 800d9ec:	9a02      	ldr	r2, [sp, #8]
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	6123      	str	r3, [r4, #16]
 800d9f4:	f8ca 3000 	str.w	r3, [sl]
 800d9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9fa:	601c      	str	r4, [r3, #0]
 800d9fc:	e73a      	b.n	800d874 <__gethex+0xf4>
 800d9fe:	1e71      	subs	r1, r6, #1
 800da00:	4620      	mov	r0, r4
 800da02:	f7fe fb50 	bl	800c0a6 <__any_on>
 800da06:	2800      	cmp	r0, #0
 800da08:	d1ed      	bne.n	800d9e6 <__gethex+0x266>
 800da0a:	4621      	mov	r1, r4
 800da0c:	9801      	ldr	r0, [sp, #4]
 800da0e:	f7fd feef 	bl	800b7f0 <_Bfree>
 800da12:	2300      	movs	r3, #0
 800da14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da16:	2550      	movs	r5, #80	@ 0x50
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	e72b      	b.n	800d874 <__gethex+0xf4>
 800da1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1f3      	bne.n	800da0a <__gethex+0x28a>
 800da22:	e7e0      	b.n	800d9e6 <__gethex+0x266>
 800da24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1dd      	bne.n	800d9e6 <__gethex+0x266>
 800da2a:	e7ee      	b.n	800da0a <__gethex+0x28a>
 800da2c:	0800e270 	.word	0x0800e270
 800da30:	0800e105 	.word	0x0800e105
 800da34:	0800e41e 	.word	0x0800e41e
 800da38:	1e6f      	subs	r7, r5, #1
 800da3a:	f1b9 0f00 	cmp.w	r9, #0
 800da3e:	d130      	bne.n	800daa2 <__gethex+0x322>
 800da40:	b127      	cbz	r7, 800da4c <__gethex+0x2cc>
 800da42:	4639      	mov	r1, r7
 800da44:	4620      	mov	r0, r4
 800da46:	f7fe fb2e 	bl	800c0a6 <__any_on>
 800da4a:	4681      	mov	r9, r0
 800da4c:	117a      	asrs	r2, r7, #5
 800da4e:	2301      	movs	r3, #1
 800da50:	f007 071f 	and.w	r7, r7, #31
 800da54:	4629      	mov	r1, r5
 800da56:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da5a:	4620      	mov	r0, r4
 800da5c:	40bb      	lsls	r3, r7
 800da5e:	1b76      	subs	r6, r6, r5
 800da60:	2502      	movs	r5, #2
 800da62:	4213      	tst	r3, r2
 800da64:	bf18      	it	ne
 800da66:	f049 0902 	orrne.w	r9, r9, #2
 800da6a:	f7ff fe23 	bl	800d6b4 <rshift>
 800da6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da72:	f1b9 0f00 	cmp.w	r9, #0
 800da76:	d047      	beq.n	800db08 <__gethex+0x388>
 800da78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d015      	beq.n	800daac <__gethex+0x32c>
 800da80:	2b03      	cmp	r3, #3
 800da82:	d017      	beq.n	800dab4 <__gethex+0x334>
 800da84:	2b01      	cmp	r3, #1
 800da86:	d109      	bne.n	800da9c <__gethex+0x31c>
 800da88:	f019 0f02 	tst.w	r9, #2
 800da8c:	d006      	beq.n	800da9c <__gethex+0x31c>
 800da8e:	f8da 3000 	ldr.w	r3, [sl]
 800da92:	ea49 0903 	orr.w	r9, r9, r3
 800da96:	f019 0f01 	tst.w	r9, #1
 800da9a:	d10e      	bne.n	800daba <__gethex+0x33a>
 800da9c:	f045 0510 	orr.w	r5, r5, #16
 800daa0:	e032      	b.n	800db08 <__gethex+0x388>
 800daa2:	f04f 0901 	mov.w	r9, #1
 800daa6:	e7d1      	b.n	800da4c <__gethex+0x2cc>
 800daa8:	2501      	movs	r5, #1
 800daaa:	e7e2      	b.n	800da72 <__gethex+0x2f2>
 800daac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daae:	f1c3 0301 	rsb	r3, r3, #1
 800dab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d0f0      	beq.n	800da9c <__gethex+0x31c>
 800daba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dabe:	f104 0314 	add.w	r3, r4, #20
 800dac2:	f04f 0c00 	mov.w	ip, #0
 800dac6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800daca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dace:	4618      	mov	r0, r3
 800dad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dad8:	d01b      	beq.n	800db12 <__gethex+0x392>
 800dada:	3201      	adds	r2, #1
 800dadc:	6002      	str	r2, [r0, #0]
 800dade:	2d02      	cmp	r5, #2
 800dae0:	f104 0314 	add.w	r3, r4, #20
 800dae4:	d13c      	bne.n	800db60 <__gethex+0x3e0>
 800dae6:	f8d8 2000 	ldr.w	r2, [r8]
 800daea:	3a01      	subs	r2, #1
 800daec:	42b2      	cmp	r2, r6
 800daee:	d109      	bne.n	800db04 <__gethex+0x384>
 800daf0:	1171      	asrs	r1, r6, #5
 800daf2:	2201      	movs	r2, #1
 800daf4:	f006 061f 	and.w	r6, r6, #31
 800daf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dafc:	fa02 f606 	lsl.w	r6, r2, r6
 800db00:	421e      	tst	r6, r3
 800db02:	d13a      	bne.n	800db7a <__gethex+0x3fa>
 800db04:	f045 0520 	orr.w	r5, r5, #32
 800db08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db0a:	601c      	str	r4, [r3, #0]
 800db0c:	9b02      	ldr	r3, [sp, #8]
 800db0e:	601f      	str	r7, [r3, #0]
 800db10:	e6b0      	b.n	800d874 <__gethex+0xf4>
 800db12:	4299      	cmp	r1, r3
 800db14:	f843 cc04 	str.w	ip, [r3, #-4]
 800db18:	d8d9      	bhi.n	800dace <__gethex+0x34e>
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	459b      	cmp	fp, r3
 800db1e:	db17      	blt.n	800db50 <__gethex+0x3d0>
 800db20:	6861      	ldr	r1, [r4, #4]
 800db22:	9801      	ldr	r0, [sp, #4]
 800db24:	3101      	adds	r1, #1
 800db26:	f7fd fe23 	bl	800b770 <_Balloc>
 800db2a:	4681      	mov	r9, r0
 800db2c:	b918      	cbnz	r0, 800db36 <__gethex+0x3b6>
 800db2e:	4b1a      	ldr	r3, [pc, #104]	@ (800db98 <__gethex+0x418>)
 800db30:	4602      	mov	r2, r0
 800db32:	2184      	movs	r1, #132	@ 0x84
 800db34:	e6c5      	b.n	800d8c2 <__gethex+0x142>
 800db36:	6922      	ldr	r2, [r4, #16]
 800db38:	f104 010c 	add.w	r1, r4, #12
 800db3c:	300c      	adds	r0, #12
 800db3e:	3202      	adds	r2, #2
 800db40:	0092      	lsls	r2, r2, #2
 800db42:	f7ff fd6d 	bl	800d620 <memcpy>
 800db46:	4621      	mov	r1, r4
 800db48:	464c      	mov	r4, r9
 800db4a:	9801      	ldr	r0, [sp, #4]
 800db4c:	f7fd fe50 	bl	800b7f0 <_Bfree>
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	1c5a      	adds	r2, r3, #1
 800db54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db58:	6122      	str	r2, [r4, #16]
 800db5a:	2201      	movs	r2, #1
 800db5c:	615a      	str	r2, [r3, #20]
 800db5e:	e7be      	b.n	800dade <__gethex+0x35e>
 800db60:	6922      	ldr	r2, [r4, #16]
 800db62:	455a      	cmp	r2, fp
 800db64:	dd0b      	ble.n	800db7e <__gethex+0x3fe>
 800db66:	2101      	movs	r1, #1
 800db68:	4620      	mov	r0, r4
 800db6a:	f7ff fda3 	bl	800d6b4 <rshift>
 800db6e:	3701      	adds	r7, #1
 800db70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db74:	42bb      	cmp	r3, r7
 800db76:	f6ff aee0 	blt.w	800d93a <__gethex+0x1ba>
 800db7a:	2501      	movs	r5, #1
 800db7c:	e7c2      	b.n	800db04 <__gethex+0x384>
 800db7e:	f016 061f 	ands.w	r6, r6, #31
 800db82:	d0fa      	beq.n	800db7a <__gethex+0x3fa>
 800db84:	4453      	add	r3, sl
 800db86:	f1c6 0620 	rsb	r6, r6, #32
 800db8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db8e:	f7fd fee3 	bl	800b958 <__hi0bits>
 800db92:	42b0      	cmp	r0, r6
 800db94:	dbe7      	blt.n	800db66 <__gethex+0x3e6>
 800db96:	e7f0      	b.n	800db7a <__gethex+0x3fa>
 800db98:	0800e105 	.word	0x0800e105

0800db9c <L_shift>:
 800db9c:	f1c2 0208 	rsb	r2, r2, #8
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	b570      	push	{r4, r5, r6, lr}
 800dba4:	f1c2 0620 	rsb	r6, r2, #32
 800dba8:	6843      	ldr	r3, [r0, #4]
 800dbaa:	6804      	ldr	r4, [r0, #0]
 800dbac:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb0:	40d3      	lsrs	r3, r2
 800dbb2:	432c      	orrs	r4, r5
 800dbb4:	6004      	str	r4, [r0, #0]
 800dbb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbba:	4288      	cmp	r0, r1
 800dbbc:	d3f4      	bcc.n	800dba8 <L_shift+0xc>
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}

0800dbc0 <__match>:
 800dbc0:	6803      	ldr	r3, [r0, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	b530      	push	{r4, r5, lr}
 800dbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbca:	b914      	cbnz	r4, 800dbd2 <__match+0x12>
 800dbcc:	6003      	str	r3, [r0, #0]
 800dbce:	2001      	movs	r0, #1
 800dbd0:	bd30      	pop	{r4, r5, pc}
 800dbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dbda:	2d19      	cmp	r5, #25
 800dbdc:	bf98      	it	ls
 800dbde:	3220      	addls	r2, #32
 800dbe0:	42a2      	cmp	r2, r4
 800dbe2:	d0f0      	beq.n	800dbc6 <__match+0x6>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e7f3      	b.n	800dbd0 <__match+0x10>

0800dbe8 <__hexnan>:
 800dbe8:	680b      	ldr	r3, [r1, #0]
 800dbea:	6801      	ldr	r1, [r0, #0]
 800dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	115e      	asrs	r6, r3, #5
 800dbf2:	f013 031f 	ands.w	r3, r3, #31
 800dbf6:	f04f 0500 	mov.w	r5, #0
 800dbfa:	b087      	sub	sp, #28
 800dbfc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc00:	4682      	mov	sl, r0
 800dc02:	4690      	mov	r8, r2
 800dc04:	46ab      	mov	fp, r5
 800dc06:	bf18      	it	ne
 800dc08:	3604      	addne	r6, #4
 800dc0a:	9301      	str	r3, [sp, #4]
 800dc0c:	9502      	str	r5, [sp, #8]
 800dc0e:	1f37      	subs	r7, r6, #4
 800dc10:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc14:	46b9      	mov	r9, r7
 800dc16:	463c      	mov	r4, r7
 800dc18:	1c4b      	adds	r3, r1, #1
 800dc1a:	784a      	ldrb	r2, [r1, #1]
 800dc1c:	9303      	str	r3, [sp, #12]
 800dc1e:	b342      	cbz	r2, 800dc72 <__hexnan+0x8a>
 800dc20:	4610      	mov	r0, r2
 800dc22:	9105      	str	r1, [sp, #20]
 800dc24:	9204      	str	r2, [sp, #16]
 800dc26:	f7ff fd96 	bl	800d756 <__hexdig_fun>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d151      	bne.n	800dcd2 <__hexnan+0xea>
 800dc2e:	9a04      	ldr	r2, [sp, #16]
 800dc30:	9905      	ldr	r1, [sp, #20]
 800dc32:	2a20      	cmp	r2, #32
 800dc34:	d818      	bhi.n	800dc68 <__hexnan+0x80>
 800dc36:	9b02      	ldr	r3, [sp, #8]
 800dc38:	459b      	cmp	fp, r3
 800dc3a:	dd13      	ble.n	800dc64 <__hexnan+0x7c>
 800dc3c:	454c      	cmp	r4, r9
 800dc3e:	d206      	bcs.n	800dc4e <__hexnan+0x66>
 800dc40:	2d07      	cmp	r5, #7
 800dc42:	dc04      	bgt.n	800dc4e <__hexnan+0x66>
 800dc44:	462a      	mov	r2, r5
 800dc46:	4649      	mov	r1, r9
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7ff ffa7 	bl	800db9c <L_shift>
 800dc4e:	4544      	cmp	r4, r8
 800dc50:	d951      	bls.n	800dcf6 <__hexnan+0x10e>
 800dc52:	2300      	movs	r3, #0
 800dc54:	f1a4 0904 	sub.w	r9, r4, #4
 800dc58:	f8cd b008 	str.w	fp, [sp, #8]
 800dc5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc60:	461d      	mov	r5, r3
 800dc62:	464c      	mov	r4, r9
 800dc64:	9903      	ldr	r1, [sp, #12]
 800dc66:	e7d7      	b.n	800dc18 <__hexnan+0x30>
 800dc68:	2a29      	cmp	r2, #41	@ 0x29
 800dc6a:	d156      	bne.n	800dd1a <__hexnan+0x132>
 800dc6c:	3102      	adds	r1, #2
 800dc6e:	f8ca 1000 	str.w	r1, [sl]
 800dc72:	f1bb 0f00 	cmp.w	fp, #0
 800dc76:	d050      	beq.n	800dd1a <__hexnan+0x132>
 800dc78:	454c      	cmp	r4, r9
 800dc7a:	d206      	bcs.n	800dc8a <__hexnan+0xa2>
 800dc7c:	2d07      	cmp	r5, #7
 800dc7e:	dc04      	bgt.n	800dc8a <__hexnan+0xa2>
 800dc80:	462a      	mov	r2, r5
 800dc82:	4649      	mov	r1, r9
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7ff ff89 	bl	800db9c <L_shift>
 800dc8a:	4544      	cmp	r4, r8
 800dc8c:	d935      	bls.n	800dcfa <__hexnan+0x112>
 800dc8e:	f1a8 0204 	sub.w	r2, r8, #4
 800dc92:	4623      	mov	r3, r4
 800dc94:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc98:	429f      	cmp	r7, r3
 800dc9a:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc9e:	d2f9      	bcs.n	800dc94 <__hexnan+0xac>
 800dca0:	1b3b      	subs	r3, r7, r4
 800dca2:	3e03      	subs	r6, #3
 800dca4:	3401      	adds	r4, #1
 800dca6:	2200      	movs	r2, #0
 800dca8:	f023 0303 	bic.w	r3, r3, #3
 800dcac:	3304      	adds	r3, #4
 800dcae:	42b4      	cmp	r4, r6
 800dcb0:	bf88      	it	hi
 800dcb2:	2304      	movhi	r3, #4
 800dcb4:	4443      	add	r3, r8
 800dcb6:	f843 2b04 	str.w	r2, [r3], #4
 800dcba:	429f      	cmp	r7, r3
 800dcbc:	d2fb      	bcs.n	800dcb6 <__hexnan+0xce>
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	b91b      	cbnz	r3, 800dcca <__hexnan+0xe2>
 800dcc2:	4547      	cmp	r7, r8
 800dcc4:	d127      	bne.n	800dd16 <__hexnan+0x12e>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	603b      	str	r3, [r7, #0]
 800dcca:	2005      	movs	r0, #5
 800dccc:	b007      	add	sp, #28
 800dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd2:	3501      	adds	r5, #1
 800dcd4:	f10b 0b01 	add.w	fp, fp, #1
 800dcd8:	2d08      	cmp	r5, #8
 800dcda:	dd05      	ble.n	800dce8 <__hexnan+0x100>
 800dcdc:	4544      	cmp	r4, r8
 800dcde:	d9c1      	bls.n	800dc64 <__hexnan+0x7c>
 800dce0:	2300      	movs	r3, #0
 800dce2:	3c04      	subs	r4, #4
 800dce4:	2501      	movs	r5, #1
 800dce6:	6023      	str	r3, [r4, #0]
 800dce8:	6822      	ldr	r2, [r4, #0]
 800dcea:	f000 000f 	and.w	r0, r0, #15
 800dcee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcf2:	6020      	str	r0, [r4, #0]
 800dcf4:	e7b6      	b.n	800dc64 <__hexnan+0x7c>
 800dcf6:	2508      	movs	r5, #8
 800dcf8:	e7b4      	b.n	800dc64 <__hexnan+0x7c>
 800dcfa:	9b01      	ldr	r3, [sp, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0de      	beq.n	800dcbe <__hexnan+0xd6>
 800dd00:	f1c3 0320 	rsb	r3, r3, #32
 800dd04:	f04f 32ff 	mov.w	r2, #4294967295
 800dd08:	40da      	lsrs	r2, r3
 800dd0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd0e:	4013      	ands	r3, r2
 800dd10:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd14:	e7d3      	b.n	800dcbe <__hexnan+0xd6>
 800dd16:	3f04      	subs	r7, #4
 800dd18:	e7d1      	b.n	800dcbe <__hexnan+0xd6>
 800dd1a:	2004      	movs	r0, #4
 800dd1c:	e7d6      	b.n	800dccc <__hexnan+0xe4>

0800dd1e <__ascii_mbtowc>:
 800dd1e:	b082      	sub	sp, #8
 800dd20:	b901      	cbnz	r1, 800dd24 <__ascii_mbtowc+0x6>
 800dd22:	a901      	add	r1, sp, #4
 800dd24:	b142      	cbz	r2, 800dd38 <__ascii_mbtowc+0x1a>
 800dd26:	b14b      	cbz	r3, 800dd3c <__ascii_mbtowc+0x1e>
 800dd28:	7813      	ldrb	r3, [r2, #0]
 800dd2a:	600b      	str	r3, [r1, #0]
 800dd2c:	7812      	ldrb	r2, [r2, #0]
 800dd2e:	1e10      	subs	r0, r2, #0
 800dd30:	bf18      	it	ne
 800dd32:	2001      	movne	r0, #1
 800dd34:	b002      	add	sp, #8
 800dd36:	4770      	bx	lr
 800dd38:	4610      	mov	r0, r2
 800dd3a:	e7fb      	b.n	800dd34 <__ascii_mbtowc+0x16>
 800dd3c:	f06f 0001 	mvn.w	r0, #1
 800dd40:	e7f8      	b.n	800dd34 <__ascii_mbtowc+0x16>

0800dd42 <_realloc_r>:
 800dd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd46:	4680      	mov	r8, r0
 800dd48:	4615      	mov	r5, r2
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	b921      	cbnz	r1, 800dd58 <_realloc_r+0x16>
 800dd4e:	4611      	mov	r1, r2
 800dd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	f7fd bc80 	b.w	800b658 <_malloc_r>
 800dd58:	b92a      	cbnz	r2, 800dd66 <_realloc_r+0x24>
 800dd5a:	f7fd fc09 	bl	800b570 <_free_r>
 800dd5e:	2400      	movs	r4, #0
 800dd60:	4620      	mov	r0, r4
 800dd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd66:	f000 f8c4 	bl	800def2 <_malloc_usable_size_r>
 800dd6a:	4285      	cmp	r5, r0
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	d802      	bhi.n	800dd76 <_realloc_r+0x34>
 800dd70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd74:	d8f4      	bhi.n	800dd60 <_realloc_r+0x1e>
 800dd76:	4629      	mov	r1, r5
 800dd78:	4640      	mov	r0, r8
 800dd7a:	f7fd fc6d 	bl	800b658 <_malloc_r>
 800dd7e:	4607      	mov	r7, r0
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d0ec      	beq.n	800dd5e <_realloc_r+0x1c>
 800dd84:	42b5      	cmp	r5, r6
 800dd86:	462a      	mov	r2, r5
 800dd88:	4621      	mov	r1, r4
 800dd8a:	bf28      	it	cs
 800dd8c:	4632      	movcs	r2, r6
 800dd8e:	f7ff fc47 	bl	800d620 <memcpy>
 800dd92:	4621      	mov	r1, r4
 800dd94:	4640      	mov	r0, r8
 800dd96:	463c      	mov	r4, r7
 800dd98:	f7fd fbea 	bl	800b570 <_free_r>
 800dd9c:	e7e0      	b.n	800dd60 <_realloc_r+0x1e>

0800dd9e <__ascii_wctomb>:
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4608      	mov	r0, r1
 800dda2:	b141      	cbz	r1, 800ddb6 <__ascii_wctomb+0x18>
 800dda4:	2aff      	cmp	r2, #255	@ 0xff
 800dda6:	d904      	bls.n	800ddb2 <__ascii_wctomb+0x14>
 800dda8:	228a      	movs	r2, #138	@ 0x8a
 800ddaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	4770      	bx	lr
 800ddb2:	2001      	movs	r0, #1
 800ddb4:	700a      	strb	r2, [r1, #0]
 800ddb6:	4770      	bx	lr

0800ddb8 <fiprintf>:
 800ddb8:	b40e      	push	{r1, r2, r3}
 800ddba:	b503      	push	{r0, r1, lr}
 800ddbc:	ab03      	add	r3, sp, #12
 800ddbe:	4601      	mov	r1, r0
 800ddc0:	4805      	ldr	r0, [pc, #20]	@ (800ddd8 <fiprintf+0x20>)
 800ddc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc6:	6800      	ldr	r0, [r0, #0]
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	f7ff f995 	bl	800d0f8 <_vfiprintf_r>
 800ddce:	b002      	add	sp, #8
 800ddd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddd4:	b003      	add	sp, #12
 800ddd6:	4770      	bx	lr
 800ddd8:	20000018 	.word	0x20000018

0800dddc <__swhatbuf_r>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	460c      	mov	r4, r1
 800dde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dde4:	b096      	sub	sp, #88	@ 0x58
 800dde6:	4615      	mov	r5, r2
 800dde8:	2900      	cmp	r1, #0
 800ddea:	461e      	mov	r6, r3
 800ddec:	da0c      	bge.n	800de08 <__swhatbuf_r+0x2c>
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddf6:	bf14      	ite	ne
 800ddf8:	2340      	movne	r3, #64	@ 0x40
 800ddfa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddfe:	2000      	movs	r0, #0
 800de00:	6031      	str	r1, [r6, #0]
 800de02:	602b      	str	r3, [r5, #0]
 800de04:	b016      	add	sp, #88	@ 0x58
 800de06:	bd70      	pop	{r4, r5, r6, pc}
 800de08:	466a      	mov	r2, sp
 800de0a:	f000 f849 	bl	800dea0 <_fstat_r>
 800de0e:	2800      	cmp	r0, #0
 800de10:	dbed      	blt.n	800ddee <__swhatbuf_r+0x12>
 800de12:	9901      	ldr	r1, [sp, #4]
 800de14:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de18:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de1c:	4259      	negs	r1, r3
 800de1e:	4159      	adcs	r1, r3
 800de20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de24:	e7eb      	b.n	800ddfe <__swhatbuf_r+0x22>

0800de26 <__smakebuf_r>:
 800de26:	898b      	ldrh	r3, [r1, #12]
 800de28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de2a:	079d      	lsls	r5, r3, #30
 800de2c:	4606      	mov	r6, r0
 800de2e:	460c      	mov	r4, r1
 800de30:	d507      	bpl.n	800de42 <__smakebuf_r+0x1c>
 800de32:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	2301      	movs	r3, #1
 800de3c:	6163      	str	r3, [r4, #20]
 800de3e:	b003      	add	sp, #12
 800de40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de42:	ab01      	add	r3, sp, #4
 800de44:	466a      	mov	r2, sp
 800de46:	f7ff ffc9 	bl	800dddc <__swhatbuf_r>
 800de4a:	9f00      	ldr	r7, [sp, #0]
 800de4c:	4605      	mov	r5, r0
 800de4e:	4630      	mov	r0, r6
 800de50:	4639      	mov	r1, r7
 800de52:	f7fd fc01 	bl	800b658 <_malloc_r>
 800de56:	b948      	cbnz	r0, 800de6c <__smakebuf_r+0x46>
 800de58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de5c:	059a      	lsls	r2, r3, #22
 800de5e:	d4ee      	bmi.n	800de3e <__smakebuf_r+0x18>
 800de60:	f023 0303 	bic.w	r3, r3, #3
 800de64:	f043 0302 	orr.w	r3, r3, #2
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	e7e2      	b.n	800de32 <__smakebuf_r+0xc>
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	6020      	str	r0, [r4, #0]
 800de70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de74:	81a3      	strh	r3, [r4, #12]
 800de76:	9b01      	ldr	r3, [sp, #4]
 800de78:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de7c:	b15b      	cbz	r3, 800de96 <__smakebuf_r+0x70>
 800de7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de82:	4630      	mov	r0, r6
 800de84:	f000 f81e 	bl	800dec4 <_isatty_r>
 800de88:	b128      	cbz	r0, 800de96 <__smakebuf_r+0x70>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f023 0303 	bic.w	r3, r3, #3
 800de90:	f043 0301 	orr.w	r3, r3, #1
 800de94:	81a3      	strh	r3, [r4, #12]
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	431d      	orrs	r5, r3
 800de9a:	81a5      	strh	r5, [r4, #12]
 800de9c:	e7cf      	b.n	800de3e <__smakebuf_r+0x18>
	...

0800dea0 <_fstat_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	2300      	movs	r3, #0
 800dea4:	4d06      	ldr	r5, [pc, #24]	@ (800dec0 <_fstat_r+0x20>)
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	4611      	mov	r1, r2
 800deac:	602b      	str	r3, [r5, #0]
 800deae:	f7f4 fa1e 	bl	80022ee <_fstat>
 800deb2:	1c43      	adds	r3, r0, #1
 800deb4:	d102      	bne.n	800debc <_fstat_r+0x1c>
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	b103      	cbz	r3, 800debc <_fstat_r+0x1c>
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	bf00      	nop
 800dec0:	20000534 	.word	0x20000534

0800dec4 <_isatty_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	2300      	movs	r3, #0
 800dec8:	4d05      	ldr	r5, [pc, #20]	@ (800dee0 <_isatty_r+0x1c>)
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	602b      	str	r3, [r5, #0]
 800ded0:	f7f4 fa1d 	bl	800230e <_isatty>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_isatty_r+0x1a>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_isatty_r+0x1a>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	20000534 	.word	0x20000534

0800dee4 <abort>:
 800dee4:	2006      	movs	r0, #6
 800dee6:	b508      	push	{r3, lr}
 800dee8:	f000 f834 	bl	800df54 <raise>
 800deec:	2001      	movs	r0, #1
 800deee:	f7f4 f9ae 	bl	800224e <_exit>

0800def2 <_malloc_usable_size_r>:
 800def2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def6:	1f18      	subs	r0, r3, #4
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfbc      	itt	lt
 800defc:	580b      	ldrlt	r3, [r1, r0]
 800defe:	18c0      	addlt	r0, r0, r3
 800df00:	4770      	bx	lr

0800df02 <_raise_r>:
 800df02:	291f      	cmp	r1, #31
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4605      	mov	r5, r0
 800df08:	460c      	mov	r4, r1
 800df0a:	d904      	bls.n	800df16 <_raise_r+0x14>
 800df0c:	2316      	movs	r3, #22
 800df0e:	6003      	str	r3, [r0, #0]
 800df10:	f04f 30ff 	mov.w	r0, #4294967295
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df18:	b112      	cbz	r2, 800df20 <_raise_r+0x1e>
 800df1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df1e:	b94b      	cbnz	r3, 800df34 <_raise_r+0x32>
 800df20:	4628      	mov	r0, r5
 800df22:	f000 f831 	bl	800df88 <_getpid_r>
 800df26:	4622      	mov	r2, r4
 800df28:	4601      	mov	r1, r0
 800df2a:	4628      	mov	r0, r5
 800df2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df30:	f000 b818 	b.w	800df64 <_kill_r>
 800df34:	2b01      	cmp	r3, #1
 800df36:	d00a      	beq.n	800df4e <_raise_r+0x4c>
 800df38:	1c59      	adds	r1, r3, #1
 800df3a:	d103      	bne.n	800df44 <_raise_r+0x42>
 800df3c:	2316      	movs	r3, #22
 800df3e:	6003      	str	r3, [r0, #0]
 800df40:	2001      	movs	r0, #1
 800df42:	e7e7      	b.n	800df14 <_raise_r+0x12>
 800df44:	2100      	movs	r1, #0
 800df46:	4620      	mov	r0, r4
 800df48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df4c:	4798      	blx	r3
 800df4e:	2000      	movs	r0, #0
 800df50:	e7e0      	b.n	800df14 <_raise_r+0x12>
	...

0800df54 <raise>:
 800df54:	4b02      	ldr	r3, [pc, #8]	@ (800df60 <raise+0xc>)
 800df56:	4601      	mov	r1, r0
 800df58:	6818      	ldr	r0, [r3, #0]
 800df5a:	f7ff bfd2 	b.w	800df02 <_raise_r>
 800df5e:	bf00      	nop
 800df60:	20000018 	.word	0x20000018

0800df64 <_kill_r>:
 800df64:	b538      	push	{r3, r4, r5, lr}
 800df66:	2300      	movs	r3, #0
 800df68:	4d06      	ldr	r5, [pc, #24]	@ (800df84 <_kill_r+0x20>)
 800df6a:	4604      	mov	r4, r0
 800df6c:	4608      	mov	r0, r1
 800df6e:	4611      	mov	r1, r2
 800df70:	602b      	str	r3, [r5, #0]
 800df72:	f7f4 f95c 	bl	800222e <_kill>
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	d102      	bne.n	800df80 <_kill_r+0x1c>
 800df7a:	682b      	ldr	r3, [r5, #0]
 800df7c:	b103      	cbz	r3, 800df80 <_kill_r+0x1c>
 800df7e:	6023      	str	r3, [r4, #0]
 800df80:	bd38      	pop	{r3, r4, r5, pc}
 800df82:	bf00      	nop
 800df84:	20000534 	.word	0x20000534

0800df88 <_getpid_r>:
 800df88:	f7f4 b949 	b.w	800221e <_getpid>

0800df8c <_init>:
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8e:	bf00      	nop
 800df90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df92:	bc08      	pop	{r3}
 800df94:	469e      	mov	lr, r3
 800df96:	4770      	bx	lr

0800df98 <_fini>:
 800df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9a:	bf00      	nop
 800df9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9e:	bc08      	pop	{r3}
 800dfa0:	469e      	mov	lr, r3
 800dfa2:	4770      	bx	lr
