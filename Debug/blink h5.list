
blink h5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcf4  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800df50  0800df50  0000ef50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e408  0800e408  000101ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e408  0800e408  0000f408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e410  0800e410  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e410  0800e410  0000f410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e414  0800e414  0000f414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800e418  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200001ec  0800e604  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800e604  00010574  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f94  00000000  00000000  00010222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002768  00000000  00000000  000281b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0002a920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd1  00000000  00000000  0002bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002356d  00000000  00000000  0002cd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018227  00000000  00000000  000502a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55db  00000000  00000000  000684cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014daa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e70  00000000  00000000  0014daec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0015495c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001ec 	.word	0x200001ec
 8000274:	00000000 	.word	0x00000000
 8000278:	0800df34 	.word	0x0800df34

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001f0 	.word	0x200001f0
 8000294:	0800df34 	.word	0x0800df34

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:
static float K_voltage = 0.0;
static float X_voltage = 0.0;
static float Q_voltage = 0.001;
static float R_voltage = 0.01;

void __io_putchar(char ch) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	230a      	movs	r3, #10
 8001042:	2201      	movs	r2, #1
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001046:	f007 fe9f 	bl	8008d88 <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000034c 	.word	0x2000034c

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105e:	f001 fa15 	bl	800248c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001062:	f000 f8b7 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 fae3 	bl	8001630 <MX_GPIO_Init>
  MX_ADC1_Init();
 800106a:	f000 f929 	bl	80012c0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800106e:	f000 f98d 	bl	800138c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001072:	f000 fa91 	bl	8001598 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001076:	f000 f9df 	bl	8001438 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001080:	4849      	ldr	r0, [pc, #292]	@ (80011a8 <main+0x150>)
 8001082:	f003 f83d 	bl	8004100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108c:	4846      	ldr	r0, [pc, #280]	@ (80011a8 <main+0x150>)
 800108e:	f003 f837 	bl	8004100 <HAL_GPIO_WritePin>
  Beep_Beep();
 8001092:	f000 fe2b 	bl	8001cec <Beep_Beep>

  uint32_t address = 0x000000;
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 3; i++) {
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	e013      	b.n	80010c8 <main+0x70>
	  ReadData(address, sizeof(float));
 80010a0:	2104      	movs	r1, #4
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f000 fdbe 	bl	8001c24 <ReadData>
	  if (!isnan(read_data_float)) {
 80010a8:	4b40      	ldr	r3, [pc, #256]	@ (80011ac <main+0x154>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	eef4 7a67 	vcmp.f32	s15, s15
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d601      	bvs.n	80010bc <main+0x64>
		  break;
 80010b8:	bf00      	nop
 80010ba:	e008      	b.n	80010ce <main+0x76>
	  }
	  HAL_Delay(50);
 80010bc:	2032      	movs	r0, #50	@ 0x32
 80010be:	f001 faa3 	bl	8002608 <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3301      	adds	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	dde8      	ble.n	80010a0 <main+0x48>
  {
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
//	  HAL_Delay(200);
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
//	  HAL_Delay(200);
	  ReadData(address, sizeof(float));
 80010ce:	2104      	movs	r1, #4
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f000 fda7 	bl	8001c24 <ReadData>
	  printf("Read Data: %f |", read_data_float);
 80010d6:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <main+0x154>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa48 	bl	8000570 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4832      	ldr	r0, [pc, #200]	@ (80011b0 <main+0x158>)
 80010e6:	f009 fabb 	bl	800a660 <iprintf>
	  //Membaca ADC
	  ReadADC_voltage_current();
 80010ea:	f000 fb21 	bl	8001730 <ReadADC_voltage_current>
	  printf("volt : %.4f |", voltage_current);
 80010ee:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <main+0x15c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa3c 	bl	8000570 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	482e      	ldr	r0, [pc, #184]	@ (80011b8 <main+0x160>)
 80010fe:	f009 faaf 	bl	800a660 <iprintf>
	  printf("Arus : %.4f A |", current);
 8001102:	4b2e      	ldr	r3, [pc, #184]	@ (80011bc <main+0x164>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa32 	bl	8000570 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	482b      	ldr	r0, [pc, #172]	@ (80011c0 <main+0x168>)
 8001112:	f009 faa5 	bl	800a660 <iprintf>
	  if(voltage <13.1 && before == 0){
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <main+0x16c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa28 	bl	8000570 <__aeabi_f2d>
 8001120:	a31f      	add	r3, pc, #124	@ (adr r3, 80011a0 <main+0x148>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fced 	bl	8000b04 <__aeabi_dcmplt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d012      	beq.n	8001156 <main+0xfe>
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <main+0x170>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10e      	bne.n	8001156 <main+0xfe>
		  write_value(konsumsiEnergi, address);
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <main+0x174>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	eeb0 0a67 	vmov.f32	s0, s15
 8001144:	f000 fcec 	bl	8001b20 <write_value>
		  HAL_Delay(50);
 8001148:	2032      	movs	r0, #50	@ 0x32
 800114a:	f001 fa5d 	bl	8002608 <HAL_Delay>
		  before = 1;
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <main+0x170>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e013      	b.n	800117e <main+0x126>
	  }
	  else if(voltage > 13.1 && before == 1){
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <main+0x16c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa08 	bl	8000570 <__aeabi_f2d>
 8001160:	a30f      	add	r3, pc, #60	@ (adr r3, 80011a0 <main+0x148>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fceb 	bl	8000b40 <__aeabi_dcmpgt>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <main+0x126>
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <main+0x170>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d102      	bne.n	800117e <main+0x126>
		  before=0;
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <main+0x170>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	  }
	  printf("Consumption: %.4f Ah\n", konsumsiEnergi);
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <main+0x174>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9f4 	bl	8000570 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <main+0x178>)
 800118e:	f009 fa67 	bl	800a660 <iprintf>
	  HAL_Delay(100);
 8001192:	2064      	movs	r0, #100	@ 0x64
 8001194:	f001 fa38 	bl	8002608 <HAL_Delay>
	  ReadData(address, sizeof(float));
 8001198:	e799      	b.n	80010ce <main+0x76>
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	33333333 	.word	0x33333333
 80011a4:	402a3333 	.word	0x402a3333
 80011a8:	42020400 	.word	0x42020400
 80011ac:	20000408 	.word	0x20000408
 80011b0:	0800df50 	.word	0x0800df50
 80011b4:	200003f8 	.word	0x200003f8
 80011b8:	0800df60 	.word	0x0800df60
 80011bc:	200003fc 	.word	0x200003fc
 80011c0:	0800df70 	.word	0x0800df70
 80011c4:	200003f4 	.word	0x200003f4
 80011c8:	2000040c 	.word	0x2000040c
 80011cc:	20000404 	.word	0x20000404
 80011d0:	0800df80 	.word	0x0800df80

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b09c      	sub	sp, #112	@ 0x70
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2250      	movs	r2, #80	@ 0x50
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f009 fab1 	bl	800a74a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <SystemClock_Config+0xe4>)
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4a2e      	ldr	r2, [pc, #184]	@ (80012b8 <SystemClock_Config+0xe4>)
 8001200:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001204:	6113      	str	r3, [r2, #16]
 8001206:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <SystemClock_Config+0xe4>)
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001212:	bf00      	nop
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <SystemClock_Config+0xe4>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b08      	cmp	r3, #8
 800121e:	d1f9      	bne.n	8001214 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 8001220:	2312      	movs	r3, #18
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8001228:	2308      	movs	r3, #8
 800122a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001236:	2320      	movs	r3, #32
 8001238:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800123e:	2302      	movs	r3, #2
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001246:	2340      	movs	r3, #64	@ 0x40
 8001248:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001256:	2304      	movs	r3, #4
 8001258:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800125a:	2300      	movs	r3, #0
 800125c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	4618      	mov	r0, r3
 8001268:	f002 ff62 	bl	8004130 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001272:	f000 fd75 	bl	8001d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	231f      	movs	r3, #31
 8001278:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800127e:	2308      	movs	r3, #8
 8001280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fb83 	bl	80049a0 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80012a0:	f000 fd5e 	bl	8001d60 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <SystemClock_Config+0xe8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <SystemClock_Config+0xe8>)
 80012aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3770      	adds	r7, #112	@ 0x70
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	44020800 	.word	0x44020800
 80012bc:	40022000 	.word	0x40022000

080012c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2220      	movs	r2, #32
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f009 fa3c 	bl	800a74a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001384 <MX_ADC1_Init+0xc4>)
 80012d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ec:	4b24      	ldr	r3, [pc, #144]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012f4:	2204      	movs	r2, #4
 80012f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <MX_ADC1_Init+0xc0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001300:	2201      	movs	r2, #1
 8001302:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001306:	2201      	movs	r2, #1
 8001308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <MX_ADC1_Init+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <MX_ADC1_Init+0xc0>)
 800131a:	2200      	movs	r2, #0
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_ADC1_Init+0xc0>)
 800132e:	2200      	movs	r2, #0
 8001330:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800133a:	4811      	ldr	r0, [pc, #68]	@ (8001380 <MX_ADC1_Init+0xc0>)
 800133c:	f001 fc0c 	bl	8002b58 <HAL_ADC_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001346:	f000 fd0b 	bl	8001d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_ADC1_Init+0xc8>)
 800134c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800134e:	2306      	movs	r3, #6
 8001350:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001356:	237f      	movs	r3, #127	@ 0x7f
 8001358:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800135a:	2304      	movs	r3, #4
 800135c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_ADC1_Init+0xc0>)
 8001368:	f001 fe76 	bl	8003058 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001372:	f000 fcf5 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000208 	.word	0x20000208
 8001384:	42028000 	.word	0x42028000
 8001388:	14f00020 	.word	0x14f00020

0800138c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <MX_SPI1_Init+0xa4>)
 8001392:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <MX_SPI1_Init+0xa8>)
 8001394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <MX_SPI1_Init+0xa4>)
 8001398:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800139c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139e:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013a4:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013d8:	2207      	movs	r2, #7
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_SPI1_Init+0xa4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_SPI1_Init+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_SPI1_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_SPI1_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_SPI1_Init+0xa4>)
 8001416:	2200      	movs	r2, #0
 8001418:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_SPI1_Init+0xa4>)
 800141c:	f005 fed0 	bl	80071c0 <HAL_SPI_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001426:	f000 fc9b 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000270 	.word	0x20000270
 8001434:	40013000 	.word	0x40013000

08001438 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b09c      	sub	sp, #112	@ 0x70
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001458:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2234      	movs	r2, #52	@ 0x34
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f009 f969 	bl	800a74a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001478:	4b45      	ldr	r3, [pc, #276]	@ (8001590 <MX_TIM1_Init+0x158>)
 800147a:	4a46      	ldr	r2, [pc, #280]	@ (8001594 <MX_TIM1_Init+0x15c>)
 800147c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800147e:	4b44      	ldr	r3, [pc, #272]	@ (8001590 <MX_TIM1_Init+0x158>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b42      	ldr	r3, [pc, #264]	@ (8001590 <MX_TIM1_Init+0x158>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 800148a:	4b41      	ldr	r3, [pc, #260]	@ (8001590 <MX_TIM1_Init+0x158>)
 800148c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <MX_TIM1_Init+0x158>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001498:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <MX_TIM1_Init+0x158>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b3c      	ldr	r3, [pc, #240]	@ (8001590 <MX_TIM1_Init+0x158>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a4:	483a      	ldr	r0, [pc, #232]	@ (8001590 <MX_TIM1_Init+0x158>)
 80014a6:	f006 fc06 	bl	8007cb6 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014b0:	f000 fc56 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014be:	4619      	mov	r1, r3
 80014c0:	4833      	ldr	r0, [pc, #204]	@ (8001590 <MX_TIM1_Init+0x158>)
 80014c2:	f006 fe93 	bl	80081ec <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014cc:	f000 fc48 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d0:	482f      	ldr	r0, [pc, #188]	@ (8001590 <MX_TIM1_Init+0x158>)
 80014d2:	f006 fc47 	bl	8007d64 <HAL_TIM_PWM_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014dc:	f000 fc40 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f0:	4619      	mov	r1, r3
 80014f2:	4827      	ldr	r0, [pc, #156]	@ (8001590 <MX_TIM1_Init+0x158>)
 80014f4:	f007 fb0a 	bl	8008b0c <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014fe:	f000 fc2f 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	@ 0x60
 8001504:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001522:	2200      	movs	r2, #0
 8001524:	4619      	mov	r1, r3
 8001526:	481a      	ldr	r0, [pc, #104]	@ (8001590 <MX_TIM1_Init+0x158>)
 8001528:	f006 fd4c 	bl	8007fc4 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001532:	f000 fc15 	bl	8001d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800155c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4807      	ldr	r0, [pc, #28]	@ (8001590 <MX_TIM1_Init+0x158>)
 8001574:	f007 fb32 	bl	8008bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800157e:	f000 fbef 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001582:	4803      	ldr	r0, [pc, #12]	@ (8001590 <MX_TIM1_Init+0x158>)
 8001584:	f000 fd4c 	bl	8002020 <HAL_TIM_MspPostInit>

}
 8001588:	bf00      	nop
 800158a:	3770      	adds	r7, #112	@ 0x70
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000300 	.word	0x20000300
 8001594:	40012c00 	.word	0x40012c00

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 800159e:	4a23      	ldr	r2, [pc, #140]	@ (800162c <MX_USART1_UART_Init+0x94>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e0:	4811      	ldr	r0, [pc, #68]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015e2:	f007 fb81 	bl	8008ce8 <HAL_UART_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 fbb8 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f0:	2100      	movs	r1, #0
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 80015f4:	f008 f83c 	bl	8009670 <HAL_UARTEx_SetTxFifoThreshold>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015fe:	f000 fbaf 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	4808      	ldr	r0, [pc, #32]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 8001606:	f008 f871 	bl	80096ec <HAL_UARTEx_SetRxFifoThreshold>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001610:	f000 fba6 	bl	8001d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_USART1_UART_Init+0x90>)
 8001616:	f007 fff2 	bl	80095fe <HAL_UARTEx_DisableFifoMode>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001620:	f000 fb9e 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000034c 	.word	0x2000034c
 800162c:	40013800 	.word	0x40013800

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <MX_GPIO_Init+0xf0>)
 8001648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164c:	4a34      	ldr	r2, [pc, #208]	@ (8001720 <MX_GPIO_Init+0xf0>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001656:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <MX_GPIO_Init+0xf0>)
 8001658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <MX_GPIO_Init+0xf0>)
 8001666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800166a:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <MX_GPIO_Init+0xf0>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001674:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <MX_GPIO_Init+0xf0>)
 8001676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <MX_GPIO_Init+0xf0>)
 8001684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001688:	4a25      	ldr	r2, [pc, #148]	@ (8001720 <MX_GPIO_Init+0xf0>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <MX_GPIO_Init+0xf0>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2110      	movs	r1, #16
 80016a4:	481f      	ldr	r0, [pc, #124]	@ (8001724 <MX_GPIO_Init+0xf4>)
 80016a6:	f002 fd2b 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80016b0:	481d      	ldr	r0, [pc, #116]	@ (8001728 <MX_GPIO_Init+0xf8>)
 80016b2:	f002 fd25 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	481c      	ldr	r0, [pc, #112]	@ (800172c <MX_GPIO_Init+0xfc>)
 80016bc:	f002 fd20 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c0:	2310      	movs	r3, #16
 80016c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4813      	ldr	r0, [pc, #76]	@ (8001724 <MX_GPIO_Init+0xf4>)
 80016d8:	f002 fbc0 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016dc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <MX_GPIO_Init+0xf8>)
 80016f6:	f002 fbb1 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4619      	mov	r1, r3
 8001710:	4806      	ldr	r0, [pc, #24]	@ (800172c <MX_GPIO_Init+0xfc>)
 8001712:	f002 fba3 	bl	8003e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	44020c00 	.word	0x44020c00
 8001724:	42020000 	.word	0x42020000
 8001728:	42020400 	.word	0x42020400
 800172c:	42020800 	.word	0x42020800

08001730 <ReadADC_voltage_current>:

/* USER CODE BEGIN 4 */
void ReadADC_voltage_current(void){
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f009 f804 	bl	800a74a <memset>
	sumADC_voltage = sumADC_current = 0;
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <ReadADC_voltage_current+0x28>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <ReadADC_voltage_current+0x28>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a03      	ldr	r2, [pc, #12]	@ (800175c <ReadADC_voltage_current+0x2c>)
 800174e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 500; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
 8001754:	e048      	b.n	80017e8 <ReadADC_voltage_current+0xb8>
 8001756:	bf00      	nop
 8001758:	200003f0 	.word	0x200003f0
 800175c:	200003ec 	.word	0x200003ec
		sConfig.Channel = ADC_CHANNEL_5;
 8001760:	4bc5      	ldr	r3, [pc, #788]	@ (8001a78 <ReadADC_voltage_current+0x348>)
 8001762:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001764:	2306      	movs	r3, #6
 8001766:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 8001768:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800176c:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	48c2      	ldr	r0, [pc, #776]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 8001774:	f001 fc70 	bl	8003058 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 8001778:	48c0      	ldr	r0, [pc, #768]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 800177a:	f001 fb3b 	bl	8002df4 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800177e:	f04f 31ff 	mov.w	r1, #4294967295
 8001782:	48be      	ldr	r0, [pc, #760]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 8001784:	f001 fbcc 	bl	8002f20 <HAL_ADC_PollForConversion>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <ReadADC_voltage_current+0x70>
			sumADC_voltage += HAL_ADC_GetValue(&hadc1);
 800178e:	48bb      	ldr	r0, [pc, #748]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 8001790:	f001 fc55 	bl	800303e <HAL_ADC_GetValue>
 8001794:	4602      	mov	r2, r0
 8001796:	4bba      	ldr	r3, [pc, #744]	@ (8001a80 <ReadADC_voltage_current+0x350>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4ab8      	ldr	r2, [pc, #736]	@ (8001a80 <ReadADC_voltage_current+0x350>)
 800179e:	6013      	str	r3, [r2, #0]
		}
		HAL_ADC_Stop(&hadc1);
 80017a0:	48b6      	ldr	r0, [pc, #728]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 80017a2:	f001 fb8a 	bl	8002eba <HAL_ADC_Stop>
		sConfig.Channel = ADC_CHANNEL_1;
 80017a6:	4bb7      	ldr	r3, [pc, #732]	@ (8001a84 <ReadADC_voltage_current+0x354>)
 80017a8:	607b      	str	r3, [r7, #4]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	48b3      	ldr	r0, [pc, #716]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 80017b0:	f001 fc52 	bl	8003058 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80017b4:	48b1      	ldr	r0, [pc, #708]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 80017b6:	f001 fb1d 	bl	8002df4 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80017ba:	f04f 31ff 	mov.w	r1, #4294967295
 80017be:	48af      	ldr	r0, [pc, #700]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 80017c0:	f001 fbae 	bl	8002f20 <HAL_ADC_PollForConversion>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d108      	bne.n	80017dc <ReadADC_voltage_current+0xac>
			sumADC_current += HAL_ADC_GetValue(&hadc1);
 80017ca:	48ac      	ldr	r0, [pc, #688]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 80017cc:	f001 fc37 	bl	800303e <HAL_ADC_GetValue>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4bad      	ldr	r3, [pc, #692]	@ (8001a88 <ReadADC_voltage_current+0x358>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4aab      	ldr	r2, [pc, #684]	@ (8001a88 <ReadADC_voltage_current+0x358>)
 80017da:	6013      	str	r3, [r2, #0]
		}
		HAL_ADC_Stop(&hadc1);
 80017dc:	48a7      	ldr	r0, [pc, #668]	@ (8001a7c <ReadADC_voltage_current+0x34c>)
 80017de:	f001 fb6c 	bl	8002eba <HAL_ADC_Stop>
	for (int i = 0; i < 500; i++) {
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	3301      	adds	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017ee:	dbb7      	blt.n	8001760 <ReadADC_voltage_current+0x30>
	}
	value_voltage = sumADC_voltage / 500;
 80017f0:	4ba3      	ldr	r3, [pc, #652]	@ (8001a80 <ReadADC_voltage_current+0x350>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4aa5      	ldr	r2, [pc, #660]	@ (8001a8c <ReadADC_voltage_current+0x35c>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4ba4      	ldr	r3, [pc, #656]	@ (8001a90 <ReadADC_voltage_current+0x360>)
 8001800:	801a      	strh	r2, [r3, #0]
	value_current = sumADC_current / 500;
 8001802:	4ba1      	ldr	r3, [pc, #644]	@ (8001a88 <ReadADC_voltage_current+0x358>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4aa1      	ldr	r2, [pc, #644]	@ (8001a8c <ReadADC_voltage_current+0x35c>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	095b      	lsrs	r3, r3, #5
 800180e:	b29a      	uxth	r2, r3
 8001810:	4ba0      	ldr	r3, [pc, #640]	@ (8001a94 <ReadADC_voltage_current+0x364>)
 8001812:	801a      	strh	r2, [r3, #0]

	// Update Kalman Filter for Voltage
	P_voltage = P_voltage + Q_voltage;
 8001814:	4ba0      	ldr	r3, [pc, #640]	@ (8001a98 <ReadADC_voltage_current+0x368>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	4ba0      	ldr	r3, [pc, #640]	@ (8001a9c <ReadADC_voltage_current+0x36c>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	4b9c      	ldr	r3, [pc, #624]	@ (8001a98 <ReadADC_voltage_current+0x368>)
 8001826:	edc3 7a00 	vstr	s15, [r3]
	K_voltage = P_voltage / (P_voltage + R_voltage);
 800182a:	4b9b      	ldr	r3, [pc, #620]	@ (8001a98 <ReadADC_voltage_current+0x368>)
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	4b99      	ldr	r3, [pc, #612]	@ (8001a98 <ReadADC_voltage_current+0x368>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	4b9a      	ldr	r3, [pc, #616]	@ (8001aa0 <ReadADC_voltage_current+0x370>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	4b97      	ldr	r3, [pc, #604]	@ (8001aa4 <ReadADC_voltage_current+0x374>)
 8001846:	edc3 7a00 	vstr	s15, [r3]
	X_voltage = X_voltage + K_voltage * (value_voltage - X_voltage);
 800184a:	4b91      	ldr	r3, [pc, #580]	@ (8001a90 <ReadADC_voltage_current+0x360>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	4b94      	ldr	r3, [pc, #592]	@ (8001aa8 <ReadADC_voltage_current+0x378>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001860:	4b90      	ldr	r3, [pc, #576]	@ (8001aa4 <ReadADC_voltage_current+0x374>)
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186a:	4b8f      	ldr	r3, [pc, #572]	@ (8001aa8 <ReadADC_voltage_current+0x378>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa8 <ReadADC_voltage_current+0x378>)
 8001876:	edc3 7a00 	vstr	s15, [r3]
	P_voltage = (1 - K_voltage) * P_voltage;
 800187a:	4b8a      	ldr	r3, [pc, #552]	@ (8001aa4 <ReadADC_voltage_current+0x374>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001888:	4b83      	ldr	r3, [pc, #524]	@ (8001a98 <ReadADC_voltage_current+0x368>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001892:	4b81      	ldr	r3, [pc, #516]	@ (8001a98 <ReadADC_voltage_current+0x368>)
 8001894:	edc3 7a00 	vstr	s15, [r3]
	voltage = (X_voltage * 14.6) / 3816;
 8001898:	4b83      	ldr	r3, [pc, #524]	@ (8001aa8 <ReadADC_voltage_current+0x378>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe67 	bl	8000570 <__aeabi_f2d>
 80018a2:	a365      	add	r3, pc, #404	@ (adr r3, 8001a38 <ReadADC_voltage_current+0x308>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe feba 	bl	8000620 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	a362      	add	r3, pc, #392	@ (adr r3, 8001a40 <ReadADC_voltage_current+0x310>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe ffdb 	bl	8000874 <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f9a3 	bl	8000c10 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a77      	ldr	r2, [pc, #476]	@ (8001aac <ReadADC_voltage_current+0x37c>)
 80018ce:	6013      	str	r3, [r2, #0]

	// Update Kalman Filter for Current
	P_current = P_current + Q_current;
 80018d0:	4b77      	ldr	r3, [pc, #476]	@ (8001ab0 <ReadADC_voltage_current+0x380>)
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	4b77      	ldr	r3, [pc, #476]	@ (8001ab4 <ReadADC_voltage_current+0x384>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	4b73      	ldr	r3, [pc, #460]	@ (8001ab0 <ReadADC_voltage_current+0x380>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
	K_current = P_current / (P_current + R_current);
 80018e6:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <ReadADC_voltage_current+0x380>)
 80018e8:	edd3 6a00 	vldr	s13, [r3]
 80018ec:	4b70      	ldr	r3, [pc, #448]	@ (8001ab0 <ReadADC_voltage_current+0x380>)
 80018ee:	ed93 7a00 	vldr	s14, [r3]
 80018f2:	4b71      	ldr	r3, [pc, #452]	@ (8001ab8 <ReadADC_voltage_current+0x388>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001900:	4b6e      	ldr	r3, [pc, #440]	@ (8001abc <ReadADC_voltage_current+0x38c>)
 8001902:	edc3 7a00 	vstr	s15, [r3]
	X_current = X_current + K_current * (value_current - X_current);
 8001906:	4b63      	ldr	r3, [pc, #396]	@ (8001a94 <ReadADC_voltage_current+0x364>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac0 <ReadADC_voltage_current+0x390>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800191c:	4b67      	ldr	r3, [pc, #412]	@ (8001abc <ReadADC_voltage_current+0x38c>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001926:	4b66      	ldr	r3, [pc, #408]	@ (8001ac0 <ReadADC_voltage_current+0x390>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <ReadADC_voltage_current+0x390>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
	P_current = (1 - K_current) * P_current;
 8001936:	4b61      	ldr	r3, [pc, #388]	@ (8001abc <ReadADC_voltage_current+0x38c>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001944:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab0 <ReadADC_voltage_current+0x380>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	4b58      	ldr	r3, [pc, #352]	@ (8001ab0 <ReadADC_voltage_current+0x380>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
	voltage_current = (X_current * 3.3) / 4017;
 8001954:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac0 <ReadADC_voltage_current+0x390>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe09 	bl	8000570 <__aeabi_f2d>
 800195e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001a48 <ReadADC_voltage_current+0x318>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fe5c 	bl	8000620 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	a337      	add	r3, pc, #220	@ (adr r3, 8001a50 <ReadADC_voltage_current+0x320>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe ff7d 	bl	8000874 <__aeabi_ddiv>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f945 	bl	8000c10 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	4a4e      	ldr	r2, [pc, #312]	@ (8001ac4 <ReadADC_voltage_current+0x394>)
 800198a:	6013      	str	r3, [r2, #0]
	current = fabs((voltage_current - 2.8541) / 0.0373);
 800198c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac4 <ReadADC_voltage_current+0x394>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fded 	bl	8000570 <__aeabi_f2d>
 8001996:	a330      	add	r3, pc, #192	@ (adr r3, 8001a58 <ReadADC_voltage_current+0x328>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe fc88 	bl	80002b0 <__aeabi_dsub>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	a32d      	add	r3, pc, #180	@ (adr r3, 8001a60 <ReadADC_voltage_current+0x330>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe ff61 	bl	8000874 <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f7ff f929 	bl	8000c10 <__aeabi_d2f>
 80019be:	ee07 0a90 	vmov	s15, r0
 80019c2:	eef0 7ae7 	vabs.f32	s15, s15
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <ReadADC_voltage_current+0x398>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]

	//Konsumsi Arus Algoritma
	NowMillis = HAL_GetTick();
 80019cc:	f000 fe10 	bl	80025f0 <HAL_GetTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a3e      	ldr	r2, [pc, #248]	@ (8001acc <ReadADC_voltage_current+0x39c>)
 80019d4:	6013      	str	r3, [r2, #0]
	if (NowMillis - SebelumMillis >= 1000){
 80019d6:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <ReadADC_voltage_current+0x39c>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad0 <ReadADC_voltage_current+0x3a0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019e4:	f0c0 808e 	bcc.w	8001b04 <ReadADC_voltage_current+0x3d4>
		arusFiltered = 0.2 * current + 0.8 * arusFiltered;
 80019e8:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <ReadADC_voltage_current+0x398>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdbf 	bl	8000570 <__aeabi_f2d>
 80019f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001a68 <ReadADC_voltage_current+0x338>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fe12 	bl	8000620 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <ReadADC_voltage_current+0x3a4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdb1 	bl	8000570 <__aeabi_f2d>
 8001a0e:	a318      	add	r3, pc, #96	@ (adr r3, 8001a70 <ReadADC_voltage_current+0x340>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fe04 	bl	8000620 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fc48 	bl	80002b4 <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8f0 	bl	8000c10 <__aeabi_d2f>
 8001a30:	e052      	b.n	8001ad8 <ReadADC_voltage_current+0x3a8>
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	33333333 	.word	0x33333333
 8001a3c:	402d3333 	.word	0x402d3333
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40add000 	.word	0x40add000
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	400a6666 	.word	0x400a6666
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40af6200 	.word	0x40af6200
 8001a58:	617c1bda 	.word	0x617c1bda
 8001a5c:	4006d532 	.word	0x4006d532
 8001a60:	504816f0 	.word	0x504816f0
 8001a64:	3fa318fc 	.word	0x3fa318fc
 8001a68:	9999999a 	.word	0x9999999a
 8001a6c:	3fc99999 	.word	0x3fc99999
 8001a70:	9999999a 	.word	0x9999999a
 8001a74:	3fe99999 	.word	0x3fe99999
 8001a78:	14f00020 	.word	0x14f00020
 8001a7c:	20000208 	.word	0x20000208
 8001a80:	200003ec 	.word	0x200003ec
 8001a84:	04300002 	.word	0x04300002
 8001a88:	200003f0 	.word	0x200003f0
 8001a8c:	10624dd3 	.word	0x10624dd3
 8001a90:	200003e0 	.word	0x200003e0
 8001a94:	200003e2 	.word	0x200003e2
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000014 	.word	0x20000014
 8001aa4:	20000418 	.word	0x20000418
 8001aa8:	2000041c 	.word	0x2000041c
 8001aac:	200003f4 	.word	0x200003f4
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000410 	.word	0x20000410
 8001ac0:	20000414 	.word	0x20000414
 8001ac4:	200003f8 	.word	0x200003f8
 8001ac8:	200003fc 	.word	0x200003fc
 8001acc:	200003e4 	.word	0x200003e4
 8001ad0:	200003e8 	.word	0x200003e8
 8001ad4:	20000400 	.word	0x20000400
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <ReadADC_voltage_current+0x3dc>)
 8001adc:	6013      	str	r3, [r2, #0]
		konsumsiEnergi += (arusFiltered / 3600);
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <ReadADC_voltage_current+0x3dc>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001b10 <ReadADC_voltage_current+0x3e0>
 8001ae8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <ReadADC_voltage_current+0x3e4>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <ReadADC_voltage_current+0x3e4>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		SebelumMillis = NowMillis;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <ReadADC_voltage_current+0x3e8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a06      	ldr	r2, [pc, #24]	@ (8001b1c <ReadADC_voltage_current+0x3ec>)
 8001b02:	6013      	str	r3, [r2, #0]
	}
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	20000400 	.word	0x20000400
 8001b10:	45610000 	.word	0x45610000
 8001b14:	20000404 	.word	0x20000404
 8001b18:	200003e4 	.word	0x200003e4
 8001b1c:	200003e8 	.word	0x200003e8

08001b20 <write_value>:

// Fungsi untuk menghapus dan menulis nilai ke flash memory
void write_value(float value, uint32_t address) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2a:	6038      	str	r0, [r7, #0]
	uint8_t write_enable_cmd = 0x06;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	75fb      	strb	r3, [r7, #23]
    uint8_t data[sizeof(value)];
    memcpy(data, &value, sizeof(value));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	613b      	str	r3, [r7, #16]

    // Perintah Erase Sector (4 KB)
    uint8_t erase_cmd[4];
    erase_cmd[0] = 0x20;
 8001b34:	2320      	movs	r3, #32
 8001b36:	733b      	strb	r3, [r7, #12]
    erase_cmd[1] = (address >> 16) & 0xFF;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	737b      	strb	r3, [r7, #13]
    erase_cmd[2] = (address >> 8) & 0xFF;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	73bb      	strb	r3, [r7, #14]
    erase_cmd[3] = address & 0xFF;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	73fb      	strb	r3, [r7, #15]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	4832      	ldr	r0, [pc, #200]	@ (8001c1c <write_value+0xfc>)
 8001b54:	f002 fad4 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 8001b58:	f107 0117 	add.w	r1, r7, #23
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	2201      	movs	r2, #1
 8001b62:	482f      	ldr	r0, [pc, #188]	@ (8001c20 <write_value+0x100>)
 8001b64:	f005 fc28 	bl	80073b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	482b      	ldr	r0, [pc, #172]	@ (8001c1c <write_value+0xfc>)
 8001b6e:	f002 fac7 	bl	8004100 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2110      	movs	r1, #16
 8001b76:	4829      	ldr	r0, [pc, #164]	@ (8001c1c <write_value+0xfc>)
 8001b78:	f002 fac2 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, erase_cmd, 4, HAL_MAX_DELAY);
 8001b7c:	f107 010c 	add.w	r1, r7, #12
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	2204      	movs	r2, #4
 8001b86:	4826      	ldr	r0, [pc, #152]	@ (8001c20 <write_value+0x100>)
 8001b88:	f005 fc16 	bl	80073b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2110      	movs	r1, #16
 8001b90:	4822      	ldr	r0, [pc, #136]	@ (8001c1c <write_value+0xfc>)
 8001b92:	f002 fab5 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001b96:	2064      	movs	r0, #100	@ 0x64
 8001b98:	f000 fd36 	bl	8002608 <HAL_Delay>


    // Perintah Write Data
    uint8_t write_cmd[4];
    write_cmd[0] = 0x02;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	723b      	strb	r3, [r7, #8]
    write_cmd[1] = (address >> 16) & 0xFF;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	727b      	strb	r3, [r7, #9]
    write_cmd[2] = (address >> 8) & 0xFF;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	72bb      	strb	r3, [r7, #10]
    write_cmd[3] = address & 0xFF;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	72fb      	strb	r3, [r7, #11]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4818      	ldr	r0, [pc, #96]	@ (8001c1c <write_value+0xfc>)
 8001bbc:	f002 faa0 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 8001bc0:	f107 0117 	add.w	r1, r7, #23
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4815      	ldr	r0, [pc, #84]	@ (8001c20 <write_value+0x100>)
 8001bcc:	f005 fbf4 	bl	80073b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <write_value+0xfc>)
 8001bd6:	f002 fa93 	bl	8004100 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2110      	movs	r1, #16
 8001bde:	480f      	ldr	r0, [pc, #60]	@ (8001c1c <write_value+0xfc>)
 8001be0:	f002 fa8e 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, write_cmd, 4, HAL_MAX_DELAY);
 8001be4:	f107 0108 	add.w	r1, r7, #8
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	2204      	movs	r2, #4
 8001bee:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <write_value+0x100>)
 8001bf0:	f005 fbe2 	bl	80073b8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 8001bf4:	f107 0110 	add.w	r1, r7, #16
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	4808      	ldr	r0, [pc, #32]	@ (8001c20 <write_value+0x100>)
 8001c00:	f005 fbda 	bl	80073b8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2110      	movs	r1, #16
 8001c08:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <write_value+0xfc>)
 8001c0a:	f002 fa79 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001c0e:	2032      	movs	r0, #50	@ 0x32
 8001c10:	f000 fcfa 	bl	8002608 <HAL_Delay>
}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	42020000 	.word	0x42020000
 8001c20:	20000270 	.word	0x20000270

08001c24 <ReadData>:

// Fungsi untuk membaca data dari flash memory
void ReadData(uint32_t address, uint32_t length) {
 8001c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c28:	b087      	sub	sp, #28
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
 8001c30:	466b      	mov	r3, sp
 8001c32:	461e      	mov	r6, r3
    uint8_t cmd[4];
    cmd[0] = 0x03;
 8001c34:	2303      	movs	r3, #3
 8001c36:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73fb      	strb	r3, [r7, #15]

    uint8_t data[length];
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	3b01      	subs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	2300      	movs	r3, #0
 8001c58:	4688      	mov	r8, r1
 8001c5a:	4699      	mov	r9, r3
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c70:	2300      	movs	r3, #0
 8001c72:	460c      	mov	r4, r1
 8001c74:	461d      	mov	r5, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	00eb      	lsls	r3, r5, #3
 8001c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	1dcb      	adds	r3, r1, #7
 8001c88:	08db      	lsrs	r3, r3, #3
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c90:	466b      	mov	r3, sp
 8001c92:	3300      	adds	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2110      	movs	r1, #16
 8001c9a:	4811      	ldr	r0, [pc, #68]	@ (8001ce0 <ReadData+0xbc>)
 8001c9c:	f002 fa30 	bl	8004100 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8001ca0:	f107 010c 	add.w	r1, r7, #12
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	2204      	movs	r2, #4
 8001caa:	480e      	ldr	r0, [pc, #56]	@ (8001ce4 <ReadData+0xc0>)
 8001cac:	f005 fb84 	bl	80073b8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb8:	6939      	ldr	r1, [r7, #16]
 8001cba:	480a      	ldr	r0, [pc, #40]	@ (8001ce4 <ReadData+0xc0>)
 8001cbc:	f005 fd7e 	bl	80077bc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	4806      	ldr	r0, [pc, #24]	@ (8001ce0 <ReadData+0xbc>)
 8001cc6:	f002 fa1b 	bl	8004100 <HAL_GPIO_WritePin>

    memcpy(&read_data_float, data, sizeof(read_data_float));
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <ReadData+0xc4>)
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	46b5      	mov	sp, r6
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ce0:	42020000 	.word	0x42020000
 8001ce4:	20000270 	.word	0x20000270
 8001ce8:	20000408 	.word	0x20000408

08001cec <Beep_Beep>:

// Fungsi untuk menghasilkan bunyi beep pada buzzer
void Beep_Beep(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4819      	ldr	r0, [pc, #100]	@ (8001d5c <Beep_Beep+0x70>)
 8001cf6:	f006 f897 	bl	8007e28 <HAL_TIM_PWM_Start>
	for (int i = 0; i < 2; i++) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	e024      	b.n	8001d4a <Beep_Beep+0x5e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d00:	2100      	movs	r1, #0
 8001d02:	4816      	ldr	r0, [pc, #88]	@ (8001d5c <Beep_Beep+0x70>)
 8001d04:	f006 f890 	bl	8007e28 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001d08:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <Beep_Beep+0x70>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 8001d12:	2064      	movs	r0, #100	@ 0x64
 8001d14:	f000 fc78 	bl	8002608 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <Beep_Beep+0x70>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d20:	2032      	movs	r0, #50	@ 0x32
 8001d22:	f000 fc71 	bl	8002608 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <Beep_Beep+0x70>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d2e:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d30:	2032      	movs	r0, #50	@ 0x32
 8001d32:	f000 fc69 	bl	8002608 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <Beep_Beep+0x70>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001d3e:	2032      	movs	r0, #50	@ 0x32
 8001d40:	f000 fc62 	bl	8002608 <HAL_Delay>
	for (int i = 0; i < 2; i++) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	ddd7      	ble.n	8001d00 <Beep_Beep+0x14>
	}
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000300 	.word	0x20000300

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0ae      	sub	sp, #184	@ 0xb8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	2288      	movs	r2, #136	@ 0x88
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f008 fcd4 	bl	800a74a <memset>
  if(hadc->Instance==ADC1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a41      	ldr	r2, [pc, #260]	@ (8001eac <HAL_ADC_MspInit+0x130>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d17a      	bne.n	8001ea2 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001dac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 f92f 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001dcc:	f7ff ffc8 	bl	8001d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dd0:	4b37      	ldr	r3, [pc, #220]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd6:	4a36      	ldr	r2, [pc, #216]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001dd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ddc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001de0:	4b33      	ldr	r3, [pc, #204]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df4:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b28      	ldr	r3, [pc, #160]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e12:	4a27      	ldr	r2, [pc, #156]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e1c:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e30:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_ADC_MspInit+0x134>)
 8001e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_INN1
    PA1     ------> ADC1_INP1
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001e48:	2311      	movs	r3, #17
 8001e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4814      	ldr	r0, [pc, #80]	@ (8001eb4 <HAL_ADC_MspInit+0x138>)
 8001e62:	f001 fffb 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e66:	2303      	movs	r3, #3
 8001e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480e      	ldr	r0, [pc, #56]	@ (8001eb8 <HAL_ADC_MspInit+0x13c>)
 8001e80:	f001 ffec 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4807      	ldr	r0, [pc, #28]	@ (8001ebc <HAL_ADC_MspInit+0x140>)
 8001e9e:	f001 ffdd 	bl	8003e5c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ea2:	bf00      	nop
 8001ea4:	37b8      	adds	r7, #184	@ 0xb8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	42028000 	.word	0x42028000
 8001eb0:	44020c00 	.word	0x44020c00
 8001eb4:	42020800 	.word	0x42020800
 8001eb8:	42020000 	.word	0x42020000
 8001ebc:	42020400 	.word	0x42020400

08001ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0ae      	sub	sp, #184	@ 0xb8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	2288      	movs	r2, #136	@ 0x88
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f008 fc32 	bl	800a74a <memset>
  if(hspi->Instance==SPI1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a38      	ldr	r2, [pc, #224]	@ (8001fcc <HAL_SPI_MspInit+0x10c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d169      	bne.n	8001fc4 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001ef0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f02:	f107 0318 	add.w	r3, r7, #24
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 f88c 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001f12:	f7ff ff25 	bl	8001d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f16:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f22:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f3a:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f44:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f58:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f62:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_SPI_MspInit+0x110>)
 8001f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f70:	23c0      	movs	r3, #192	@ 0xc0
 8001f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f92:	4619      	mov	r1, r3
 8001f94:	480f      	ldr	r0, [pc, #60]	@ (8001fd4 <HAL_SPI_MspInit+0x114>)
 8001f96:	f001 ff61 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	@ (8001fd8 <HAL_SPI_MspInit+0x118>)
 8001fc0:	f001 ff4c 	bl	8003e5c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001fc4:	bf00      	nop
 8001fc6:	37b8      	adds	r7, #184	@ 0xb8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	44020c00 	.word	0x44020c00
 8001fd4:	42020000 	.word	0x42020000
 8001fd8:	42020400 	.word	0x42020400

08001fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8002018 <HAL_TIM_Base_MspInit+0x3c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_TIM_Base_MspInit+0x40>)
 8001ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ff4:	4a09      	ldr	r2, [pc, #36]	@ (800201c <HAL_TIM_Base_MspInit+0x40>)
 8001ff6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ffa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_TIM_Base_MspInit+0x40>)
 8002000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40012c00 	.word	0x40012c00
 800201c:	44020c00 	.word	0x44020c00

08002020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a13      	ldr	r2, [pc, #76]	@ (800208c <HAL_TIM_MspPostInit+0x6c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d11f      	bne.n	8002082 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_TIM_MspPostInit+0x70>)
 8002044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002048:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_TIM_MspPostInit+0x70>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_TIM_MspPostInit+0x70>)
 8002054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002064:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002072:	2301      	movs	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	@ (8002094 <HAL_TIM_MspPostInit+0x74>)
 800207e:	f001 feed 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40012c00 	.word	0x40012c00
 8002090:	44020c00 	.word	0x44020c00
 8002094:	42020000 	.word	0x42020000

08002098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0ac      	sub	sp, #176	@ 0xb0
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2288      	movs	r2, #136	@ 0x88
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f008 fb46 	bl	800a74a <memset>
  if(huart->Instance==USART1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a26      	ldr	r2, [pc, #152]	@ (800215c <HAL_UART_MspInit+0xc4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d145      	bne.n	8002154 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020c8:	f04f 0201 	mov.w	r2, #1
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020d4:	2300      	movs	r3, #0
 80020d6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 ffa1 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80020e8:	f7ff fe3a 	bl	8001d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_UART_MspInit+0xc8>)
 80020ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <HAL_UART_MspInit+0xc8>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020fc:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <HAL_UART_MspInit+0xc8>)
 80020fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <HAL_UART_MspInit+0xc8>)
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002110:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <HAL_UART_MspInit+0xc8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <HAL_UART_MspInit+0xc8>)
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002128:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800212c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002142:	2307      	movs	r3, #7
 8002144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	@ (8002164 <HAL_UART_MspInit+0xcc>)
 8002150:	f001 fe84 	bl	8003e5c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002154:	bf00      	nop
 8002156:	37b0      	adds	r7, #176	@ 0xb0
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40013800 	.word	0x40013800
 8002160:	44020c00 	.word	0x44020c00
 8002164:	42020000 	.word	0x42020000

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <NMI_Handler+0x4>

08002170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <MemManage_Handler+0x4>

08002180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <UsageFault_Handler+0x4>

08002190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021be:	f000 fa03 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return 1;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_kill>:

int _kill(int pid, int sig)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021e0:	f008 fb06 	bl	800a7f0 <__errno>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2216      	movs	r2, #22
 80021e8:	601a      	str	r2, [r3, #0]
  return -1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_exit>:

void _exit (int status)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffe7 	bl	80021d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <_exit+0x12>

0800220c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e00a      	b.n	8002234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800221e:	f3af 8000 	nop.w
 8002222:	4601      	mov	r1, r0
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60ba      	str	r2, [r7, #8]
 800222a:	b2ca      	uxtb	r2, r1
 800222c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	dbf0      	blt.n	800221e <_read+0x12>
  }

  return len;
 800223c:	687b      	ldr	r3, [r7, #4]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e009      	b.n	800226c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	60ba      	str	r2, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fee7 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf1      	blt.n	8002258 <_write+0x12>
  }
  return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_close>:

int _close(int file)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022a6:	605a      	str	r2, [r3, #4]
  return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_isatty>:

int _isatty(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f0:	4a14      	ldr	r2, [pc, #80]	@ (8002344 <_sbrk+0x5c>)
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <_sbrk+0x60>)
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <_sbrk+0x64>)
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <_sbrk+0x68>)
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230a:	4b10      	ldr	r3, [pc, #64]	@ (800234c <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d207      	bcs.n	8002328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002318:	f008 fa6a 	bl	800a7f0 <__errno>
 800231c:	4603      	mov	r3, r0
 800231e:	220c      	movs	r2, #12
 8002320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e009      	b.n	800233c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800232e:	4b07      	ldr	r3, [pc, #28]	@ (800234c <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	4a05      	ldr	r2, [pc, #20]	@ (800234c <_sbrk+0x64>)
 8002338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20008000 	.word	0x20008000
 8002348:	00000400 	.word	0x00000400
 800234c:	20000420 	.word	0x20000420
 8002350:	20000578 	.word	0x20000578

08002354 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800235a:	4b30      	ldr	r3, [pc, #192]	@ (800241c <SystemInit+0xc8>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	4a2e      	ldr	r2, [pc, #184]	@ (800241c <SystemInit+0xc8>)
 8002362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002366:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800236a:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <SystemInit+0xcc>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <SystemInit+0xcc>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002376:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <SystemInit+0xcc>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800237c:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <SystemInit+0xcc>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4927      	ldr	r1, [pc, #156]	@ (8002420 <SystemInit+0xcc>)
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <SystemInit+0xd0>)
 8002384:	4013      	ands	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <SystemInit+0xcc>)
 800238a:	2200      	movs	r2, #0
 800238c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800238e:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <SystemInit+0xcc>)
 8002390:	2200      	movs	r2, #0
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002394:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <SystemInit+0xcc>)
 8002396:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <SystemInit+0xd4>)
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <SystemInit+0xcc>)
 800239c:	2200      	movs	r2, #0
 800239e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <SystemInit+0xcc>)
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <SystemInit+0xd4>)
 80023a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <SystemInit+0xcc>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80023ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <SystemInit+0xcc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002420 <SystemInit+0xcc>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <SystemInit+0xcc>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <SystemInit+0xc8>)
 80023c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023c4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80023c6:	4b19      	ldr	r3, [pc, #100]	@ (800242c <SystemInit+0xd8>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80023ce:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80023d6:	d003      	beq.n	80023e0 <SystemInit+0x8c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023de:	d117      	bne.n	8002410 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80023e0:	4b12      	ldr	r3, [pc, #72]	@ (800242c <SystemInit+0xd8>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <SystemInit+0xd8>)
 80023ee:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <SystemInit+0xdc>)
 80023f0:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <SystemInit+0xd8>)
 80023f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <SystemInit+0xe0>)
 80023f6:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <SystemInit+0xd8>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	4a0b      	ldr	r2, [pc, #44]	@ (800242c <SystemInit+0xd8>)
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <SystemInit+0xd8>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	4a08      	ldr	r2, [pc, #32]	@ (800242c <SystemInit+0xd8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	61d3      	str	r3, [r2, #28]
  }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00
 8002420:	44020c00 	.word	0x44020c00
 8002424:	fae2eae3 	.word	0xfae2eae3
 8002428:	01010280 	.word	0x01010280
 800242c:	40022000 	.word	0x40022000
 8002430:	08192a3b 	.word	0x08192a3b
 8002434:	4c5d6e7f 	.word	0x4c5d6e7f

08002438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002470 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800243c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800243e:	e003      	b.n	8002448 <LoopCopyDataInit>

08002440 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002442:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002444:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002446:	3104      	adds	r1, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002448:	480b      	ldr	r0, [pc, #44]	@ (8002478 <LoopForever+0xa>)
	ldr	r3, =_edata
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <LoopForever+0xe>)
	adds	r2, r0, r1
 800244c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800244e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002450:	d3f6      	bcc.n	8002440 <CopyDataInit>
	ldr	r2, =_sbss
 8002452:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002454:	e002      	b.n	800245c <LoopFillZerobss>

08002456 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002456:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002458:	f842 3b04 	str.w	r3, [r2], #4

0800245c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <LoopForever+0x16>)
	cmp	r2, r3
 800245e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002460:	d3f9      	bcc.n	8002456 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002462:	f7ff ff77 	bl	8002354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002466:	f008 f9c9 	bl	800a7fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246a:	f7fe fdf5 	bl	8001058 <main>

0800246e <LoopForever>:

LoopForever:
    b LoopForever
 800246e:	e7fe      	b.n	800246e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002470:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002474:	0800e418 	.word	0x0800e418
	ldr	r0, =_sdata
 8002478:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800247c:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8002480:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8002484:	20000574 	.word	0x20000574

08002488 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC1_IRQHandler>
	...

0800248c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f001 fc0e 	bl	8003cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002496:	f002 fc3b 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 800249a:	4602      	mov	r2, r0
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_Init+0x44>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	490b      	ldr	r1, [pc, #44]	@ (80024d4 <HAL_Init+0x48>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <HAL_Init+0x4c>)
 80024ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024b0:	2004      	movs	r0, #4
 80024b2:	f001 fc45 	bl	8003d40 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b6:	200f      	movs	r0, #15
 80024b8:	f000 f810 	bl	80024dc <HAL_InitTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e002      	b.n	80024cc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024c6:	f7ff fc51 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	44020c00 	.word	0x44020c00
 80024d4:	0800df98 	.word	0x0800df98
 80024d8:	20000018 	.word	0x20000018

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_InitTick+0xdc>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e05c      	b.n	80025ae <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80024f4:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <HAL_InitTick+0xe0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d10c      	bne.n	800251a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002500:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_InitTick+0xe4>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <HAL_InitTick+0xdc>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800250e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e037      	b.n	800258a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800251a:	f001 fc69 	bl	8003df0 <HAL_SYSTICK_GetCLKSourceConfig>
 800251e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d023      	beq.n	800256e <HAL_InitTick+0x92>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d82d      	bhi.n	8002588 <HAL_InitTick+0xac>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_InitTick+0x5e>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d00d      	beq.n	8002554 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002538:	e026      	b.n	8002588 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <HAL_InitTick+0xe4>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <HAL_InitTick+0xdc>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4619      	mov	r1, r3
 8002544:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002548:	fbb3 f3f1 	udiv	r3, r3, r1
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	60fb      	str	r3, [r7, #12]
        break;
 8002552:	e01a      	b.n	800258a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002554:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_InitTick+0xdc>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800255e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002562:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002566:	fbb2 f3f3 	udiv	r3, r2, r3
 800256a:	60fb      	str	r3, [r7, #12]
        break;
 800256c:	e00d      	b.n	800258a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <HAL_InitTick+0xdc>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002578:	fbb3 f3f2 	udiv	r3, r3, r2
 800257c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	60fb      	str	r3, [r7, #12]
        break;
 8002586:	e000      	b.n	800258a <HAL_InitTick+0xae>
        break;
 8002588:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f001 fbb6 	bl	8003cfc <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e009      	b.n	80025ae <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259a:	2200      	movs	r2, #0
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	f04f 30ff 	mov.w	r0, #4294967295
 80025a2:	f001 fb91 	bl	8003cc8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80025a6:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_InitTick+0xe8>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000020 	.word	0x20000020
 80025bc:	e000e010 	.word	0xe000e010
 80025c0:	20000018 	.word	0x20000018
 80025c4:	2000001c 	.word	0x2000001c

080025c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000020 	.word	0x20000020
 80025ec:	20000424 	.word	0x20000424

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000424 	.word	0x20000424

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff ffee 	bl	80025f0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262e:	bf00      	nop
 8002630:	f7ff ffde 	bl	80025f0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000020 	.word	0x20000020

08002650 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80026c6:	f043 0202 	orr.w	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80026e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80026ea:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	42028000 	.word	0x42028000

08002704 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3360      	adds	r3, #96	@ 0x60
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <LL_ADC_SetOffset+0x44>)
 8002726:	4013      	ands	r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	4313      	orrs	r3, r2
 8002734:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	03fff000 	.word	0x03fff000

0800274c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3360      	adds	r3, #96	@ 0x60
 800275a:	461a      	mov	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3360      	adds	r3, #96	@ 0x60
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	431a      	orrs	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3360      	adds	r3, #96	@ 0x60
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3360      	adds	r3, #96	@ 0x60
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	615a      	str	r2, [r3, #20]
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3330      	adds	r3, #48	@ 0x30
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	4413      	add	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	211f      	movs	r1, #31
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 011f 	and.w	r1, r3, #31
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3314      	adds	r3, #20
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0e5b      	lsrs	r3, r3, #25
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	0d1b      	lsrs	r3, r3, #20
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2107      	movs	r1, #7
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	0d1b      	lsrs	r3, r3, #20
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	431a      	orrs	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800292c:	43db      	mvns	r3, r3
 800292e:	401a      	ands	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0318 	and.w	r3, r3, #24
 8002936:	4908      	ldr	r1, [pc, #32]	@ (8002958 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002938:	40d9      	lsrs	r1, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	400b      	ands	r3, r1
 800293e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002942:	431a      	orrs	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	000fffff 	.word	0x000fffff

0800295c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800296c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6093      	str	r3, [r2, #8]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002994:	d101      	bne.n	800299a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029e4:	d101      	bne.n	80029ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <LL_ADC_IsEnabled+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_ADC_IsEnabled+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_IsDisableOngoing+0x18>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_ADC_IsDisableOngoing+0x1a>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002acc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d101      	bne.n	8002afc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d101      	bne.n	8002b4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e131      	b.n	8002dd6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff f8fb 	bl	8001d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fef1 	bl	8002980 <LL_ADC_IsDeepPowerDownEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fed7 	bl	800295c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ff0c 	bl	80029d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d115      	bne.n	8002bea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fef0 	bl	80029a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc8:	4b85      	ldr	r3, [pc, #532]	@ (8002de0 <HAL_ADC_Init+0x288>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	4a85      	ldr	r2, [pc, #532]	@ (8002de4 <HAL_ADC_Init+0x28c>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bdc:	e002      	b.n	8002be4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f9      	bne.n	8002bde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff feee 	bl	80029d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	f043 0210 	orr.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff62 	bl	8002ae4 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80ca 	bne.w	8002dc4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 80c6 	bne.w	8002dc4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c40:	f043 0202 	orr.w	r2, r3, #2
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fefb 	bl	8002a48 <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c58:	4863      	ldr	r0, [pc, #396]	@ (8002de8 <HAL_ADC_Init+0x290>)
 8002c5a:	f7ff fef5 	bl	8002a48 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4860      	ldr	r0, [pc, #384]	@ (8002dec <HAL_ADC_Init+0x294>)
 8002c6c:	f7ff fcf0 	bl	8002650 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7e5b      	ldrb	r3, [r3, #25]
 8002c74:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c7a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c80:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c86:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	045b      	lsls	r3, r3, #17
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	4b48      	ldr	r3, [pc, #288]	@ (8002df0 <HAL_ADC_Init+0x298>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff1b 	bl	8002b32 <LL_ADC_INJ_IsConversionOngoing>
 8002cfc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d13d      	bne.n	8002d80 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d13a      	bne.n	8002d80 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7e1b      	ldrb	r3, [r3, #24]
 8002d0e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d26:	f023 0302 	bic.w	r3, r3, #2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d118      	bne.n	8002d70 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d60:	430a      	orrs	r2, r1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	611a      	str	r2, [r3, #16]
 8002d6e:	e007      	b.n	8002d80 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d10c      	bne.n	8002da2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f023 010f 	bic.w	r1, r3, #15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	1e5a      	subs	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002da0:	e007      	b.n	8002db2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 020f 	bic.w	r2, r2, #15
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dc2:	e007      	b.n	8002dd4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc8:	f043 0210 	orr.w	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000018 	.word	0x20000018
 8002de4:	053e2d63 	.word	0x053e2d63
 8002de8:	42028000 	.word	0x42028000
 8002dec:	42028300 	.word	0x42028300
 8002df0:	fff04007 	.word	0xfff04007

08002df4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fe6f 	bl	8002ae4 <LL_ADC_REG_IsConversionOngoing>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d14f      	bne.n	8002eac <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Start+0x26>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e04b      	b.n	8002eb2 <HAL_ADC_Start+0xbe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fdd4 	bl	80039d0 <ADC_Enable>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d137      	bne.n	8002ea2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e52:	d106      	bne.n	8002e62 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	f023 0206 	bic.w	r2, r3, #6
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	221c      	movs	r2, #28
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fdfa 	bl	8002a94 <LL_ADC_REG_StartConversion>
 8002ea0:	e006      	b.n	8002eb0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002eaa:	e001      	b.n	8002eb0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
 8002eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_Stop+0x16>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e023      	b.n	8002f18 <HAL_ADC_Stop+0x5e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ed8:	2103      	movs	r1, #3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fcbc 	bl	8003858 <ADC_ConversionStop>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d111      	bne.n	8002f0e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fdf2 	bl	8003ad4 <ADC_Disable>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d102      	bne.n	8002f38 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f32:	2308      	movs	r3, #8
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e010      	b.n	8002f5a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06f      	b.n	8003036 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002f56:	2304      	movs	r3, #4
 8002f58:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f5a:	f7ff fb49 	bl	80025f0 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f60:	e021      	b.n	8002fa6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d01d      	beq.n	8002fa6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f6a:	f7ff fb41 	bl	80025f0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <HAL_ADC_PollForConversion+0x60>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d112      	bne.n	8002fa6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f92:	f043 0204 	orr.w	r2, r3, #4
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e047      	b.n	8003036 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0d6      	beq.n	8002f62 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fc3b 	bl	8002840 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01c      	beq.n	800300a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7e5b      	ldrb	r3, [r3, #25]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d118      	bne.n	800300a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d111      	bne.n	800300a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d104      	bne.n	8003022 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2208      	movs	r2, #8
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e008      	b.n	8003034 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	220c      	movs	r2, #12
 8003032:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b0b6      	sub	sp, #216	@ 0xd8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x22>
 8003076:	2302      	movs	r3, #2
 8003078:	e3d8      	b.n	800382c <HAL_ADC_ConfigChannel+0x7d4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fd2c 	bl	8002ae4 <LL_ADC_REG_IsConversionOngoing>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 83bd 	bne.w	800380e <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d104      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fb1b 	bl	80026dc <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7ff fbd7 	bl	8002866 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fd11 	bl	8002ae4 <LL_ADC_REG_IsConversionOngoing>
 80030c2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fd31 	bl	8002b32 <LL_ADC_INJ_IsConversionOngoing>
 80030d0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 81d9 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 81d4 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030f0:	d10f      	bne.n	8003112 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7ff fbde 	bl	80028be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fb85 	bl	800281a <LL_ADC_SetSamplingTimeCommonConfig>
 8003110:	e00e      	b.n	8003130 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	461a      	mov	r2, r3
 8003120:	f7ff fbcd 	bl	80028be <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fb75 	bl	800281a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d022      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6919      	ldr	r1, [r3, #16]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003162:	f7ff facf 	bl	8002704 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6919      	ldr	r1, [r3, #16]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	461a      	mov	r2, r3
 8003174:	f7ff fb1b 	bl	80027ae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003184:	2b01      	cmp	r3, #1
 8003186:	d102      	bne.n	800318e <HAL_ADC_ConfigChannel+0x136>
 8003188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800318c:	e000      	b.n	8003190 <HAL_ADC_ConfigChannel+0x138>
 800318e:	2300      	movs	r3, #0
 8003190:	461a      	mov	r2, r3
 8003192:	f7ff fb27 	bl	80027e4 <LL_ADC_SetOffsetSaturation>
 8003196:	e17b      	b.n	8003490 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fad4 	bl	800274c <LL_ADC_GetOffsetChannel>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x16c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fac9 	bl	800274c <LL_ADC_GetOffsetChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	f003 021f 	and.w	r2, r3, #31
 80031c2:	e01e      	b.n	8003202 <HAL_ADC_ConfigChannel+0x1aa>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fabe 	bl	800274c <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80031e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80031ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e004      	b.n	8003200 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 80031f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_ADC_ConfigChannel+0x1c2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0e9b      	lsrs	r3, r3, #26
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	e018      	b.n	800324c <HAL_ADC_ConfigChannel+0x1f4>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800322e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e004      	b.n	800324c <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8003242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800324c:	429a      	cmp	r2, r3
 800324e:	d106      	bne.n	800325e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa8d 	bl	8002778 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fa71 	bl	800274c <LL_ADC_GetOffsetChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <HAL_ADC_ConfigChannel+0x232>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fa66 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003280:	4603      	mov	r3, r0
 8003282:	0e9b      	lsrs	r3, r3, #26
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	e01e      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x270>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fa5b 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80032a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e004      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80032bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x288>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	0e9b      	lsrs	r3, r3, #26
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	e018      	b.n	8003312 <HAL_ADC_ConfigChannel+0x2ba>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e004      	b.n	8003312 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003312:	429a      	cmp	r2, r3
 8003314:	d106      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	2101      	movs	r1, #1
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fa2a 	bl	8002778 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fa0e 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x2f8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fa03 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	f003 021f 	and.w	r2, r3, #31
 800334e:	e01e      	b.n	800338e <HAL_ADC_ConfigChannel+0x336>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f9f8 	bl	800274c <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800336e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003376:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e004      	b.n	800338c <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8003382:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x34e>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	e016      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x37c>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e004      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 80033ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f9c9 	bl	8002778 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2103      	movs	r1, #3
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f9ad 	bl	800274c <LL_ADC_GetOffsetChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x3ba>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2103      	movs	r1, #3
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f9a2 	bl	800274c <LL_ADC_GetOffsetChannel>
 8003408:	4603      	mov	r3, r0
 800340a:	0e9b      	lsrs	r3, r3, #26
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	e017      	b.n	8003442 <HAL_ADC_ConfigChannel+0x3ea>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2103      	movs	r1, #3
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f997 	bl	800274c <LL_ADC_GetOffsetChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800342a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800342c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800342e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e003      	b.n	8003440 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8003438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_ADC_ConfigChannel+0x402>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	0e9b      	lsrs	r3, r3, #26
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	e011      	b.n	800347e <HAL_ADC_ConfigChannel+0x426>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800346a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800346c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8003476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800347e:	429a      	cmp	r2, r3
 8003480:	d106      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	2103      	movs	r1, #3
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f974 	bl	8002778 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fad7 	bl	8002a48 <LL_ADC_IsEnabled>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 813f 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f7ff fa30 	bl	8002914 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a8e      	ldr	r2, [pc, #568]	@ (80036f4 <HAL_ADC_ConfigChannel+0x69c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f040 8130 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x490>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	3301      	adds	r3, #1
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2b09      	cmp	r3, #9
 80034de:	bf94      	ite	ls
 80034e0:	2301      	movls	r3, #1
 80034e2:	2300      	movhi	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e019      	b.n	800351c <HAL_ADC_ConfigChannel+0x4c4>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e003      	b.n	800350c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2b09      	cmp	r3, #9
 8003514:	bf94      	ite	ls
 8003516:	2301      	movls	r3, #1
 8003518:	2300      	movhi	r3, #0
 800351a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351c:	2b00      	cmp	r3, #0
 800351e:	d079      	beq.n	8003614 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_ADC_ConfigChannel+0x4e4>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	3301      	adds	r3, #1
 8003534:	069b      	lsls	r3, r3, #26
 8003536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800353a:	e015      	b.n	8003568 <HAL_ADC_ConfigChannel+0x510>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800354a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e003      	b.n	8003560 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8003558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	069b      	lsls	r3, r3, #26
 8003564:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x530>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	3301      	adds	r3, #1
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	e017      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x560>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003598:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800359a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80035a0:	2320      	movs	r3, #32
 80035a2:	e003      	b.n	80035ac <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80035a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	ea42 0103 	orr.w	r1, r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <HAL_ADC_ConfigChannel+0x586>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	051b      	lsls	r3, r3, #20
 80035dc:	e018      	b.n	8003610 <HAL_ADC_ConfigChannel+0x5b8>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80035f6:	2320      	movs	r3, #32
 80035f8:	e003      	b.n	8003602 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80035fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f003 021f 	and.w	r2, r3, #31
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003610:	430b      	orrs	r3, r1
 8003612:	e080      	b.n	8003716 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x5d8>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	3301      	adds	r3, #1
 8003628:	069b      	lsls	r3, r3, #26
 800362a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800362e:	e015      	b.n	800365c <HAL_ADC_ConfigChannel+0x604>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8003648:	2320      	movs	r3, #32
 800364a:	e003      	b.n	8003654 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	3301      	adds	r3, #1
 8003656:	069b      	lsls	r3, r3, #26
 8003658:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_ADC_ConfigChannel+0x624>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	3301      	adds	r3, #1
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	e017      	b.n	80036ac <HAL_ADC_ConfigChannel+0x654>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	61fb      	str	r3, [r7, #28]
  return result;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e003      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2101      	movs	r1, #1
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	ea42 0103 	orr.w	r1, r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10d      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x680>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	3b1e      	subs	r3, #30
 80036d0:	051b      	lsls	r3, r3, #20
 80036d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	e01d      	b.n	8003714 <HAL_ADC_ConfigChannel+0x6bc>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	613b      	str	r3, [r7, #16]
  return result;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d103      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e005      	b.n	8003700 <HAL_ADC_ConfigChannel+0x6a8>
 80036f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f003 021f 	and.w	r2, r3, #31
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	3b1e      	subs	r3, #30
 800370e:	051b      	lsls	r3, r3, #20
 8003710:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003714:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371a:	4619      	mov	r1, r3
 800371c:	f7ff f8cf 	bl	80028be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b43      	ldr	r3, [pc, #268]	@ (8003834 <HAL_ADC_ConfigChannel+0x7dc>)
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d079      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800372c:	4842      	ldr	r0, [pc, #264]	@ (8003838 <HAL_ADC_ConfigChannel+0x7e0>)
 800372e:	f7fe ffb5 	bl	800269c <LL_ADC_GetCommonPathInternalCh>
 8003732:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a40      	ldr	r2, [pc, #256]	@ (800383c <HAL_ADC_ConfigChannel+0x7e4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d124      	bne.n	800378a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11e      	bne.n	800378a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3b      	ldr	r2, [pc, #236]	@ (8003840 <HAL_ADC_ConfigChannel+0x7e8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d164      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800375a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800375e:	4619      	mov	r1, r3
 8003760:	4835      	ldr	r0, [pc, #212]	@ (8003838 <HAL_ADC_ConfigChannel+0x7e0>)
 8003762:	f7fe ff88 	bl	8002676 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003766:	4b37      	ldr	r3, [pc, #220]	@ (8003844 <HAL_ADC_ConfigChannel+0x7ec>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	099b      	lsrs	r3, r3, #6
 800376c:	4a36      	ldr	r2, [pc, #216]	@ (8003848 <HAL_ADC_ConfigChannel+0x7f0>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	3301      	adds	r3, #1
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800377a:	e002      	b.n	8003782 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3b01      	subs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f9      	bne.n	800377c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003788:	e04a      	b.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2f      	ldr	r2, [pc, #188]	@ (800384c <HAL_ADC_ConfigChannel+0x7f4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d113      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003798:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a26      	ldr	r2, [pc, #152]	@ (8003840 <HAL_ADC_ConfigChannel+0x7e8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d13a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b2:	4619      	mov	r1, r3
 80037b4:	4820      	ldr	r0, [pc, #128]	@ (8003838 <HAL_ADC_ConfigChannel+0x7e0>)
 80037b6:	f7fe ff5e 	bl	8002676 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ba:	e031      	b.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	@ (8003850 <HAL_ADC_ConfigChannel+0x7f8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d113      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003840 <HAL_ADC_ConfigChannel+0x7e8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d121      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037e4:	4619      	mov	r1, r3
 80037e6:	4814      	ldr	r0, [pc, #80]	@ (8003838 <HAL_ADC_ConfigChannel+0x7e0>)
 80037e8:	f7fe ff45 	bl	8002676 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80037ec:	e018      	b.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <HAL_ADC_ConfigChannel+0x7fc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d113      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a10      	ldr	r2, [pc, #64]	@ (8003840 <HAL_ADC_ConfigChannel+0x7e8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe ff56 	bl	80026b8 <LL_ADC_EnableChannelVDDcore>
 800380c:	e008      	b.n	8003820 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003828:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800382c:	4618      	mov	r0, r3
 800382e:	37d8      	adds	r7, #216	@ 0xd8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	80080000 	.word	0x80080000
 8003838:	42028300 	.word	0x42028300
 800383c:	c3210000 	.word	0xc3210000
 8003840:	42028000 	.word	0x42028000
 8003844:	20000018 	.word	0x20000018
 8003848:	053e2d63 	.word	0x053e2d63
 800384c:	88600004 	.word	0x88600004
 8003850:	c7520000 	.word	0xc7520000
 8003854:	99200040 	.word	0x99200040

08003858 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff f938 	bl	8002ae4 <LL_ADC_REG_IsConversionOngoing>
 8003874:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff f959 	bl	8002b32 <LL_ADC_INJ_IsConversionOngoing>
 8003880:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8098 	beq.w	80039c0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02a      	beq.n	80038f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7e5b      	ldrb	r3, [r3, #25]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d126      	bne.n	80038f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7e1b      	ldrb	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d122      	bne.n	80038f4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038b2:	e014      	b.n	80038de <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4a45      	ldr	r2, [pc, #276]	@ (80039cc <ADC_ConversionStop+0x174>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d90d      	bls.n	80038d8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f043 0210 	orr.w	r2, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e074      	b.n	80039c2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d1e3      	bne.n	80038b4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2240      	movs	r2, #64	@ 0x40
 80038f2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d014      	beq.n	8003924 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f8f0 	bl	8002ae4 <LL_ADC_REG_IsConversionOngoing>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f8ad 	bl	8002a6e <LL_ADC_IsDisableOngoing>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f8cc 	bl	8002abc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d014      	beq.n	8003954 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f8ff 	bl	8002b32 <LL_ADC_INJ_IsConversionOngoing>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f895 	bl	8002a6e <LL_ADC_IsDisableOngoing>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff f8db 	bl	8002b0a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d005      	beq.n	8003966 <ADC_ConversionStop+0x10e>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d105      	bne.n	800396c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003960:	230c      	movs	r3, #12
 8003962:	617b      	str	r3, [r7, #20]
        break;
 8003964:	e005      	b.n	8003972 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003966:	2308      	movs	r3, #8
 8003968:	617b      	str	r3, [r7, #20]
        break;
 800396a:	e002      	b.n	8003972 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800396c:	2304      	movs	r3, #4
 800396e:	617b      	str	r3, [r7, #20]
        break;
 8003970:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003972:	f7fe fe3d 	bl	80025f0 <HAL_GetTick>
 8003976:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003978:	e01b      	b.n	80039b2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800397a:	f7fe fe39 	bl	80025f0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b05      	cmp	r3, #5
 8003986:	d914      	bls.n	80039b2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	f043 0210 	orr.w	r2, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e007      	b.n	80039c2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1dc      	bne.n	800397a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	a33fffff 	.word	0xa33fffff

080039d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039d8:	2300      	movs	r3, #0
 80039da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff f831 	bl	8002a48 <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d166      	bne.n	8003aba <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	4b34      	ldr	r3, [pc, #208]	@ (8003ac4 <ADC_Enable+0xf4>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e052      	b.n	8003abc <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe ffec 	bl	80029f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a20:	4829      	ldr	r0, [pc, #164]	@ (8003ac8 <ADC_Enable+0xf8>)
 8003a22:	f7fe fe3b 	bl	800269c <LL_ADC_GetCommonPathInternalCh>
 8003a26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a30:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <ADC_Enable+0xfc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	099b      	lsrs	r3, r3, #6
 8003a36:	4a26      	ldr	r2, [pc, #152]	@ (8003ad0 <ADC_Enable+0x100>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a44:	e002      	b.n	8003a4c <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f9      	bne.n	8003a46 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a52:	f7fe fdcd 	bl	80025f0 <HAL_GetTick>
 8003a56:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a58:	e028      	b.n	8003aac <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fff2 	bl	8002a48 <LL_ADC_IsEnabled>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe ffc2 	bl	80029f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a74:	f7fe fdbc 	bl	80025f0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d914      	bls.n	8003aac <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d00d      	beq.n	8003aac <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a94:	f043 0210 	orr.w	r2, r3, #16
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e007      	b.n	8003abc <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d1cf      	bne.n	8003a5a <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	8000003f 	.word	0x8000003f
 8003ac8:	42028300 	.word	0x42028300
 8003acc:	20000018 	.word	0x20000018
 8003ad0:	053e2d63 	.word	0x053e2d63

08003ad4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe ffc4 	bl	8002a6e <LL_ADC_IsDisableOngoing>
 8003ae6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe ffab 	bl	8002a48 <LL_ADC_IsEnabled>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d047      	beq.n	8003b88 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d144      	bne.n	8003b88 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030d 	and.w	r3, r3, #13
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10c      	bne.n	8003b26 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe ff85 	bl	8002a20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b1e:	f7fe fd67 	bl	80025f0 <HAL_GetTick>
 8003b22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b24:	e029      	b.n	8003b7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e023      	b.n	8003b8a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b42:	f7fe fd55 	bl	80025f0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d914      	bls.n	8003b7a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	f043 0210 	orr.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e007      	b.n	8003b8a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1dc      	bne.n	8003b42 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	@ (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	60d3      	str	r3, [r2, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	@ (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	@ (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
         );
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	@ 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ff6a 	bl	8003b94 <__NVIC_SetPriorityGrouping>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd6:	f7ff ff81 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003cda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	6978      	ldr	r0, [r7, #20]
 8003ce2:	f7ff ffb3 	bl	8003c4c <NVIC_EncodePriority>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff82 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003cf4:	bf00      	nop
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00d      	b.n	8003d2e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a05      	ldr	r2, [pc, #20]	@ (8003d3c <HAL_SYSTICK_Config+0x40>)
 8003d26:	f043 0303 	orr.w	r3, r3, #3
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d844      	bhi.n	8003dd8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d77 	.word	0x08003d77
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003db7 	.word	0x08003db7
 8003d60:	08003dd9 	.word	0x08003dd9
 8003d64:	08003d69 	.word	0x08003d69
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003d68:	4b1f      	ldr	r3, [pc, #124]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6013      	str	r3, [r2, #0]
      break;
 8003d74:	e031      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003d76:	4b1c      	ldr	r3, [pc, #112]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003d82:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d88:	4a18      	ldr	r2, [pc, #96]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003d8a:	f023 030c 	bic.w	r3, r3, #12
 8003d8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003d92:	e022      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003d94:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003da6:	f023 030c 	bic.w	r3, r3, #12
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003db4:	e011      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dc8:	f023 030c 	bic.w	r3, r3, #12
 8003dcc:	4a07      	ldr	r2, [pc, #28]	@ (8003dec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003dd6:	e000      	b.n	8003dda <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003dd8:	bf00      	nop
  }
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000e010 	.word	0xe000e010
 8003dec:	44020c00 	.word	0x44020c00

08003df0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003df6:	4b17      	ldr	r3, [pc, #92]	@ (8003e54 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003e02:	2304      	movs	r3, #4
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	e01e      	b.n	8003e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003e08:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003e0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d00f      	beq.n	8003e3a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d80f      	bhi.n	8003e40 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d003      	beq.n	8003e34 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003e2c:	e008      	b.n	8003e40 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
        break;
 8003e32:	e008      	b.n	8003e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003e34:	2301      	movs	r3, #1
 8003e36:	607b      	str	r3, [r7, #4]
        break;
 8003e38:	e005      	b.n	8003e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	607b      	str	r3, [r7, #4]
        break;
 8003e3e:	e002      	b.n	8003e46 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003e40:	2300      	movs	r3, #0
 8003e42:	607b      	str	r3, [r7, #4]
        break;
 8003e44:	bf00      	nop
    }
  }
  return systick_source;
 8003e46:	687b      	ldr	r3, [r7, #4]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e010 	.word	0xe000e010
 8003e58:	44020c00 	.word	0x44020c00

08003e5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003e6a:	e136      	b.n	80040da <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8128 	beq.w	80040d4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x38>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b12      	cmp	r3, #18
 8003e92:	d125      	bne.n	8003ee0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	08da      	lsrs	r2, r3, #3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3208      	adds	r2, #8
 8003e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	220f      	movs	r2, #15
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d00b      	beq.n	8003f34 <HAL_GPIO_Init+0xd8>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d007      	beq.n	8003f34 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f28:	2b11      	cmp	r3, #17
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b12      	cmp	r3, #18
 8003f32:	d130      	bne.n	8003f96 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4013      	ands	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 0201 	and.w	r2, r3, #1
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d017      	beq.n	8003fce <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d07c      	beq.n	80040d4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003fda:	4a47      	ldr	r2, [pc, #284]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0a9a      	lsrs	r2, r3, #10
 8004002:	4b3e      	ldr	r3, [pc, #248]	@ (80040fc <HAL_GPIO_Init+0x2a0>)
 8004004:	4013      	ands	r3, r2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	f002 0203 	and.w	r2, r2, #3
 800400c:	00d2      	lsls	r2, r2, #3
 800400e:	4093      	lsls	r3, r2
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004016:	4938      	ldr	r1, [pc, #224]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3318      	adds	r3, #24
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004024:	4b34      	ldr	r3, [pc, #208]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4013      	ands	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004048:	4a2b      	ldr	r2, [pc, #172]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800404e:	4b2a      	ldr	r3, [pc, #168]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43db      	mvns	r3, r3
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4013      	ands	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004072:	4a21      	ldr	r2, [pc, #132]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004078:	4b1f      	ldr	r3, [pc, #124]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 800407a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4013      	ands	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800409e:	4a16      	ldr	r2, [pc, #88]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80040a6:	4b14      	ldr	r3, [pc, #80]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 80040a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4013      	ands	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80040cc:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <HAL_GPIO_Init+0x29c>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	3301      	adds	r3, #1
 80040d8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f aec1 	bne.w	8003e6c <HAL_GPIO_Init+0x10>
  }
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	44022000 	.word	0x44022000
 80040fc:	002f7f7f 	.word	0x002f7f7f

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800411c:	e002      	b.n	8004124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f000 bc28 	b.w	8004994 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004144:	4b94      	ldr	r3, [pc, #592]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 0318 	and.w	r3, r3, #24
 800414c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800414e:	4b92      	ldr	r3, [pc, #584]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d005      	beq.n	8004176 <HAL_RCC_OscConfig+0x46>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	2b18      	cmp	r3, #24
 800416e:	d114      	bne.n	800419a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d111      	bne.n	800419a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f000 bc08 	b.w	8004994 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004184:	4b84      	ldr	r3, [pc, #528]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	4981      	ldr	r1, [pc, #516]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004194:	4313      	orrs	r3, r2
 8004196:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004198:	e040      	b.n	800421c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d023      	beq.n	80041ea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe fa1f 	bl	80025f0 <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041b6:	f7fe fa1b 	bl	80025f0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e3e5      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80041c8:	4b73      	ldr	r3, [pc, #460]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80041d4:	4b70      	ldr	r3, [pc, #448]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	496d      	ldr	r1, [pc, #436]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	618b      	str	r3, [r1, #24]
 80041e8:	e018      	b.n	800421c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe f9fb 	bl	80025f0 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80041fe:	f7fe f9f7 	bl	80025f0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e3c1      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004210:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a0 	beq.w	800436a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x10c>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b18      	cmp	r3, #24
 8004234:	d109      	bne.n	800424a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8092 	bne.w	800436a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e3a4      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x132>
 8004254:	4b50      	ldr	r3, [pc, #320]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a4f      	ldr	r2, [pc, #316]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e058      	b.n	8004314 <HAL_RCC_OscConfig+0x1e4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d112      	bne.n	8004290 <HAL_RCC_OscConfig+0x160>
 800426a:	4b4b      	ldr	r3, [pc, #300]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a4a      	ldr	r2, [pc, #296]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b48      	ldr	r3, [pc, #288]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a47      	ldr	r2, [pc, #284]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 800427c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	4b45      	ldr	r3, [pc, #276]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a44      	ldr	r2, [pc, #272]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e041      	b.n	8004314 <HAL_RCC_OscConfig+0x1e4>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004298:	d112      	bne.n	80042c0 <HAL_RCC_OscConfig+0x190>
 800429a:	4b3f      	ldr	r3, [pc, #252]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3e      	ldr	r2, [pc, #248]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a38      	ldr	r2, [pc, #224]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e029      	b.n	8004314 <HAL_RCC_OscConfig+0x1e4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80042c8:	d112      	bne.n	80042f0 <HAL_RCC_OscConfig+0x1c0>
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a32      	ldr	r2, [pc, #200]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e011      	b.n	8004314 <HAL_RCC_OscConfig+0x1e4>
 80042f0:	4b29      	ldr	r3, [pc, #164]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b23      	ldr	r3, [pc, #140]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a22      	ldr	r2, [pc, #136]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 800430e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d013      	beq.n	8004344 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fe f968 	bl	80025f0 <HAL_GetTick>
 8004320:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004324:	f7fe f964 	bl	80025f0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	@ 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e32e      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004336:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x1f4>
 8004342:	e012      	b.n	800436a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fe f954 	bl	80025f0 <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800434c:	f7fe f950 	bl	80025f0 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e31a      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800435e:	4b0e      	ldr	r3, [pc, #56]	@ (8004398 <HAL_RCC_OscConfig+0x268>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 809a 	beq.w	80044ac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x25a>
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b18      	cmp	r3, #24
 8004382:	d149      	bne.n	8004418 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d146      	bne.n	8004418 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e2fe      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
 8004396:	bf00      	nop
 8004398:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80043a2:	4b9a      	ldr	r3, [pc, #616]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0218 	and.w	r2, r3, #24
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d014      	beq.n	80043dc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80043b2:	4b96      	ldr	r3, [pc, #600]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 0218 	bic.w	r2, r3, #24
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	4993      	ldr	r1, [pc, #588]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80043c4:	f000 fdd0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043c8:	4b91      	ldr	r3, [pc, #580]	@ (8004610 <HAL_RCC_OscConfig+0x4e0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe f885 	bl	80024dc <HAL_InitTick>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e2db      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fe f908 	bl	80025f0 <HAL_GetTick>
 80043e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80043e4:	f7fe f904 	bl	80025f0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e2ce      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f6:	4b85      	ldr	r3, [pc, #532]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004402:	4b82      	ldr	r3, [pc, #520]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	497e      	ldr	r1, [pc, #504]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004416:	e049      	b.n	80044ac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02c      	beq.n	800447a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004420:	4b7a      	ldr	r3, [pc, #488]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 0218 	bic.w	r2, r3, #24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	4977      	ldr	r1, [pc, #476]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004432:	4b76      	ldr	r3, [pc, #472]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fe f8d7 	bl	80025f0 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004446:	f7fe f8d3 	bl	80025f0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e29d      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004458:	4b6c      	ldr	r3, [pc, #432]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004464:	4b69      	ldr	r3, [pc, #420]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	4966      	ldr	r1, [pc, #408]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	610b      	str	r3, [r1, #16]
 8004478:	e018      	b.n	80044ac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b64      	ldr	r3, [pc, #400]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a63      	ldr	r2, [pc, #396]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fe f8b3 	bl	80025f0 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800448e:	f7fe f8af 	bl	80025f0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e279      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a0:	4b5a      	ldr	r3, [pc, #360]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03c      	beq.n	8004532 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c0:	4b52      	ldr	r3, [pc, #328]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80044c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c6:	4a51      	ldr	r2, [pc, #324]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80044c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fe f88e 	bl	80025f0 <HAL_GetTick>
 80044d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80044d8:	f7fe f88a 	bl	80025f0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e254      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044ea:	4b48      	ldr	r3, [pc, #288]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80044ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ef      	beq.n	80044d8 <HAL_RCC_OscConfig+0x3a8>
 80044f8:	e01b      	b.n	8004532 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fa:	4b44      	ldr	r3, [pc, #272]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80044fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004500:	4a42      	ldr	r2, [pc, #264]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fe f871 	bl	80025f0 <HAL_GetTick>
 800450e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004512:	f7fe f86d 	bl	80025f0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e237      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004524:	4b39      	ldr	r3, [pc, #228]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800452a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ef      	bne.n	8004512 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80d2 	beq.w	80046e4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004540:	4b34      	ldr	r3, [pc, #208]	@ (8004614 <HAL_RCC_OscConfig+0x4e4>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d118      	bne.n	800457e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800454c:	4b31      	ldr	r3, [pc, #196]	@ (8004614 <HAL_RCC_OscConfig+0x4e4>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	4a30      	ldr	r2, [pc, #192]	@ (8004614 <HAL_RCC_OscConfig+0x4e4>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004558:	f7fe f84a 	bl	80025f0 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fe f846 	bl	80025f0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e210      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004572:	4b28      	ldr	r3, [pc, #160]	@ (8004614 <HAL_RCC_OscConfig+0x4e4>)
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d108      	bne.n	8004598 <HAL_RCC_OscConfig+0x468>
 8004586:	4b21      	ldr	r3, [pc, #132]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800458c:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004596:	e074      	b.n	8004682 <HAL_RCC_OscConfig+0x552>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d118      	bne.n	80045d2 <HAL_RCC_OscConfig+0x4a2>
 80045a0:	4b1a      	ldr	r3, [pc, #104]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045a6:	4a19      	ldr	r2, [pc, #100]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045b0:	4b16      	ldr	r3, [pc, #88]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b6:	4a15      	ldr	r2, [pc, #84]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045c6:	4a11      	ldr	r2, [pc, #68]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045c8:	f023 0304 	bic.w	r3, r3, #4
 80045cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045d0:	e057      	b.n	8004682 <HAL_RCC_OscConfig+0x552>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d11e      	bne.n	8004618 <HAL_RCC_OscConfig+0x4e8>
 80045da:	4b0c      	ldr	r3, [pc, #48]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045e0:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045ea:	4b08      	ldr	r3, [pc, #32]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045f0:	4a06      	ldr	r2, [pc, #24]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045fa:	4b04      	ldr	r3, [pc, #16]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 80045fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004600:	4a02      	ldr	r2, [pc, #8]	@ (800460c <HAL_RCC_OscConfig+0x4dc>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800460a:	e03a      	b.n	8004682 <HAL_RCC_OscConfig+0x552>
 800460c:	44020c00 	.word	0x44020c00
 8004610:	2000001c 	.word	0x2000001c
 8004614:	44020800 	.word	0x44020800
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b85      	cmp	r3, #133	@ 0x85
 800461e:	d118      	bne.n	8004652 <HAL_RCC_OscConfig+0x522>
 8004620:	4ba2      	ldr	r3, [pc, #648]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004626:	4aa1      	ldr	r2, [pc, #644]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004628:	f043 0304 	orr.w	r3, r3, #4
 800462c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004630:	4b9e      	ldr	r3, [pc, #632]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004636:	4a9d      	ldr	r2, [pc, #628]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004640:	4b9a      	ldr	r3, [pc, #616]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004646:	4a99      	ldr	r2, [pc, #612]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004650:	e017      	b.n	8004682 <HAL_RCC_OscConfig+0x552>
 8004652:	4b96      	ldr	r3, [pc, #600]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004658:	4a94      	ldr	r2, [pc, #592]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004662:	4b92      	ldr	r3, [pc, #584]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004668:	4a90      	ldr	r2, [pc, #576]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800466a:	f023 0304 	bic.w	r3, r3, #4
 800466e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004672:	4b8e      	ldr	r3, [pc, #568]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004678:	4a8c      	ldr	r2, [pc, #560]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800467a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800467e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fd ffb1 	bl	80025f0 <HAL_GetTick>
 800468e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fd ffad 	bl	80025f0 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e175      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	4b80      	ldr	r3, [pc, #512]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80046aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ed      	beq.n	8004692 <HAL_RCC_OscConfig+0x562>
 80046b6:	e015      	b.n	80046e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd ff9a 	bl	80025f0 <HAL_GetTick>
 80046bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fd ff96 	bl	80025f0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e15e      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d6:	4b75      	ldr	r3, [pc, #468]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80046d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ed      	bne.n	80046c0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d036      	beq.n	800475e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d019      	beq.n	800472c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f8:	4b6c      	ldr	r3, [pc, #432]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6b      	ldr	r2, [pc, #428]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80046fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd ff74 	bl	80025f0 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800470c:	f7fd ff70 	bl	80025f0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e13a      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800471e:	4b63      	ldr	r3, [pc, #396]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x5dc>
 800472a:	e018      	b.n	800475e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800472c:	4b5f      	ldr	r3, [pc, #380]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5e      	ldr	r2, [pc, #376]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004732:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd ff5a 	bl	80025f0 <HAL_GetTick>
 800473c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004740:	f7fd ff56 	bl	80025f0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e120      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004752:	4b56      	ldr	r3, [pc, #344]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8115 	beq.w	8004992 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b18      	cmp	r3, #24
 800476c:	f000 80af 	beq.w	80048ce <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	2b02      	cmp	r3, #2
 8004776:	f040 8086 	bne.w	8004886 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800477a:	4b4c      	ldr	r3, [pc, #304]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a4b      	ldr	r2, [pc, #300]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004780:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fd ff33 	bl	80025f0 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800478e:	f7fd ff2f 	bl	80025f0 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0f9      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047a0:	4b42      	ldr	r3, [pc, #264]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80047ac:	4b3f      	ldr	r3, [pc, #252]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047b4:	f023 0303 	bic.w	r3, r3, #3
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047c0:	0212      	lsls	r2, r2, #8
 80047c2:	430a      	orrs	r2, r1
 80047c4:	4939      	ldr	r1, [pc, #228]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	3b01      	subs	r3, #1
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	b29b      	uxth	r3, r3
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e4:	3b01      	subs	r3, #1
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	3b01      	subs	r3, #1
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047fa:	492c      	ldr	r1, [pc, #176]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004800:	4b2a      	ldr	r3, [pc, #168]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	4a29      	ldr	r2, [pc, #164]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004806:	f023 0310 	bic.w	r3, r3, #16
 800480a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004810:	4a26      	ldr	r2, [pc, #152]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004816:	4b25      	ldr	r3, [pc, #148]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800481c:	f043 0310 	orr.w	r3, r3, #16
 8004820:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	f023 020c 	bic.w	r2, r3, #12
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	491f      	ldr	r1, [pc, #124]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	f023 0220 	bic.w	r2, r3, #32
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004840:	491a      	ldr	r1, [pc, #104]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004846:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004850:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004852:	4b16      	ldr	r3, [pc, #88]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004858:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fec7 	bl	80025f0 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004866:	f7fd fec3 	bl	80025f0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e08d      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x736>
 8004884:	e085      	b.n	8004992 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004886:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <HAL_RCC_OscConfig+0x77c>)
 800488c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fd fead 	bl	80025f0 <HAL_GetTick>
 8004896:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800489a:	f7fd fea9 	bl	80025f0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d903      	bls.n	80048b0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e073      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
 80048ac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ee      	bne.n	800489a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80048bc:	4b37      	ldr	r3, [pc, #220]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	4a36      	ldr	r2, [pc, #216]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 80048c2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	6293      	str	r3, [r2, #40]	@ 0x28
 80048cc:	e061      	b.n	8004992 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80048ce:	4b33      	ldr	r3, [pc, #204]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048d4:	4b31      	ldr	r3, [pc, #196]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 80048d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d031      	beq.n	8004946 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0203 	and.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d12a      	bne.n	8004946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d122      	bne.n	8004946 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d11a      	bne.n	8004946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	0a5b      	lsrs	r3, r3, #9
 8004914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d111      	bne.n	8004946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d108      	bne.n	8004946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0e1b      	lsrs	r3, r3, #24
 8004938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d001      	beq.n	800494a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e024      	b.n	8004994 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	08db      	lsrs	r3, r3, #3
 8004950:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004958:	429a      	cmp	r2, r3
 800495a:	d01a      	beq.n	8004992 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800495c:	4b0f      	ldr	r3, [pc, #60]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	4a0e      	ldr	r2, [pc, #56]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 8004962:	f023 0310 	bic.w	r3, r3, #16
 8004966:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd fe42 	bl	80025f0 <HAL_GetTick>
 800496c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800496e:	bf00      	nop
 8004970:	f7fd fe3e 	bl	80025f0 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4293      	cmp	r3, r2
 800497a:	d0f9      	beq.n	8004970 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004980:	4a06      	ldr	r2, [pc, #24]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004986:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	4a04      	ldr	r2, [pc, #16]	@ (800499c <HAL_RCC_OscConfig+0x86c>)
 800498c:	f043 0310 	orr.w	r3, r3, #16
 8004990:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	44020c00 	.word	0x44020c00

080049a0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e19e      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b83      	ldr	r3, [pc, #524]	@ (8004bc4 <HAL_RCC_ClockConfig+0x224>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d910      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b80      	ldr	r3, [pc, #512]	@ (8004bc4 <HAL_RCC_ClockConfig+0x224>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 020f 	bic.w	r2, r3, #15
 80049ca:	497e      	ldr	r1, [pc, #504]	@ (8004bc4 <HAL_RCC_ClockConfig+0x224>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b7c      	ldr	r3, [pc, #496]	@ (8004bc4 <HAL_RCC_ClockConfig+0x224>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e186      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	4b74      	ldr	r3, [pc, #464]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d909      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004a02:	4b71      	ldr	r3, [pc, #452]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	496d      	ldr	r1, [pc, #436]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	4b68      	ldr	r3, [pc, #416]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d909      	bls.n	8004a48 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004a34:	4b64      	ldr	r3, [pc, #400]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4961      	ldr	r1, [pc, #388]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d908      	bls.n	8004a76 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004a64:	4b58      	ldr	r3, [pc, #352]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4955      	ldr	r1, [pc, #340]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d010      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	4b50      	ldr	r3, [pc, #320]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d908      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004a92:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	494a      	ldr	r1, [pc, #296]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8093 	beq.w	8004bd8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004aba:	4b43      	ldr	r3, [pc, #268]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d121      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e113      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d115      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e107      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004aea:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0fb      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afa:	4b33      	ldr	r3, [pc, #204]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0f3      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f023 0203 	bic.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	492c      	ldr	r1, [pc, #176]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fd fd68 	bl	80025f0 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d112      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fd fd60 	bl	80025f0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e0d7      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b42:	4b21      	ldr	r3, [pc, #132]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 0318 	and.w	r3, r3, #24
 8004b4a:	2b18      	cmp	r3, #24
 8004b4c:	d1ee      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x18c>
 8004b4e:	e043      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d112      	bne.n	8004b7e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5a:	f7fd fd49 	bl	80025f0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0c0      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b70:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 0318 	and.w	r3, r3, #24
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_ClockConfig+0x1ba>
 8004b7c:	e02c      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d122      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fd fd32 	bl	80025f0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0a9      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <HAL_RCC_ClockConfig+0x228>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0318 	and.w	r3, r3, #24
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d1ee      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x1e8>
 8004baa:	e015      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7fd fd20 	bl	80025f0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d906      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e097      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
 8004bc2:	bf00      	nop
 8004bc4:	40022000 	.word	0x40022000
 8004bc8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 0318 	and.w	r3, r3, #24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e9      	bne.n	8004bac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	4b44      	ldr	r3, [pc, #272]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d208      	bcs.n	8004c06 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004bf4:	4b41      	ldr	r3, [pc, #260]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f023 020f 	bic.w	r2, r3, #15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	493e      	ldr	r1, [pc, #248]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c06:	4b3e      	ldr	r3, [pc, #248]	@ (8004d00 <HAL_RCC_ClockConfig+0x360>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d210      	bcs.n	8004c36 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c14:	4b3a      	ldr	r3, [pc, #232]	@ (8004d00 <HAL_RCC_ClockConfig+0x360>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 020f 	bic.w	r2, r3, #15
 8004c1c:	4938      	ldr	r1, [pc, #224]	@ (8004d00 <HAL_RCC_ClockConfig+0x360>)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c24:	4b36      	ldr	r3, [pc, #216]	@ (8004d00 <HAL_RCC_ClockConfig+0x360>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d001      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e05d      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d208      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004c52:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4927      	ldr	r1, [pc, #156]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	4b21      	ldr	r3, [pc, #132]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d209      	bcs.n	8004c96 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004c82:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	491a      	ldr	r1, [pc, #104]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d209      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004cb4:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	490e      	ldr	r1, [pc, #56]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cc8:	f000 f822 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <HAL_RCC_ClockConfig+0x35c>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	490b      	ldr	r1, [pc, #44]	@ (8004d04 <HAL_RCC_ClockConfig+0x364>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a0a      	ldr	r2, [pc, #40]	@ (8004d08 <HAL_RCC_ClockConfig+0x368>)
 8004ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_RCC_ClockConfig+0x36c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fd fbf8 	bl	80024dc <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	44020c00 	.word	0x44020c00
 8004d00:	40022000 	.word	0x40022000
 8004d04:	0800df98 	.word	0x0800df98
 8004d08:	20000018 	.word	0x20000018
 8004d0c:	2000001c 	.word	0x2000001c

08004d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	@ 0x24
 8004d14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004d16:	4b8c      	ldr	r3, [pc, #560]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 0318 	and.w	r3, r3, #24
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d102      	bne.n	8004d28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d22:	4b8a      	ldr	r3, [pc, #552]	@ (8004f4c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e107      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d28:	4b87      	ldr	r3, [pc, #540]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f003 0318 	and.w	r3, r3, #24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d112      	bne.n	8004d5a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004d34:	4b84      	ldr	r3, [pc, #528]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d40:	4b81      	ldr	r3, [pc, #516]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	4a81      	ldr	r2, [pc, #516]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e0f1      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004d54:	4b7e      	ldr	r3, [pc, #504]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e0ee      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0318 	and.w	r3, r3, #24
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d102      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d66:	4b7b      	ldr	r3, [pc, #492]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x244>)
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	e0e5      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d6c:	4b76      	ldr	r3, [pc, #472]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	f003 0318 	and.w	r3, r3, #24
 8004d74:	2b18      	cmp	r3, #24
 8004d76:	f040 80dd 	bne.w	8004f34 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d7a:	4b73      	ldr	r3, [pc, #460]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004d84:	4b70      	ldr	r3, [pc, #448]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004d90:	4b6d      	ldr	r3, [pc, #436]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	ee07 3a90 	vmov	s15, r3
 8004db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80b7 	beq.w	8004f2e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d003      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0xbe>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d056      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x16a>
 8004dcc:	e077      	b.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004dce:	4b5e      	ldr	r3, [pc, #376]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02d      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004dda:	4b5b      	ldr	r3, [pc, #364]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	08db      	lsrs	r3, r3, #3
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8004de6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	ee07 3a90 	vmov	s15, r3
 8004dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e04:	4b50      	ldr	r3, [pc, #320]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e14:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e18:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004f58 <HAL_RCC_GetSysClockFreq+0x248>
 8004e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e30:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004e34:	e065      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e40:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004f5c <HAL_RCC_GetSysClockFreq+0x24c>
 8004e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e48:	4b3f      	ldr	r3, [pc, #252]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e58:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e5c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004f58 <HAL_RCC_GetSysClockFreq+0x248>
 8004e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e74:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004e78:	e043      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e84:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004f60 <HAL_RCC_GetSysClockFreq+0x250>
 8004e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004f58 <HAL_RCC_GetSysClockFreq+0x248>
 8004ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004ebc:	e021      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	ee07 3a90 	vmov	s15, r3
 8004ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f64 <HAL_RCC_GetSysClockFreq+0x254>
 8004ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ee4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004f58 <HAL_RCC_GetSysClockFreq+0x248>
 8004ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004f00:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004f02:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f06:	0a5b      	lsrs	r3, r3, #9
 8004f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f26:	ee17 3a90 	vmov	r3, s15
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e004      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e001      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004f34:	4b06      	ldr	r3, [pc, #24]	@ (8004f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8004f36:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004f38:	69fb      	ldr	r3, [r7, #28]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3724      	adds	r7, #36	@ 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	44020c00 	.word	0x44020c00
 8004f4c:	003d0900 	.word	0x003d0900
 8004f50:	03d09000 	.word	0x03d09000
 8004f54:	017d7840 	.word	0x017d7840
 8004f58:	46000000 	.word	0x46000000
 8004f5c:	4c742400 	.word	0x4c742400
 8004f60:	4bbebc20 	.word	0x4bbebc20
 8004f64:	4a742400 	.word	0x4a742400

08004f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f6c:	f7ff fed0 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f76:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f7a:	4907      	ldr	r1, [pc, #28]	@ (8004f98 <HAL_RCC_GetHCLKFreq+0x30>)
 8004f7c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f7e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f82:	fa22 f303 	lsr.w	r3, r2, r3
 8004f86:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <HAL_RCC_GetHCLKFreq+0x34>)
 8004f88:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004f8a:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <HAL_RCC_GetHCLKFreq+0x34>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	44020c00 	.word	0x44020c00
 8004f98:	0800df98 	.word	0x0800df98
 8004f9c:	20000018 	.word	0x20000018

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004fa4:	f7ff ffe0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4904      	ldr	r1, [pc, #16]	@ (8004fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	44020c00 	.word	0x44020c00
 8004fc8:	0800dfa8 	.word	0x0800dfa8

08004fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004fd0:	f7ff ffca 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	4904      	ldr	r1, [pc, #16]	@ (8004ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fe2:	5ccb      	ldrb	r3, [r1, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	44020c00 	.word	0x44020c00
 8004ff4:	0800dfa8 	.word	0x0800dfa8

08004ff8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004ffc:	f7ff ffb4 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	0b1b      	lsrs	r3, r3, #12
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <HAL_RCC_GetPCLK3Freq+0x28>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	44020c00 	.word	0x44020c00
 8005020:	0800dfa8 	.word	0x0800dfa8

08005024 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005028:	b0aa      	sub	sp, #168	@ 0xa8
 800502a:	af00      	add	r7, sp, #0
 800502c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005030:	2300      	movs	r3, #0
 8005032:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005036:	2300      	movs	r3, #0
 8005038:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800503c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005048:	2500      	movs	r5, #0
 800504a:	ea54 0305 	orrs.w	r3, r4, r5
 800504e:	d00b      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005050:	4bb8      	ldr	r3, [pc, #736]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005056:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800505a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	4ab4      	ldr	r2, [pc, #720]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005062:	430b      	orrs	r3, r1
 8005064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005068:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f002 0801 	and.w	r8, r2, #1
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	ea58 0309 	orrs.w	r3, r8, r9
 800507c:	d038      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800507e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005084:	2b05      	cmp	r3, #5
 8005086:	d819      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050c5 	.word	0x080050c5
 8005094:	080050a9 	.word	0x080050a9
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050c5 	.word	0x080050c5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050ac:	3308      	adds	r3, #8
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 ffee 	bl	8007090 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80050ba:	e004      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80050c2:	e000      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80050c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80050ce:	4b99      	ldr	r3, [pc, #612]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050d4:	f023 0107 	bic.w	r1, r3, #7
 80050d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050de:	4a95      	ldr	r2, [pc, #596]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80050e0:	430b      	orrs	r3, r1
 80050e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050e6:	e003      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f002 0a02 	and.w	sl, r2, #2
 80050fc:	f04f 0b00 	mov.w	fp, #0
 8005100:	ea5a 030b 	orrs.w	r3, sl, fp
 8005104:	d03c      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005106:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800510a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510c:	2b28      	cmp	r3, #40	@ 0x28
 800510e:	d01b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005110:	2b28      	cmp	r3, #40	@ 0x28
 8005112:	d815      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d019      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d811      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800511c:	2b18      	cmp	r3, #24
 800511e:	d017      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005120:	2b18      	cmp	r3, #24
 8005122:	d80d      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005128:	2b08      	cmp	r3, #8
 800512a:	d109      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800512c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005130:	3308      	adds	r3, #8
 8005132:	4618      	mov	r0, r3
 8005134:	f001 ffac 	bl	8007090 <RCCEx_PLL2_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800513e:	e00a      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005146:	e006      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8005154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005156:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800515e:	4b75      	ldr	r3, [pc, #468]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005164:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005168:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	4a71      	ldr	r2, [pc, #452]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005170:	430b      	orrs	r3, r1
 8005172:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005176:	e003      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800517c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005180:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 0304 	and.w	r3, r2, #4
 800518c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005196:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	d040      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80051a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051aa:	d01e      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80051ac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80051b0:	d817      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b6:	d01a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80051b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051bc:	d811      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80051be:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c0:	d017      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80051c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c4:	d80d      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d015      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80051ca:	2b40      	cmp	r3, #64	@ 0x40
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051d2:	3308      	adds	r3, #8
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 ff5b 	bl	8007090 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 80051e0:	e00a      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80051e8:	e006      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80051ea:	bf00      	nop
 80051ec:	e004      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80051ee:	bf00      	nop
 80051f0:	e002      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 80051f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10c      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005200:	4b4c      	ldr	r3, [pc, #304]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005206:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800520a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	4a48      	ldr	r2, [pc, #288]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005212:	430b      	orrs	r3, r1
 8005214:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005218:	e003      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800521e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005222:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800522e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005238:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800523c:	460b      	mov	r3, r1
 800523e:	4313      	orrs	r3, r2
 8005240:	d043      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800524c:	d021      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800524e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005252:	d81a      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005258:	d01d      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800525a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800525e:	d814      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005260:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005264:	d019      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8005266:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800526a:	d80e      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8005270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005274:	d109      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005276:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800527a:	3308      	adds	r3, #8
 800527c:	4618      	mov	r0, r3
 800527e:	f001 ff07 	bl	8007090 <RCCEx_PLL2_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005288:	e00a      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005290:	e006      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005292:	bf00      	nop
 8005294:	e004      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005296:	bf00      	nop
 8005298:	e002      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800529e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10c      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80052a8:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ae:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80052b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052ba:	430b      	orrs	r3, r1
 80052bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052c6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80052d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052d8:	2300      	movs	r3, #0
 80052da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052e0:	460b      	mov	r3, r1
 80052e2:	4313      	orrs	r3, r2
 80052e4:	d03e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80052e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052f0:	d01b      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x306>
 80052f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052f6:	d814      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80052f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052fc:	d017      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80052fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005302:	d80e      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530c:	d109      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800530e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005312:	3308      	adds	r3, #8
 8005314:	4618      	mov	r0, r3
 8005316:	f001 febb 	bl	8007090 <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005320:	e00b      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005328:	e007      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800532a:	bf00      	nop
 800532c:	e005      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800532e:	bf00      	nop
 8005330:	e003      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8005332:	bf00      	nop
 8005334:	44020c00 	.word	0x44020c00
        break;
 8005338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005342:	4ba5      	ldr	r3, [pc, #660]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005348:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800534c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	4aa1      	ldr	r2, [pc, #644]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005354:	430b      	orrs	r3, r1
 8005356:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800535a:	e003      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005360:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005364:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005370:	673b      	str	r3, [r7, #112]	@ 0x70
 8005372:	2300      	movs	r3, #0
 8005374:	677b      	str	r3, [r7, #116]	@ 0x74
 8005376:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d03b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005380:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005386:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800538a:	d01b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800538c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005390:	d814      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005392:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005396:	d017      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005398:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800539c:	d80e      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x398>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d014      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80053a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053a6:	d109      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053ac:	3308      	adds	r3, #8
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fe6e 	bl	8007090 <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80053c2:	e004      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80053c4:	bf00      	nop
 80053c6:	e002      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80053cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80053d6:	4b80      	ldr	r3, [pc, #512]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053dc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80053e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e6:	4a7c      	ldr	r2, [pc, #496]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80053e8:	430b      	orrs	r3, r1
 80053ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053ee:	e003      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80053f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005406:	2300      	movs	r3, #0
 8005408:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800540a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800540e:	460b      	mov	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	d033      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005414:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800541e:	d015      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005420:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005424:	d80e      	bhi.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d012      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800542a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800542e:	d109      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005434:	3308      	adds	r3, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f001 fe2a 	bl	8007090 <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005442:	e006      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800544a:	e002      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8005450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005452:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10c      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800545a:	4b5f      	ldr	r3, [pc, #380]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800545c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005460:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546a:	4a5b      	ldr	r2, [pc, #364]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800546c:	430b      	orrs	r3, r1
 800546e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005472:	e003      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005478:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800547c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	2100      	movs	r1, #0
 8005486:	6639      	str	r1, [r7, #96]	@ 0x60
 8005488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800548c:	667b      	str	r3, [r7, #100]	@ 0x64
 800548e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d033      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005498:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800549c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a2:	d015      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80054a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054a8:	d80e      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d012      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80054ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054b2:	d109      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054b8:	3308      	adds	r3, #8
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fde8 	bl	8007090 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80054c6:	e006      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 80054d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80054de:	4b3e      	ldr	r3, [pc, #248]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	4a3a      	ldr	r2, [pc, #232]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054f6:	e003      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005500:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	2100      	movs	r1, #0
 800550a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800550c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005512:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005516:	460b      	mov	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800551c:	4b2e      	ldr	r3, [pc, #184]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005522:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005526:	61d3      	str	r3, [r2, #28]
 8005528:	4b2b      	ldr	r3, [pc, #172]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005534:	4a28      	ldr	r2, [pc, #160]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005536:	430b      	orrs	r3, r1
 8005538:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800553a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005546:	653b      	str	r3, [r7, #80]	@ 0x50
 8005548:	2300      	movs	r3, #0
 800554a:	657b      	str	r3, [r7, #84]	@ 0x54
 800554c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d046      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005556:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005560:	d021      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005562:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005566:	d81a      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556c:	d01d      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 800556e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005572:	d814      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005578:	d019      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800557a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800557e:	d80e      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d016      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005588:	d109      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800558a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800558e:	3308      	adds	r3, #8
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fd7d 	bl	8007090 <RCCEx_PLL2_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800559c:	e00a      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055a4:	e006      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055a6:	bf00      	nop
 80055a8:	e004      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055aa:	bf00      	nop
 80055ac:	e002      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80055b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10f      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055c2:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80055c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	4a02      	ldr	r2, [pc, #8]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055ce:	430b      	orrs	r3, r1
 80055d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80055d4:	e006      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055d6:	bf00      	nop
 80055d8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055e0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f2:	2300      	movs	r3, #0
 80055f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80055fa:	460b      	mov	r3, r1
 80055fc:	4313      	orrs	r3, r2
 80055fe:	d043      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005600:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005606:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800560a:	d021      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800560c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005610:	d81a      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005612:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005616:	d01d      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800561c:	d814      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800561e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005622:	d019      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005628:	d80e      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d109      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005634:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005638:	3308      	adds	r3, #8
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fd28 	bl	8007090 <RCCEx_PLL2_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005646:	e00a      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800564e:	e006      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005650:	bf00      	nop
 8005652:	e004      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005654:	bf00      	nop
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800565c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10c      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005666:	4bb6      	ldr	r3, [pc, #728]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005668:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800566c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005670:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005676:	4ab2      	ldr	r2, [pc, #712]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005678:	430b      	orrs	r3, r1
 800567a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005684:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005688:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005694:	643b      	str	r3, [r7, #64]	@ 0x40
 8005696:	2300      	movs	r3, #0
 8005698:	647b      	str	r3, [r7, #68]	@ 0x44
 800569a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800569e:	460b      	mov	r3, r1
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d030      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d80f      	bhi.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d211      	bcs.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d911      	bls.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d109      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056be:	3308      	adds	r3, #8
 80056c0:	4618      	mov	r0, r3
 80056c2:	f001 fce5 	bl	8007090 <RCCEx_PLL2_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056d4:	e002      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 80056da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056dc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10c      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80056e4:	4b96      	ldr	r3, [pc, #600]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056ea:	f023 0107 	bic.w	r1, r3, #7
 80056ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f4:	4a92      	ldr	r2, [pc, #584]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80056f6:	430b      	orrs	r3, r1
 80056f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005702:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005706:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	2100      	movs	r1, #0
 8005710:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005718:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d022      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800572c:	2b08      	cmp	r3, #8
 800572e:	d005      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005736:	e002      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005738:	bf00      	nop
 800573a:	e000      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800573c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10c      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005746:	4b7e      	ldr	r3, [pc, #504]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800574c:	f023 0108 	bic.w	r1, r3, #8
 8005750:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005756:	4a7a      	ldr	r2, [pc, #488]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005758:	430b      	orrs	r3, r1
 800575a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800575e:	e003      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005764:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005768:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
 8005776:	2300      	movs	r3, #0
 8005778:	637b      	str	r3, [r7, #52]	@ 0x34
 800577a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	f000 80b0 	beq.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005786:	4b6f      	ldr	r3, [pc, #444]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	4a6e      	ldr	r2, [pc, #440]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005792:	f7fc ff2d 	bl	80025f0 <HAL_GetTick>
 8005796:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800579a:	e00b      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579c:	f7fc ff28 	bl	80025f0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d903      	bls.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80057b2:	e005      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80057b4:	4b63      	ldr	r3, [pc, #396]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ed      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80057c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 808a 	bne.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80057d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d022      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x802>
 80057e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d01b      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ee:	4b54      	ldr	r3, [pc, #336]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057fc:	4b50      	ldr	r3, [pc, #320]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80057fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005802:	4a4f      	ldr	r2, [pc, #316]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005808:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800580c:	4b4c      	ldr	r3, [pc, #304]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800580e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005812:	4a4b      	ldr	r2, [pc, #300]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005818:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800581c:	4a48      	ldr	r2, [pc, #288]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800581e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005822:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fc fedd 	bl	80025f0 <HAL_GetTick>
 8005836:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583a:	e00d      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583c:	f7fc fed8 	bl	80025f0 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d903      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8005856:	e006      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005858:	4b39      	ldr	r3, [pc, #228]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800585a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0ea      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8005866:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d132      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800586e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587c:	d10f      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x87a>
 800587e:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800588a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005892:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005896:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005898:	430b      	orrs	r3, r1
 800589a:	61d3      	str	r3, [r2, #28]
 800589c:	e005      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x886>
 800589e:	4b28      	ldr	r3, [pc, #160]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	4a27      	ldr	r2, [pc, #156]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058a8:	61d3      	str	r3, [r2, #28]
 80058aa:	4b25      	ldr	r3, [pc, #148]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058b0:	4a23      	ldr	r2, [pc, #140]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058ba:	4b21      	ldr	r3, [pc, #132]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058bc:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80058c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80058d2:	e008      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058e2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80058f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f4:	2300      	movs	r3, #0
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d038      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005902:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005908:	2b30      	cmp	r3, #48	@ 0x30
 800590a:	d014      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800590c:	2b30      	cmp	r3, #48	@ 0x30
 800590e:	d80e      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005910:	2b20      	cmp	r3, #32
 8005912:	d012      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d80a      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d015      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800591c:	2b10      	cmp	r3, #16
 800591e:	d106      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	4a06      	ldr	r2, [pc, #24]	@ (8005940 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800592c:	e00d      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005934:	e009      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005936:	bf00      	nop
 8005938:	e007      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800593a:	bf00      	nop
 800593c:	e005      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800593e:	bf00      	nop
 8005940:	44020c00 	.word	0x44020c00
 8005944:	44020800 	.word	0x44020800
        break;
 8005948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005952:	4bb5      	ldr	r3, [pc, #724]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005958:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800595c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005962:	49b1      	ldr	r1, [pc, #708]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800596a:	e003      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005970:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
 8005986:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d03c      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005990:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005996:	2b04      	cmp	r3, #4
 8005998:	d81d      	bhi.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b5 	.word	0x080059b5
 80059a4:	080059c3 	.word	0x080059c3
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059df 	.word	0x080059df
 80059b0:	080059df 	.word	0x080059df
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b9c      	ldr	r3, [pc, #624]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	4a9b      	ldr	r2, [pc, #620]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80059c0:	e00e      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059c6:	3308      	adds	r3, #8
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fb61 	bl	8007090 <RCCEx_PLL2_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80059d4:	e004      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80059e8:	4b8f      	ldr	r3, [pc, #572]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059ee:	f023 0207 	bic.w	r2, r3, #7
 80059f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f8:	498b      	ldr	r1, [pc, #556]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a00:	e003      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a06:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005a0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a20:	460b      	mov	r3, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	d03c      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d01f      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d819      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a34:	2b18      	cmp	r3, #24
 8005a36:	d01d      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005a38:	2b18      	cmp	r3, #24
 8005a3a:	d815      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d007      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005a44:	e010      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a46:	4b78      	ldr	r3, [pc, #480]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	4a77      	ldr	r2, [pc, #476]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a50:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a52:	e010      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a58:	3308      	adds	r3, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fb18 	bl	8007090 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005a66:	e006      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a6e:	e002      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005a70:	bf00      	nop
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a84:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8e:	4966      	ldr	r1, [pc, #408]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a9c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d03e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005abc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac6:	d020      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005acc:	d819      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad0:	d01d      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ad4:	d815      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d007      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005ade:	e010      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4b51      	ldr	r3, [pc, #324]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	4a50      	ldr	r2, [pc, #320]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005aec:	e010      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005af2:	3308      	adds	r3, #8
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 facb 	bl	8007090 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10c      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b18:	4b43      	ldr	r3, [pc, #268]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b1e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b28:	493f      	ldr	r1, [pc, #252]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005b30:	e003      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b36:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	2100      	movs	r1, #0
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d038      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005b56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b60:	d00e      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b66:	d815      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d017      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b70:	d110      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b72:	4b2d      	ldr	r3, [pc, #180]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b7e:	e00e      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b84:	3308      	adds	r3, #8
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fa82 	bl	8007090 <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b92:	e004      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005b9a:	e000      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005ba6:	4b20      	ldr	r3, [pc, #128]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	491c      	ldr	r1, [pc, #112]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005bbe:	e003      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bc4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	6039      	str	r1, [r7, #0]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d039      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bea:	2b30      	cmp	r3, #48	@ 0x30
 8005bec:	d01e      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005bee:	2b30      	cmp	r3, #48	@ 0x30
 8005bf0:	d815      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d002      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d007      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005bfa:	e010      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	4a09      	ldr	r2, [pc, #36]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c08:	e011      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c0e:	3308      	adds	r3, #8
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fa3d 	bl	8007090 <RCCEx_PLL2_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c1c:	e007      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005c24:	e003      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005c26:	bf00      	nop
 8005c28:	44020c00 	.word	0x44020c00
        break;
 8005c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c36:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c46:	4908      	ldr	r1, [pc, #32]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c4e:	e003      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c54:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005c58:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	37a8      	adds	r7, #168	@ 0xa8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	44020c00 	.word	0x44020c00

08005c6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b08b      	sub	sp, #44	@ 0x2c
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005c74:	4bad      	ldr	r3, [pc, #692]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c7e:	4bab      	ldr	r3, [pc, #684]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005c88:	4ba8      	ldr	r3, [pc, #672]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c92:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005c94:	4ba5      	ldr	r3, [pc, #660]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005c9e:	4ba3      	ldr	r3, [pc, #652]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	08db      	lsrs	r3, r3, #3
 8005ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8126 	beq.w	8005f0e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d053      	beq.n	8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d86f      	bhi.n	8005dae <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d02b      	beq.n	8005d32 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005cda:	e068      	b.n	8005dae <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cdc:	4b93      	ldr	r3, [pc, #588]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	08db      	lsrs	r3, r3, #3
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	4a92      	ldr	r2, [pc, #584]	@ (8005f30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cec:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d10:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d14:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d30:	e068      	b.n	8005e04 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	ee07 3a90 	vmov	s15, r3
 8005d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005f38 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005d6e:	e049      	b.n	8005e04 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005f3c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d90:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005d94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005dac:	e02a      	b.n	8005e04 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dae:	4b5f      	ldr	r3, [pc, #380]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005dba:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbe:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de2:	ed97 6a04 	vldr	s12, [r7, #16]
 8005de6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005f34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005e02:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e04:	4b49      	ldr	r3, [pc, #292]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e10:	d121      	bne.n	8005e56 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005e12:	4b46      	ldr	r3, [pc, #280]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e1e:	4b43      	ldr	r3, [pc, #268]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e22:	0a5b      	lsrs	r3, r3, #9
 8005e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005e30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e34:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e38:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e44:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e006      	b.n	8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e5c:	4b33      	ldr	r3, [pc, #204]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e68:	d121      	bne.n	8005eae <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005e6a:	4b30      	ldr	r3, [pc, #192]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e76:	4b2d      	ldr	r3, [pc, #180]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e80:	ee07 3a90 	vmov	s15, r3
 8005e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005e90:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	e006      	b.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]
 8005eac:	e002      	b.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ec0:	d121      	bne.n	8005f06 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d017      	beq.n	8005efe <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ece:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed2:	0e1b      	lsrs	r3, r3, #24
 8005ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005ee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005ee8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005efc:	e010      	b.n	8005f20 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	e00c      	b.n	8005f20 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	e008      	b.n	8005f20 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	609a      	str	r2, [r3, #8]
}
 8005f20:	bf00      	nop
 8005f22:	372c      	adds	r7, #44	@ 0x2c
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	44020c00 	.word	0x44020c00
 8005f30:	03d09000 	.word	0x03d09000
 8005f34:	46000000 	.word	0x46000000
 8005f38:	4a742400 	.word	0x4a742400
 8005f3c:	4bbebc20 	.word	0x4bbebc20

08005f40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b08b      	sub	sp, #44	@ 0x2c
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005f48:	4bad      	ldr	r3, [pc, #692]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f50:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005f52:	4bab      	ldr	r3, [pc, #684]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005f5c:	4ba8      	ldr	r3, [pc, #672]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f66:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005f68:	4ba5      	ldr	r3, [pc, #660]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005f72:	4ba3      	ldr	r3, [pc, #652]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8126 	beq.w	80061e2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d053      	beq.n	8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d86f      	bhi.n	8006082 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d003      	beq.n	8005fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d02b      	beq.n	8006006 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005fae:	e068      	b.n	8006082 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fb0:	4b93      	ldr	r3, [pc, #588]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	08db      	lsrs	r3, r3, #3
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	4a92      	ldr	r2, [pc, #584]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	ee07 3a90 	vmov	s15, r3
 8005fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fe8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006000:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006004:	e068      	b.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	ed97 6a04 	vldr	s12, [r7, #16]
 8006026:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800602a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006042:	e049      	b.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006060:	ed97 6a04 	vldr	s12, [r7, #16]
 8006064:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006080:	e02a      	b.n	80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006082:	4b5f      	ldr	r3, [pc, #380]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	08db      	lsrs	r3, r3, #3
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	4a5d      	ldr	r2, [pc, #372]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80060ba:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80060be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80060d6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060d8:	4b49      	ldr	r3, [pc, #292]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060e4:	d121      	bne.n	800612a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80060e6:	4b46      	ldr	r3, [pc, #280]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d017      	beq.n	8006122 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80060f2:	4b43      	ldr	r3, [pc, #268]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80060f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f6:	0a5b      	lsrs	r3, r3, #9
 80060f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006104:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006108:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800610c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006118:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e006      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006130:	4b33      	ldr	r3, [pc, #204]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800613c:	d121      	bne.n	8006182 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800613e:	4b30      	ldr	r3, [pc, #192]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800614a:	4b2d      	ldr	r3, [pc, #180]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800615c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006160:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006164:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800616c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006170:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	605a      	str	r2, [r3, #4]
 8006178:	e006      	b.n	8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	e002      	b.n	8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006188:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006194:	d121      	bne.n	80061da <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006196:	4b1a      	ldr	r3, [pc, #104]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061a2:	4b17      	ldr	r3, [pc, #92]	@ (8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a6:	0e1b      	lsrs	r3, r3, #24
 80061a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80061b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80061bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80061c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061d0:	e010      	b.n	80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	609a      	str	r2, [r3, #8]
}
 80061d8:	e00c      	b.n	80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	e008      	b.n	80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	372c      	adds	r7, #44	@ 0x2c
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	44020c00 	.word	0x44020c00
 8006204:	03d09000 	.word	0x03d09000
 8006208:	46000000 	.word	0x46000000
 800620c:	4a742400 	.word	0x4a742400
 8006210:	4bbebc20 	.word	0x4bbebc20

08006214 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	@ 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800621e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006222:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006226:	430b      	orrs	r3, r1
 8006228:	d14b      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800622a:	4bc4      	ldr	r3, [pc, #784]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800622c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006236:	4bc1      	ldr	r3, [pc, #772]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d108      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624a:	d104      	bne.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800624c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006252:	f000 bf14 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006256:	4bb9      	ldr	r3, [pc, #740]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800625c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006264:	d108      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626c:	d104      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800626e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006274:	f000 bf03 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006278:	4bb0      	ldr	r3, [pc, #704]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006284:	d119      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800628c:	d115      	bne.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800628e:	4bab      	ldr	r3, [pc, #684]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629a:	d30a      	bcc.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800629c:	4ba7      	ldr	r3, [pc, #668]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	0a1b      	lsrs	r3, r3, #8
 80062a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062a6:	4aa6      	ldr	r2, [pc, #664]	@ (8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062ae:	f000 bee6 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062b6:	f000 bee2 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062be:	f000 bede 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80062c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c6:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 80062ca:	ea52 0301 	orrs.w	r3, r2, r1
 80062ce:	f000 838e 	beq.w	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 80062d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d6:	2a01      	cmp	r2, #1
 80062d8:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 80062dc:	f080 86cc 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80062e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e4:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 80062e8:	ea52 0301 	orrs.w	r3, r2, r1
 80062ec:	f000 82aa 	beq.w	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80062f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 80062fa:	f080 86bd 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80062fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006302:	f1a3 0110 	sub.w	r1, r3, #16
 8006306:	ea52 0301 	orrs.w	r3, r2, r1
 800630a:	f000 8681 	beq.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006312:	2a01      	cmp	r2, #1
 8006314:	f173 0310 	sbcs.w	r3, r3, #16
 8006318:	f080 86ae 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	1f19      	subs	r1, r3, #4
 8006322:	ea52 0301 	orrs.w	r3, r2, r1
 8006326:	f000 84b1 	beq.w	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800632a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800632e:	2a01      	cmp	r2, #1
 8006330:	f173 0304 	sbcs.w	r3, r3, #4
 8006334:	f080 86a0 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006340:	430b      	orrs	r3, r1
 8006342:	f000 85aa 	beq.w	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8006346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634a:	497e      	ldr	r1, [pc, #504]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800634c:	428a      	cmp	r2, r1
 800634e:	f173 0300 	sbcs.w	r3, r3, #0
 8006352:	f080 8691 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800635e:	430b      	orrs	r3, r1
 8006360:	f000 8532 	beq.w	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006368:	4977      	ldr	r1, [pc, #476]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 800636a:	428a      	cmp	r2, r1
 800636c:	f173 0300 	sbcs.w	r3, r3, #0
 8006370:	f080 8682 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006378:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800637c:	430b      	orrs	r3, r1
 800637e:	f000 84bc 	beq.w	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8006382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006386:	4971      	ldr	r1, [pc, #452]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006388:	428a      	cmp	r2, r1
 800638a:	f173 0300 	sbcs.w	r3, r3, #0
 800638e:	f080 8673 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006396:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800639a:	430b      	orrs	r3, r1
 800639c:	f000 85f2 	beq.w	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80063a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a4:	496a      	ldr	r1, [pc, #424]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80063a6:	428a      	cmp	r2, r1
 80063a8:	f173 0300 	sbcs.w	r3, r3, #0
 80063ac:	f080 8664 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b4:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80063b8:	430b      	orrs	r3, r1
 80063ba:	f000 81e5 	beq.w	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80063be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c2:	4964      	ldr	r1, [pc, #400]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80063c4:	428a      	cmp	r2, r1
 80063c6:	f173 0300 	sbcs.w	r3, r3, #0
 80063ca:	f080 8655 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80063d6:	430b      	orrs	r3, r1
 80063d8:	f000 83cc 	beq.w	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80063dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e0:	495d      	ldr	r1, [pc, #372]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80063e2:	428a      	cmp	r2, r1
 80063e4:	f173 0300 	sbcs.w	r3, r3, #0
 80063e8:	f080 8646 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80063ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f0:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80063f4:	430b      	orrs	r3, r1
 80063f6:	f000 8331 	beq.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 80063fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fe:	4957      	ldr	r1, [pc, #348]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006400:	428a      	cmp	r2, r1
 8006402:	f173 0300 	sbcs.w	r3, r3, #0
 8006406:	f080 8637 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800640a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006412:	430b      	orrs	r3, r1
 8006414:	f000 82bb 	beq.w	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8006420:	f173 0300 	sbcs.w	r3, r3, #0
 8006424:	f080 8628 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006430:	430b      	orrs	r3, r1
 8006432:	f000 826d 	beq.w	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8006436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800643e:	428a      	cmp	r2, r1
 8006440:	f173 0300 	sbcs.w	r3, r3, #0
 8006444:	f080 8618 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006450:	430b      	orrs	r3, r1
 8006452:	f000 821e 	beq.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8006456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800645a:	f242 0101 	movw	r1, #8193	@ 0x2001
 800645e:	428a      	cmp	r2, r1
 8006460:	f173 0300 	sbcs.w	r3, r3, #0
 8006464:	f080 8608 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006470:	430b      	orrs	r3, r1
 8006472:	f000 8137 	beq.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	f241 0101 	movw	r1, #4097	@ 0x1001
 800647e:	428a      	cmp	r2, r1
 8006480:	f173 0300 	sbcs.w	r3, r3, #0
 8006484:	f080 85f8 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648c:	1f11      	subs	r1, r2, #4
 800648e:	430b      	orrs	r3, r1
 8006490:	f000 80d2 	beq.w	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8006494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006498:	2a05      	cmp	r2, #5
 800649a:	f173 0300 	sbcs.w	r3, r3, #0
 800649e:	f080 85eb 	bcs.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80064a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a6:	1e51      	subs	r1, r2, #1
 80064a8:	430b      	orrs	r3, r1
 80064aa:	d006      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80064ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b0:	1e91      	subs	r1, r2, #2
 80064b2:	430b      	orrs	r3, r1
 80064b4:	d06c      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80064b6:	f000 bddf 	b.w	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064ba:	4b20      	ldr	r3, [pc, #128]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80064bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064c0:	f003 0307 	and.w	r3, r3, #7
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80064cc:	f7fe fd7e 	bl	8004fcc <HAL_RCC_GetPCLK2Freq>
 80064d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80064d2:	f000 bdd4 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80064d6:	4b19      	ldr	r3, [pc, #100]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e2:	d10a      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fd26 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f8:	e048      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80064fa:	4b10      	ldr	r3, [pc, #64]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d10c      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	2b03      	cmp	r3, #3
 800650a:	d109      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	08db      	lsrs	r3, r3, #3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	4a12      	ldr	r2, [pc, #72]	@ (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800651e:	e035      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006520:	4b06      	ldr	r3, [pc, #24]	@ (800653c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652c:	d11c      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	2b04      	cmp	r3, #4
 8006532:	d119      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8006534:	4b0b      	ldr	r3, [pc, #44]	@ (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006538:	e028      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800653a:	bf00      	nop
 800653c:	44020c00 	.word	0x44020c00
 8006540:	017d7840 	.word	0x017d7840
 8006544:	20000001 	.word	0x20000001
 8006548:	10000001 	.word	0x10000001
 800654c:	08000001 	.word	0x08000001
 8006550:	04000001 	.word	0x04000001
 8006554:	00200001 	.word	0x00200001
 8006558:	00040001 	.word	0x00040001
 800655c:	00020001 	.word	0x00020001
 8006560:	03d09000 	.word	0x03d09000
 8006564:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006568:	4b9f      	ldr	r3, [pc, #636]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800656a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d106      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	2b05      	cmp	r3, #5
 800657a:	d103      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 800657c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006582:	e003      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006588:	f000 bd79 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800658c:	f000 bd77 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006590:	4b95      	ldr	r3, [pc, #596]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800659a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fe fcfd 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 80065a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80065a8:	f000 bd69 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80065ac:	4b8e      	ldr	r3, [pc, #568]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b8:	d10a      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80065ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d107      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c0:	f107 030c 	add.w	r3, r7, #12
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fcbb 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ce:	e031      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80065d0:	4b85      	ldr	r3, [pc, #532]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d10c      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	2b18      	cmp	r3, #24
 80065e0:	d109      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065e2:	4b81      	ldr	r3, [pc, #516]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	08db      	lsrs	r3, r3, #3
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	4a7f      	ldr	r2, [pc, #508]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80065ee:	fa22 f303 	lsr.w	r3, r2, r3
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f4:	e01e      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80065f6:	4b7c      	ldr	r3, [pc, #496]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006602:	d105      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2b20      	cmp	r3, #32
 8006608:	d102      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800660a:	4b79      	ldr	r3, [pc, #484]	@ (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800660e:	e011      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006610:	4b75      	ldr	r3, [pc, #468]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d106      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	2b28      	cmp	r3, #40	@ 0x28
 8006622:	d103      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8006624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800662a:	e003      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006630:	f000 bd25 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006634:	f000 bd23 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006638:	4b6b      	ldr	r3, [pc, #428]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800663a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800663e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006642:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800664a:	f7fe fca9 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 800664e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006650:	f000 bd15 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006654:	4b64      	ldr	r3, [pc, #400]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800665c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006660:	d10a      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d107      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006668:	f107 030c 	add.w	r3, r7, #12
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff fc67 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006676:	e033      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006678:	4b5b      	ldr	r3, [pc, #364]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b02      	cmp	r3, #2
 8006682:	d10c      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	2bc0      	cmp	r3, #192	@ 0xc0
 8006688:	d109      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800668a:	4b57      	ldr	r3, [pc, #348]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	08db      	lsrs	r3, r3, #3
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	4a55      	ldr	r2, [pc, #340]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006696:	fa22 f303 	lsr.w	r3, r2, r3
 800669a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669c:	e020      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800669e:	4b52      	ldr	r3, [pc, #328]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066aa:	d106      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b2:	d102      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80066b4:	4b4e      	ldr	r3, [pc, #312]	@ (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80066b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b8:	e012      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80066ba:	4b4b      	ldr	r3, [pc, #300]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d107      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80066ce:	d103      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 80066d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066d6:	e003      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80066dc:	f000 bccf 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80066e0:	f000 bccd 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066e4:	4b40      	ldr	r3, [pc, #256]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80066e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ea:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80066ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80066f6:	f7fe fc7f 	bl	8004ff8 <HAL_RCC_GetPCLK3Freq>
 80066fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80066fc:	f000 bcbf 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006706:	d108      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006708:	f107 030c 	add.w	r3, r7, #12
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fc17 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006716:	f000 bcb2 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800671a:	4b33      	ldr	r3, [pc, #204]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d10d      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006728:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800672c:	d109      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800672e:	4b2e      	ldr	r3, [pc, #184]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	08db      	lsrs	r3, r3, #3
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	4a2c      	ldr	r2, [pc, #176]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800673a:	fa22 f303 	lsr.w	r3, r2, r3
 800673e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006740:	e020      	b.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006742:	4b29      	ldr	r3, [pc, #164]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800674a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800674e:	d106      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006756:	d102      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8006758:	4b25      	ldr	r3, [pc, #148]	@ (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675c:	e012      	b.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800675e:	4b22      	ldr	r3, [pc, #136]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b02      	cmp	r3, #2
 800676a:	d107      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006772:	d103      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8006774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677a:	e003      	b.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006780:	f000 bc7d 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006784:	f000 bc7b 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006788:	4b17      	ldr	r3, [pc, #92]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800678a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800679a:	f7fe fbe5 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 800679e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80067a0:	f000 bc6d 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d104      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80067aa:	f7fe fab1 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 80067ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80067b0:	f000 bc65 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d108      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ba:	f107 030c 	add.w	r3, r7, #12
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff fbbe 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80067c8:	f000 bc59 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067d8:	d10e      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d10b      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 80067e0:	4b04      	ldr	r3, [pc, #16]	@ (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80067e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e4:	e02c      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 80067e6:	bf00      	nop
 80067e8:	44020c00 	.word	0x44020c00
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	003d0900 	.word	0x003d0900
 80067f4:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80067f8:	4b95      	ldr	r3, [pc, #596]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b02      	cmp	r3, #2
 8006802:	d10c      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	2b04      	cmp	r3, #4
 8006808:	d109      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800680a:	4b91      	ldr	r3, [pc, #580]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	08db      	lsrs	r3, r3, #3
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	4a8f      	ldr	r2, [pc, #572]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006816:	fa22 f303 	lsr.w	r3, r2, r3
 800681a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800681c:	e010      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800681e:	4b8c      	ldr	r3, [pc, #560]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682a:	d105      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	2b05      	cmp	r3, #5
 8006830:	d102      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8006832:	4b89      	ldr	r3, [pc, #548]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006836:	e003      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800683c:	f000 bc1f 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006840:	f000 bc1d 	b.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006844:	4b82      	ldr	r3, [pc, #520]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006850:	4b7f      	ldr	r3, [pc, #508]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d106      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8006864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800686a:	e011      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800686c:	4b78      	ldr	r3, [pc, #480]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800686e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	2b08      	cmp	r3, #8
 8006880:	d103      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8006882:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800688e:	e3f6      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006890:	e3f5      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006892:	4b6f      	ldr	r3, [pc, #444]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006894:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800689c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fe fb7c 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 80068a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80068aa:	e3e8      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b2:	d107      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068b4:	f107 030c 	add.w	r3, r7, #12
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fb41 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068c2:	e3dc      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80068c4:	4b62      	ldr	r3, [pc, #392]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d10d      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d6:	d109      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	08db      	lsrs	r3, r3, #3
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ea:	e010      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80068ec:	4b58      	ldr	r3, [pc, #352]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f8:	d106      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006900:	d102      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8006902:	4b55      	ldr	r3, [pc, #340]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006906:	e002      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800690c:	e3b7      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800690e:	e3b6      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006910:	4b4f      	ldr	r3, [pc, #316]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006912:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006916:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800691a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006922:	f7fe fb3d 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006926:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006928:	e3a9      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006930:	d107      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fb02 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006940:	e39d      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006942:	4b43      	ldr	r3, [pc, #268]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b02      	cmp	r3, #2
 800694c:	d10d      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006954:	d109      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006956:	4b3e      	ldr	r3, [pc, #248]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	08db      	lsrs	r3, r3, #3
 800695c:	f003 0303 	and.w	r3, r3, #3
 8006960:	4a3c      	ldr	r2, [pc, #240]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006968:	e010      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800696a:	4b39      	ldr	r3, [pc, #228]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006976:	d106      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800697e:	d102      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8006980:	4b35      	ldr	r3, [pc, #212]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006984:	e002      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800698a:	e378      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800698c:	e377      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800698e:	4b30      	ldr	r3, [pc, #192]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006994:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006998:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe fafe 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 80069a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80069a6:	e36a      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069ae:	d107      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b0:	f107 030c 	add.w	r3, r7, #12
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fac3 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069be:	e35e      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80069c0:	4b23      	ldr	r3, [pc, #140]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069d2:	d109      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	08db      	lsrs	r3, r3, #3
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	4a1d      	ldr	r2, [pc, #116]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069e6:	e34a      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069ec:	e347      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 80069ee:	4b18      	ldr	r3, [pc, #96]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069f4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80069f8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a00:	f7fe fafa 	bl	8004ff8 <HAL_RCC_GetPCLK3Freq>
 8006a04:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a06:	e33a      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fa93 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a1e:	e32e      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006a20:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d10d      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a32:	d109      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a34:	4b06      	ldr	r3, [pc, #24]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	08db      	lsrs	r3, r3, #3
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	4a05      	ldr	r2, [pc, #20]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a46:	e31a      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a4c:	e317      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006a4e:	bf00      	nop
 8006a50:	44020c00 	.word	0x44020c00
 8006a54:	03d09000 	.word	0x03d09000
 8006a58:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006a5c:	4b9b      	ldr	r3, [pc, #620]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006a5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a62:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a6e:	d044      	beq.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006a76:	d879      	bhi.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7e:	d02d      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a86:	d871      	bhi.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8e:	d017      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a96:	d869      	bhi.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aa4:	d004      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8006aa6:	e061      	b.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006aa8:	f7fe faa6 	bl	8004ff8 <HAL_RCC_GetPCLK3Freq>
 8006aac:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006aae:	e060      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab0:	f107 030c 	add.w	r3, r7, #12
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fa43 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006abe:	e058      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ac0:	4b82      	ldr	r3, [pc, #520]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d103      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ad4:	e04d      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ada:	e04a      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006adc:	4b7b      	ldr	r3, [pc, #492]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aea:	d103      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006aec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006af2:	e03e      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006af8:	e03b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006afa:	4b74      	ldr	r3, [pc, #464]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b04:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b06:	4b71      	ldr	r3, [pc, #452]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b18:	4b6c      	ldr	r3, [pc, #432]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	08db      	lsrs	r3, r3, #3
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	4a6b      	ldr	r2, [pc, #428]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b2a:	e01e      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b2c:	4b67      	ldr	r3, [pc, #412]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b38:	d106      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b40:	d102      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b42:	4b64      	ldr	r3, [pc, #400]	@ (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b46:	e010      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b48:	4b60      	ldr	r3, [pc, #384]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b54:	d106      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b5c:	d102      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b5e:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b62:	e002      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8006b6a:	e002      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b70:	bf00      	nop
          }
        }
        break;
 8006b72:	e284      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b74:	4b55      	ldr	r3, [pc, #340]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006b76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b7a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b86:	d044      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8006b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b8e:	d879      	bhi.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b96:	d02d      	beq.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b9e:	d871      	bhi.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ba6:	d017      	beq.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bae:	d869      	bhi.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbc:	d004      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006bbe:	e061      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006bc0:	f7fe f9ee 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006bc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006bc6:	e060      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc8:	f107 030c 	add.w	r3, r7, #12
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff f9b7 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bd6:	e058      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d103      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006bec:	e04d      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bf2:	e04a      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006bf4:	4b35      	ldr	r3, [pc, #212]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c02:	d103      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8006c04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c0a:	e03e      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c10:	e03b      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c12:	4b2e      	ldr	r3, [pc, #184]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c18:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d10c      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c30:	4b26      	ldr	r3, [pc, #152]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	4a25      	ldr	r2, [pc, #148]	@ (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c42:	e01e      	b.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c44:	4b21      	ldr	r3, [pc, #132]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c50:	d106      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c58:	d102      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c5e:	e010      	b.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c60:	4b1a      	ldr	r3, [pc, #104]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c6c:	d106      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c74:	d102      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c76:	4b18      	ldr	r3, [pc, #96]	@ (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7a:	e002      	b.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006c82:	e002      	b.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006c88:	bf00      	nop
          }
        }
        break;
 8006c8a:	e1f8      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c96:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006c98:	4b0c      	ldr	r3, [pc, #48]	@ (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ca4:	d105      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006cb0:	e1e5      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb8:	d110      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cba:	f107 0318 	add.w	r3, r7, #24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe ffd4 	bl	8005c6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cc8:	e1d9      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006cca:	bf00      	nop
 8006ccc:	44020c00 	.word	0x44020c00
 8006cd0:	03d09000 	.word	0x03d09000
 8006cd4:	003d0900 	.word	0x003d0900
 8006cd8:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce4:	f107 030c 	add.w	r3, r7, #12
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f929 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cf2:	e1c4      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cf8:	e1c1      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d859      	bhi.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d29 	.word	0x08006d29
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d4f 	.word	0x08006d4f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d28:	f107 0318 	add.w	r3, r7, #24
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe ff9d 	bl	8005c6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d36:	e046      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d38:	f107 030c 	add.w	r3, r7, #12
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff f8ff 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d46:	e03e      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006d48:	4b8a      	ldr	r3, [pc, #552]	@ (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006d4c:	e03b      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d4e:	4b88      	ldr	r3, [pc, #544]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d5a:	4b85      	ldr	r3, [pc, #532]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d10c      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d6c:	4b80      	ldr	r3, [pc, #512]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	08db      	lsrs	r3, r3, #3
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	4a80      	ldr	r2, [pc, #512]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006d78:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d7e:	e01e      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d80:	4b7b      	ldr	r3, [pc, #492]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d8c:	d106      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d94:	d102      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d96:	4b79      	ldr	r3, [pc, #484]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d9a:	e010      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d9c:	4b74      	ldr	r3, [pc, #464]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006da8:	d106      	bne.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db0:	d102      	bne.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006db2:	4b73      	ldr	r3, [pc, #460]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db6:	e002      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006dbc:	e003      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8006dbe:	e002      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006dc4:	bf00      	nop
          }
        }
        break;
 8006dc6:	e15a      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006dc8:	4b69      	ldr	r3, [pc, #420]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d022      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d858      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	2b18      	cmp	r3, #24
 8006de4:	d019      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de8:	2b18      	cmp	r3, #24
 8006dea:	d852      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d008      	beq.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006df8:	e04b      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dfa:	f107 0318 	add.w	r3, r7, #24
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe ff34 	bl	8005c6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e08:	e046      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f896 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e18:	e03e      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e1a:	4b56      	ldr	r3, [pc, #344]	@ (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e1e:	e03b      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e20:	4b53      	ldr	r3, [pc, #332]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e26:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e2c:	4b50      	ldr	r3, [pc, #320]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d10c      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	4a4b      	ldr	r2, [pc, #300]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e50:	e01e      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e52:	4b47      	ldr	r3, [pc, #284]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5e:	d106      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e66:	d102      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e68:	4b44      	ldr	r3, [pc, #272]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e6c:	e010      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e6e:	4b40      	ldr	r3, [pc, #256]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e82:	d102      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e84:	4b3e      	ldr	r3, [pc, #248]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e88:	e002      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006e8e:	e003      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006e90:	e002      	b.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006e96:	bf00      	nop
          }
        }
        break;
 8006e98:	e0f1      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006e9a:	4b35      	ldr	r3, [pc, #212]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eac:	d023      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb4:	d858      	bhi.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eba:	d019      	beq.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ec0:	d852      	bhi.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d008      	beq.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006ece:	e04b      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ed0:	f107 0318 	add.w	r3, r7, #24
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fec9 	bl	8005c6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ede:	e046      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee0:	f107 030c 	add.w	r3, r7, #12
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff f82b 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006eee:	e03e      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006ef0:	4b20      	ldr	r3, [pc, #128]	@ (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006ef4:	e03b      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006efc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d109      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f14:	4b16      	ldr	r3, [pc, #88]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	08db      	lsrs	r3, r3, #3
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f26:	e01e      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f28:	4b11      	ldr	r3, [pc, #68]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f34:	d106      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f3c:	d102      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f42:	e010      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f44:	4b0a      	ldr	r3, [pc, #40]	@ (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f50:	d106      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f58:	d102      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f5a:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5e:	e002      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006f66:	e002      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006f6c:	bf00      	nop
          }
        }
        break;
 8006f6e:	e086      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006f70:	44020c00 	.word	0x44020c00
 8006f74:	00bb8000 	.word	0x00bb8000
 8006f78:	03d09000 	.word	0x03d09000
 8006f7c:	003d0900 	.word	0x003d0900
 8006f80:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006f84:	4b40      	ldr	r3, [pc, #256]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f8a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006f90:	4b3d      	ldr	r3, [pc, #244]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9c:	d105      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8006fa4:	4b39      	ldr	r3, [pc, #228]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa8:	e031      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006faa:	4b37      	ldr	r3, [pc, #220]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fb6:	d10a      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d107      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fbe:	f107 0318 	add.w	r3, r7, #24
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fe52 	bl	8005c6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fcc:	e01f      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006fce:	4b2e      	ldr	r3, [pc, #184]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d106      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d103      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8006fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe8:	e011      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006fea:	4b27      	ldr	r3, [pc, #156]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff8:	d106      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	2b30      	cmp	r3, #48	@ 0x30
 8006ffe:	d103      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8007000:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007006:	e002      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 800700c:	e037      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800700e:	e036      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007010:	4b1d      	ldr	r3, [pc, #116]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007016:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800701a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	2b10      	cmp	r3, #16
 8007020:	d107      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007022:	f107 0318 	add.w	r3, r7, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fe20 	bl	8005c6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8007030:	e025      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8007032:	4b15      	ldr	r3, [pc, #84]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800703a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800703e:	d10a      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	2b20      	cmp	r3, #32
 8007044:	d107      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007046:	f107 030c 	add.w	r3, r7, #12
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe ff78 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007054:	e00f      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007056:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800705e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007062:	d105      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	2b30      	cmp	r3, #48	@ 0x30
 8007068:	d102      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800706c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800706e:	e002      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8007074:	e003      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007076:	e002      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800707c:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 800707e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007080:	4618      	mov	r0, r3
 8007082:	3730      	adds	r7, #48	@ 0x30
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	44020c00 	.word	0x44020c00
 800708c:	02dc6c00 	.word	0x02dc6c00

08007090 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007098:	4b48      	ldr	r3, [pc, #288]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a47      	ldr	r2, [pc, #284]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800709e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070a4:	f7fb faa4 	bl	80025f0 <HAL_GetTick>
 80070a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070aa:	e008      	b.n	80070be <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070ac:	f7fb faa0 	bl	80025f0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e07a      	b.n	80071b4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070be:	4b3f      	ldr	r3, [pc, #252]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f0      	bne.n	80070ac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80070ca:	4b3c      	ldr	r3, [pc, #240]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6811      	ldr	r1, [r2, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6852      	ldr	r2, [r2, #4]
 80070de:	0212      	lsls	r2, r2, #8
 80070e0:	430a      	orrs	r2, r1
 80070e2:	4936      	ldr	r1, [pc, #216]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	025b      	lsls	r3, r3, #9
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	3b01      	subs	r3, #1
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	3b01      	subs	r3, #1
 8007112:	061b      	lsls	r3, r3, #24
 8007114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007118:	4928      	ldr	r1, [pc, #160]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800711a:	4313      	orrs	r3, r2
 800711c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800711e:	4b27      	ldr	r3, [pc, #156]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	f023 020c 	bic.w	r2, r3, #12
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	4924      	ldr	r1, [pc, #144]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800712c:	4313      	orrs	r3, r2
 800712e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007130:	4b22      	ldr	r3, [pc, #136]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	f023 0220 	bic.w	r2, r3, #32
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	491f      	ldr	r1, [pc, #124]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007142:	4b1e      	ldr	r3, [pc, #120]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	491c      	ldr	r1, [pc, #112]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007150:	4b1a      	ldr	r3, [pc, #104]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	4a19      	ldr	r2, [pc, #100]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007156:	f023 0310 	bic.w	r3, r3, #16
 800715a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800715c:	4b17      	ldr	r3, [pc, #92]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007164:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6a12      	ldr	r2, [r2, #32]
 800716c:	00d2      	lsls	r2, r2, #3
 800716e:	4913      	ldr	r1, [pc, #76]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007170:	4313      	orrs	r3, r2
 8007172:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007174:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	4a10      	ldr	r2, [pc, #64]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 800717a:	f043 0310 	orr.w	r3, r3, #16
 800717e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007180:	4b0e      	ldr	r3, [pc, #56]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a0d      	ldr	r2, [pc, #52]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 8007186:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800718a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800718c:	f7fb fa30 	bl	80025f0 <HAL_GetTick>
 8007190:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007192:	e008      	b.n	80071a6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007194:	f7fb fa2c 	bl	80025f0 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e006      	b.n	80071b4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071a6:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <RCCEx_PLL2_Config+0x12c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0

}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	44020c00 	.word	0x44020c00

080071c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e0e7      	b.n	80073a2 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d105      	bne.n	80071ec <HAL_SPI_Init+0x2c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d901      	bls.n	80071ec <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0da      	b.n	80073a2 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fd47 	bl	8007c80 <SPI_GetPacketSize>
 80071f2:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <HAL_SPI_Init+0x42>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d811      	bhi.n	8007226 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007206:	4a69      	ldr	r2, [pc, #420]	@ (80073ac <HAL_SPI_Init+0x1ec>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a67      	ldr	r2, [pc, #412]	@ (80073b0 <HAL_SPI_Init+0x1f0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_SPI_Init+0x60>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a66      	ldr	r2, [pc, #408]	@ (80073b4 <HAL_SPI_Init+0x1f4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d104      	bne.n	800722a <HAL_SPI_Init+0x6a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b10      	cmp	r3, #16
 8007224:	d901      	bls.n	800722a <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e0bb      	b.n	80073a2 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fa fe3e 	bl	8001ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007266:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007270:	d119      	bne.n	80072a6 <HAL_SPI_Init+0xe6>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800727a:	d103      	bne.n	8007284 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10c      	bne.n	80072a6 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007294:	d107      	bne.n	80072a6 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00f      	beq.n	80072d2 <HAL_SPI_Init+0x112>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	d90b      	bls.n	80072d2 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	e007      	b.n	80072e2 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69da      	ldr	r2, [r3, #28]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	431a      	orrs	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f4:	ea42 0103 	orr.w	r1, r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734e:	ea42 0103 	orr.w	r1, r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0201 	bic.w	r2, r2, #1
 800736c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40013000 	.word	0x40013000
 80073b0:	40003800 	.word	0x40003800
 80073b4:	40003c00 	.word	0x40003c00

080073b8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3320      	adds	r3, #32
 80073ce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073d0:	f7fb f90e 	bl	80025f0 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d001      	beq.n	80073e6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80073e2:	2302      	movs	r3, #2
 80073e4:	e1e5      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_SPI_Transmit+0x3a>
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e1dd      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_SPI_Transmit+0x4c>
 8007400:	2302      	movs	r3, #2
 8007402:	e1d6      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2203      	movs	r2, #3
 8007410:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	88fa      	ldrh	r2, [r7, #6]
 8007426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800745c:	d108      	bne.n	8007470 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e009      	b.n	8007484 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007482:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	0c1b      	lsrs	r3, r3, #16
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	88f9      	ldrh	r1, [r7, #6]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	430b      	orrs	r3, r1
 8007496:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074b0:	d107      	bne.n	80074c2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d956      	bls.n	8007578 <HAL_SPI_Transmit+0x1c0>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a8d      	ldr	r2, [pc, #564]	@ (8007704 <HAL_SPI_Transmit+0x34c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d04a      	beq.n	800756a <HAL_SPI_Transmit+0x1b2>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a8b      	ldr	r2, [pc, #556]	@ (8007708 <HAL_SPI_Transmit+0x350>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d045      	beq.n	800756a <HAL_SPI_Transmit+0x1b2>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a8a      	ldr	r2, [pc, #552]	@ (800770c <HAL_SPI_Transmit+0x354>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d147      	bne.n	8007578 <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80074e8:	e03f      	b.n	800756a <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d114      	bne.n	8007522 <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007520:	e023      	b.n	800756a <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007522:	f7fb f865 	bl	80025f0 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	d803      	bhi.n	800753a <HAL_SPI_Transmit+0x182>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d102      	bne.n	8007540 <HAL_SPI_Transmit+0x188>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d114      	bne.n	800756a <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 facf 	bl	8007ae4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800754c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e123      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1b9      	bne.n	80074ea <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007576:	e0f6      	b.n	8007766 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b07      	cmp	r3, #7
 800757e:	f240 80eb 	bls.w	8007758 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007582:	e05d      	b.n	8007640 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	d132      	bne.n	80075f8 <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b01      	cmp	r3, #1
 800759c:	d918      	bls.n	80075d0 <HAL_SPI_Transmit+0x218>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d014      	beq.n	80075d0 <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b6:	1d1a      	adds	r2, r3, #4
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b02      	subs	r3, #2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075ce:	e037      	b.n	8007640 <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075d4:	881a      	ldrh	r2, [r3, #0]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075de:	1c9a      	adds	r2, r3, #2
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80075f6:	e023      	b.n	8007640 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f8:	f7fa fffa 	bl	80025f0 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d803      	bhi.n	8007610 <HAL_SPI_Transmit+0x258>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d102      	bne.n	8007616 <HAL_SPI_Transmit+0x25e>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d114      	bne.n	8007640 <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fa64 	bl	8007ae4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e0b8      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d19b      	bne.n	8007584 <HAL_SPI_Transmit+0x1cc>
 800764c:	e08b      	b.n	8007766 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d159      	bne.n	8007710 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b03      	cmp	r3, #3
 8007666:	d918      	bls.n	800769a <HAL_SPI_Transmit+0x2e2>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	d914      	bls.n	800769a <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b04      	subs	r3, #4
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007698:	e05e      	b.n	8007758 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d917      	bls.n	80076d6 <HAL_SPI_Transmit+0x31e>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d013      	beq.n	80076d6 <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b2:	881a      	ldrh	r2, [r3, #0]
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076bc:	1c9a      	adds	r2, r3, #2
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b02      	subs	r3, #2
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80076d4:	e040      	b.n	8007758 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3320      	adds	r3, #32
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007700:	e02a      	b.n	8007758 <HAL_SPI_Transmit+0x3a0>
 8007702:	bf00      	nop
 8007704:	40013000 	.word	0x40013000
 8007708:	40003800 	.word	0x40003800
 800770c:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007710:	f7fa ff6e 	bl	80025f0 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d803      	bhi.n	8007728 <HAL_SPI_Transmit+0x370>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d102      	bne.n	800772e <HAL_SPI_Transmit+0x376>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d114      	bne.n	8007758 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 f9d8 	bl	8007ae4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800773a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e02c      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f af74 	bne.w	800764e <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2200      	movs	r2, #0
 800776e:	2108      	movs	r1, #8
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fa57 	bl	8007c24 <SPI_WaitOnFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007782:	f043 0220 	orr.w	r2, r3, #32
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f9a9 	bl	8007ae4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop

080077bc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3330      	adds	r3, #48	@ 0x30
 80077d2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077d4:	f7fa ff0c 	bl	80025f0 <HAL_GetTick>
 80077d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d001      	beq.n	80077ea <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
 80077e8:	e172      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <HAL_SPI_Receive+0x3a>
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e16a      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_SPI_Receive+0x4c>
 8007804:	2302      	movs	r3, #2
 8007806:	e163      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2204      	movs	r2, #4
 8007814:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007860:	d108      	bne.n	8007874 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e009      	b.n	8007888 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007886:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	88f9      	ldrh	r1, [r7, #6]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	6812      	ldr	r2, [r2, #0]
 8007898:	430b      	orrs	r3, r1
 800789a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078b4:	d107      	bne.n	80078c6 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b0f      	cmp	r3, #15
 80078cc:	d957      	bls.n	800797e <HAL_SPI_Receive+0x1c2>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a81      	ldr	r2, [pc, #516]	@ (8007ad8 <HAL_SPI_Receive+0x31c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d04b      	beq.n	8007970 <HAL_SPI_Receive+0x1b4>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a7f      	ldr	r2, [pc, #508]	@ (8007adc <HAL_SPI_Receive+0x320>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d046      	beq.n	8007970 <HAL_SPI_Receive+0x1b4>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ae0 <HAL_SPI_Receive+0x324>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d148      	bne.n	800797e <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80078ec:	e040      	b.n	8007970 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	f248 0308 	movw	r3, #32776	@ 0x8008
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d014      	beq.n	8007928 <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007906:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007908:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800790e:	1d1a      	adds	r2, r3, #4
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007926:	e023      	b.n	8007970 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007928:	f7fa fe62 	bl	80025f0 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d803      	bhi.n	8007940 <HAL_SPI_Receive+0x184>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d102      	bne.n	8007946 <HAL_SPI_Receive+0x18a>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d114      	bne.n	8007970 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f8cc 	bl	8007ae4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007952:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e0af      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1b8      	bne.n	80078ee <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800797c:	e095      	b.n	8007aaa <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b07      	cmp	r3, #7
 8007984:	f240 808b 	bls.w	8007a9e <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007988:	e03f      	b.n	8007a0a <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	d114      	bne.n	80079c2 <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	8812      	ldrh	r2, [r2, #0]
 80079a0:	b292      	uxth	r2, r2
 80079a2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80079c0:	e023      	b.n	8007a0a <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c2:	f7fa fe15 	bl	80025f0 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d803      	bhi.n	80079da <HAL_SPI_Receive+0x21e>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d102      	bne.n	80079e0 <HAL_SPI_Receive+0x224>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d114      	bne.n	8007a0a <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 f87f 	bl	8007ae4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e062      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1b9      	bne.n	800798a <HAL_SPI_Receive+0x1ce>
 8007a16:	e048      	b.n	8007aaa <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d117      	bne.n	8007a56 <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007a54:	e023      	b.n	8007a9e <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a56:	f7fa fdcb 	bl	80025f0 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d803      	bhi.n	8007a6e <HAL_SPI_Receive+0x2b2>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d102      	bne.n	8007a74 <HAL_SPI_Receive+0x2b8>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d114      	bne.n	8007a9e <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f835 	bl	8007ae4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e018      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1b6      	bne.n	8007a18 <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f81a 	bl	8007ae4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8007ace:	2300      	movs	r3, #0
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40013000 	.word	0x40013000
 8007adc:	40003800 	.word	0x40003800
 8007ae0:	40003c00 	.word	0x40003c00

08007ae4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0208 	orr.w	r2, r2, #8
 8007b02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0210 	orr.w	r2, r2, #16
 8007b12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007b32:	f023 0303 	bic.w	r3, r3, #3
 8007b36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007b46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d014      	beq.n	8007b7e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00f      	beq.n	8007b7e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0220 	orr.w	r2, r2, #32
 8007b7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d014      	beq.n	8007bb4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00f      	beq.n	8007bb4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b9a:	f043 0204 	orr.w	r2, r3, #4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00f      	beq.n	8007bde <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bc4:	f043 0201 	orr.w	r2, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00f      	beq.n	8007c08 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bee:	f043 0208 	orr.w	r2, r3, #8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	4613      	mov	r3, r2
 8007c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c34:	e010      	b.n	8007c58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c36:	f7fa fcdb 	bl	80025f0 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d803      	bhi.n	8007c4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d102      	bne.n	8007c54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e00f      	b.n	8007c78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	4013      	ands	r3, r2
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	bf0c      	ite	eq
 8007c68:	2301      	moveq	r3, #1
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d0df      	beq.n	8007c36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	3307      	adds	r3, #7
 8007c9e:	08db      	lsrs	r3, r3, #3
 8007ca0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e049      	b.n	8007d5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fa f97d 	bl	8001fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f000 fb97 	bl	8008428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e049      	b.n	8007e0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f841 	bl	8007e12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f000 fb40 	bl	8008428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <HAL_TIM_PWM_Start+0x24>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	bf14      	ite	ne
 8007e44:	2301      	movne	r3, #1
 8007e46:	2300      	moveq	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	e03c      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x9e>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d109      	bne.n	8007e66 <HAL_TIM_PWM_Start+0x3e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	bf14      	ite	ne
 8007e5e:	2301      	movne	r3, #1
 8007e60:	2300      	moveq	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	e02f      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x9e>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d109      	bne.n	8007e80 <HAL_TIM_PWM_Start+0x58>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	bf14      	ite	ne
 8007e78:	2301      	movne	r3, #1
 8007e7a:	2300      	moveq	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	e022      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x9e>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	d109      	bne.n	8007e9a <HAL_TIM_PWM_Start+0x72>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	bf14      	ite	ne
 8007e92:	2301      	movne	r3, #1
 8007e94:	2300      	moveq	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	e015      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x9e>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d109      	bne.n	8007eb4 <HAL_TIM_PWM_Start+0x8c>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	e008      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x9e>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	bf14      	ite	ne
 8007ec0:	2301      	movne	r3, #1
 8007ec2:	2300      	moveq	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e06f      	b.n	8007fae <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d104      	bne.n	8007ede <HAL_TIM_PWM_Start+0xb6>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007edc:	e023      	b.n	8007f26 <HAL_TIM_PWM_Start+0xfe>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b04      	cmp	r3, #4
 8007ee2:	d104      	bne.n	8007eee <HAL_TIM_PWM_Start+0xc6>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eec:	e01b      	b.n	8007f26 <HAL_TIM_PWM_Start+0xfe>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d104      	bne.n	8007efe <HAL_TIM_PWM_Start+0xd6>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007efc:	e013      	b.n	8007f26 <HAL_TIM_PWM_Start+0xfe>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b0c      	cmp	r3, #12
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_PWM_Start+0xe6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f0c:	e00b      	b.n	8007f26 <HAL_TIM_PWM_Start+0xfe>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_PWM_Start+0xf6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f1c:	e003      	b.n	8007f26 <HAL_TIM_PWM_Start+0xfe>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fdc6 	bl	8008ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1f      	ldr	r2, [pc, #124]	@ (8007fb8 <HAL_TIM_PWM_Start+0x190>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d107      	bne.n	8007f4e <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a19      	ldr	r2, [pc, #100]	@ (8007fb8 <HAL_TIM_PWM_Start+0x190>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <HAL_TIM_PWM_Start+0x144>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f60:	d004      	beq.n	8007f6c <HAL_TIM_PWM_Start+0x144>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <HAL_TIM_PWM_Start+0x194>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d115      	bne.n	8007f98 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <HAL_TIM_PWM_Start+0x198>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b06      	cmp	r3, #6
 8007f7c:	d015      	beq.n	8007faa <HAL_TIM_PWM_Start+0x182>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f84:	d011      	beq.n	8007faa <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0201 	orr.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	e008      	b.n	8007faa <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	00010007 	.word	0x00010007

08007fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e0ff      	b.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b14      	cmp	r3, #20
 8007fee:	f200 80f0 	bhi.w	80081d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	080081d3 	.word	0x080081d3
 8008000:	080081d3 	.word	0x080081d3
 8008004:	080081d3 	.word	0x080081d3
 8008008:	0800808d 	.word	0x0800808d
 800800c:	080081d3 	.word	0x080081d3
 8008010:	080081d3 	.word	0x080081d3
 8008014:	080081d3 	.word	0x080081d3
 8008018:	080080cf 	.word	0x080080cf
 800801c:	080081d3 	.word	0x080081d3
 8008020:	080081d3 	.word	0x080081d3
 8008024:	080081d3 	.word	0x080081d3
 8008028:	0800810f 	.word	0x0800810f
 800802c:	080081d3 	.word	0x080081d3
 8008030:	080081d3 	.word	0x080081d3
 8008034:	080081d3 	.word	0x080081d3
 8008038:	08008151 	.word	0x08008151
 800803c:	080081d3 	.word	0x080081d3
 8008040:	080081d3 	.word	0x080081d3
 8008044:	080081d3 	.word	0x080081d3
 8008048:	08008191 	.word	0x08008191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fa4e 	bl	80084f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0208 	orr.w	r2, r2, #8
 8008066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0204 	bic.w	r2, r2, #4
 8008076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6999      	ldr	r1, [r3, #24]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	619a      	str	r2, [r3, #24]
      break;
 800808a:	e0a5      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fa96 	bl	80085c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6999      	ldr	r1, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	021a      	lsls	r2, r3, #8
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	619a      	str	r2, [r3, #24]
      break;
 80080cc:	e084      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fae3 	bl	80086a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0208 	orr.w	r2, r2, #8
 80080e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0204 	bic.w	r2, r2, #4
 80080f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69d9      	ldr	r1, [r3, #28]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	61da      	str	r2, [r3, #28]
      break;
 800810c:	e064      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fb2f 	bl	8008778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69d9      	ldr	r1, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	021a      	lsls	r2, r3, #8
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	61da      	str	r2, [r3, #28]
      break;
 800814e:	e043      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fb7c 	bl	8008854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0208 	orr.w	r2, r2, #8
 800816a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0204 	bic.w	r2, r2, #4
 800817a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800818e:	e023      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fba8 	bl	80088ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	021a      	lsls	r2, r3, #8
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80081d0:	e002      	b.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	75fb      	strb	r3, [r7, #23]
      break;
 80081d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_TIM_ConfigClockSource+0x1c>
 8008204:	2302      	movs	r3, #2
 8008206:	e0fe      	b.n	8008406 <HAL_TIM_ConfigClockSource+0x21a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800822a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008244:	f000 80c9 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800824c:	f200 80ce 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008250:	4a6f      	ldr	r2, [pc, #444]	@ (8008410 <HAL_TIM_ConfigClockSource+0x224>)
 8008252:	4293      	cmp	r3, r2
 8008254:	f000 80c1 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008258:	4a6d      	ldr	r2, [pc, #436]	@ (8008410 <HAL_TIM_ConfigClockSource+0x224>)
 800825a:	4293      	cmp	r3, r2
 800825c:	f200 80c6 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008260:	4a6c      	ldr	r2, [pc, #432]	@ (8008414 <HAL_TIM_ConfigClockSource+0x228>)
 8008262:	4293      	cmp	r3, r2
 8008264:	f000 80b9 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008268:	4a6a      	ldr	r2, [pc, #424]	@ (8008414 <HAL_TIM_ConfigClockSource+0x228>)
 800826a:	4293      	cmp	r3, r2
 800826c:	f200 80be 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008270:	4a69      	ldr	r2, [pc, #420]	@ (8008418 <HAL_TIM_ConfigClockSource+0x22c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	f000 80b1 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008278:	4a67      	ldr	r2, [pc, #412]	@ (8008418 <HAL_TIM_ConfigClockSource+0x22c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	f200 80b6 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008280:	4a66      	ldr	r2, [pc, #408]	@ (800841c <HAL_TIM_ConfigClockSource+0x230>)
 8008282:	4293      	cmp	r3, r2
 8008284:	f000 80a9 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008288:	4a64      	ldr	r2, [pc, #400]	@ (800841c <HAL_TIM_ConfigClockSource+0x230>)
 800828a:	4293      	cmp	r3, r2
 800828c:	f200 80ae 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008290:	4a63      	ldr	r2, [pc, #396]	@ (8008420 <HAL_TIM_ConfigClockSource+0x234>)
 8008292:	4293      	cmp	r3, r2
 8008294:	f000 80a1 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008298:	4a61      	ldr	r2, [pc, #388]	@ (8008420 <HAL_TIM_ConfigClockSource+0x234>)
 800829a:	4293      	cmp	r3, r2
 800829c:	f200 80a6 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082a0:	4a60      	ldr	r2, [pc, #384]	@ (8008424 <HAL_TIM_ConfigClockSource+0x238>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	f000 8099 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 80082a8:	4a5e      	ldr	r2, [pc, #376]	@ (8008424 <HAL_TIM_ConfigClockSource+0x238>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	f200 809e 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082b4:	f000 8091 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 80082b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082bc:	f200 8096 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082c4:	f000 8089 	beq.w	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 80082c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082cc:	f200 808e 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d4:	d03e      	beq.n	8008354 <HAL_TIM_ConfigClockSource+0x168>
 80082d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082da:	f200 8087 	bhi.w	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e2:	f000 8086 	beq.w	80083f2 <HAL_TIM_ConfigClockSource+0x206>
 80082e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ea:	d87f      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082ec:	2b70      	cmp	r3, #112	@ 0x70
 80082ee:	d01a      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x13a>
 80082f0:	2b70      	cmp	r3, #112	@ 0x70
 80082f2:	d87b      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082f4:	2b60      	cmp	r3, #96	@ 0x60
 80082f6:	d050      	beq.n	800839a <HAL_TIM_ConfigClockSource+0x1ae>
 80082f8:	2b60      	cmp	r3, #96	@ 0x60
 80082fa:	d877      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 80082fc:	2b50      	cmp	r3, #80	@ 0x50
 80082fe:	d03c      	beq.n	800837a <HAL_TIM_ConfigClockSource+0x18e>
 8008300:	2b50      	cmp	r3, #80	@ 0x50
 8008302:	d873      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008304:	2b40      	cmp	r3, #64	@ 0x40
 8008306:	d058      	beq.n	80083ba <HAL_TIM_ConfigClockSource+0x1ce>
 8008308:	2b40      	cmp	r3, #64	@ 0x40
 800830a:	d86f      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 800830c:	2b30      	cmp	r3, #48	@ 0x30
 800830e:	d064      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008310:	2b30      	cmp	r3, #48	@ 0x30
 8008312:	d86b      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 8008314:	2b20      	cmp	r3, #32
 8008316:	d060      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008318:	2b20      	cmp	r3, #32
 800831a:	d867      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05c      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008320:	2b10      	cmp	r3, #16
 8008322:	d05a      	beq.n	80083da <HAL_TIM_ConfigClockSource+0x1ee>
 8008324:	e062      	b.n	80083ec <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008336:	f000 fba3 	bl	8008a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	609a      	str	r2, [r3, #8]
      break;
 8008352:	e04f      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008364:	f000 fb8c 	bl	8008a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008376:	609a      	str	r2, [r3, #8]
      break;
 8008378:	e03c      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008386:	461a      	mov	r2, r3
 8008388:	f000 fafe 	bl	8008988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2150      	movs	r1, #80	@ 0x50
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fb57 	bl	8008a46 <TIM_ITRx_SetConfig>
      break;
 8008398:	e02c      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083a6:	461a      	mov	r2, r3
 80083a8:	f000 fb1d 	bl	80089e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2160      	movs	r1, #96	@ 0x60
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fb47 	bl	8008a46 <TIM_ITRx_SetConfig>
      break;
 80083b8:	e01c      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	461a      	mov	r2, r3
 80083c8:	f000 fade 	bl	8008988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2140      	movs	r1, #64	@ 0x40
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb37 	bl	8008a46 <TIM_ITRx_SetConfig>
      break;
 80083d8:	e00c      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f000 fb2e 	bl	8008a46 <TIM_ITRx_SetConfig>
      break;
 80083ea:	e003      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
      break;
 80083f0:	e000      	b.n	80083f4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80083f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	00100070 	.word	0x00100070
 8008414:	00100060 	.word	0x00100060
 8008418:	00100050 	.word	0x00100050
 800841c:	00100040 	.word	0x00100040
 8008420:	00100030 	.word	0x00100030
 8008424:	00100020 	.word	0x00100020

08008428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a2c      	ldr	r2, [pc, #176]	@ (80084ec <TIM_Base_SetConfig+0xc4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d007      	beq.n	8008450 <TIM_Base_SetConfig+0x28>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008446:	d003      	beq.n	8008450 <TIM_Base_SetConfig+0x28>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a29      	ldr	r2, [pc, #164]	@ (80084f0 <TIM_Base_SetConfig+0xc8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d108      	bne.n	8008462 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a21      	ldr	r2, [pc, #132]	@ (80084ec <TIM_Base_SetConfig+0xc4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d007      	beq.n	800847a <TIM_Base_SetConfig+0x52>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008470:	d003      	beq.n	800847a <TIM_Base_SetConfig+0x52>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1e      	ldr	r2, [pc, #120]	@ (80084f0 <TIM_Base_SetConfig+0xc8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d108      	bne.n	800848c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a0e      	ldr	r2, [pc, #56]	@ (80084ec <TIM_Base_SetConfig+0xc4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d103      	bne.n	80084c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d105      	bne.n	80084de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	f023 0201 	bic.w	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	611a      	str	r2, [r3, #16]
  }
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40012c00 	.word	0x40012c00
 80084f0:	40000400 	.word	0x40000400

080084f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f023 0201 	bic.w	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0303 	bic.w	r3, r3, #3
 800852e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f023 0302 	bic.w	r3, r3, #2
 8008540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a1c      	ldr	r2, [pc, #112]	@ (80085c0 <TIM_OC1_SetConfig+0xcc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d10c      	bne.n	800856e <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f023 0308 	bic.w	r3, r3, #8
 800855a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	4313      	orrs	r3, r2
 8008564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f023 0304 	bic.w	r3, r3, #4
 800856c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a13      	ldr	r2, [pc, #76]	@ (80085c0 <TIM_OC1_SetConfig+0xcc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d111      	bne.n	800859a <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800857c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4313      	orrs	r3, r2
 8008598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	621a      	str	r2, [r3, #32]
}
 80085b4:	bf00      	nop
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	40012c00 	.word	0x40012c00

080085c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	f023 0210 	bic.w	r2, r3, #16
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	021b      	lsls	r3, r3, #8
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f023 0320 	bic.w	r3, r3, #32
 8008612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1e      	ldr	r2, [pc, #120]	@ (800869c <TIM_OC2_SetConfig+0xd8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10d      	bne.n	8008644 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a15      	ldr	r2, [pc, #84]	@ (800869c <TIM_OC2_SetConfig+0xd8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d113      	bne.n	8008674 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800865a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	40012c00 	.word	0x40012c00

080086a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0303 	bic.w	r3, r3, #3
 80086da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008774 <TIM_OC3_SetConfig+0xd4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d10d      	bne.n	800871e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	4313      	orrs	r3, r2
 8008714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800871c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a14      	ldr	r2, [pc, #80]	@ (8008774 <TIM_OC3_SetConfig+0xd4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d113      	bne.n	800874e <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800872c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	011b      	lsls	r3, r3, #4
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	621a      	str	r2, [r3, #32]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	40012c00 	.word	0x40012c00

08008778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	031b      	lsls	r3, r3, #12
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008850 <TIM_OC4_SetConfig+0xd8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d10d      	bne.n	80087f8 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	031b      	lsls	r3, r3, #12
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a15      	ldr	r2, [pc, #84]	@ (8008850 <TIM_OC4_SetConfig+0xd8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d113      	bne.n	8008828 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008806:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800880e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	019b      	lsls	r3, r3, #6
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	019b      	lsls	r3, r3, #6
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	621a      	str	r2, [r3, #32]
}
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40012c00 	.word	0x40012c00

08008854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008898:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a0f      	ldr	r2, [pc, #60]	@ (80088e8 <TIM_OC5_SetConfig+0x94>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d109      	bne.n	80088c2 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	621a      	str	r2, [r3, #32]
}
 80088dc:	bf00      	nop
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40012c00 	.word	0x40012c00

080088ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800891e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	051b      	lsls	r3, r3, #20
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a10      	ldr	r2, [pc, #64]	@ (8008984 <TIM_OC6_SetConfig+0x98>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d109      	bne.n	800895c <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800894e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	029b      	lsls	r3, r3, #10
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	4313      	orrs	r3, r2
 800895a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	40012c00 	.word	0x40012c00

08008988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f023 0201 	bic.w	r2, r3, #1
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f023 030a 	bic.w	r3, r3, #10
 80089c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	621a      	str	r2, [r3, #32]
}
 80089da:	bf00      	nop
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b087      	sub	sp, #28
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	f023 0210 	bic.w	r2, r3, #16
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	031b      	lsls	r3, r3, #12
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f043 0307 	orr.w	r3, r3, #7
 8008a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	609a      	str	r2, [r3, #8]
}
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b087      	sub	sp, #28
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	021a      	lsls	r2, r3, #8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	371c      	adds	r7, #28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f003 031f 	and.w	r3, r3, #31
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a1a      	ldr	r2, [r3, #32]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 031f 	and.w	r3, r3, #31
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	fa01 f303 	lsl.w	r3, r1, r3
 8008af8:	431a      	orrs	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	621a      	str	r2, [r3, #32]
}
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b20:	2302      	movs	r3, #2
 8008b22:	e051      	b.n	8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a22      	ldr	r2, [pc, #136]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d108      	bne.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a14      	ldr	r2, [pc, #80]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d009      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b90:	d004      	beq.n	8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a10      	ldr	r2, [pc, #64]	@ (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d10c      	bne.n	8008bb6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	40012c00 	.word	0x40012c00
 8008bd8:	40000400 	.word	0x40000400

08008bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e06e      	b.n	8008cd6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	041b      	lsls	r3, r3, #16
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a17      	ldr	r2, [pc, #92]	@ (8008ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d11c      	bne.n	8008cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c94:	051b      	lsls	r3, r3, #20
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40012c00 	.word	0x40012c00

08008ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e042      	b.n	8008d80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7f9 f9c3 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2224      	movs	r2, #36	@ 0x24
 8008d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0201 	bic.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa44 	bl	80091c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8c3 	bl	8008ec4 <UART_SetConfig>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e01b      	b.n	8008d80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fac3 	bl	8009304 <UART_CheckIdleState>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	@ 0x28
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	4613      	mov	r3, r2
 8008d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	f040 808b 	bne.w	8008eba <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <HAL_UART_Transmit+0x28>
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e083      	b.n	8008ebc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dbe:	2b80      	cmp	r3, #128	@ 0x80
 8008dc0:	d107      	bne.n	8008dd2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dd0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2221      	movs	r2, #33	@ 0x21
 8008dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008de2:	f7f9 fc05 	bl	80025f0 <HAL_GetTick>
 8008de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e00:	d108      	bne.n	8008e14 <HAL_UART_Transmit+0x8c>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	e003      	b.n	8008e1c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e1c:	e030      	b.n	8008e80 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2200      	movs	r2, #0
 8008e26:	2180      	movs	r1, #128	@ 0x80
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fb15 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e03d      	b.n	8008ebc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10b      	bne.n	8008e5e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	3302      	adds	r3, #2
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	e007      	b.n	8008e6e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1c8      	bne.n	8008e1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2200      	movs	r2, #0
 8008e94:	2140      	movs	r1, #64	@ 0x40
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fade 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e006      	b.n	8008ebc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008eba:	2302      	movs	r3, #2
  }
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ec8:	b094      	sub	sp, #80	@ 0x50
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	498a      	ldr	r1, [pc, #552]	@ (800911c <UART_SetConfig+0x258>)
 8008ef4:	4019      	ands	r1, r3
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008efc:	430b      	orrs	r3, r1
 8008efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	68d9      	ldr	r1, [r3, #12]
 8008f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	ea40 0301 	orr.w	r3, r0, r1
 8008f16:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b7f      	ldr	r3, [pc, #508]	@ (8009120 <UART_SetConfig+0x25c>)
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d004      	beq.n	8008f32 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	6a1a      	ldr	r2, [r3, #32]
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008f3c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	f023 000f 	bic.w	r0, r3, #15
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	ea40 0301 	orr.w	r3, r0, r1
 8008f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	4b6f      	ldr	r3, [pc, #444]	@ (8009124 <UART_SetConfig+0x260>)
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d102      	bne.n	8008f72 <UART_SetConfig+0xae>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f70:	e01a      	b.n	8008fa8 <UART_SetConfig+0xe4>
 8008f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	4b6c      	ldr	r3, [pc, #432]	@ (8009128 <UART_SetConfig+0x264>)
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d102      	bne.n	8008f82 <UART_SetConfig+0xbe>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f80:	e012      	b.n	8008fa8 <UART_SetConfig+0xe4>
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	4b69      	ldr	r3, [pc, #420]	@ (800912c <UART_SetConfig+0x268>)
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d102      	bne.n	8008f92 <UART_SetConfig+0xce>
 8008f8c:	2304      	movs	r3, #4
 8008f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f90:	e00a      	b.n	8008fa8 <UART_SetConfig+0xe4>
 8008f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	4b62      	ldr	r3, [pc, #392]	@ (8009120 <UART_SetConfig+0x25c>)
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d103      	bne.n	8008fa4 <UART_SetConfig+0xe0>
 8008f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa2:	e001      	b.n	8008fa8 <UART_SetConfig+0xe4>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	4b5c      	ldr	r3, [pc, #368]	@ (8009120 <UART_SetConfig+0x25c>)
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d171      	bne.n	8009096 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008fbe:	f7fd f929 	bl	8006214 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fc2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 80e2 	beq.w	8009190 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd0:	4a57      	ldr	r2, [pc, #348]	@ (8009130 <UART_SetConfig+0x26c>)
 8008fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fde:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4413      	add	r3, r2
 8008fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d305      	bcc.n	8008ffc <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d903      	bls.n	8009004 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009002:	e0c5      	b.n	8009190 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009006:	2200      	movs	r2, #0
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	61fa      	str	r2, [r7, #28]
 800900c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	4a47      	ldr	r2, [pc, #284]	@ (8009130 <UART_SetConfig+0x26c>)
 8009012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009016:	b29b      	uxth	r3, r3
 8009018:	2200      	movs	r2, #0
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	617a      	str	r2, [r7, #20]
 800901e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009026:	f7f7 fe43 	bl	8000cb0 <__aeabi_uldivmod>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4610      	mov	r0, r2
 8009030:	4619      	mov	r1, r3
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	f04f 0300 	mov.w	r3, #0
 800903a:	020b      	lsls	r3, r1, #8
 800903c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009040:	0202      	lsls	r2, r0, #8
 8009042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009044:	6849      	ldr	r1, [r1, #4]
 8009046:	0849      	lsrs	r1, r1, #1
 8009048:	2000      	movs	r0, #0
 800904a:	460c      	mov	r4, r1
 800904c:	4605      	mov	r5, r0
 800904e:	eb12 0804 	adds.w	r8, r2, r4
 8009052:	eb43 0905 	adc.w	r9, r3, r5
 8009056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	60bb      	str	r3, [r7, #8]
 800905e:	60fa      	str	r2, [r7, #12]
 8009060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009064:	4640      	mov	r0, r8
 8009066:	4649      	mov	r1, r9
 8009068:	f7f7 fe22 	bl	8000cb0 <__aeabi_uldivmod>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4613      	mov	r3, r2
 8009072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800907a:	d308      	bcc.n	800908e <UART_SetConfig+0x1ca>
 800907c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800907e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009082:	d204      	bcs.n	800908e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800908a:	60da      	str	r2, [r3, #12]
 800908c:	e080      	b.n	8009190 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009094:	e07c      	b.n	8009190 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800909e:	d149      	bne.n	8009134 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090a2:	2200      	movs	r2, #0
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ac:	f7fd f8b2 	bl	8006214 <HAL_RCCEx_GetPeriphCLKFreq>
 80090b0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d06b      	beq.n	8009190 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009130 <UART_SetConfig+0x26c>)
 80090be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c2:	461a      	mov	r2, r3
 80090c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ca:	005a      	lsls	r2, r3, #1
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	441a      	add	r2, r3
 80090d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e0:	2b0f      	cmp	r3, #15
 80090e2:	d916      	bls.n	8009112 <UART_SetConfig+0x24e>
 80090e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ea:	d212      	bcs.n	8009112 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f023 030f 	bic.w	r3, r3, #15
 80090f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	b29a      	uxth	r2, r3
 8009102:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009104:	4313      	orrs	r3, r2
 8009106:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	e03e      	b.n	8009190 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009118:	e03a      	b.n	8009190 <UART_SetConfig+0x2cc>
 800911a:	bf00      	nop
 800911c:	cfff69f3 	.word	0xcfff69f3
 8009120:	44002400 	.word	0x44002400
 8009124:	40013800 	.word	0x40013800
 8009128:	40004400 	.word	0x40004400
 800912c:	40004800 	.word	0x40004800
 8009130:	0800dfb0 	.word	0x0800dfb0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009136:	2200      	movs	r2, #0
 8009138:	469a      	mov	sl, r3
 800913a:	4693      	mov	fp, r2
 800913c:	4650      	mov	r0, sl
 800913e:	4659      	mov	r1, fp
 8009140:	f7fd f868 	bl	8006214 <HAL_RCCEx_GetPeriphCLKFreq>
 8009144:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009148:	2b00      	cmp	r3, #0
 800914a:	d021      	beq.n	8009190 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009150:	4a1a      	ldr	r2, [pc, #104]	@ (80091bc <UART_SetConfig+0x2f8>)
 8009152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009156:	461a      	mov	r2, r3
 8009158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800915a:	fbb3 f2f2 	udiv	r2, r3, r2
 800915e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	085b      	lsrs	r3, r3, #1
 8009164:	441a      	add	r2, r3
 8009166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	fbb2 f3f3 	udiv	r3, r2, r3
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009172:	2b0f      	cmp	r3, #15
 8009174:	d909      	bls.n	800918a <UART_SetConfig+0x2c6>
 8009176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800917c:	d205      	bcs.n	800918a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800917e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009180:	b29a      	uxth	r2, r3
 8009182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60da      	str	r2, [r3, #12]
 8009188:	e002      	b.n	8009190 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009192:	2201      	movs	r2, #1
 8009194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	2201      	movs	r2, #1
 800919c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a2:	2200      	movs	r2, #0
 80091a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a8:	2200      	movs	r2, #0
 80091aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3750      	adds	r7, #80	@ 0x50
 80091b4:	46bd      	mov	sp, r7
 80091b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ba:	bf00      	nop
 80091bc:	0800dfb0 	.word	0x0800dfb0

080091c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	430a      	orrs	r2, r1
 800920a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	430a      	orrs	r2, r1
 800924e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092be:	d10a      	bne.n	80092d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b098      	sub	sp, #96	@ 0x60
 8009308:	af02      	add	r7, sp, #8
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009314:	f7f9 f96c 	bl	80025f0 <HAL_GetTick>
 8009318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b08      	cmp	r3, #8
 8009326:	d12f      	bne.n	8009388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009330:	2200      	movs	r2, #0
 8009332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f88e 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d022      	beq.n	8009388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009356:	653b      	str	r3, [r7, #80]	@ 0x50
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009360:	647b      	str	r3, [r7, #68]	@ 0x44
 8009362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e063      	b.n	8009450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b04      	cmp	r3, #4
 8009394:	d149      	bne.n	800942a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009396:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800939e:	2200      	movs	r2, #0
 80093a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f857 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d03c      	beq.n	800942a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	623b      	str	r3, [r7, #32]
   return(result);
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80093d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e6      	bne.n	80093b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3308      	adds	r3, #8
 80093e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	e853 3f00 	ldrex	r3, [r3]
 80093f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f023 0301 	bic.w	r3, r3, #1
 80093f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009402:	61fa      	str	r2, [r7, #28]
 8009404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	69b9      	ldr	r1, [r7, #24]
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	617b      	str	r3, [r7, #20]
   return(result);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e5      	bne.n	80093e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e012      	b.n	8009450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3758      	adds	r7, #88	@ 0x58
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009468:	e04f      	b.n	800950a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009470:	d04b      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009472:	f7f9 f8bd 	bl	80025f0 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	69ba      	ldr	r2, [r7, #24]
 800947e:	429a      	cmp	r2, r3
 8009480:	d302      	bcc.n	8009488 <UART_WaitOnFlagUntilTimeout+0x30>
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e04e      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	d037      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xb2>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b80      	cmp	r3, #128	@ 0x80
 800949e:	d034      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xb2>
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b40      	cmp	r3, #64	@ 0x40
 80094a4:	d031      	beq.n	800950a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d110      	bne.n	80094d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2208      	movs	r2, #8
 80094ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 f838 	bl	8009532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2208      	movs	r2, #8
 80094c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e029      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094e4:	d111      	bne.n	800950a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f81e 	bl	8009532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e00f      	b.n	800952a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69da      	ldr	r2, [r3, #28]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4013      	ands	r3, r2
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	bf0c      	ite	eq
 800951a:	2301      	moveq	r3, #1
 800951c:	2300      	movne	r3, #0
 800951e:	b2db      	uxtb	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	429a      	cmp	r2, r3
 8009526:	d0a0      	beq.n	800946a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009532:	b480      	push	{r7}
 8009534:	b095      	sub	sp, #84	@ 0x54
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800954e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009558:	643b      	str	r3, [r7, #64]	@ 0x40
 800955a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800955e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e6      	bne.n	800953a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	61fb      	str	r3, [r7, #28]
   return(result);
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3308      	adds	r3, #8
 800958e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e3      	bne.n	800956c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d118      	bne.n	80095de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f023 0310 	bic.w	r3, r3, #16
 80095c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ce:	6979      	ldr	r1, [r7, #20]
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	e841 2300 	strex	r3, r2, [r1]
 80095d6:	613b      	str	r3, [r7, #16]
   return(result);
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e6      	bne.n	80095ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80095f2:	bf00      	nop
 80095f4:	3754      	adds	r7, #84	@ 0x54
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_UARTEx_DisableFifoMode+0x16>
 8009610:	2302      	movs	r3, #2
 8009612:	e027      	b.n	8009664 <HAL_UARTEx_DisableFifoMode+0x66>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2224      	movs	r2, #36	@ 0x24
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0201 	bic.w	r2, r2, #1
 800963a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009642:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2220      	movs	r2, #32
 8009656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009684:	2302      	movs	r3, #2
 8009686:	e02d      	b.n	80096e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2224      	movs	r2, #36	@ 0x24
 8009694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 0201 	bic.w	r2, r2, #1
 80096ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f84f 	bl	8009768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009700:	2302      	movs	r3, #2
 8009702:	e02d      	b.n	8009760 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2224      	movs	r2, #36	@ 0x24
 8009710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f811 	bl	8009768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009774:	2b00      	cmp	r3, #0
 8009776:	d108      	bne.n	800978a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009788:	e031      	b.n	80097ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800978a:	2308      	movs	r3, #8
 800978c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800978e:	2308      	movs	r3, #8
 8009790:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	0e5b      	lsrs	r3, r3, #25
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0307 	and.w	r3, r3, #7
 80097a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	0f5b      	lsrs	r3, r3, #29
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	7b3a      	ldrb	r2, [r7, #12]
 80097b6:	4911      	ldr	r1, [pc, #68]	@ (80097fc <UARTEx_SetNbDataToProcess+0x94>)
 80097b8:	5c8a      	ldrb	r2, [r1, r2]
 80097ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097be:	7b3a      	ldrb	r2, [r7, #12]
 80097c0:	490f      	ldr	r1, [pc, #60]	@ (8009800 <UARTEx_SetNbDataToProcess+0x98>)
 80097c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	7b7a      	ldrb	r2, [r7, #13]
 80097d4:	4909      	ldr	r1, [pc, #36]	@ (80097fc <UARTEx_SetNbDataToProcess+0x94>)
 80097d6:	5c8a      	ldrb	r2, [r1, r2]
 80097d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097dc:	7b7a      	ldrb	r2, [r7, #13]
 80097de:	4908      	ldr	r1, [pc, #32]	@ (8009800 <UARTEx_SetNbDataToProcess+0x98>)
 80097e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	0800dfc8 	.word	0x0800dfc8
 8009800:	0800dfd0 	.word	0x0800dfd0

08009804 <__cvt>:
 8009804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	ec57 6b10 	vmov	r6, r7, d0
 800980c:	2f00      	cmp	r7, #0
 800980e:	460c      	mov	r4, r1
 8009810:	4619      	mov	r1, r3
 8009812:	463b      	mov	r3, r7
 8009814:	bfb4      	ite	lt
 8009816:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800981a:	2300      	movge	r3, #0
 800981c:	4691      	mov	r9, r2
 800981e:	bfbf      	itttt	lt
 8009820:	4632      	movlt	r2, r6
 8009822:	461f      	movlt	r7, r3
 8009824:	232d      	movlt	r3, #45	@ 0x2d
 8009826:	4616      	movlt	r6, r2
 8009828:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800982c:	700b      	strb	r3, [r1, #0]
 800982e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009830:	f023 0820 	bic.w	r8, r3, #32
 8009834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009838:	d005      	beq.n	8009846 <__cvt+0x42>
 800983a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800983e:	d100      	bne.n	8009842 <__cvt+0x3e>
 8009840:	3401      	adds	r4, #1
 8009842:	2102      	movs	r1, #2
 8009844:	e000      	b.n	8009848 <__cvt+0x44>
 8009846:	2103      	movs	r1, #3
 8009848:	ab03      	add	r3, sp, #12
 800984a:	4622      	mov	r2, r4
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	ab02      	add	r3, sp, #8
 8009850:	ec47 6b10 	vmov	d0, r6, r7
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4653      	mov	r3, sl
 8009858:	f001 f89a 	bl	800a990 <_dtoa_r>
 800985c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009860:	4605      	mov	r5, r0
 8009862:	d119      	bne.n	8009898 <__cvt+0x94>
 8009864:	f019 0f01 	tst.w	r9, #1
 8009868:	d00e      	beq.n	8009888 <__cvt+0x84>
 800986a:	eb00 0904 	add.w	r9, r0, r4
 800986e:	2200      	movs	r2, #0
 8009870:	2300      	movs	r3, #0
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	f7f7 f93b 	bl	8000af0 <__aeabi_dcmpeq>
 800987a:	b108      	cbz	r0, 8009880 <__cvt+0x7c>
 800987c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009880:	2230      	movs	r2, #48	@ 0x30
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	454b      	cmp	r3, r9
 8009886:	d31e      	bcc.n	80098c6 <__cvt+0xc2>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	4628      	mov	r0, r5
 800988c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800988e:	1b5b      	subs	r3, r3, r5
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	b004      	add	sp, #16
 8009894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009898:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800989c:	eb00 0904 	add.w	r9, r0, r4
 80098a0:	d1e5      	bne.n	800986e <__cvt+0x6a>
 80098a2:	7803      	ldrb	r3, [r0, #0]
 80098a4:	2b30      	cmp	r3, #48	@ 0x30
 80098a6:	d10a      	bne.n	80098be <__cvt+0xba>
 80098a8:	2200      	movs	r2, #0
 80098aa:	2300      	movs	r3, #0
 80098ac:	4630      	mov	r0, r6
 80098ae:	4639      	mov	r1, r7
 80098b0:	f7f7 f91e 	bl	8000af0 <__aeabi_dcmpeq>
 80098b4:	b918      	cbnz	r0, 80098be <__cvt+0xba>
 80098b6:	f1c4 0401 	rsb	r4, r4, #1
 80098ba:	f8ca 4000 	str.w	r4, [sl]
 80098be:	f8da 3000 	ldr.w	r3, [sl]
 80098c2:	4499      	add	r9, r3
 80098c4:	e7d3      	b.n	800986e <__cvt+0x6a>
 80098c6:	1c59      	adds	r1, r3, #1
 80098c8:	9103      	str	r1, [sp, #12]
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e7d9      	b.n	8009882 <__cvt+0x7e>

080098ce <__exponent>:
 80098ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098d0:	2900      	cmp	r1, #0
 80098d2:	7002      	strb	r2, [r0, #0]
 80098d4:	bfba      	itte	lt
 80098d6:	4249      	neglt	r1, r1
 80098d8:	232d      	movlt	r3, #45	@ 0x2d
 80098da:	232b      	movge	r3, #43	@ 0x2b
 80098dc:	2909      	cmp	r1, #9
 80098de:	7043      	strb	r3, [r0, #1]
 80098e0:	dd28      	ble.n	8009934 <__exponent+0x66>
 80098e2:	f10d 0307 	add.w	r3, sp, #7
 80098e6:	270a      	movs	r7, #10
 80098e8:	461d      	mov	r5, r3
 80098ea:	461a      	mov	r2, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80098f2:	fb07 1416 	mls	r4, r7, r6, r1
 80098f6:	3430      	adds	r4, #48	@ 0x30
 80098f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098fc:	460c      	mov	r4, r1
 80098fe:	4631      	mov	r1, r6
 8009900:	2c63      	cmp	r4, #99	@ 0x63
 8009902:	dcf2      	bgt.n	80098ea <__exponent+0x1c>
 8009904:	3130      	adds	r1, #48	@ 0x30
 8009906:	1e94      	subs	r4, r2, #2
 8009908:	f803 1c01 	strb.w	r1, [r3, #-1]
 800990c:	1c41      	adds	r1, r0, #1
 800990e:	4623      	mov	r3, r4
 8009910:	42ab      	cmp	r3, r5
 8009912:	d30a      	bcc.n	800992a <__exponent+0x5c>
 8009914:	f10d 0309 	add.w	r3, sp, #9
 8009918:	1a9b      	subs	r3, r3, r2
 800991a:	42ac      	cmp	r4, r5
 800991c:	bf88      	it	hi
 800991e:	2300      	movhi	r3, #0
 8009920:	3302      	adds	r3, #2
 8009922:	4403      	add	r3, r0
 8009924:	1a18      	subs	r0, r3, r0
 8009926:	b003      	add	sp, #12
 8009928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800992a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800992e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009932:	e7ed      	b.n	8009910 <__exponent+0x42>
 8009934:	2330      	movs	r3, #48	@ 0x30
 8009936:	3130      	adds	r1, #48	@ 0x30
 8009938:	7083      	strb	r3, [r0, #2]
 800993a:	1d03      	adds	r3, r0, #4
 800993c:	70c1      	strb	r1, [r0, #3]
 800993e:	e7f1      	b.n	8009924 <__exponent+0x56>

08009940 <_printf_float>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	b08d      	sub	sp, #52	@ 0x34
 8009946:	460c      	mov	r4, r1
 8009948:	4616      	mov	r6, r2
 800994a:	461f      	mov	r7, r3
 800994c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009950:	4605      	mov	r5, r0
 8009952:	f000 ff03 	bl	800a75c <_localeconv_r>
 8009956:	6803      	ldr	r3, [r0, #0]
 8009958:	4618      	mov	r0, r3
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	f7f6 fc9c 	bl	8000298 <strlen>
 8009960:	2300      	movs	r3, #0
 8009962:	9005      	str	r0, [sp, #20]
 8009964:	930a      	str	r3, [sp, #40]	@ 0x28
 8009966:	f8d8 3000 	ldr.w	r3, [r8]
 800996a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800996e:	3307      	adds	r3, #7
 8009970:	f8d4 b000 	ldr.w	fp, [r4]
 8009974:	f023 0307 	bic.w	r3, r3, #7
 8009978:	f103 0208 	add.w	r2, r3, #8
 800997c:	f8c8 2000 	str.w	r2, [r8]
 8009980:	f04f 32ff 	mov.w	r2, #4294967295
 8009984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009988:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800998c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009990:	9307      	str	r3, [sp, #28]
 8009992:	4b9d      	ldr	r3, [pc, #628]	@ (8009c08 <_printf_float+0x2c8>)
 8009994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009998:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800999c:	f7f7 f8da 	bl	8000b54 <__aeabi_dcmpun>
 80099a0:	bb70      	cbnz	r0, 8009a00 <_printf_float+0xc0>
 80099a2:	f04f 32ff 	mov.w	r2, #4294967295
 80099a6:	4b98      	ldr	r3, [pc, #608]	@ (8009c08 <_printf_float+0x2c8>)
 80099a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ac:	f7f7 f8b4 	bl	8000b18 <__aeabi_dcmple>
 80099b0:	bb30      	cbnz	r0, 8009a00 <_printf_float+0xc0>
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4640      	mov	r0, r8
 80099b8:	4649      	mov	r1, r9
 80099ba:	f7f7 f8a3 	bl	8000b04 <__aeabi_dcmplt>
 80099be:	b110      	cbz	r0, 80099c6 <_printf_float+0x86>
 80099c0:	232d      	movs	r3, #45	@ 0x2d
 80099c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099c6:	4a91      	ldr	r2, [pc, #580]	@ (8009c0c <_printf_float+0x2cc>)
 80099c8:	4b91      	ldr	r3, [pc, #580]	@ (8009c10 <_printf_float+0x2d0>)
 80099ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099ce:	bf94      	ite	ls
 80099d0:	4690      	movls	r8, r2
 80099d2:	4698      	movhi	r8, r3
 80099d4:	2303      	movs	r3, #3
 80099d6:	f04f 0900 	mov.w	r9, #0
 80099da:	6123      	str	r3, [r4, #16]
 80099dc:	f02b 0304 	bic.w	r3, fp, #4
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	4633      	mov	r3, r6
 80099e4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	9700      	str	r7, [sp, #0]
 80099ec:	f000 f9d2 	bl	8009d94 <_printf_common>
 80099f0:	3001      	adds	r0, #1
 80099f2:	f040 808d 	bne.w	8009b10 <_printf_float+0x1d0>
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295
 80099fa:	b00d      	add	sp, #52	@ 0x34
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	4640      	mov	r0, r8
 8009a06:	4649      	mov	r1, r9
 8009a08:	f7f7 f8a4 	bl	8000b54 <__aeabi_dcmpun>
 8009a0c:	b140      	cbz	r0, 8009a20 <_printf_float+0xe0>
 8009a0e:	464b      	mov	r3, r9
 8009a10:	4a80      	ldr	r2, [pc, #512]	@ (8009c14 <_printf_float+0x2d4>)
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfbc      	itt	lt
 8009a16:	232d      	movlt	r3, #45	@ 0x2d
 8009a18:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8009c18 <_printf_float+0x2d8>)
 8009a1e:	e7d4      	b.n	80099ca <_printf_float+0x8a>
 8009a20:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	9206      	str	r2, [sp, #24]
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	d13b      	bne.n	8009aa4 <_printf_float+0x164>
 8009a2c:	2306      	movs	r3, #6
 8009a2e:	6063      	str	r3, [r4, #4]
 8009a30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a34:	2300      	movs	r3, #0
 8009a36:	4628      	mov	r0, r5
 8009a38:	6022      	str	r2, [r4, #0]
 8009a3a:	9303      	str	r3, [sp, #12]
 8009a3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a3e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a42:	ab09      	add	r3, sp, #36	@ 0x24
 8009a44:	ec49 8b10 	vmov	d0, r8, r9
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a4e:	6861      	ldr	r1, [r4, #4]
 8009a50:	f7ff fed8 	bl	8009804 <__cvt>
 8009a54:	9b06      	ldr	r3, [sp, #24]
 8009a56:	4680      	mov	r8, r0
 8009a58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a5a:	2b47      	cmp	r3, #71	@ 0x47
 8009a5c:	d129      	bne.n	8009ab2 <_printf_float+0x172>
 8009a5e:	1cc8      	adds	r0, r1, #3
 8009a60:	db02      	blt.n	8009a68 <_printf_float+0x128>
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	4299      	cmp	r1, r3
 8009a66:	dd41      	ble.n	8009aec <_printf_float+0x1ac>
 8009a68:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a6c:	fa5f fa8a 	uxtb.w	sl, sl
 8009a70:	3901      	subs	r1, #1
 8009a72:	4652      	mov	r2, sl
 8009a74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a78:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a7a:	f7ff ff28 	bl	80098ce <__exponent>
 8009a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a80:	4681      	mov	r9, r0
 8009a82:	1813      	adds	r3, r2, r0
 8009a84:	2a01      	cmp	r2, #1
 8009a86:	6123      	str	r3, [r4, #16]
 8009a88:	dc02      	bgt.n	8009a90 <_printf_float+0x150>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	07d2      	lsls	r2, r2, #31
 8009a8e:	d501      	bpl.n	8009a94 <_printf_float+0x154>
 8009a90:	3301      	adds	r3, #1
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d0a2      	beq.n	80099e2 <_printf_float+0xa2>
 8009a9c:	232d      	movs	r3, #45	@ 0x2d
 8009a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aa2:	e79e      	b.n	80099e2 <_printf_float+0xa2>
 8009aa4:	9a06      	ldr	r2, [sp, #24]
 8009aa6:	2a47      	cmp	r2, #71	@ 0x47
 8009aa8:	d1c2      	bne.n	8009a30 <_printf_float+0xf0>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1c0      	bne.n	8009a30 <_printf_float+0xf0>
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e7bd      	b.n	8009a2e <_printf_float+0xee>
 8009ab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ab6:	d9db      	bls.n	8009a70 <_printf_float+0x130>
 8009ab8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009abc:	d118      	bne.n	8009af0 <_printf_float+0x1b0>
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	dd0b      	ble.n	8009adc <_printf_float+0x19c>
 8009ac4:	6121      	str	r1, [r4, #16]
 8009ac6:	b913      	cbnz	r3, 8009ace <_printf_float+0x18e>
 8009ac8:	6822      	ldr	r2, [r4, #0]
 8009aca:	07d0      	lsls	r0, r2, #31
 8009acc:	d502      	bpl.n	8009ad4 <_printf_float+0x194>
 8009ace:	3301      	adds	r3, #1
 8009ad0:	440b      	add	r3, r1
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	f04f 0900 	mov.w	r9, #0
 8009ad8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ada:	e7db      	b.n	8009a94 <_printf_float+0x154>
 8009adc:	b913      	cbnz	r3, 8009ae4 <_printf_float+0x1a4>
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	07d2      	lsls	r2, r2, #31
 8009ae2:	d501      	bpl.n	8009ae8 <_printf_float+0x1a8>
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	e7f4      	b.n	8009ad2 <_printf_float+0x192>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e7f2      	b.n	8009ad2 <_printf_float+0x192>
 8009aec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009af2:	4299      	cmp	r1, r3
 8009af4:	db05      	blt.n	8009b02 <_printf_float+0x1c2>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	6121      	str	r1, [r4, #16]
 8009afa:	07d8      	lsls	r0, r3, #31
 8009afc:	d5ea      	bpl.n	8009ad4 <_printf_float+0x194>
 8009afe:	1c4b      	adds	r3, r1, #1
 8009b00:	e7e7      	b.n	8009ad2 <_printf_float+0x192>
 8009b02:	2900      	cmp	r1, #0
 8009b04:	bfd4      	ite	le
 8009b06:	f1c1 0202 	rsble	r2, r1, #2
 8009b0a:	2201      	movgt	r2, #1
 8009b0c:	4413      	add	r3, r2
 8009b0e:	e7e0      	b.n	8009ad2 <_printf_float+0x192>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	055a      	lsls	r2, r3, #21
 8009b14:	d407      	bmi.n	8009b26 <_printf_float+0x1e6>
 8009b16:	6923      	ldr	r3, [r4, #16]
 8009b18:	4642      	mov	r2, r8
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b8      	blx	r7
 8009b20:	3001      	adds	r0, #1
 8009b22:	d12b      	bne.n	8009b7c <_printf_float+0x23c>
 8009b24:	e767      	b.n	80099f6 <_printf_float+0xb6>
 8009b26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b2a:	f240 80dd 	bls.w	8009ce8 <_printf_float+0x3a8>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2300      	movs	r3, #0
 8009b32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b36:	f7f6 ffdb 	bl	8000af0 <__aeabi_dcmpeq>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d033      	beq.n	8009ba6 <_printf_float+0x266>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4a36      	ldr	r2, [pc, #216]	@ (8009c1c <_printf_float+0x2dc>)
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f af54 	beq.w	80099f6 <_printf_float+0xb6>
 8009b4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b52:	4543      	cmp	r3, r8
 8009b54:	db02      	blt.n	8009b5c <_printf_float+0x21c>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	07d8      	lsls	r0, r3, #31
 8009b5a:	d50f      	bpl.n	8009b7c <_printf_float+0x23c>
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4628      	mov	r0, r5
 8009b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	f43f af45 	beq.w	80099f6 <_printf_float+0xb6>
 8009b6c:	f04f 0900 	mov.w	r9, #0
 8009b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b74:	f104 0a1a 	add.w	sl, r4, #26
 8009b78:	45c8      	cmp	r8, r9
 8009b7a:	dc09      	bgt.n	8009b90 <_printf_float+0x250>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	079b      	lsls	r3, r3, #30
 8009b80:	f100 8103 	bmi.w	8009d8a <_printf_float+0x44a>
 8009b84:	68e0      	ldr	r0, [r4, #12]
 8009b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b88:	4298      	cmp	r0, r3
 8009b8a:	bfb8      	it	lt
 8009b8c:	4618      	movlt	r0, r3
 8009b8e:	e734      	b.n	80099fa <_printf_float+0xba>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4652      	mov	r2, sl
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af2b 	beq.w	80099f6 <_printf_float+0xb6>
 8009ba0:	f109 0901 	add.w	r9, r9, #1
 8009ba4:	e7e8      	b.n	8009b78 <_printf_float+0x238>
 8009ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dc39      	bgt.n	8009c20 <_printf_float+0x2e0>
 8009bac:	2301      	movs	r3, #1
 8009bae:	4a1b      	ldr	r2, [pc, #108]	@ (8009c1c <_printf_float+0x2dc>)
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f af1d 	beq.w	80099f6 <_printf_float+0xb6>
 8009bbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009bc0:	ea59 0303 	orrs.w	r3, r9, r3
 8009bc4:	d102      	bne.n	8009bcc <_printf_float+0x28c>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	07d9      	lsls	r1, r3, #31
 8009bca:	d5d7      	bpl.n	8009b7c <_printf_float+0x23c>
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4628      	mov	r0, r5
 8009bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f43f af0d 	beq.w	80099f6 <_printf_float+0xb6>
 8009bdc:	f04f 0a00 	mov.w	sl, #0
 8009be0:	f104 0b1a 	add.w	fp, r4, #26
 8009be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be6:	425b      	negs	r3, r3
 8009be8:	4553      	cmp	r3, sl
 8009bea:	dc01      	bgt.n	8009bf0 <_printf_float+0x2b0>
 8009bec:	464b      	mov	r3, r9
 8009bee:	e793      	b.n	8009b18 <_printf_float+0x1d8>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	465a      	mov	r2, fp
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f aefb 	beq.w	80099f6 <_printf_float+0xb6>
 8009c00:	f10a 0a01 	add.w	sl, sl, #1
 8009c04:	e7ee      	b.n	8009be4 <_printf_float+0x2a4>
 8009c06:	bf00      	nop
 8009c08:	7fefffff 	.word	0x7fefffff
 8009c0c:	0800dfd8 	.word	0x0800dfd8
 8009c10:	0800dfdc 	.word	0x0800dfdc
 8009c14:	0800dfe0 	.word	0x0800dfe0
 8009c18:	0800dfe4 	.word	0x0800dfe4
 8009c1c:	0800dfe8 	.word	0x0800dfe8
 8009c20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c26:	4553      	cmp	r3, sl
 8009c28:	bfa8      	it	ge
 8009c2a:	4653      	movge	r3, sl
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	4699      	mov	r9, r3
 8009c30:	dc36      	bgt.n	8009ca0 <_printf_float+0x360>
 8009c32:	f04f 0b00 	mov.w	fp, #0
 8009c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c3a:	f104 021a 	add.w	r2, r4, #26
 8009c3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c40:	9306      	str	r3, [sp, #24]
 8009c42:	eba3 0309 	sub.w	r3, r3, r9
 8009c46:	455b      	cmp	r3, fp
 8009c48:	dc31      	bgt.n	8009cae <_printf_float+0x36e>
 8009c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c4c:	459a      	cmp	sl, r3
 8009c4e:	dc3a      	bgt.n	8009cc6 <_printf_float+0x386>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	07da      	lsls	r2, r3, #31
 8009c54:	d437      	bmi.n	8009cc6 <_printf_float+0x386>
 8009c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c58:	ebaa 0903 	sub.w	r9, sl, r3
 8009c5c:	9b06      	ldr	r3, [sp, #24]
 8009c5e:	ebaa 0303 	sub.w	r3, sl, r3
 8009c62:	4599      	cmp	r9, r3
 8009c64:	bfa8      	it	ge
 8009c66:	4699      	movge	r9, r3
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	dc33      	bgt.n	8009cd6 <_printf_float+0x396>
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c76:	f104 0b1a 	add.w	fp, r4, #26
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c80:	eba3 0309 	sub.w	r3, r3, r9
 8009c84:	4543      	cmp	r3, r8
 8009c86:	f77f af79 	ble.w	8009b7c <_printf_float+0x23c>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	465a      	mov	r2, fp
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f aeae 	beq.w	80099f6 <_printf_float+0xb6>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	e7ec      	b.n	8009c7a <_printf_float+0x33a>
 8009ca0:	4642      	mov	r2, r8
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b8      	blx	r7
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d1c2      	bne.n	8009c32 <_printf_float+0x2f2>
 8009cac:	e6a3      	b.n	80099f6 <_printf_float+0xb6>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	9206      	str	r2, [sp, #24]
 8009cb6:	47b8      	blx	r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	f43f ae9c 	beq.w	80099f6 <_printf_float+0xb6>
 8009cbe:	f10b 0b01 	add.w	fp, fp, #1
 8009cc2:	9a06      	ldr	r2, [sp, #24]
 8009cc4:	e7bb      	b.n	8009c3e <_printf_float+0x2fe>
 8009cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d1c0      	bne.n	8009c56 <_printf_float+0x316>
 8009cd4:	e68f      	b.n	80099f6 <_printf_float+0xb6>
 8009cd6:	9a06      	ldr	r2, [sp, #24]
 8009cd8:	464b      	mov	r3, r9
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4628      	mov	r0, r5
 8009cde:	4442      	add	r2, r8
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d1c3      	bne.n	8009c6e <_printf_float+0x32e>
 8009ce6:	e686      	b.n	80099f6 <_printf_float+0xb6>
 8009ce8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cec:	f1ba 0f01 	cmp.w	sl, #1
 8009cf0:	dc01      	bgt.n	8009cf6 <_printf_float+0x3b6>
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d536      	bpl.n	8009d64 <_printf_float+0x424>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f ae78 	beq.w	80099f6 <_printf_float+0xb6>
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	f43f ae70 	beq.w	80099f6 <_printf_float+0xb6>
 8009d16:	2200      	movs	r2, #0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d22:	f7f6 fee5 	bl	8000af0 <__aeabi_dcmpeq>
 8009d26:	b9c0      	cbnz	r0, 8009d5a <_printf_float+0x41a>
 8009d28:	4653      	mov	r3, sl
 8009d2a:	f108 0201 	add.w	r2, r8, #1
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d10c      	bne.n	8009d52 <_printf_float+0x412>
 8009d38:	e65d      	b.n	80099f6 <_printf_float+0xb6>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	465a      	mov	r2, fp
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	f43f ae56 	beq.w	80099f6 <_printf_float+0xb6>
 8009d4a:	f108 0801 	add.w	r8, r8, #1
 8009d4e:	45d0      	cmp	r8, sl
 8009d50:	dbf3      	blt.n	8009d3a <_printf_float+0x3fa>
 8009d52:	464b      	mov	r3, r9
 8009d54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d58:	e6df      	b.n	8009b1a <_printf_float+0x1da>
 8009d5a:	f04f 0800 	mov.w	r8, #0
 8009d5e:	f104 0b1a 	add.w	fp, r4, #26
 8009d62:	e7f4      	b.n	8009d4e <_printf_float+0x40e>
 8009d64:	2301      	movs	r3, #1
 8009d66:	4642      	mov	r2, r8
 8009d68:	e7e1      	b.n	8009d2e <_printf_float+0x3ee>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	464a      	mov	r2, r9
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	f43f ae3e 	beq.w	80099f6 <_printf_float+0xb6>
 8009d7a:	f108 0801 	add.w	r8, r8, #1
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	4543      	cmp	r3, r8
 8009d86:	dcf0      	bgt.n	8009d6a <_printf_float+0x42a>
 8009d88:	e6fc      	b.n	8009b84 <_printf_float+0x244>
 8009d8a:	f04f 0800 	mov.w	r8, #0
 8009d8e:	f104 0919 	add.w	r9, r4, #25
 8009d92:	e7f4      	b.n	8009d7e <_printf_float+0x43e>

08009d94 <_printf_common>:
 8009d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	4616      	mov	r6, r2
 8009d9a:	4698      	mov	r8, r3
 8009d9c:	688a      	ldr	r2, [r1, #8]
 8009d9e:	4607      	mov	r7, r0
 8009da0:	690b      	ldr	r3, [r1, #16]
 8009da2:	460c      	mov	r4, r1
 8009da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	bfb8      	it	lt
 8009dac:	4613      	movlt	r3, r2
 8009dae:	6033      	str	r3, [r6, #0]
 8009db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009db4:	b10a      	cbz	r2, 8009dba <_printf_common+0x26>
 8009db6:	3301      	adds	r3, #1
 8009db8:	6033      	str	r3, [r6, #0]
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	0699      	lsls	r1, r3, #26
 8009dbe:	bf42      	ittt	mi
 8009dc0:	6833      	ldrmi	r3, [r6, #0]
 8009dc2:	3302      	addmi	r3, #2
 8009dc4:	6033      	strmi	r3, [r6, #0]
 8009dc6:	6825      	ldr	r5, [r4, #0]
 8009dc8:	f015 0506 	ands.w	r5, r5, #6
 8009dcc:	d106      	bne.n	8009ddc <_printf_common+0x48>
 8009dce:	f104 0a19 	add.w	sl, r4, #25
 8009dd2:	68e3      	ldr	r3, [r4, #12]
 8009dd4:	6832      	ldr	r2, [r6, #0]
 8009dd6:	1a9b      	subs	r3, r3, r2
 8009dd8:	42ab      	cmp	r3, r5
 8009dda:	dc2b      	bgt.n	8009e34 <_printf_common+0xa0>
 8009ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	3b00      	subs	r3, #0
 8009de4:	bf18      	it	ne
 8009de6:	2301      	movne	r3, #1
 8009de8:	0692      	lsls	r2, r2, #26
 8009dea:	d430      	bmi.n	8009e4e <_printf_common+0xba>
 8009dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009df0:	4641      	mov	r1, r8
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c8      	blx	r9
 8009df6:	3001      	adds	r0, #1
 8009df8:	d023      	beq.n	8009e42 <_printf_common+0xae>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	341a      	adds	r4, #26
 8009dfe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009e02:	f003 0306 	and.w	r3, r3, #6
 8009e06:	2b04      	cmp	r3, #4
 8009e08:	bf0a      	itet	eq
 8009e0a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009e0e:	2500      	movne	r5, #0
 8009e10:	6833      	ldreq	r3, [r6, #0]
 8009e12:	f04f 0600 	mov.w	r6, #0
 8009e16:	bf08      	it	eq
 8009e18:	1aed      	subeq	r5, r5, r3
 8009e1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e1e:	bf08      	it	eq
 8009e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bfc4      	itt	gt
 8009e28:	1a9b      	subgt	r3, r3, r2
 8009e2a:	18ed      	addgt	r5, r5, r3
 8009e2c:	42b5      	cmp	r5, r6
 8009e2e:	d11a      	bne.n	8009e66 <_printf_common+0xd2>
 8009e30:	2000      	movs	r0, #0
 8009e32:	e008      	b.n	8009e46 <_printf_common+0xb2>
 8009e34:	2301      	movs	r3, #1
 8009e36:	4652      	mov	r2, sl
 8009e38:	4641      	mov	r1, r8
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	47c8      	blx	r9
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d103      	bne.n	8009e4a <_printf_common+0xb6>
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	3501      	adds	r5, #1
 8009e4c:	e7c1      	b.n	8009dd2 <_printf_common+0x3e>
 8009e4e:	18e1      	adds	r1, r4, r3
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	2030      	movs	r0, #48	@ 0x30
 8009e54:	3302      	adds	r3, #2
 8009e56:	4422      	add	r2, r4
 8009e58:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e64:	e7c2      	b.n	8009dec <_printf_common+0x58>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	47c8      	blx	r9
 8009e70:	3001      	adds	r0, #1
 8009e72:	d0e6      	beq.n	8009e42 <_printf_common+0xae>
 8009e74:	3601      	adds	r6, #1
 8009e76:	e7d9      	b.n	8009e2c <_printf_common+0x98>

08009e78 <_printf_i>:
 8009e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	7e0f      	ldrb	r7, [r1, #24]
 8009e7e:	4691      	mov	r9, r2
 8009e80:	4680      	mov	r8, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	2f78      	cmp	r7, #120	@ 0x78
 8009e86:	469a      	mov	sl, r3
 8009e88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e8e:	d807      	bhi.n	8009ea0 <_printf_i+0x28>
 8009e90:	2f62      	cmp	r7, #98	@ 0x62
 8009e92:	d80a      	bhi.n	8009eaa <_printf_i+0x32>
 8009e94:	2f00      	cmp	r7, #0
 8009e96:	f000 80d2 	beq.w	800a03e <_printf_i+0x1c6>
 8009e9a:	2f58      	cmp	r7, #88	@ 0x58
 8009e9c:	f000 80b9 	beq.w	800a012 <_printf_i+0x19a>
 8009ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ea8:	e03a      	b.n	8009f20 <_printf_i+0xa8>
 8009eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009eae:	2b15      	cmp	r3, #21
 8009eb0:	d8f6      	bhi.n	8009ea0 <_printf_i+0x28>
 8009eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8009eb8 <_printf_i+0x40>)
 8009eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb8:	08009f11 	.word	0x08009f11
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009ea1 	.word	0x08009ea1
 8009ec4:	08009ea1 	.word	0x08009ea1
 8009ec8:	08009ea1 	.word	0x08009ea1
 8009ecc:	08009ea1 	.word	0x08009ea1
 8009ed0:	08009f25 	.word	0x08009f25
 8009ed4:	08009ea1 	.word	0x08009ea1
 8009ed8:	08009ea1 	.word	0x08009ea1
 8009edc:	08009ea1 	.word	0x08009ea1
 8009ee0:	08009ea1 	.word	0x08009ea1
 8009ee4:	0800a025 	.word	0x0800a025
 8009ee8:	08009f4f 	.word	0x08009f4f
 8009eec:	08009fdf 	.word	0x08009fdf
 8009ef0:	08009ea1 	.word	0x08009ea1
 8009ef4:	08009ea1 	.word	0x08009ea1
 8009ef8:	0800a047 	.word	0x0800a047
 8009efc:	08009ea1 	.word	0x08009ea1
 8009f00:	08009f4f 	.word	0x08009f4f
 8009f04:	08009ea1 	.word	0x08009ea1
 8009f08:	08009ea1 	.word	0x08009ea1
 8009f0c:	08009fe7 	.word	0x08009fe7
 8009f10:	6833      	ldr	r3, [r6, #0]
 8009f12:	1d1a      	adds	r2, r3, #4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6032      	str	r2, [r6, #0]
 8009f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f20:	2301      	movs	r3, #1
 8009f22:	e09d      	b.n	800a060 <_printf_i+0x1e8>
 8009f24:	6833      	ldr	r3, [r6, #0]
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	1d19      	adds	r1, r3, #4
 8009f2a:	6031      	str	r1, [r6, #0]
 8009f2c:	0606      	lsls	r6, r0, #24
 8009f2e:	d501      	bpl.n	8009f34 <_printf_i+0xbc>
 8009f30:	681d      	ldr	r5, [r3, #0]
 8009f32:	e003      	b.n	8009f3c <_printf_i+0xc4>
 8009f34:	0645      	lsls	r5, r0, #25
 8009f36:	d5fb      	bpl.n	8009f30 <_printf_i+0xb8>
 8009f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	da03      	bge.n	8009f48 <_printf_i+0xd0>
 8009f40:	232d      	movs	r3, #45	@ 0x2d
 8009f42:	426d      	negs	r5, r5
 8009f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f48:	4859      	ldr	r0, [pc, #356]	@ (800a0b0 <_printf_i+0x238>)
 8009f4a:	230a      	movs	r3, #10
 8009f4c:	e011      	b.n	8009f72 <_printf_i+0xfa>
 8009f4e:	6821      	ldr	r1, [r4, #0]
 8009f50:	6833      	ldr	r3, [r6, #0]
 8009f52:	0608      	lsls	r0, r1, #24
 8009f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f58:	d402      	bmi.n	8009f60 <_printf_i+0xe8>
 8009f5a:	0649      	lsls	r1, r1, #25
 8009f5c:	bf48      	it	mi
 8009f5e:	b2ad      	uxthmi	r5, r5
 8009f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f62:	6033      	str	r3, [r6, #0]
 8009f64:	4852      	ldr	r0, [pc, #328]	@ (800a0b0 <_printf_i+0x238>)
 8009f66:	bf14      	ite	ne
 8009f68:	230a      	movne	r3, #10
 8009f6a:	2308      	moveq	r3, #8
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f72:	6866      	ldr	r6, [r4, #4]
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	60a6      	str	r6, [r4, #8]
 8009f78:	bfa2      	ittt	ge
 8009f7a:	6821      	ldrge	r1, [r4, #0]
 8009f7c:	f021 0104 	bicge.w	r1, r1, #4
 8009f80:	6021      	strge	r1, [r4, #0]
 8009f82:	b90d      	cbnz	r5, 8009f88 <_printf_i+0x110>
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	d04b      	beq.n	800a020 <_printf_i+0x1a8>
 8009f88:	4616      	mov	r6, r2
 8009f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8009f92:	5dc7      	ldrb	r7, [r0, r7]
 8009f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f98:	462f      	mov	r7, r5
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	42bb      	cmp	r3, r7
 8009f9e:	d9f4      	bls.n	8009f8a <_printf_i+0x112>
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d10b      	bne.n	8009fbc <_printf_i+0x144>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	07df      	lsls	r7, r3, #31
 8009fa8:	d508      	bpl.n	8009fbc <_printf_i+0x144>
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	6861      	ldr	r1, [r4, #4]
 8009fae:	4299      	cmp	r1, r3
 8009fb0:	bfde      	ittt	le
 8009fb2:	2330      	movle	r3, #48	@ 0x30
 8009fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fbc:	1b92      	subs	r2, r2, r6
 8009fbe:	6122      	str	r2, [r4, #16]
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	aa03      	add	r2, sp, #12
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f8cd a000 	str.w	sl, [sp]
 8009fcc:	f7ff fee2 	bl	8009d94 <_printf_common>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d14a      	bne.n	800a06a <_printf_i+0x1f2>
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	b004      	add	sp, #16
 8009fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	f043 0320 	orr.w	r3, r3, #32
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	2778      	movs	r7, #120	@ 0x78
 8009fe8:	4832      	ldr	r0, [pc, #200]	@ (800a0b4 <_printf_i+0x23c>)
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ff0:	061f      	lsls	r7, r3, #24
 8009ff2:	6831      	ldr	r1, [r6, #0]
 8009ff4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ff8:	d402      	bmi.n	800a000 <_printf_i+0x188>
 8009ffa:	065f      	lsls	r7, r3, #25
 8009ffc:	bf48      	it	mi
 8009ffe:	b2ad      	uxthmi	r5, r5
 800a000:	6031      	str	r1, [r6, #0]
 800a002:	07d9      	lsls	r1, r3, #31
 800a004:	bf44      	itt	mi
 800a006:	f043 0320 	orrmi.w	r3, r3, #32
 800a00a:	6023      	strmi	r3, [r4, #0]
 800a00c:	b11d      	cbz	r5, 800a016 <_printf_i+0x19e>
 800a00e:	2310      	movs	r3, #16
 800a010:	e7ac      	b.n	8009f6c <_printf_i+0xf4>
 800a012:	4827      	ldr	r0, [pc, #156]	@ (800a0b0 <_printf_i+0x238>)
 800a014:	e7e9      	b.n	8009fea <_printf_i+0x172>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	f023 0320 	bic.w	r3, r3, #32
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	e7f6      	b.n	800a00e <_printf_i+0x196>
 800a020:	4616      	mov	r6, r2
 800a022:	e7bd      	b.n	8009fa0 <_printf_i+0x128>
 800a024:	6833      	ldr	r3, [r6, #0]
 800a026:	6825      	ldr	r5, [r4, #0]
 800a028:	1d18      	adds	r0, r3, #4
 800a02a:	6961      	ldr	r1, [r4, #20]
 800a02c:	6030      	str	r0, [r6, #0]
 800a02e:	062e      	lsls	r6, r5, #24
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	d501      	bpl.n	800a038 <_printf_i+0x1c0>
 800a034:	6019      	str	r1, [r3, #0]
 800a036:	e002      	b.n	800a03e <_printf_i+0x1c6>
 800a038:	0668      	lsls	r0, r5, #25
 800a03a:	d5fb      	bpl.n	800a034 <_printf_i+0x1bc>
 800a03c:	8019      	strh	r1, [r3, #0]
 800a03e:	2300      	movs	r3, #0
 800a040:	4616      	mov	r6, r2
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	e7bc      	b.n	8009fc0 <_printf_i+0x148>
 800a046:	6833      	ldr	r3, [r6, #0]
 800a048:	2100      	movs	r1, #0
 800a04a:	1d1a      	adds	r2, r3, #4
 800a04c:	6032      	str	r2, [r6, #0]
 800a04e:	681e      	ldr	r6, [r3, #0]
 800a050:	6862      	ldr	r2, [r4, #4]
 800a052:	4630      	mov	r0, r6
 800a054:	f000 fbf9 	bl	800a84a <memchr>
 800a058:	b108      	cbz	r0, 800a05e <_printf_i+0x1e6>
 800a05a:	1b80      	subs	r0, r0, r6
 800a05c:	6060      	str	r0, [r4, #4]
 800a05e:	6863      	ldr	r3, [r4, #4]
 800a060:	6123      	str	r3, [r4, #16]
 800a062:	2300      	movs	r3, #0
 800a064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a068:	e7aa      	b.n	8009fc0 <_printf_i+0x148>
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	4632      	mov	r2, r6
 800a06e:	4649      	mov	r1, r9
 800a070:	4640      	mov	r0, r8
 800a072:	47d0      	blx	sl
 800a074:	3001      	adds	r0, #1
 800a076:	d0ad      	beq.n	8009fd4 <_printf_i+0x15c>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	079b      	lsls	r3, r3, #30
 800a07c:	d413      	bmi.n	800a0a6 <_printf_i+0x22e>
 800a07e:	68e0      	ldr	r0, [r4, #12]
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	4298      	cmp	r0, r3
 800a084:	bfb8      	it	lt
 800a086:	4618      	movlt	r0, r3
 800a088:	e7a6      	b.n	8009fd8 <_printf_i+0x160>
 800a08a:	2301      	movs	r3, #1
 800a08c:	4632      	mov	r2, r6
 800a08e:	4649      	mov	r1, r9
 800a090:	4640      	mov	r0, r8
 800a092:	47d0      	blx	sl
 800a094:	3001      	adds	r0, #1
 800a096:	d09d      	beq.n	8009fd4 <_printf_i+0x15c>
 800a098:	3501      	adds	r5, #1
 800a09a:	68e3      	ldr	r3, [r4, #12]
 800a09c:	9903      	ldr	r1, [sp, #12]
 800a09e:	1a5b      	subs	r3, r3, r1
 800a0a0:	42ab      	cmp	r3, r5
 800a0a2:	dcf2      	bgt.n	800a08a <_printf_i+0x212>
 800a0a4:	e7eb      	b.n	800a07e <_printf_i+0x206>
 800a0a6:	2500      	movs	r5, #0
 800a0a8:	f104 0619 	add.w	r6, r4, #25
 800a0ac:	e7f5      	b.n	800a09a <_printf_i+0x222>
 800a0ae:	bf00      	nop
 800a0b0:	0800dfea 	.word	0x0800dfea
 800a0b4:	0800dffb 	.word	0x0800dffb

0800a0b8 <_scanf_float>:
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	b087      	sub	sp, #28
 800a0be:	4617      	mov	r7, r2
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	688b      	ldr	r3, [r1, #8]
 800a0c8:	1e5a      	subs	r2, r3, #1
 800a0ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a0ce:	460a      	mov	r2, r1
 800a0d0:	bf89      	itett	hi
 800a0d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0d6:	f04f 0b00 	movls.w	fp, #0
 800a0da:	eb03 0b05 	addhi.w	fp, r3, r5
 800a0de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0e2:	f04f 0500 	mov.w	r5, #0
 800a0e6:	bf88      	it	hi
 800a0e8:	608b      	strhi	r3, [r1, #8]
 800a0ea:	680b      	ldr	r3, [r1, #0]
 800a0ec:	46aa      	mov	sl, r5
 800a0ee:	46a9      	mov	r9, r5
 800a0f0:	9502      	str	r5, [sp, #8]
 800a0f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a0f6:	f842 3b1c 	str.w	r3, [r2], #28
 800a0fa:	4616      	mov	r6, r2
 800a0fc:	9201      	str	r2, [sp, #4]
 800a0fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a102:	68a2      	ldr	r2, [r4, #8]
 800a104:	b152      	cbz	r2, 800a11c <_scanf_float+0x64>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a10c:	d864      	bhi.n	800a1d8 <_scanf_float+0x120>
 800a10e:	2b40      	cmp	r3, #64	@ 0x40
 800a110:	d83c      	bhi.n	800a18c <_scanf_float+0xd4>
 800a112:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a116:	b2c8      	uxtb	r0, r1
 800a118:	280e      	cmp	r0, #14
 800a11a:	d93a      	bls.n	800a192 <_scanf_float+0xda>
 800a11c:	f1b9 0f00 	cmp.w	r9, #0
 800a120:	d003      	beq.n	800a12a <_scanf_float+0x72>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a12e:	f1ba 0f01 	cmp.w	sl, #1
 800a132:	f200 8117 	bhi.w	800a364 <_scanf_float+0x2ac>
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	429e      	cmp	r6, r3
 800a13a:	f200 8108 	bhi.w	800a34e <_scanf_float+0x296>
 800a13e:	2001      	movs	r0, #1
 800a140:	b007      	add	sp, #28
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a146:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a14a:	2a0d      	cmp	r2, #13
 800a14c:	d8e6      	bhi.n	800a11c <_scanf_float+0x64>
 800a14e:	a101      	add	r1, pc, #4	@ (adr r1, 800a154 <_scanf_float+0x9c>)
 800a150:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a154:	0800a29b 	.word	0x0800a29b
 800a158:	0800a11d 	.word	0x0800a11d
 800a15c:	0800a11d 	.word	0x0800a11d
 800a160:	0800a11d 	.word	0x0800a11d
 800a164:	0800a2fb 	.word	0x0800a2fb
 800a168:	0800a2d3 	.word	0x0800a2d3
 800a16c:	0800a11d 	.word	0x0800a11d
 800a170:	0800a11d 	.word	0x0800a11d
 800a174:	0800a2a9 	.word	0x0800a2a9
 800a178:	0800a11d 	.word	0x0800a11d
 800a17c:	0800a11d 	.word	0x0800a11d
 800a180:	0800a11d 	.word	0x0800a11d
 800a184:	0800a11d 	.word	0x0800a11d
 800a188:	0800a261 	.word	0x0800a261
 800a18c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a190:	e7db      	b.n	800a14a <_scanf_float+0x92>
 800a192:	290e      	cmp	r1, #14
 800a194:	d8c2      	bhi.n	800a11c <_scanf_float+0x64>
 800a196:	a001      	add	r0, pc, #4	@ (adr r0, 800a19c <_scanf_float+0xe4>)
 800a198:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a19c:	0800a251 	.word	0x0800a251
 800a1a0:	0800a11d 	.word	0x0800a11d
 800a1a4:	0800a251 	.word	0x0800a251
 800a1a8:	0800a2e7 	.word	0x0800a2e7
 800a1ac:	0800a11d 	.word	0x0800a11d
 800a1b0:	0800a1f9 	.word	0x0800a1f9
 800a1b4:	0800a237 	.word	0x0800a237
 800a1b8:	0800a237 	.word	0x0800a237
 800a1bc:	0800a237 	.word	0x0800a237
 800a1c0:	0800a237 	.word	0x0800a237
 800a1c4:	0800a237 	.word	0x0800a237
 800a1c8:	0800a237 	.word	0x0800a237
 800a1cc:	0800a237 	.word	0x0800a237
 800a1d0:	0800a237 	.word	0x0800a237
 800a1d4:	0800a237 	.word	0x0800a237
 800a1d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1da:	d809      	bhi.n	800a1f0 <_scanf_float+0x138>
 800a1dc:	2b60      	cmp	r3, #96	@ 0x60
 800a1de:	d8b2      	bhi.n	800a146 <_scanf_float+0x8e>
 800a1e0:	2b54      	cmp	r3, #84	@ 0x54
 800a1e2:	d07b      	beq.n	800a2dc <_scanf_float+0x224>
 800a1e4:	2b59      	cmp	r3, #89	@ 0x59
 800a1e6:	d199      	bne.n	800a11c <_scanf_float+0x64>
 800a1e8:	2d07      	cmp	r5, #7
 800a1ea:	d197      	bne.n	800a11c <_scanf_float+0x64>
 800a1ec:	2508      	movs	r5, #8
 800a1ee:	e02c      	b.n	800a24a <_scanf_float+0x192>
 800a1f0:	2b74      	cmp	r3, #116	@ 0x74
 800a1f2:	d073      	beq.n	800a2dc <_scanf_float+0x224>
 800a1f4:	2b79      	cmp	r3, #121	@ 0x79
 800a1f6:	e7f6      	b.n	800a1e6 <_scanf_float+0x12e>
 800a1f8:	6821      	ldr	r1, [r4, #0]
 800a1fa:	05c8      	lsls	r0, r1, #23
 800a1fc:	d51b      	bpl.n	800a236 <_scanf_float+0x17e>
 800a1fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a202:	f109 0901 	add.w	r9, r9, #1
 800a206:	6021      	str	r1, [r4, #0]
 800a208:	f1bb 0f00 	cmp.w	fp, #0
 800a20c:	d003      	beq.n	800a216 <_scanf_float+0x15e>
 800a20e:	3201      	adds	r2, #1
 800a210:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a214:	60a2      	str	r2, [r4, #8]
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	3b01      	subs	r3, #1
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	6923      	ldr	r3, [r4, #16]
 800a21e:	3301      	adds	r3, #1
 800a220:	6123      	str	r3, [r4, #16]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3b01      	subs	r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	f340 8087 	ble.w	800a33c <_scanf_float+0x284>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	3301      	adds	r3, #1
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	e765      	b.n	800a102 <_scanf_float+0x4a>
 800a236:	eb1a 0105 	adds.w	r1, sl, r5
 800a23a:	f47f af6f 	bne.w	800a11c <_scanf_float+0x64>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	460d      	mov	r5, r1
 800a242:	468a      	mov	sl, r1
 800a244:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a248:	6022      	str	r2, [r4, #0]
 800a24a:	f806 3b01 	strb.w	r3, [r6], #1
 800a24e:	e7e2      	b.n	800a216 <_scanf_float+0x15e>
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	0610      	lsls	r0, r2, #24
 800a254:	f57f af62 	bpl.w	800a11c <_scanf_float+0x64>
 800a258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	e7f4      	b.n	800a24a <_scanf_float+0x192>
 800a260:	f1ba 0f00 	cmp.w	sl, #0
 800a264:	d10e      	bne.n	800a284 <_scanf_float+0x1cc>
 800a266:	f1b9 0f00 	cmp.w	r9, #0
 800a26a:	d10e      	bne.n	800a28a <_scanf_float+0x1d2>
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a272:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a276:	d108      	bne.n	800a28a <_scanf_float+0x1d2>
 800a278:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a27c:	f04f 0a01 	mov.w	sl, #1
 800a280:	6022      	str	r2, [r4, #0]
 800a282:	e7e2      	b.n	800a24a <_scanf_float+0x192>
 800a284:	f1ba 0f02 	cmp.w	sl, #2
 800a288:	d055      	beq.n	800a336 <_scanf_float+0x27e>
 800a28a:	2d01      	cmp	r5, #1
 800a28c:	d002      	beq.n	800a294 <_scanf_float+0x1dc>
 800a28e:	2d04      	cmp	r5, #4
 800a290:	f47f af44 	bne.w	800a11c <_scanf_float+0x64>
 800a294:	3501      	adds	r5, #1
 800a296:	b2ed      	uxtb	r5, r5
 800a298:	e7d7      	b.n	800a24a <_scanf_float+0x192>
 800a29a:	f1ba 0f01 	cmp.w	sl, #1
 800a29e:	f47f af3d 	bne.w	800a11c <_scanf_float+0x64>
 800a2a2:	f04f 0a02 	mov.w	sl, #2
 800a2a6:	e7d0      	b.n	800a24a <_scanf_float+0x192>
 800a2a8:	b97d      	cbnz	r5, 800a2ca <_scanf_float+0x212>
 800a2aa:	f1b9 0f00 	cmp.w	r9, #0
 800a2ae:	f47f af38 	bne.w	800a122 <_scanf_float+0x6a>
 800a2b2:	6822      	ldr	r2, [r4, #0]
 800a2b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a2b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a2bc:	f040 8107 	bne.w	800a4ce <_scanf_float+0x416>
 800a2c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2c4:	2501      	movs	r5, #1
 800a2c6:	6022      	str	r2, [r4, #0]
 800a2c8:	e7bf      	b.n	800a24a <_scanf_float+0x192>
 800a2ca:	2d03      	cmp	r5, #3
 800a2cc:	d0e2      	beq.n	800a294 <_scanf_float+0x1dc>
 800a2ce:	2d05      	cmp	r5, #5
 800a2d0:	e7de      	b.n	800a290 <_scanf_float+0x1d8>
 800a2d2:	2d02      	cmp	r5, #2
 800a2d4:	f47f af22 	bne.w	800a11c <_scanf_float+0x64>
 800a2d8:	2503      	movs	r5, #3
 800a2da:	e7b6      	b.n	800a24a <_scanf_float+0x192>
 800a2dc:	2d06      	cmp	r5, #6
 800a2de:	f47f af1d 	bne.w	800a11c <_scanf_float+0x64>
 800a2e2:	2507      	movs	r5, #7
 800a2e4:	e7b1      	b.n	800a24a <_scanf_float+0x192>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	0591      	lsls	r1, r2, #22
 800a2ea:	f57f af17 	bpl.w	800a11c <_scanf_float+0x64>
 800a2ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	e7a7      	b.n	800a24a <_scanf_float+0x192>
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a300:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a304:	d006      	beq.n	800a314 <_scanf_float+0x25c>
 800a306:	0550      	lsls	r0, r2, #21
 800a308:	f57f af08 	bpl.w	800a11c <_scanf_float+0x64>
 800a30c:	f1b9 0f00 	cmp.w	r9, #0
 800a310:	f000 80dd 	beq.w	800a4ce <_scanf_float+0x416>
 800a314:	0591      	lsls	r1, r2, #22
 800a316:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a31a:	bf58      	it	pl
 800a31c:	9902      	ldrpl	r1, [sp, #8]
 800a31e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a322:	bf58      	it	pl
 800a324:	eba9 0101 	subpl.w	r1, r9, r1
 800a328:	6022      	str	r2, [r4, #0]
 800a32a:	f04f 0900 	mov.w	r9, #0
 800a32e:	bf58      	it	pl
 800a330:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a334:	e789      	b.n	800a24a <_scanf_float+0x192>
 800a336:	f04f 0a03 	mov.w	sl, #3
 800a33a:	e786      	b.n	800a24a <_scanf_float+0x192>
 800a33c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a340:	4639      	mov	r1, r7
 800a342:	4640      	mov	r0, r8
 800a344:	4798      	blx	r3
 800a346:	2800      	cmp	r0, #0
 800a348:	f43f aedb 	beq.w	800a102 <_scanf_float+0x4a>
 800a34c:	e6e6      	b.n	800a11c <_scanf_float+0x64>
 800a34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a352:	463a      	mov	r2, r7
 800a354:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a358:	4640      	mov	r0, r8
 800a35a:	4798      	blx	r3
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	3b01      	subs	r3, #1
 800a360:	6123      	str	r3, [r4, #16]
 800a362:	e6e8      	b.n	800a136 <_scanf_float+0x7e>
 800a364:	1e6b      	subs	r3, r5, #1
 800a366:	2b06      	cmp	r3, #6
 800a368:	d824      	bhi.n	800a3b4 <_scanf_float+0x2fc>
 800a36a:	2d02      	cmp	r5, #2
 800a36c:	d836      	bhi.n	800a3dc <_scanf_float+0x324>
 800a36e:	9b01      	ldr	r3, [sp, #4]
 800a370:	429e      	cmp	r6, r3
 800a372:	f67f aee4 	bls.w	800a13e <_scanf_float+0x86>
 800a376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a37a:	463a      	mov	r2, r7
 800a37c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a380:	4640      	mov	r0, r8
 800a382:	4798      	blx	r3
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	3b01      	subs	r3, #1
 800a388:	6123      	str	r3, [r4, #16]
 800a38a:	e7f0      	b.n	800a36e <_scanf_float+0x2b6>
 800a38c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a390:	463a      	mov	r2, r7
 800a392:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a396:	4640      	mov	r0, r8
 800a398:	4798      	blx	r3
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	6123      	str	r3, [r4, #16]
 800a3a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3a4:	fa5f fa8a 	uxtb.w	sl, sl
 800a3a8:	f1ba 0f02 	cmp.w	sl, #2
 800a3ac:	d1ee      	bne.n	800a38c <_scanf_float+0x2d4>
 800a3ae:	3d03      	subs	r5, #3
 800a3b0:	b2ed      	uxtb	r5, r5
 800a3b2:	1b76      	subs	r6, r6, r5
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	05da      	lsls	r2, r3, #23
 800a3b8:	d52f      	bpl.n	800a41a <_scanf_float+0x362>
 800a3ba:	055b      	lsls	r3, r3, #21
 800a3bc:	d511      	bpl.n	800a3e2 <_scanf_float+0x32a>
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	429e      	cmp	r6, r3
 800a3c2:	f67f aebc 	bls.w	800a13e <_scanf_float+0x86>
 800a3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	4798      	blx	r3
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	e7f0      	b.n	800a3be <_scanf_float+0x306>
 800a3dc:	46aa      	mov	sl, r5
 800a3de:	46b3      	mov	fp, r6
 800a3e0:	e7de      	b.n	800a3a0 <_scanf_float+0x2e8>
 800a3e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3e6:	1e75      	subs	r5, r6, #1
 800a3e8:	6923      	ldr	r3, [r4, #16]
 800a3ea:	2965      	cmp	r1, #101	@ 0x65
 800a3ec:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	d00c      	beq.n	800a40e <_scanf_float+0x356>
 800a3f4:	2945      	cmp	r1, #69	@ 0x45
 800a3f6:	d00a      	beq.n	800a40e <_scanf_float+0x356>
 800a3f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3fc:	463a      	mov	r2, r7
 800a3fe:	4640      	mov	r0, r8
 800a400:	1eb5      	subs	r5, r6, #2
 800a402:	4798      	blx	r3
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	462e      	mov	r6, r5
 800a410:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a414:	463a      	mov	r2, r7
 800a416:	4640      	mov	r0, r8
 800a418:	4798      	blx	r3
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	f012 0210 	ands.w	r2, r2, #16
 800a420:	d001      	beq.n	800a426 <_scanf_float+0x36e>
 800a422:	2000      	movs	r0, #0
 800a424:	e68c      	b.n	800a140 <_scanf_float+0x88>
 800a426:	7032      	strb	r2, [r6, #0]
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a42e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a432:	d11c      	bne.n	800a46e <_scanf_float+0x3b6>
 800a434:	9b02      	ldr	r3, [sp, #8]
 800a436:	454b      	cmp	r3, r9
 800a438:	eba3 0209 	sub.w	r2, r3, r9
 800a43c:	d123      	bne.n	800a486 <_scanf_float+0x3ce>
 800a43e:	2200      	movs	r2, #0
 800a440:	9901      	ldr	r1, [sp, #4]
 800a442:	4640      	mov	r0, r8
 800a444:	f002 fc28 	bl	800cc98 <_strtod_r>
 800a448:	6821      	ldr	r1, [r4, #0]
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	f011 0f02 	tst.w	r1, #2
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	ec57 6b10 	vmov	r6, r7, d0
 800a456:	f103 0204 	add.w	r2, r3, #4
 800a45a:	d01f      	beq.n	800a49c <_scanf_float+0x3e4>
 800a45c:	9903      	ldr	r1, [sp, #12]
 800a45e:	600a      	str	r2, [r1, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	e9c3 6700 	strd	r6, r7, [r3]
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	3301      	adds	r3, #1
 800a46a:	60e3      	str	r3, [r4, #12]
 800a46c:	e7d9      	b.n	800a422 <_scanf_float+0x36a>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0e4      	beq.n	800a43e <_scanf_float+0x386>
 800a474:	9905      	ldr	r1, [sp, #20]
 800a476:	230a      	movs	r3, #10
 800a478:	4640      	mov	r0, r8
 800a47a:	3101      	adds	r1, #1
 800a47c:	f002 fc8c 	bl	800cd98 <_strtol_r>
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	9e05      	ldr	r6, [sp, #20]
 800a484:	1ac2      	subs	r2, r0, r3
 800a486:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a48a:	4912      	ldr	r1, [pc, #72]	@ (800a4d4 <_scanf_float+0x41c>)
 800a48c:	429e      	cmp	r6, r3
 800a48e:	bf28      	it	cs
 800a490:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a494:	4630      	mov	r0, r6
 800a496:	f000 f8f5 	bl	800a684 <siprintf>
 800a49a:	e7d0      	b.n	800a43e <_scanf_float+0x386>
 800a49c:	f011 0f04 	tst.w	r1, #4
 800a4a0:	9903      	ldr	r1, [sp, #12]
 800a4a2:	600a      	str	r2, [r1, #0]
 800a4a4:	d1dc      	bne.n	800a460 <_scanf_float+0x3a8>
 800a4a6:	681d      	ldr	r5, [r3, #0]
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 fb50 	bl	8000b54 <__aeabi_dcmpun>
 800a4b4:	b128      	cbz	r0, 800a4c2 <_scanf_float+0x40a>
 800a4b6:	4808      	ldr	r0, [pc, #32]	@ (800a4d8 <_scanf_float+0x420>)
 800a4b8:	f000 f9d6 	bl	800a868 <nanf>
 800a4bc:	ed85 0a00 	vstr	s0, [r5]
 800a4c0:	e7d1      	b.n	800a466 <_scanf_float+0x3ae>
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	f7f6 fba3 	bl	8000c10 <__aeabi_d2f>
 800a4ca:	6028      	str	r0, [r5, #0]
 800a4cc:	e7cb      	b.n	800a466 <_scanf_float+0x3ae>
 800a4ce:	f04f 0900 	mov.w	r9, #0
 800a4d2:	e62a      	b.n	800a12a <_scanf_float+0x72>
 800a4d4:	0800e00c 	.word	0x0800e00c
 800a4d8:	0800e3a5 	.word	0x0800e3a5

0800a4dc <std>:
 800a4dc:	2300      	movs	r3, #0
 800a4de:	b510      	push	{r4, lr}
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	6083      	str	r3, [r0, #8]
 800a4e4:	8181      	strh	r1, [r0, #12]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4ea:	81c2      	strh	r2, [r0, #14]
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	6183      	str	r3, [r0, #24]
 800a4f0:	e9c0 3300 	strd	r3, r3, [r0]
 800a4f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4f8:	305c      	adds	r0, #92	@ 0x5c
 800a4fa:	f000 f926 	bl	800a74a <memset>
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <std+0x58>)
 800a500:	6224      	str	r4, [r4, #32]
 800a502:	6263      	str	r3, [r4, #36]	@ 0x24
 800a504:	4b0c      	ldr	r3, [pc, #48]	@ (800a538 <std+0x5c>)
 800a506:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a508:	4b0c      	ldr	r3, [pc, #48]	@ (800a53c <std+0x60>)
 800a50a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a50c:	4b0c      	ldr	r3, [pc, #48]	@ (800a540 <std+0x64>)
 800a50e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a510:	4b0c      	ldr	r3, [pc, #48]	@ (800a544 <std+0x68>)
 800a512:	429c      	cmp	r4, r3
 800a514:	d006      	beq.n	800a524 <std+0x48>
 800a516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a51a:	4294      	cmp	r4, r2
 800a51c:	d002      	beq.n	800a524 <std+0x48>
 800a51e:	33d0      	adds	r3, #208	@ 0xd0
 800a520:	429c      	cmp	r4, r3
 800a522:	d105      	bne.n	800a530 <std+0x54>
 800a524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52c:	f000 b98a 	b.w	800a844 <__retarget_lock_init_recursive>
 800a530:	bd10      	pop	{r4, pc}
 800a532:	bf00      	nop
 800a534:	0800a6c5 	.word	0x0800a6c5
 800a538:	0800a6e7 	.word	0x0800a6e7
 800a53c:	0800a71f 	.word	0x0800a71f
 800a540:	0800a743 	.word	0x0800a743
 800a544:	20000428 	.word	0x20000428

0800a548 <stdio_exit_handler>:
 800a548:	4a02      	ldr	r2, [pc, #8]	@ (800a554 <stdio_exit_handler+0xc>)
 800a54a:	4903      	ldr	r1, [pc, #12]	@ (800a558 <stdio_exit_handler+0x10>)
 800a54c:	4803      	ldr	r0, [pc, #12]	@ (800a55c <stdio_exit_handler+0x14>)
 800a54e:	f000 b869 	b.w	800a624 <_fwalk_sglue>
 800a552:	bf00      	nop
 800a554:	20000024 	.word	0x20000024
 800a558:	0800d3d9 	.word	0x0800d3d9
 800a55c:	20000034 	.word	0x20000034

0800a560 <cleanup_stdio>:
 800a560:	6841      	ldr	r1, [r0, #4]
 800a562:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <cleanup_stdio+0x34>)
 800a564:	4299      	cmp	r1, r3
 800a566:	b510      	push	{r4, lr}
 800a568:	4604      	mov	r4, r0
 800a56a:	d001      	beq.n	800a570 <cleanup_stdio+0x10>
 800a56c:	f002 ff34 	bl	800d3d8 <_fflush_r>
 800a570:	68a1      	ldr	r1, [r4, #8]
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <cleanup_stdio+0x38>)
 800a574:	4299      	cmp	r1, r3
 800a576:	d002      	beq.n	800a57e <cleanup_stdio+0x1e>
 800a578:	4620      	mov	r0, r4
 800a57a:	f002 ff2d 	bl	800d3d8 <_fflush_r>
 800a57e:	68e1      	ldr	r1, [r4, #12]
 800a580:	4b06      	ldr	r3, [pc, #24]	@ (800a59c <cleanup_stdio+0x3c>)
 800a582:	4299      	cmp	r1, r3
 800a584:	d004      	beq.n	800a590 <cleanup_stdio+0x30>
 800a586:	4620      	mov	r0, r4
 800a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58c:	f002 bf24 	b.w	800d3d8 <_fflush_r>
 800a590:	bd10      	pop	{r4, pc}
 800a592:	bf00      	nop
 800a594:	20000428 	.word	0x20000428
 800a598:	20000490 	.word	0x20000490
 800a59c:	200004f8 	.word	0x200004f8

0800a5a0 <global_stdio_init.part.0>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <global_stdio_init.part.0+0x30>)
 800a5a4:	2104      	movs	r1, #4
 800a5a6:	4c0b      	ldr	r4, [pc, #44]	@ (800a5d4 <global_stdio_init.part.0+0x34>)
 800a5a8:	4a0b      	ldr	r2, [pc, #44]	@ (800a5d8 <global_stdio_init.part.0+0x38>)
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f7ff ff94 	bl	800a4dc <std>
 800a5b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	2109      	movs	r1, #9
 800a5bc:	f7ff ff8e 	bl	800a4dc <std>
 800a5c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	2112      	movs	r1, #18
 800a5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5cc:	f7ff bf86 	b.w	800a4dc <std>
 800a5d0:	20000560 	.word	0x20000560
 800a5d4:	20000428 	.word	0x20000428
 800a5d8:	0800a549 	.word	0x0800a549

0800a5dc <__sfp_lock_acquire>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	@ (800a5e4 <__sfp_lock_acquire+0x8>)
 800a5de:	f000 b932 	b.w	800a846 <__retarget_lock_acquire_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	20000569 	.word	0x20000569

0800a5e8 <__sfp_lock_release>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	@ (800a5f0 <__sfp_lock_release+0x8>)
 800a5ea:	f000 b92d 	b.w	800a848 <__retarget_lock_release_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	20000569 	.word	0x20000569

0800a5f4 <__sinit>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	f7ff fff0 	bl	800a5dc <__sfp_lock_acquire>
 800a5fc:	6a23      	ldr	r3, [r4, #32]
 800a5fe:	b11b      	cbz	r3, 800a608 <__sinit+0x14>
 800a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a604:	f7ff bff0 	b.w	800a5e8 <__sfp_lock_release>
 800a608:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <__sinit+0x28>)
 800a60a:	6223      	str	r3, [r4, #32]
 800a60c:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <__sinit+0x2c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1f5      	bne.n	800a600 <__sinit+0xc>
 800a614:	f7ff ffc4 	bl	800a5a0 <global_stdio_init.part.0>
 800a618:	e7f2      	b.n	800a600 <__sinit+0xc>
 800a61a:	bf00      	nop
 800a61c:	0800a561 	.word	0x0800a561
 800a620:	20000560 	.word	0x20000560

0800a624 <_fwalk_sglue>:
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a628:	4607      	mov	r7, r0
 800a62a:	4688      	mov	r8, r1
 800a62c:	4614      	mov	r4, r2
 800a62e:	2600      	movs	r6, #0
 800a630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a634:	f1b9 0901 	subs.w	r9, r9, #1
 800a638:	d505      	bpl.n	800a646 <_fwalk_sglue+0x22>
 800a63a:	6824      	ldr	r4, [r4, #0]
 800a63c:	2c00      	cmp	r4, #0
 800a63e:	d1f7      	bne.n	800a630 <_fwalk_sglue+0xc>
 800a640:	4630      	mov	r0, r6
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	89ab      	ldrh	r3, [r5, #12]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d907      	bls.n	800a65c <_fwalk_sglue+0x38>
 800a64c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a650:	3301      	adds	r3, #1
 800a652:	d003      	beq.n	800a65c <_fwalk_sglue+0x38>
 800a654:	4629      	mov	r1, r5
 800a656:	4638      	mov	r0, r7
 800a658:	47c0      	blx	r8
 800a65a:	4306      	orrs	r6, r0
 800a65c:	3568      	adds	r5, #104	@ 0x68
 800a65e:	e7e9      	b.n	800a634 <_fwalk_sglue+0x10>

0800a660 <iprintf>:
 800a660:	b40f      	push	{r0, r1, r2, r3}
 800a662:	b507      	push	{r0, r1, r2, lr}
 800a664:	4906      	ldr	r1, [pc, #24]	@ (800a680 <iprintf+0x20>)
 800a666:	ab04      	add	r3, sp, #16
 800a668:	6808      	ldr	r0, [r1, #0]
 800a66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66e:	6881      	ldr	r1, [r0, #8]
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	f002 fd15 	bl	800d0a0 <_vfiprintf_r>
 800a676:	b003      	add	sp, #12
 800a678:	f85d eb04 	ldr.w	lr, [sp], #4
 800a67c:	b004      	add	sp, #16
 800a67e:	4770      	bx	lr
 800a680:	20000030 	.word	0x20000030

0800a684 <siprintf>:
 800a684:	b40e      	push	{r1, r2, r3}
 800a686:	b500      	push	{lr}
 800a688:	b09c      	sub	sp, #112	@ 0x70
 800a68a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a68e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a690:	9002      	str	r0, [sp, #8]
 800a692:	9006      	str	r0, [sp, #24]
 800a694:	9107      	str	r1, [sp, #28]
 800a696:	9104      	str	r1, [sp, #16]
 800a698:	4808      	ldr	r0, [pc, #32]	@ (800a6bc <siprintf+0x38>)
 800a69a:	4909      	ldr	r1, [pc, #36]	@ (800a6c0 <siprintf+0x3c>)
 800a69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a0:	9105      	str	r1, [sp, #20]
 800a6a2:	a902      	add	r1, sp, #8
 800a6a4:	6800      	ldr	r0, [r0, #0]
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f002 fbd4 	bl	800ce54 <_svfiprintf_r>
 800a6ac:	9b02      	ldr	r3, [sp, #8]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
 800a6b2:	b01c      	add	sp, #112	@ 0x70
 800a6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b8:	b003      	add	sp, #12
 800a6ba:	4770      	bx	lr
 800a6bc:	20000030 	.word	0x20000030
 800a6c0:	ffff0208 	.word	0xffff0208

0800a6c4 <__sread>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6cc:	f000 f86c 	bl	800a7a8 <_read_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	bfab      	itete	ge
 800a6d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a6d8:	181b      	addge	r3, r3, r0
 800a6da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6de:	bfac      	ite	ge
 800a6e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6e2:	81a3      	strhlt	r3, [r4, #12]
 800a6e4:	bd10      	pop	{r4, pc}

0800a6e6 <__swrite>:
 800a6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ea:	461f      	mov	r7, r3
 800a6ec:	898b      	ldrh	r3, [r1, #12]
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	05db      	lsls	r3, r3, #23
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	d505      	bpl.n	800a704 <__swrite+0x1e>
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	f000 f840 	bl	800a784 <_lseek_r>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	4632      	mov	r2, r6
 800a708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a70c:	4628      	mov	r0, r5
 800a70e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a712:	81a3      	strh	r3, [r4, #12]
 800a714:	463b      	mov	r3, r7
 800a716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a71a:	f000 b857 	b.w	800a7cc <_write_r>

0800a71e <__sseek>:
 800a71e:	b510      	push	{r4, lr}
 800a720:	460c      	mov	r4, r1
 800a722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a726:	f000 f82d 	bl	800a784 <_lseek_r>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	bf15      	itete	ne
 800a730:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a73a:	81a3      	strheq	r3, [r4, #12]
 800a73c:	bf18      	it	ne
 800a73e:	81a3      	strhne	r3, [r4, #12]
 800a740:	bd10      	pop	{r4, pc}

0800a742 <__sclose>:
 800a742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a746:	f000 b80d 	b.w	800a764 <_close_r>

0800a74a <memset>:
 800a74a:	4402      	add	r2, r0
 800a74c:	4603      	mov	r3, r0
 800a74e:	4293      	cmp	r3, r2
 800a750:	d100      	bne.n	800a754 <memset+0xa>
 800a752:	4770      	bx	lr
 800a754:	f803 1b01 	strb.w	r1, [r3], #1
 800a758:	e7f9      	b.n	800a74e <memset+0x4>
	...

0800a75c <_localeconv_r>:
 800a75c:	4800      	ldr	r0, [pc, #0]	@ (800a760 <_localeconv_r+0x4>)
 800a75e:	4770      	bx	lr
 800a760:	20000170 	.word	0x20000170

0800a764 <_close_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	2300      	movs	r3, #0
 800a768:	4d05      	ldr	r5, [pc, #20]	@ (800a780 <_close_r+0x1c>)
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	f7f7 fd85 	bl	800227e <_close>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_close_r+0x1a>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_close_r+0x1a>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20000564 	.word	0x20000564

0800a784 <_lseek_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4604      	mov	r4, r0
 800a788:	4d06      	ldr	r5, [pc, #24]	@ (800a7a4 <_lseek_r+0x20>)
 800a78a:	4608      	mov	r0, r1
 800a78c:	4611      	mov	r1, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	602a      	str	r2, [r5, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7f7 fd9a 	bl	80022cc <_lseek>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_lseek_r+0x1e>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_lseek_r+0x1e>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20000564 	.word	0x20000564

0800a7a8 <_read_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4d06      	ldr	r5, [pc, #24]	@ (800a7c8 <_read_r+0x20>)
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f7f7 fd28 	bl	800220c <_read>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_read_r+0x1e>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_read_r+0x1e>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	20000564 	.word	0x20000564

0800a7cc <_write_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4d06      	ldr	r5, [pc, #24]	@ (800a7ec <_write_r+0x20>)
 800a7d2:	4608      	mov	r0, r1
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f7f7 fd33 	bl	8002246 <_write>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_write_r+0x1e>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_write_r+0x1e>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20000564 	.word	0x20000564

0800a7f0 <__errno>:
 800a7f0:	4b01      	ldr	r3, [pc, #4]	@ (800a7f8 <__errno+0x8>)
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	20000030 	.word	0x20000030

0800a7fc <__libc_init_array>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a834 <__libc_init_array+0x38>)
 800a800:	2600      	movs	r6, #0
 800a802:	4c0d      	ldr	r4, [pc, #52]	@ (800a838 <__libc_init_array+0x3c>)
 800a804:	1b64      	subs	r4, r4, r5
 800a806:	10a4      	asrs	r4, r4, #2
 800a808:	42a6      	cmp	r6, r4
 800a80a:	d109      	bne.n	800a820 <__libc_init_array+0x24>
 800a80c:	4d0b      	ldr	r5, [pc, #44]	@ (800a83c <__libc_init_array+0x40>)
 800a80e:	2600      	movs	r6, #0
 800a810:	4c0b      	ldr	r4, [pc, #44]	@ (800a840 <__libc_init_array+0x44>)
 800a812:	f003 fb8f 	bl	800df34 <_init>
 800a816:	1b64      	subs	r4, r4, r5
 800a818:	10a4      	asrs	r4, r4, #2
 800a81a:	42a6      	cmp	r6, r4
 800a81c:	d105      	bne.n	800a82a <__libc_init_array+0x2e>
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	f855 3b04 	ldr.w	r3, [r5], #4
 800a824:	3601      	adds	r6, #1
 800a826:	4798      	blx	r3
 800a828:	e7ee      	b.n	800a808 <__libc_init_array+0xc>
 800a82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a82e:	3601      	adds	r6, #1
 800a830:	4798      	blx	r3
 800a832:	e7f2      	b.n	800a81a <__libc_init_array+0x1e>
 800a834:	0800e410 	.word	0x0800e410
 800a838:	0800e410 	.word	0x0800e410
 800a83c:	0800e410 	.word	0x0800e410
 800a840:	0800e414 	.word	0x0800e414

0800a844 <__retarget_lock_init_recursive>:
 800a844:	4770      	bx	lr

0800a846 <__retarget_lock_acquire_recursive>:
 800a846:	4770      	bx	lr

0800a848 <__retarget_lock_release_recursive>:
 800a848:	4770      	bx	lr

0800a84a <memchr>:
 800a84a:	b2c9      	uxtb	r1, r1
 800a84c:	4603      	mov	r3, r0
 800a84e:	4402      	add	r2, r0
 800a850:	b510      	push	{r4, lr}
 800a852:	4293      	cmp	r3, r2
 800a854:	4618      	mov	r0, r3
 800a856:	d101      	bne.n	800a85c <memchr+0x12>
 800a858:	2000      	movs	r0, #0
 800a85a:	e003      	b.n	800a864 <memchr+0x1a>
 800a85c:	7804      	ldrb	r4, [r0, #0]
 800a85e:	3301      	adds	r3, #1
 800a860:	428c      	cmp	r4, r1
 800a862:	d1f6      	bne.n	800a852 <memchr+0x8>
 800a864:	bd10      	pop	{r4, pc}
	...

0800a868 <nanf>:
 800a868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a870 <nanf+0x8>
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	7fc00000 	.word	0x7fc00000

0800a874 <quorem>:
 800a874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	6903      	ldr	r3, [r0, #16]
 800a87a:	4607      	mov	r7, r0
 800a87c:	690c      	ldr	r4, [r1, #16]
 800a87e:	42a3      	cmp	r3, r4
 800a880:	f2c0 8083 	blt.w	800a98a <quorem+0x116>
 800a884:	3c01      	subs	r4, #1
 800a886:	f100 0514 	add.w	r5, r0, #20
 800a88a:	f101 0814 	add.w	r8, r1, #20
 800a88e:	00a3      	lsls	r3, r4, #2
 800a890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8ac:	d331      	bcc.n	800a912 <quorem+0x9e>
 800a8ae:	f04f 0a00 	mov.w	sl, #0
 800a8b2:	46c4      	mov	ip, r8
 800a8b4:	46ae      	mov	lr, r5
 800a8b6:	46d3      	mov	fp, sl
 800a8b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a8bc:	b298      	uxth	r0, r3
 800a8be:	45e1      	cmp	r9, ip
 800a8c0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a8c4:	fb06 a000 	mla	r0, r6, r0, sl
 800a8c8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a8cc:	b280      	uxth	r0, r0
 800a8ce:	fb06 2303 	mla	r3, r6, r3, r2
 800a8d2:	f8de 2000 	ldr.w	r2, [lr]
 800a8d6:	b292      	uxth	r2, r2
 800a8d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8dc:	eba2 0200 	sub.w	r2, r2, r0
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	f8de 0000 	ldr.w	r0, [lr]
 800a8e6:	445a      	add	r2, fp
 800a8e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a8ec:	b292      	uxth	r2, r2
 800a8ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a8f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a8f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a8fe:	d2db      	bcs.n	800a8b8 <quorem+0x44>
 800a900:	9b00      	ldr	r3, [sp, #0]
 800a902:	58eb      	ldr	r3, [r5, r3]
 800a904:	b92b      	cbnz	r3, 800a912 <quorem+0x9e>
 800a906:	9b01      	ldr	r3, [sp, #4]
 800a908:	3b04      	subs	r3, #4
 800a90a:	429d      	cmp	r5, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	d330      	bcc.n	800a972 <quorem+0xfe>
 800a910:	613c      	str	r4, [r7, #16]
 800a912:	4638      	mov	r0, r7
 800a914:	f001 f9c6 	bl	800bca4 <__mcmp>
 800a918:	2800      	cmp	r0, #0
 800a91a:	db26      	blt.n	800a96a <quorem+0xf6>
 800a91c:	4629      	mov	r1, r5
 800a91e:	2000      	movs	r0, #0
 800a920:	f858 2b04 	ldr.w	r2, [r8], #4
 800a924:	f8d1 c000 	ldr.w	ip, [r1]
 800a928:	fa1f fe82 	uxth.w	lr, r2
 800a92c:	45c1      	cmp	r9, r8
 800a92e:	fa1f f38c 	uxth.w	r3, ip
 800a932:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a936:	eba3 030e 	sub.w	r3, r3, lr
 800a93a:	4403      	add	r3, r0
 800a93c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a940:	b29b      	uxth	r3, r3
 800a942:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a94a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a94e:	f841 3b04 	str.w	r3, [r1], #4
 800a952:	d2e5      	bcs.n	800a920 <quorem+0xac>
 800a954:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a958:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a95c:	b922      	cbnz	r2, 800a968 <quorem+0xf4>
 800a95e:	3b04      	subs	r3, #4
 800a960:	429d      	cmp	r5, r3
 800a962:	461a      	mov	r2, r3
 800a964:	d30b      	bcc.n	800a97e <quorem+0x10a>
 800a966:	613c      	str	r4, [r7, #16]
 800a968:	3601      	adds	r6, #1
 800a96a:	4630      	mov	r0, r6
 800a96c:	b003      	add	sp, #12
 800a96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a972:	6812      	ldr	r2, [r2, #0]
 800a974:	3b04      	subs	r3, #4
 800a976:	2a00      	cmp	r2, #0
 800a978:	d1ca      	bne.n	800a910 <quorem+0x9c>
 800a97a:	3c01      	subs	r4, #1
 800a97c:	e7c5      	b.n	800a90a <quorem+0x96>
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	3b04      	subs	r3, #4
 800a982:	2a00      	cmp	r2, #0
 800a984:	d1ef      	bne.n	800a966 <quorem+0xf2>
 800a986:	3c01      	subs	r4, #1
 800a988:	e7ea      	b.n	800a960 <quorem+0xec>
 800a98a:	2000      	movs	r0, #0
 800a98c:	e7ee      	b.n	800a96c <quorem+0xf8>
	...

0800a990 <_dtoa_r>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	69c7      	ldr	r7, [r0, #28]
 800a996:	b099      	sub	sp, #100	@ 0x64
 800a998:	4683      	mov	fp, r0
 800a99a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a99c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a99e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9a2:	ec55 4b10 	vmov	r4, r5, d0
 800a9a6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9aa:	b97f      	cbnz	r7, 800a9cc <_dtoa_r+0x3c>
 800a9ac:	2010      	movs	r0, #16
 800a9ae:	f000 fdfd 	bl	800b5ac <malloc>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a9b8:	b920      	cbnz	r0, 800a9c4 <_dtoa_r+0x34>
 800a9ba:	4ba7      	ldr	r3, [pc, #668]	@ (800ac58 <_dtoa_r+0x2c8>)
 800a9bc:	21ef      	movs	r1, #239	@ 0xef
 800a9be:	48a7      	ldr	r0, [pc, #668]	@ (800ac5c <_dtoa_r+0x2cc>)
 800a9c0:	f002 fe1a 	bl	800d5f8 <__assert_func>
 800a9c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a9c8:	6007      	str	r7, [r0, #0]
 800a9ca:	60c7      	str	r7, [r0, #12]
 800a9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9d0:	6819      	ldr	r1, [r3, #0]
 800a9d2:	b159      	cbz	r1, 800a9ec <_dtoa_r+0x5c>
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4658      	mov	r0, fp
 800a9da:	4093      	lsls	r3, r2
 800a9dc:	604a      	str	r2, [r1, #4]
 800a9de:	608b      	str	r3, [r1, #8]
 800a9e0:	f000 feda 	bl	800b798 <_Bfree>
 800a9e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	1e2b      	subs	r3, r5, #0
 800a9ee:	bfb7      	itett	lt
 800a9f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a9f4:	2300      	movge	r3, #0
 800a9f6:	2201      	movlt	r2, #1
 800a9f8:	9303      	strlt	r3, [sp, #12]
 800a9fa:	bfa8      	it	ge
 800a9fc:	6033      	strge	r3, [r6, #0]
 800a9fe:	9f03      	ldr	r7, [sp, #12]
 800aa00:	4b97      	ldr	r3, [pc, #604]	@ (800ac60 <_dtoa_r+0x2d0>)
 800aa02:	bfb8      	it	lt
 800aa04:	6032      	strlt	r2, [r6, #0]
 800aa06:	43bb      	bics	r3, r7
 800aa08:	d112      	bne.n	800aa30 <_dtoa_r+0xa0>
 800aa0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa16:	4323      	orrs	r3, r4
 800aa18:	f000 854c 	beq.w	800b4b4 <_dtoa_r+0xb24>
 800aa1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa1e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac74 <_dtoa_r+0x2e4>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 854e 	beq.w	800b4c4 <_dtoa_r+0xb34>
 800aa28:	f10a 0303 	add.w	r3, sl, #3
 800aa2c:	f000 bd48 	b.w	800b4c0 <_dtoa_r+0xb30>
 800aa30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa34:	2200      	movs	r2, #0
 800aa36:	2300      	movs	r3, #0
 800aa38:	ec51 0b17 	vmov	r0, r1, d7
 800aa3c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa40:	f7f6 f856 	bl	8000af0 <__aeabi_dcmpeq>
 800aa44:	4680      	mov	r8, r0
 800aa46:	b158      	cbz	r0, 800aa60 <_dtoa_r+0xd0>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa50:	b113      	cbz	r3, 800aa58 <_dtoa_r+0xc8>
 800aa52:	4b84      	ldr	r3, [pc, #528]	@ (800ac64 <_dtoa_r+0x2d4>)
 800aa54:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ac78 <_dtoa_r+0x2e8>
 800aa5c:	f000 bd32 	b.w	800b4c4 <_dtoa_r+0xb34>
 800aa60:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa64:	aa16      	add	r2, sp, #88	@ 0x58
 800aa66:	a917      	add	r1, sp, #92	@ 0x5c
 800aa68:	4658      	mov	r0, fp
 800aa6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa6e:	f001 fa41 	bl	800bef4 <__d2b>
 800aa72:	4681      	mov	r9, r0
 800aa74:	2e00      	cmp	r6, #0
 800aa76:	d075      	beq.n	800ab64 <_dtoa_r+0x1d4>
 800aa78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa7a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa7e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa86:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa8e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa92:	4619      	mov	r1, r3
 800aa94:	2200      	movs	r2, #0
 800aa96:	4b74      	ldr	r3, [pc, #464]	@ (800ac68 <_dtoa_r+0x2d8>)
 800aa98:	f7f5 fc0a 	bl	80002b0 <__aeabi_dsub>
 800aa9c:	a368      	add	r3, pc, #416	@ (adr r3, 800ac40 <_dtoa_r+0x2b0>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f7f5 fdbd 	bl	8000620 <__aeabi_dmul>
 800aaa6:	a368      	add	r3, pc, #416	@ (adr r3, 800ac48 <_dtoa_r+0x2b8>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fc02 	bl	80002b4 <__adddf3>
 800aab0:	4604      	mov	r4, r0
 800aab2:	460d      	mov	r5, r1
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7f5 fd49 	bl	800054c <__aeabi_i2d>
 800aaba:	a365      	add	r3, pc, #404	@ (adr r3, 800ac50 <_dtoa_r+0x2c0>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fdae 	bl	8000620 <__aeabi_dmul>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f7f5 fbf2 	bl	80002b4 <__adddf3>
 800aad0:	4604      	mov	r4, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	f7f6 f854 	bl	8000b80 <__aeabi_d2iz>
 800aad8:	2200      	movs	r2, #0
 800aada:	4607      	mov	r7, r0
 800aadc:	2300      	movs	r3, #0
 800aade:	4620      	mov	r0, r4
 800aae0:	4629      	mov	r1, r5
 800aae2:	f7f6 f80f 	bl	8000b04 <__aeabi_dcmplt>
 800aae6:	b140      	cbz	r0, 800aafa <_dtoa_r+0x16a>
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7f5 fd2f 	bl	800054c <__aeabi_i2d>
 800aaee:	4622      	mov	r2, r4
 800aaf0:	462b      	mov	r3, r5
 800aaf2:	f7f5 fffd 	bl	8000af0 <__aeabi_dcmpeq>
 800aaf6:	b900      	cbnz	r0, 800aafa <_dtoa_r+0x16a>
 800aaf8:	3f01      	subs	r7, #1
 800aafa:	2f16      	cmp	r7, #22
 800aafc:	d851      	bhi.n	800aba2 <_dtoa_r+0x212>
 800aafe:	4b5b      	ldr	r3, [pc, #364]	@ (800ac6c <_dtoa_r+0x2dc>)
 800ab00:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f7f5 fffa 	bl	8000b04 <__aeabi_dcmplt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d048      	beq.n	800aba6 <_dtoa_r+0x216>
 800ab14:	3f01      	subs	r7, #1
 800ab16:	2300      	movs	r3, #0
 800ab18:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab1a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab1c:	1b9b      	subs	r3, r3, r6
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	bf46      	itte	mi
 800ab22:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab26:	2300      	movmi	r3, #0
 800ab28:	f04f 0800 	movpl.w	r8, #0
 800ab2c:	9208      	str	r2, [sp, #32]
 800ab2e:	bf48      	it	mi
 800ab30:	9308      	strmi	r3, [sp, #32]
 800ab32:	2f00      	cmp	r7, #0
 800ab34:	db39      	blt.n	800abaa <_dtoa_r+0x21a>
 800ab36:	9b08      	ldr	r3, [sp, #32]
 800ab38:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab3a:	443b      	add	r3, r7
 800ab3c:	9308      	str	r3, [sp, #32]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab44:	2b09      	cmp	r3, #9
 800ab46:	d864      	bhi.n	800ac12 <_dtoa_r+0x282>
 800ab48:	2b05      	cmp	r3, #5
 800ab4a:	bfc5      	ittet	gt
 800ab4c:	3b04      	subgt	r3, #4
 800ab4e:	2400      	movgt	r4, #0
 800ab50:	2401      	movle	r4, #1
 800ab52:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab56:	3b02      	subs	r3, #2
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d865      	bhi.n	800ac28 <_dtoa_r+0x298>
 800ab5c:	e8df f003 	tbb	[pc, r3]
 800ab60:	5737392c 	.word	0x5737392c
 800ab64:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab68:	441e      	add	r6, r3
 800ab6a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab6e:	2b20      	cmp	r3, #32
 800ab70:	bfc9      	itett	gt
 800ab72:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab76:	f1c3 0320 	rsble	r3, r3, #32
 800ab7a:	409f      	lslgt	r7, r3
 800ab7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab80:	bfd8      	it	le
 800ab82:	fa04 f003 	lslle.w	r0, r4, r3
 800ab86:	f106 36ff 	add.w	r6, r6, #4294967295
 800ab8a:	bfc4      	itt	gt
 800ab8c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab90:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab94:	f7f5 fcca 	bl	800052c <__aeabi_ui2d>
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab9e:	9214      	str	r2, [sp, #80]	@ 0x50
 800aba0:	e777      	b.n	800aa92 <_dtoa_r+0x102>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e7b8      	b.n	800ab18 <_dtoa_r+0x188>
 800aba6:	9012      	str	r0, [sp, #72]	@ 0x48
 800aba8:	e7b7      	b.n	800ab1a <_dtoa_r+0x18a>
 800abaa:	427b      	negs	r3, r7
 800abac:	eba8 0807 	sub.w	r8, r8, r7
 800abb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abb2:	2300      	movs	r3, #0
 800abb4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abb6:	e7c4      	b.n	800ab42 <_dtoa_r+0x1b2>
 800abb8:	2300      	movs	r3, #0
 800abba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dc35      	bgt.n	800ac2e <_dtoa_r+0x29e>
 800abc2:	2301      	movs	r3, #1
 800abc4:	461a      	mov	r2, r3
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	9307      	str	r3, [sp, #28]
 800abca:	920e      	str	r2, [sp, #56]	@ 0x38
 800abcc:	e00b      	b.n	800abe6 <_dtoa_r+0x256>
 800abce:	2301      	movs	r3, #1
 800abd0:	e7f3      	b.n	800abba <_dtoa_r+0x22a>
 800abd2:	2300      	movs	r3, #0
 800abd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abd8:	18fb      	adds	r3, r7, r3
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	2b01      	cmp	r3, #1
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	bfb8      	it	lt
 800abe4:	2301      	movlt	r3, #1
 800abe6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800abea:	2100      	movs	r1, #0
 800abec:	2204      	movs	r2, #4
 800abee:	f102 0514 	add.w	r5, r2, #20
 800abf2:	429d      	cmp	r5, r3
 800abf4:	d91f      	bls.n	800ac36 <_dtoa_r+0x2a6>
 800abf6:	6041      	str	r1, [r0, #4]
 800abf8:	4658      	mov	r0, fp
 800abfa:	f000 fd8d 	bl	800b718 <_Balloc>
 800abfe:	4682      	mov	sl, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d13b      	bne.n	800ac7c <_dtoa_r+0x2ec>
 800ac04:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <_dtoa_r+0x2e0>)
 800ac06:	4602      	mov	r2, r0
 800ac08:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac0c:	e6d7      	b.n	800a9be <_dtoa_r+0x2e>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e7e0      	b.n	800abd4 <_dtoa_r+0x244>
 800ac12:	2401      	movs	r4, #1
 800ac14:	2300      	movs	r3, #0
 800ac16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1e:	2200      	movs	r2, #0
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	9307      	str	r3, [sp, #28]
 800ac24:	2312      	movs	r3, #18
 800ac26:	e7d0      	b.n	800abca <_dtoa_r+0x23a>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac2c:	e7f5      	b.n	800ac1a <_dtoa_r+0x28a>
 800ac2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	9307      	str	r3, [sp, #28]
 800ac34:	e7d7      	b.n	800abe6 <_dtoa_r+0x256>
 800ac36:	3101      	adds	r1, #1
 800ac38:	0052      	lsls	r2, r2, #1
 800ac3a:	e7d8      	b.n	800abee <_dtoa_r+0x25e>
 800ac3c:	f3af 8000 	nop.w
 800ac40:	636f4361 	.word	0x636f4361
 800ac44:	3fd287a7 	.word	0x3fd287a7
 800ac48:	8b60c8b3 	.word	0x8b60c8b3
 800ac4c:	3fc68a28 	.word	0x3fc68a28
 800ac50:	509f79fb 	.word	0x509f79fb
 800ac54:	3fd34413 	.word	0x3fd34413
 800ac58:	0800e01e 	.word	0x0800e01e
 800ac5c:	0800e035 	.word	0x0800e035
 800ac60:	7ff00000 	.word	0x7ff00000
 800ac64:	0800dfe9 	.word	0x0800dfe9
 800ac68:	3ff80000 	.word	0x3ff80000
 800ac6c:	0800e130 	.word	0x0800e130
 800ac70:	0800e08d 	.word	0x0800e08d
 800ac74:	0800e01a 	.word	0x0800e01a
 800ac78:	0800dfe8 	.word	0x0800dfe8
 800ac7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac80:	6018      	str	r0, [r3, #0]
 800ac82:	9b07      	ldr	r3, [sp, #28]
 800ac84:	2b0e      	cmp	r3, #14
 800ac86:	f200 80a4 	bhi.w	800add2 <_dtoa_r+0x442>
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	f000 80a1 	beq.w	800add2 <_dtoa_r+0x442>
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	dd33      	ble.n	800acfc <_dtoa_r+0x36c>
 800ac94:	f007 020f 	and.w	r2, r7, #15
 800ac98:	4bac      	ldr	r3, [pc, #688]	@ (800af4c <_dtoa_r+0x5bc>)
 800ac9a:	05f8      	lsls	r0, r7, #23
 800ac9c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aca4:	ed93 7b00 	vldr	d7, [r3]
 800aca8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acac:	d516      	bpl.n	800acdc <_dtoa_r+0x34c>
 800acae:	4ba8      	ldr	r3, [pc, #672]	@ (800af50 <_dtoa_r+0x5c0>)
 800acb0:	f004 040f 	and.w	r4, r4, #15
 800acb4:	2603      	movs	r6, #3
 800acb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acbe:	f7f5 fdd9 	bl	8000874 <__aeabi_ddiv>
 800acc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc6:	4da2      	ldr	r5, [pc, #648]	@ (800af50 <_dtoa_r+0x5c0>)
 800acc8:	b954      	cbnz	r4, 800ace0 <_dtoa_r+0x350>
 800acca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd2:	f7f5 fdcf 	bl	8000874 <__aeabi_ddiv>
 800acd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acda:	e028      	b.n	800ad2e <_dtoa_r+0x39e>
 800acdc:	2602      	movs	r6, #2
 800acde:	e7f2      	b.n	800acc6 <_dtoa_r+0x336>
 800ace0:	07e1      	lsls	r1, r4, #31
 800ace2:	d508      	bpl.n	800acf6 <_dtoa_r+0x366>
 800ace4:	3601      	adds	r6, #1
 800ace6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acee:	f7f5 fc97 	bl	8000620 <__aeabi_dmul>
 800acf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acf6:	1064      	asrs	r4, r4, #1
 800acf8:	3508      	adds	r5, #8
 800acfa:	e7e5      	b.n	800acc8 <_dtoa_r+0x338>
 800acfc:	f000 80d2 	beq.w	800aea4 <_dtoa_r+0x514>
 800ad00:	427c      	negs	r4, r7
 800ad02:	4b92      	ldr	r3, [pc, #584]	@ (800af4c <_dtoa_r+0x5bc>)
 800ad04:	4d92      	ldr	r5, [pc, #584]	@ (800af50 <_dtoa_r+0x5c0>)
 800ad06:	2602      	movs	r6, #2
 800ad08:	f004 020f 	and.w	r2, r4, #15
 800ad0c:	1124      	asrs	r4, r4, #4
 800ad0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 fc81 	bl	8000620 <__aeabi_dmul>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad24:	2c00      	cmp	r4, #0
 800ad26:	f040 80b2 	bne.w	800ae8e <_dtoa_r+0x4fe>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1d3      	bne.n	800acd6 <_dtoa_r+0x346>
 800ad2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 80b7 	beq.w	800aea8 <_dtoa_r+0x518>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	4b85      	ldr	r3, [pc, #532]	@ (800af54 <_dtoa_r+0x5c4>)
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	f7f5 fedf 	bl	8000b04 <__aeabi_dcmplt>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f000 80ae 	beq.w	800aea8 <_dtoa_r+0x518>
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 80aa 	beq.w	800aea8 <_dtoa_r+0x518>
 800ad54:	9b00      	ldr	r3, [sp, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dd37      	ble.n	800adca <_dtoa_r+0x43a>
 800ad5a:	1e7b      	subs	r3, r7, #1
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4629      	mov	r1, r5
 800ad62:	9304      	str	r3, [sp, #16]
 800ad64:	3601      	adds	r6, #1
 800ad66:	4b7c      	ldr	r3, [pc, #496]	@ (800af58 <_dtoa_r+0x5c8>)
 800ad68:	f7f5 fc5a 	bl	8000620 <__aeabi_dmul>
 800ad6c:	9c00      	ldr	r4, [sp, #0]
 800ad6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7f5 fbea 	bl	800054c <__aeabi_i2d>
 800ad78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad7c:	f7f5 fc50 	bl	8000620 <__aeabi_dmul>
 800ad80:	2200      	movs	r2, #0
 800ad82:	4b76      	ldr	r3, [pc, #472]	@ (800af5c <_dtoa_r+0x5cc>)
 800ad84:	f7f5 fa96 	bl	80002b4 <__adddf3>
 800ad88:	4605      	mov	r5, r0
 800ad8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad8e:	2c00      	cmp	r4, #0
 800ad90:	f040 808d 	bne.w	800aeae <_dtoa_r+0x51e>
 800ad94:	2200      	movs	r2, #0
 800ad96:	4b72      	ldr	r3, [pc, #456]	@ (800af60 <_dtoa_r+0x5d0>)
 800ad98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9c:	f7f5 fa88 	bl	80002b0 <__aeabi_dsub>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ada8:	462a      	mov	r2, r5
 800adaa:	4633      	mov	r3, r6
 800adac:	f7f5 fec8 	bl	8000b40 <__aeabi_dcmpgt>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	f040 828b 	bne.w	800b2cc <_dtoa_r+0x93c>
 800adb6:	462a      	mov	r2, r5
 800adb8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800adbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc0:	f7f5 fea0 	bl	8000b04 <__aeabi_dcmplt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f040 8128 	bne.w	800b01a <_dtoa_r+0x68a>
 800adca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800adce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800add2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800add4:	2b00      	cmp	r3, #0
 800add6:	f2c0 815a 	blt.w	800b08e <_dtoa_r+0x6fe>
 800adda:	2f0e      	cmp	r7, #14
 800addc:	f300 8157 	bgt.w	800b08e <_dtoa_r+0x6fe>
 800ade0:	4b5a      	ldr	r3, [pc, #360]	@ (800af4c <_dtoa_r+0x5bc>)
 800ade2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ade6:	ed93 7b00 	vldr	d7, [r3]
 800adea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adec:	2b00      	cmp	r3, #0
 800adee:	ed8d 7b00 	vstr	d7, [sp]
 800adf2:	da03      	bge.n	800adfc <_dtoa_r+0x46c>
 800adf4:	9b07      	ldr	r3, [sp, #28]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f340 8101 	ble.w	800affe <_dtoa_r+0x66e>
 800adfc:	4656      	mov	r6, sl
 800adfe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae06:	4620      	mov	r0, r4
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7f5 fd33 	bl	8000874 <__aeabi_ddiv>
 800ae0e:	f7f5 feb7 	bl	8000b80 <__aeabi_d2iz>
 800ae12:	4680      	mov	r8, r0
 800ae14:	f7f5 fb9a 	bl	800054c <__aeabi_i2d>
 800ae18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae1c:	f7f5 fc00 	bl	8000620 <__aeabi_dmul>
 800ae20:	4602      	mov	r2, r0
 800ae22:	4620      	mov	r0, r4
 800ae24:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	f7f5 fa40 	bl	80002b0 <__aeabi_dsub>
 800ae30:	9d07      	ldr	r5, [sp, #28]
 800ae32:	f806 4b01 	strb.w	r4, [r6], #1
 800ae36:	eba6 040a 	sub.w	r4, r6, sl
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	42a5      	cmp	r5, r4
 800ae40:	f040 8117 	bne.w	800b072 <_dtoa_r+0x6e2>
 800ae44:	f7f5 fa36 	bl	80002b4 <__adddf3>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae50:	f7f5 fe76 	bl	8000b40 <__aeabi_dcmpgt>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f040 80f9 	bne.w	800b04c <_dtoa_r+0x6bc>
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae62:	f7f5 fe45 	bl	8000af0 <__aeabi_dcmpeq>
 800ae66:	b118      	cbz	r0, 800ae70 <_dtoa_r+0x4e0>
 800ae68:	f018 0f01 	tst.w	r8, #1
 800ae6c:	f040 80ee 	bne.w	800b04c <_dtoa_r+0x6bc>
 800ae70:	4649      	mov	r1, r9
 800ae72:	4658      	mov	r0, fp
 800ae74:	f000 fc90 	bl	800b798 <_Bfree>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	3701      	adds	r7, #1
 800ae7c:	7033      	strb	r3, [r6, #0]
 800ae7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae80:	601f      	str	r7, [r3, #0]
 800ae82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 831d 	beq.w	800b4c4 <_dtoa_r+0xb34>
 800ae8a:	601e      	str	r6, [r3, #0]
 800ae8c:	e31a      	b.n	800b4c4 <_dtoa_r+0xb34>
 800ae8e:	07e2      	lsls	r2, r4, #31
 800ae90:	d505      	bpl.n	800ae9e <_dtoa_r+0x50e>
 800ae92:	3601      	adds	r6, #1
 800ae94:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae98:	f7f5 fbc2 	bl	8000620 <__aeabi_dmul>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	1064      	asrs	r4, r4, #1
 800aea0:	3508      	adds	r5, #8
 800aea2:	e73f      	b.n	800ad24 <_dtoa_r+0x394>
 800aea4:	2602      	movs	r6, #2
 800aea6:	e742      	b.n	800ad2e <_dtoa_r+0x39e>
 800aea8:	9c07      	ldr	r4, [sp, #28]
 800aeaa:	9704      	str	r7, [sp, #16]
 800aeac:	e761      	b.n	800ad72 <_dtoa_r+0x3e2>
 800aeae:	4b27      	ldr	r3, [pc, #156]	@ (800af4c <_dtoa_r+0x5bc>)
 800aeb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aeb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aeb6:	4454      	add	r4, sl
 800aeb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aebc:	2900      	cmp	r1, #0
 800aebe:	d053      	beq.n	800af68 <_dtoa_r+0x5d8>
 800aec0:	2000      	movs	r0, #0
 800aec2:	4928      	ldr	r1, [pc, #160]	@ (800af64 <_dtoa_r+0x5d4>)
 800aec4:	f7f5 fcd6 	bl	8000874 <__aeabi_ddiv>
 800aec8:	4633      	mov	r3, r6
 800aeca:	4656      	mov	r6, sl
 800aecc:	462a      	mov	r2, r5
 800aece:	f7f5 f9ef 	bl	80002b0 <__aeabi_dsub>
 800aed2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeda:	f7f5 fe51 	bl	8000b80 <__aeabi_d2iz>
 800aede:	4605      	mov	r5, r0
 800aee0:	f7f5 fb34 	bl	800054c <__aeabi_i2d>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	3530      	adds	r5, #48	@ 0x30
 800aeea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeee:	f7f5 f9df 	bl	80002b0 <__aeabi_dsub>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	f806 5b01 	strb.w	r5, [r6], #1
 800aefa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aefe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af02:	f7f5 fdff 	bl	8000b04 <__aeabi_dcmplt>
 800af06:	2800      	cmp	r0, #0
 800af08:	d171      	bne.n	800afee <_dtoa_r+0x65e>
 800af0a:	2000      	movs	r0, #0
 800af0c:	4911      	ldr	r1, [pc, #68]	@ (800af54 <_dtoa_r+0x5c4>)
 800af0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af12:	f7f5 f9cd 	bl	80002b0 <__aeabi_dsub>
 800af16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af1a:	f7f5 fdf3 	bl	8000b04 <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f040 8095 	bne.w	800b04e <_dtoa_r+0x6be>
 800af24:	42a6      	cmp	r6, r4
 800af26:	f43f af50 	beq.w	800adca <_dtoa_r+0x43a>
 800af2a:	2200      	movs	r2, #0
 800af2c:	4b0a      	ldr	r3, [pc, #40]	@ (800af58 <_dtoa_r+0x5c8>)
 800af2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af32:	f7f5 fb75 	bl	8000620 <__aeabi_dmul>
 800af36:	2200      	movs	r2, #0
 800af38:	4b07      	ldr	r3, [pc, #28]	@ (800af58 <_dtoa_r+0x5c8>)
 800af3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af42:	f7f5 fb6d 	bl	8000620 <__aeabi_dmul>
 800af46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af4a:	e7c4      	b.n	800aed6 <_dtoa_r+0x546>
 800af4c:	0800e130 	.word	0x0800e130
 800af50:	0800e108 	.word	0x0800e108
 800af54:	3ff00000 	.word	0x3ff00000
 800af58:	40240000 	.word	0x40240000
 800af5c:	401c0000 	.word	0x401c0000
 800af60:	40140000 	.word	0x40140000
 800af64:	3fe00000 	.word	0x3fe00000
 800af68:	4631      	mov	r1, r6
 800af6a:	4656      	mov	r6, sl
 800af6c:	4628      	mov	r0, r5
 800af6e:	f7f5 fb57 	bl	8000620 <__aeabi_dmul>
 800af72:	9415      	str	r4, [sp, #84]	@ 0x54
 800af74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af7c:	f7f5 fe00 	bl	8000b80 <__aeabi_d2iz>
 800af80:	4605      	mov	r5, r0
 800af82:	f7f5 fae3 	bl	800054c <__aeabi_i2d>
 800af86:	4602      	mov	r2, r0
 800af88:	3530      	adds	r5, #48	@ 0x30
 800af8a:	460b      	mov	r3, r1
 800af8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af90:	f7f5 f98e 	bl	80002b0 <__aeabi_dsub>
 800af94:	f806 5b01 	strb.w	r5, [r6], #1
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	42a6      	cmp	r6, r4
 800af9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afa2:	f04f 0200 	mov.w	r2, #0
 800afa6:	d124      	bne.n	800aff2 <_dtoa_r+0x662>
 800afa8:	4bac      	ldr	r3, [pc, #688]	@ (800b25c <_dtoa_r+0x8cc>)
 800afaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800afae:	f7f5 f981 	bl	80002b4 <__adddf3>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afba:	f7f5 fdc1 	bl	8000b40 <__aeabi_dcmpgt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d145      	bne.n	800b04e <_dtoa_r+0x6be>
 800afc2:	2000      	movs	r0, #0
 800afc4:	49a5      	ldr	r1, [pc, #660]	@ (800b25c <_dtoa_r+0x8cc>)
 800afc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800afca:	f7f5 f971 	bl	80002b0 <__aeabi_dsub>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd6:	f7f5 fd95 	bl	8000b04 <__aeabi_dcmplt>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f43f aef5 	beq.w	800adca <_dtoa_r+0x43a>
 800afe0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800afe2:	1e73      	subs	r3, r6, #1
 800afe4:	9315      	str	r3, [sp, #84]	@ 0x54
 800afe6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afea:	2b30      	cmp	r3, #48	@ 0x30
 800afec:	d0f8      	beq.n	800afe0 <_dtoa_r+0x650>
 800afee:	9f04      	ldr	r7, [sp, #16]
 800aff0:	e73e      	b.n	800ae70 <_dtoa_r+0x4e0>
 800aff2:	4b9b      	ldr	r3, [pc, #620]	@ (800b260 <_dtoa_r+0x8d0>)
 800aff4:	f7f5 fb14 	bl	8000620 <__aeabi_dmul>
 800aff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800affc:	e7bc      	b.n	800af78 <_dtoa_r+0x5e8>
 800affe:	d10c      	bne.n	800b01a <_dtoa_r+0x68a>
 800b000:	2200      	movs	r2, #0
 800b002:	4b98      	ldr	r3, [pc, #608]	@ (800b264 <_dtoa_r+0x8d4>)
 800b004:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b008:	f7f5 fb0a 	bl	8000620 <__aeabi_dmul>
 800b00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b010:	f7f5 fd8c 	bl	8000b2c <__aeabi_dcmpge>
 800b014:	2800      	cmp	r0, #0
 800b016:	f000 8157 	beq.w	800b2c8 <_dtoa_r+0x938>
 800b01a:	2400      	movs	r4, #0
 800b01c:	4625      	mov	r5, r4
 800b01e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b020:	4656      	mov	r6, sl
 800b022:	43db      	mvns	r3, r3
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	2700      	movs	r7, #0
 800b028:	4621      	mov	r1, r4
 800b02a:	4658      	mov	r0, fp
 800b02c:	f000 fbb4 	bl	800b798 <_Bfree>
 800b030:	2d00      	cmp	r5, #0
 800b032:	d0dc      	beq.n	800afee <_dtoa_r+0x65e>
 800b034:	b12f      	cbz	r7, 800b042 <_dtoa_r+0x6b2>
 800b036:	42af      	cmp	r7, r5
 800b038:	d003      	beq.n	800b042 <_dtoa_r+0x6b2>
 800b03a:	4639      	mov	r1, r7
 800b03c:	4658      	mov	r0, fp
 800b03e:	f000 fbab 	bl	800b798 <_Bfree>
 800b042:	4629      	mov	r1, r5
 800b044:	4658      	mov	r0, fp
 800b046:	f000 fba7 	bl	800b798 <_Bfree>
 800b04a:	e7d0      	b.n	800afee <_dtoa_r+0x65e>
 800b04c:	9704      	str	r7, [sp, #16]
 800b04e:	4633      	mov	r3, r6
 800b050:	461e      	mov	r6, r3
 800b052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b056:	2a39      	cmp	r2, #57	@ 0x39
 800b058:	d107      	bne.n	800b06a <_dtoa_r+0x6da>
 800b05a:	459a      	cmp	sl, r3
 800b05c:	d1f8      	bne.n	800b050 <_dtoa_r+0x6c0>
 800b05e:	9a04      	ldr	r2, [sp, #16]
 800b060:	3201      	adds	r2, #1
 800b062:	9204      	str	r2, [sp, #16]
 800b064:	2230      	movs	r2, #48	@ 0x30
 800b066:	f88a 2000 	strb.w	r2, [sl]
 800b06a:	781a      	ldrb	r2, [r3, #0]
 800b06c:	3201      	adds	r2, #1
 800b06e:	701a      	strb	r2, [r3, #0]
 800b070:	e7bd      	b.n	800afee <_dtoa_r+0x65e>
 800b072:	2200      	movs	r2, #0
 800b074:	4b7a      	ldr	r3, [pc, #488]	@ (800b260 <_dtoa_r+0x8d0>)
 800b076:	f7f5 fad3 	bl	8000620 <__aeabi_dmul>
 800b07a:	2200      	movs	r2, #0
 800b07c:	2300      	movs	r3, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	f7f5 fd35 	bl	8000af0 <__aeabi_dcmpeq>
 800b086:	2800      	cmp	r0, #0
 800b088:	f43f aebb 	beq.w	800ae02 <_dtoa_r+0x472>
 800b08c:	e6f0      	b.n	800ae70 <_dtoa_r+0x4e0>
 800b08e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b090:	2a00      	cmp	r2, #0
 800b092:	f000 80db 	beq.w	800b24c <_dtoa_r+0x8bc>
 800b096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b098:	2a01      	cmp	r2, #1
 800b09a:	f300 80bf 	bgt.w	800b21c <_dtoa_r+0x88c>
 800b09e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	f000 80b7 	beq.w	800b214 <_dtoa_r+0x884>
 800b0a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0ac:	4646      	mov	r6, r8
 800b0ae:	9a08      	ldr	r2, [sp, #32]
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	4658      	mov	r0, fp
 800b0b4:	4498      	add	r8, r3
 800b0b6:	441a      	add	r2, r3
 800b0b8:	9208      	str	r2, [sp, #32]
 800b0ba:	f000 fc6d 	bl	800b998 <__i2b>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b15e      	cbz	r6, 800b0da <_dtoa_r+0x74a>
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd08      	ble.n	800b0da <_dtoa_r+0x74a>
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	9a08      	ldr	r2, [sp, #32]
 800b0cc:	bfa8      	it	ge
 800b0ce:	4633      	movge	r3, r6
 800b0d0:	eba8 0803 	sub.w	r8, r8, r3
 800b0d4:	1af6      	subs	r6, r6, r3
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	9308      	str	r3, [sp, #32]
 800b0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0dc:	b1f3      	cbz	r3, 800b11c <_dtoa_r+0x78c>
 800b0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80b7 	beq.w	800b254 <_dtoa_r+0x8c4>
 800b0e6:	b18c      	cbz	r4, 800b10c <_dtoa_r+0x77c>
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4658      	mov	r0, fp
 800b0ee:	f000 fd13 	bl	800bb18 <__pow5mult>
 800b0f2:	464a      	mov	r2, r9
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	f000 fc63 	bl	800b9c4 <__multiply>
 800b0fe:	4649      	mov	r1, r9
 800b100:	9004      	str	r0, [sp, #16]
 800b102:	4658      	mov	r0, fp
 800b104:	f000 fb48 	bl	800b798 <_Bfree>
 800b108:	9b04      	ldr	r3, [sp, #16]
 800b10a:	4699      	mov	r9, r3
 800b10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b10e:	1b1a      	subs	r2, r3, r4
 800b110:	d004      	beq.n	800b11c <_dtoa_r+0x78c>
 800b112:	4649      	mov	r1, r9
 800b114:	4658      	mov	r0, fp
 800b116:	f000 fcff 	bl	800bb18 <__pow5mult>
 800b11a:	4681      	mov	r9, r0
 800b11c:	2101      	movs	r1, #1
 800b11e:	4658      	mov	r0, fp
 800b120:	f000 fc3a 	bl	800b998 <__i2b>
 800b124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b126:	4604      	mov	r4, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 81cf 	beq.w	800b4cc <_dtoa_r+0xb3c>
 800b12e:	461a      	mov	r2, r3
 800b130:	4601      	mov	r1, r0
 800b132:	4658      	mov	r0, fp
 800b134:	f000 fcf0 	bl	800bb18 <__pow5mult>
 800b138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b13a:	4604      	mov	r4, r0
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	f300 8095 	bgt.w	800b26c <_dtoa_r+0x8dc>
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f040 8087 	bne.w	800b258 <_dtoa_r+0x8c8>
 800b14a:	9b03      	ldr	r3, [sp, #12]
 800b14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b150:	2b00      	cmp	r3, #0
 800b152:	f040 8089 	bne.w	800b268 <_dtoa_r+0x8d8>
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b15c:	0d1b      	lsrs	r3, r3, #20
 800b15e:	051b      	lsls	r3, r3, #20
 800b160:	b12b      	cbz	r3, 800b16e <_dtoa_r+0x7de>
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	f108 0801 	add.w	r8, r8, #1
 800b168:	3301      	adds	r3, #1
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	2301      	movs	r3, #1
 800b16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 81b0 	beq.w	800b4d8 <_dtoa_r+0xb48>
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b17e:	6918      	ldr	r0, [r3, #16]
 800b180:	f000 fbbe 	bl	800b900 <__hi0bits>
 800b184:	f1c0 0020 	rsb	r0, r0, #32
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	4418      	add	r0, r3
 800b18c:	f010 001f 	ands.w	r0, r0, #31
 800b190:	d077      	beq.n	800b282 <_dtoa_r+0x8f2>
 800b192:	f1c0 0320 	rsb	r3, r0, #32
 800b196:	2b04      	cmp	r3, #4
 800b198:	dd6b      	ble.n	800b272 <_dtoa_r+0x8e2>
 800b19a:	f1c0 001c 	rsb	r0, r0, #28
 800b19e:	9b08      	ldr	r3, [sp, #32]
 800b1a0:	4480      	add	r8, r0
 800b1a2:	4403      	add	r3, r0
 800b1a4:	4406      	add	r6, r0
 800b1a6:	9308      	str	r3, [sp, #32]
 800b1a8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ac:	dd05      	ble.n	800b1ba <_dtoa_r+0x82a>
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	4658      	mov	r0, fp
 800b1b4:	f000 fd0a 	bl	800bbcc <__lshift>
 800b1b8:	4681      	mov	r9, r0
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dd05      	ble.n	800b1cc <_dtoa_r+0x83c>
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4658      	mov	r0, fp
 800b1c6:	f000 fd01 	bl	800bbcc <__lshift>
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d059      	beq.n	800b286 <_dtoa_r+0x8f6>
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4648      	mov	r0, r9
 800b1d6:	f000 fd65 	bl	800bca4 <__mcmp>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	da53      	bge.n	800b286 <_dtoa_r+0x8f6>
 800b1de:	1e7b      	subs	r3, r7, #1
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	220a      	movs	r2, #10
 800b1e4:	4658      	mov	r0, fp
 800b1e6:	9304      	str	r3, [sp, #16]
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f000 faf7 	bl	800b7dc <__multadd>
 800b1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1f0:	4681      	mov	r9, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8172 	beq.w	800b4dc <_dtoa_r+0xb4c>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	4658      	mov	r0, fp
 800b200:	f000 faec 	bl	800b7dc <__multadd>
 800b204:	9b00      	ldr	r3, [sp, #0]
 800b206:	4605      	mov	r5, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dc67      	bgt.n	800b2dc <_dtoa_r+0x94c>
 800b20c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b20e:	2b02      	cmp	r3, #2
 800b210:	dc41      	bgt.n	800b296 <_dtoa_r+0x906>
 800b212:	e063      	b.n	800b2dc <_dtoa_r+0x94c>
 800b214:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b216:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b21a:	e746      	b.n	800b0aa <_dtoa_r+0x71a>
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	1e5c      	subs	r4, r3, #1
 800b220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b222:	42a3      	cmp	r3, r4
 800b224:	bfb7      	itett	lt
 800b226:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b228:	1b1c      	subge	r4, r3, r4
 800b22a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b22c:	1ae3      	sublt	r3, r4, r3
 800b22e:	bfbe      	ittt	lt
 800b230:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b232:	2400      	movlt	r4, #0
 800b234:	18d2      	addlt	r2, r2, r3
 800b236:	9b07      	ldr	r3, [sp, #28]
 800b238:	bfb8      	it	lt
 800b23a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bfb5      	itete	lt
 800b240:	eba8 0603 	sublt.w	r6, r8, r3
 800b244:	4646      	movge	r6, r8
 800b246:	2300      	movlt	r3, #0
 800b248:	9b07      	ldrge	r3, [sp, #28]
 800b24a:	e730      	b.n	800b0ae <_dtoa_r+0x71e>
 800b24c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b24e:	4646      	mov	r6, r8
 800b250:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b252:	e735      	b.n	800b0c0 <_dtoa_r+0x730>
 800b254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b256:	e75c      	b.n	800b112 <_dtoa_r+0x782>
 800b258:	2300      	movs	r3, #0
 800b25a:	e788      	b.n	800b16e <_dtoa_r+0x7de>
 800b25c:	3fe00000 	.word	0x3fe00000
 800b260:	40240000 	.word	0x40240000
 800b264:	40140000 	.word	0x40140000
 800b268:	9b02      	ldr	r3, [sp, #8]
 800b26a:	e780      	b.n	800b16e <_dtoa_r+0x7de>
 800b26c:	2300      	movs	r3, #0
 800b26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b270:	e782      	b.n	800b178 <_dtoa_r+0x7e8>
 800b272:	d099      	beq.n	800b1a8 <_dtoa_r+0x818>
 800b274:	331c      	adds	r3, #28
 800b276:	9a08      	ldr	r2, [sp, #32]
 800b278:	441a      	add	r2, r3
 800b27a:	4498      	add	r8, r3
 800b27c:	441e      	add	r6, r3
 800b27e:	9208      	str	r2, [sp, #32]
 800b280:	e792      	b.n	800b1a8 <_dtoa_r+0x818>
 800b282:	4603      	mov	r3, r0
 800b284:	e7f6      	b.n	800b274 <_dtoa_r+0x8e4>
 800b286:	9b07      	ldr	r3, [sp, #28]
 800b288:	9704      	str	r7, [sp, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dc20      	bgt.n	800b2d0 <_dtoa_r+0x940>
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b292:	2b02      	cmp	r3, #2
 800b294:	dd1e      	ble.n	800b2d4 <_dtoa_r+0x944>
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f aec0 	bne.w	800b01e <_dtoa_r+0x68e>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	2205      	movs	r2, #5
 800b2a2:	4658      	mov	r0, fp
 800b2a4:	f000 fa9a 	bl	800b7dc <__multadd>
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4648      	mov	r0, r9
 800b2ae:	f000 fcf9 	bl	800bca4 <__mcmp>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	f77f aeb3 	ble.w	800b01e <_dtoa_r+0x68e>
 800b2b8:	2331      	movs	r3, #49	@ 0x31
 800b2ba:	4656      	mov	r6, sl
 800b2bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b2c0:	9b04      	ldr	r3, [sp, #16]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	9304      	str	r3, [sp, #16]
 800b2c6:	e6ae      	b.n	800b026 <_dtoa_r+0x696>
 800b2c8:	9c07      	ldr	r4, [sp, #28]
 800b2ca:	9704      	str	r7, [sp, #16]
 800b2cc:	4625      	mov	r5, r4
 800b2ce:	e7f3      	b.n	800b2b8 <_dtoa_r+0x928>
 800b2d0:	9b07      	ldr	r3, [sp, #28]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 8104 	beq.w	800b4e4 <_dtoa_r+0xb54>
 800b2dc:	2e00      	cmp	r6, #0
 800b2de:	dd05      	ble.n	800b2ec <_dtoa_r+0x95c>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	4658      	mov	r0, fp
 800b2e6:	f000 fc71 	bl	800bbcc <__lshift>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d05a      	beq.n	800b3a8 <_dtoa_r+0xa18>
 800b2f2:	6869      	ldr	r1, [r5, #4]
 800b2f4:	4658      	mov	r0, fp
 800b2f6:	f000 fa0f 	bl	800b718 <_Balloc>
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	b928      	cbnz	r0, 800b30a <_dtoa_r+0x97a>
 800b2fe:	4b84      	ldr	r3, [pc, #528]	@ (800b510 <_dtoa_r+0xb80>)
 800b300:	4602      	mov	r2, r0
 800b302:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b306:	f7ff bb5a 	b.w	800a9be <_dtoa_r+0x2e>
 800b30a:	692a      	ldr	r2, [r5, #16]
 800b30c:	f105 010c 	add.w	r1, r5, #12
 800b310:	300c      	adds	r0, #12
 800b312:	3202      	adds	r2, #2
 800b314:	0092      	lsls	r2, r2, #2
 800b316:	f002 f957 	bl	800d5c8 <memcpy>
 800b31a:	2201      	movs	r2, #1
 800b31c:	4631      	mov	r1, r6
 800b31e:	4658      	mov	r0, fp
 800b320:	f000 fc54 	bl	800bbcc <__lshift>
 800b324:	f10a 0301 	add.w	r3, sl, #1
 800b328:	462f      	mov	r7, r5
 800b32a:	4605      	mov	r5, r0
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	9b00      	ldr	r3, [sp, #0]
 800b330:	4453      	add	r3, sl
 800b332:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b334:	9b02      	ldr	r3, [sp, #8]
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b33c:	9b07      	ldr	r3, [sp, #28]
 800b33e:	4621      	mov	r1, r4
 800b340:	4648      	mov	r0, r9
 800b342:	3b01      	subs	r3, #1
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	f7ff fa95 	bl	800a874 <quorem>
 800b34a:	4639      	mov	r1, r7
 800b34c:	9002      	str	r0, [sp, #8]
 800b34e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b352:	4648      	mov	r0, r9
 800b354:	f000 fca6 	bl	800bca4 <__mcmp>
 800b358:	462a      	mov	r2, r5
 800b35a:	9008      	str	r0, [sp, #32]
 800b35c:	4621      	mov	r1, r4
 800b35e:	4658      	mov	r0, fp
 800b360:	f000 fcbc 	bl	800bcdc <__mdiff>
 800b364:	68c2      	ldr	r2, [r0, #12]
 800b366:	4606      	mov	r6, r0
 800b368:	bb02      	cbnz	r2, 800b3ac <_dtoa_r+0xa1c>
 800b36a:	4601      	mov	r1, r0
 800b36c:	4648      	mov	r0, r9
 800b36e:	f000 fc99 	bl	800bca4 <__mcmp>
 800b372:	4602      	mov	r2, r0
 800b374:	4631      	mov	r1, r6
 800b376:	4658      	mov	r0, fp
 800b378:	920e      	str	r2, [sp, #56]	@ 0x38
 800b37a:	f000 fa0d 	bl	800b798 <_Bfree>
 800b37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b382:	9e07      	ldr	r6, [sp, #28]
 800b384:	ea43 0102 	orr.w	r1, r3, r2
 800b388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b38a:	4319      	orrs	r1, r3
 800b38c:	d110      	bne.n	800b3b0 <_dtoa_r+0xa20>
 800b38e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b392:	d029      	beq.n	800b3e8 <_dtoa_r+0xa58>
 800b394:	9b08      	ldr	r3, [sp, #32]
 800b396:	2b00      	cmp	r3, #0
 800b398:	dd02      	ble.n	800b3a0 <_dtoa_r+0xa10>
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3a0:	9b00      	ldr	r3, [sp, #0]
 800b3a2:	f883 8000 	strb.w	r8, [r3]
 800b3a6:	e63f      	b.n	800b028 <_dtoa_r+0x698>
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	e7bb      	b.n	800b324 <_dtoa_r+0x994>
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	e7e1      	b.n	800b374 <_dtoa_r+0x9e4>
 800b3b0:	9b08      	ldr	r3, [sp, #32]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	db04      	blt.n	800b3c0 <_dtoa_r+0xa30>
 800b3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3b8:	430b      	orrs	r3, r1
 800b3ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	d120      	bne.n	800b402 <_dtoa_r+0xa72>
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	dded      	ble.n	800b3a0 <_dtoa_r+0xa10>
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4658      	mov	r0, fp
 800b3ca:	f000 fbff 	bl	800bbcc <__lshift>
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	4681      	mov	r9, r0
 800b3d2:	f000 fc67 	bl	800bca4 <__mcmp>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	dc03      	bgt.n	800b3e2 <_dtoa_r+0xa52>
 800b3da:	d1e1      	bne.n	800b3a0 <_dtoa_r+0xa10>
 800b3dc:	f018 0f01 	tst.w	r8, #1
 800b3e0:	d0de      	beq.n	800b3a0 <_dtoa_r+0xa10>
 800b3e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3e6:	d1d8      	bne.n	800b39a <_dtoa_r+0xa0a>
 800b3e8:	2339      	movs	r3, #57	@ 0x39
 800b3ea:	9a00      	ldr	r2, [sp, #0]
 800b3ec:	7013      	strb	r3, [r2, #0]
 800b3ee:	4633      	mov	r3, r6
 800b3f0:	461e      	mov	r6, r3
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b3f8:	2a39      	cmp	r2, #57	@ 0x39
 800b3fa:	d052      	beq.n	800b4a2 <_dtoa_r+0xb12>
 800b3fc:	3201      	adds	r2, #1
 800b3fe:	701a      	strb	r2, [r3, #0]
 800b400:	e612      	b.n	800b028 <_dtoa_r+0x698>
 800b402:	2a00      	cmp	r2, #0
 800b404:	dd07      	ble.n	800b416 <_dtoa_r+0xa86>
 800b406:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b40a:	d0ed      	beq.n	800b3e8 <_dtoa_r+0xa58>
 800b40c:	f108 0301 	add.w	r3, r8, #1
 800b410:	9a00      	ldr	r2, [sp, #0]
 800b412:	7013      	strb	r3, [r2, #0]
 800b414:	e608      	b.n	800b028 <_dtoa_r+0x698>
 800b416:	9b07      	ldr	r3, [sp, #28]
 800b418:	9a07      	ldr	r2, [sp, #28]
 800b41a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b420:	4293      	cmp	r3, r2
 800b422:	d028      	beq.n	800b476 <_dtoa_r+0xae6>
 800b424:	4649      	mov	r1, r9
 800b426:	2300      	movs	r3, #0
 800b428:	220a      	movs	r2, #10
 800b42a:	4658      	mov	r0, fp
 800b42c:	f000 f9d6 	bl	800b7dc <__multadd>
 800b430:	42af      	cmp	r7, r5
 800b432:	4681      	mov	r9, r0
 800b434:	f04f 0300 	mov.w	r3, #0
 800b438:	f04f 020a 	mov.w	r2, #10
 800b43c:	4639      	mov	r1, r7
 800b43e:	4658      	mov	r0, fp
 800b440:	d107      	bne.n	800b452 <_dtoa_r+0xac2>
 800b442:	f000 f9cb 	bl	800b7dc <__multadd>
 800b446:	4607      	mov	r7, r0
 800b448:	4605      	mov	r5, r0
 800b44a:	9b07      	ldr	r3, [sp, #28]
 800b44c:	3301      	adds	r3, #1
 800b44e:	9307      	str	r3, [sp, #28]
 800b450:	e774      	b.n	800b33c <_dtoa_r+0x9ac>
 800b452:	f000 f9c3 	bl	800b7dc <__multadd>
 800b456:	4629      	mov	r1, r5
 800b458:	4607      	mov	r7, r0
 800b45a:	2300      	movs	r3, #0
 800b45c:	220a      	movs	r2, #10
 800b45e:	4658      	mov	r0, fp
 800b460:	f000 f9bc 	bl	800b7dc <__multadd>
 800b464:	4605      	mov	r5, r0
 800b466:	e7f0      	b.n	800b44a <_dtoa_r+0xaba>
 800b468:	9b00      	ldr	r3, [sp, #0]
 800b46a:	2700      	movs	r7, #0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bfcc      	ite	gt
 800b470:	461e      	movgt	r6, r3
 800b472:	2601      	movle	r6, #1
 800b474:	4456      	add	r6, sl
 800b476:	4649      	mov	r1, r9
 800b478:	2201      	movs	r2, #1
 800b47a:	4658      	mov	r0, fp
 800b47c:	f000 fba6 	bl	800bbcc <__lshift>
 800b480:	4621      	mov	r1, r4
 800b482:	4681      	mov	r9, r0
 800b484:	f000 fc0e 	bl	800bca4 <__mcmp>
 800b488:	2800      	cmp	r0, #0
 800b48a:	dcb0      	bgt.n	800b3ee <_dtoa_r+0xa5e>
 800b48c:	d102      	bne.n	800b494 <_dtoa_r+0xb04>
 800b48e:	f018 0f01 	tst.w	r8, #1
 800b492:	d1ac      	bne.n	800b3ee <_dtoa_r+0xa5e>
 800b494:	4633      	mov	r3, r6
 800b496:	461e      	mov	r6, r3
 800b498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b49c:	2a30      	cmp	r2, #48	@ 0x30
 800b49e:	d0fa      	beq.n	800b496 <_dtoa_r+0xb06>
 800b4a0:	e5c2      	b.n	800b028 <_dtoa_r+0x698>
 800b4a2:	459a      	cmp	sl, r3
 800b4a4:	d1a4      	bne.n	800b3f0 <_dtoa_r+0xa60>
 800b4a6:	9b04      	ldr	r3, [sp, #16]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	2331      	movs	r3, #49	@ 0x31
 800b4ae:	f88a 3000 	strb.w	r3, [sl]
 800b4b2:	e5b9      	b.n	800b028 <_dtoa_r+0x698>
 800b4b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b514 <_dtoa_r+0xb84>
 800b4ba:	b11b      	cbz	r3, 800b4c4 <_dtoa_r+0xb34>
 800b4bc:	f10a 0308 	add.w	r3, sl, #8
 800b4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	4650      	mov	r0, sl
 800b4c6:	b019      	add	sp, #100	@ 0x64
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	f77f ae37 	ble.w	800b142 <_dtoa_r+0x7b2>
 800b4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4d8:	2001      	movs	r0, #1
 800b4da:	e655      	b.n	800b188 <_dtoa_r+0x7f8>
 800b4dc:	9b00      	ldr	r3, [sp, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f77f aed6 	ble.w	800b290 <_dtoa_r+0x900>
 800b4e4:	4656      	mov	r6, sl
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	4648      	mov	r0, r9
 800b4ea:	f7ff f9c3 	bl	800a874 <quorem>
 800b4ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	f806 8b01 	strb.w	r8, [r6], #1
 800b4f8:	eba6 020a 	sub.w	r2, r6, sl
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	ddb3      	ble.n	800b468 <_dtoa_r+0xad8>
 800b500:	4649      	mov	r1, r9
 800b502:	2300      	movs	r3, #0
 800b504:	220a      	movs	r2, #10
 800b506:	4658      	mov	r0, fp
 800b508:	f000 f968 	bl	800b7dc <__multadd>
 800b50c:	4681      	mov	r9, r0
 800b50e:	e7ea      	b.n	800b4e6 <_dtoa_r+0xb56>
 800b510:	0800e08d 	.word	0x0800e08d
 800b514:	0800e011 	.word	0x0800e011

0800b518 <_free_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	4605      	mov	r5, r0
 800b51c:	2900      	cmp	r1, #0
 800b51e:	d041      	beq.n	800b5a4 <_free_r+0x8c>
 800b520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b524:	1f0c      	subs	r4, r1, #4
 800b526:	2b00      	cmp	r3, #0
 800b528:	bfb8      	it	lt
 800b52a:	18e4      	addlt	r4, r4, r3
 800b52c:	f000 f8e8 	bl	800b700 <__malloc_lock>
 800b530:	4a1d      	ldr	r2, [pc, #116]	@ (800b5a8 <_free_r+0x90>)
 800b532:	6813      	ldr	r3, [r2, #0]
 800b534:	b933      	cbnz	r3, 800b544 <_free_r+0x2c>
 800b536:	6063      	str	r3, [r4, #4]
 800b538:	6014      	str	r4, [r2, #0]
 800b53a:	4628      	mov	r0, r5
 800b53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b540:	f000 b8e4 	b.w	800b70c <__malloc_unlock>
 800b544:	42a3      	cmp	r3, r4
 800b546:	d908      	bls.n	800b55a <_free_r+0x42>
 800b548:	6820      	ldr	r0, [r4, #0]
 800b54a:	1821      	adds	r1, r4, r0
 800b54c:	428b      	cmp	r3, r1
 800b54e:	bf01      	itttt	eq
 800b550:	6819      	ldreq	r1, [r3, #0]
 800b552:	685b      	ldreq	r3, [r3, #4]
 800b554:	1809      	addeq	r1, r1, r0
 800b556:	6021      	streq	r1, [r4, #0]
 800b558:	e7ed      	b.n	800b536 <_free_r+0x1e>
 800b55a:	461a      	mov	r2, r3
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	b10b      	cbz	r3, 800b564 <_free_r+0x4c>
 800b560:	42a3      	cmp	r3, r4
 800b562:	d9fa      	bls.n	800b55a <_free_r+0x42>
 800b564:	6811      	ldr	r1, [r2, #0]
 800b566:	1850      	adds	r0, r2, r1
 800b568:	42a0      	cmp	r0, r4
 800b56a:	d10b      	bne.n	800b584 <_free_r+0x6c>
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	4401      	add	r1, r0
 800b570:	1850      	adds	r0, r2, r1
 800b572:	6011      	str	r1, [r2, #0]
 800b574:	4283      	cmp	r3, r0
 800b576:	d1e0      	bne.n	800b53a <_free_r+0x22>
 800b578:	6818      	ldr	r0, [r3, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	4408      	add	r0, r1
 800b57e:	6053      	str	r3, [r2, #4]
 800b580:	6010      	str	r0, [r2, #0]
 800b582:	e7da      	b.n	800b53a <_free_r+0x22>
 800b584:	d902      	bls.n	800b58c <_free_r+0x74>
 800b586:	230c      	movs	r3, #12
 800b588:	602b      	str	r3, [r5, #0]
 800b58a:	e7d6      	b.n	800b53a <_free_r+0x22>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	1821      	adds	r1, r4, r0
 800b590:	428b      	cmp	r3, r1
 800b592:	bf02      	ittt	eq
 800b594:	6819      	ldreq	r1, [r3, #0]
 800b596:	685b      	ldreq	r3, [r3, #4]
 800b598:	1809      	addeq	r1, r1, r0
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	bf08      	it	eq
 800b59e:	6021      	streq	r1, [r4, #0]
 800b5a0:	6054      	str	r4, [r2, #4]
 800b5a2:	e7ca      	b.n	800b53a <_free_r+0x22>
 800b5a4:	bd38      	pop	{r3, r4, r5, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000570 	.word	0x20000570

0800b5ac <malloc>:
 800b5ac:	4b02      	ldr	r3, [pc, #8]	@ (800b5b8 <malloc+0xc>)
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	f000 b825 	b.w	800b600 <_malloc_r>
 800b5b6:	bf00      	nop
 800b5b8:	20000030 	.word	0x20000030

0800b5bc <sbrk_aligned>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	4e0f      	ldr	r6, [pc, #60]	@ (800b5fc <sbrk_aligned+0x40>)
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	6831      	ldr	r1, [r6, #0]
 800b5c6:	b911      	cbnz	r1, 800b5ce <sbrk_aligned+0x12>
 800b5c8:	f001 ffee 	bl	800d5a8 <_sbrk_r>
 800b5cc:	6030      	str	r0, [r6, #0]
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	f001 ffe9 	bl	800d5a8 <_sbrk_r>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	d103      	bne.n	800b5e2 <sbrk_aligned+0x26>
 800b5da:	f04f 34ff 	mov.w	r4, #4294967295
 800b5de:	4620      	mov	r0, r4
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
 800b5e2:	1cc4      	adds	r4, r0, #3
 800b5e4:	f024 0403 	bic.w	r4, r4, #3
 800b5e8:	42a0      	cmp	r0, r4
 800b5ea:	d0f8      	beq.n	800b5de <sbrk_aligned+0x22>
 800b5ec:	1a21      	subs	r1, r4, r0
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f001 ffda 	bl	800d5a8 <_sbrk_r>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d1f2      	bne.n	800b5de <sbrk_aligned+0x22>
 800b5f8:	e7ef      	b.n	800b5da <sbrk_aligned+0x1e>
 800b5fa:	bf00      	nop
 800b5fc:	2000056c 	.word	0x2000056c

0800b600 <_malloc_r>:
 800b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b604:	1ccd      	adds	r5, r1, #3
 800b606:	4606      	mov	r6, r0
 800b608:	f025 0503 	bic.w	r5, r5, #3
 800b60c:	3508      	adds	r5, #8
 800b60e:	2d0c      	cmp	r5, #12
 800b610:	bf38      	it	cc
 800b612:	250c      	movcc	r5, #12
 800b614:	2d00      	cmp	r5, #0
 800b616:	db01      	blt.n	800b61c <_malloc_r+0x1c>
 800b618:	42a9      	cmp	r1, r5
 800b61a:	d904      	bls.n	800b626 <_malloc_r+0x26>
 800b61c:	230c      	movs	r3, #12
 800b61e:	6033      	str	r3, [r6, #0]
 800b620:	2000      	movs	r0, #0
 800b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6fc <_malloc_r+0xfc>
 800b62a:	f000 f869 	bl	800b700 <__malloc_lock>
 800b62e:	f8d8 3000 	ldr.w	r3, [r8]
 800b632:	461c      	mov	r4, r3
 800b634:	bb44      	cbnz	r4, 800b688 <_malloc_r+0x88>
 800b636:	4629      	mov	r1, r5
 800b638:	4630      	mov	r0, r6
 800b63a:	f7ff ffbf 	bl	800b5bc <sbrk_aligned>
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	4604      	mov	r4, r0
 800b642:	d158      	bne.n	800b6f6 <_malloc_r+0xf6>
 800b644:	f8d8 4000 	ldr.w	r4, [r8]
 800b648:	4627      	mov	r7, r4
 800b64a:	2f00      	cmp	r7, #0
 800b64c:	d143      	bne.n	800b6d6 <_malloc_r+0xd6>
 800b64e:	2c00      	cmp	r4, #0
 800b650:	d04b      	beq.n	800b6ea <_malloc_r+0xea>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	4639      	mov	r1, r7
 800b656:	4630      	mov	r0, r6
 800b658:	eb04 0903 	add.w	r9, r4, r3
 800b65c:	f001 ffa4 	bl	800d5a8 <_sbrk_r>
 800b660:	4581      	cmp	r9, r0
 800b662:	d142      	bne.n	800b6ea <_malloc_r+0xea>
 800b664:	6821      	ldr	r1, [r4, #0]
 800b666:	4630      	mov	r0, r6
 800b668:	1a6d      	subs	r5, r5, r1
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7ff ffa6 	bl	800b5bc <sbrk_aligned>
 800b670:	3001      	adds	r0, #1
 800b672:	d03a      	beq.n	800b6ea <_malloc_r+0xea>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	442b      	add	r3, r5
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	f8d8 3000 	ldr.w	r3, [r8]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	bb62      	cbnz	r2, 800b6dc <_malloc_r+0xdc>
 800b682:	f8c8 7000 	str.w	r7, [r8]
 800b686:	e00f      	b.n	800b6a8 <_malloc_r+0xa8>
 800b688:	6822      	ldr	r2, [r4, #0]
 800b68a:	1b52      	subs	r2, r2, r5
 800b68c:	d420      	bmi.n	800b6d0 <_malloc_r+0xd0>
 800b68e:	2a0b      	cmp	r2, #11
 800b690:	d917      	bls.n	800b6c2 <_malloc_r+0xc2>
 800b692:	1961      	adds	r1, r4, r5
 800b694:	42a3      	cmp	r3, r4
 800b696:	6025      	str	r5, [r4, #0]
 800b698:	bf18      	it	ne
 800b69a:	6059      	strne	r1, [r3, #4]
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	bf08      	it	eq
 800b6a0:	f8c8 1000 	streq.w	r1, [r8]
 800b6a4:	5162      	str	r2, [r4, r5]
 800b6a6:	604b      	str	r3, [r1, #4]
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f000 f82f 	bl	800b70c <__malloc_unlock>
 800b6ae:	f104 000b 	add.w	r0, r4, #11
 800b6b2:	1d23      	adds	r3, r4, #4
 800b6b4:	f020 0007 	bic.w	r0, r0, #7
 800b6b8:	1ac2      	subs	r2, r0, r3
 800b6ba:	bf1c      	itt	ne
 800b6bc:	1a1b      	subne	r3, r3, r0
 800b6be:	50a3      	strne	r3, [r4, r2]
 800b6c0:	e7af      	b.n	800b622 <_malloc_r+0x22>
 800b6c2:	6862      	ldr	r2, [r4, #4]
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	bf0c      	ite	eq
 800b6c8:	f8c8 2000 	streq.w	r2, [r8]
 800b6cc:	605a      	strne	r2, [r3, #4]
 800b6ce:	e7eb      	b.n	800b6a8 <_malloc_r+0xa8>
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	6864      	ldr	r4, [r4, #4]
 800b6d4:	e7ae      	b.n	800b634 <_malloc_r+0x34>
 800b6d6:	463c      	mov	r4, r7
 800b6d8:	687f      	ldr	r7, [r7, #4]
 800b6da:	e7b6      	b.n	800b64a <_malloc_r+0x4a>
 800b6dc:	461a      	mov	r2, r3
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d1fb      	bne.n	800b6dc <_malloc_r+0xdc>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	6053      	str	r3, [r2, #4]
 800b6e8:	e7de      	b.n	800b6a8 <_malloc_r+0xa8>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	6033      	str	r3, [r6, #0]
 800b6f0:	f000 f80c 	bl	800b70c <__malloc_unlock>
 800b6f4:	e794      	b.n	800b620 <_malloc_r+0x20>
 800b6f6:	6005      	str	r5, [r0, #0]
 800b6f8:	e7d6      	b.n	800b6a8 <_malloc_r+0xa8>
 800b6fa:	bf00      	nop
 800b6fc:	20000570 	.word	0x20000570

0800b700 <__malloc_lock>:
 800b700:	4801      	ldr	r0, [pc, #4]	@ (800b708 <__malloc_lock+0x8>)
 800b702:	f7ff b8a0 	b.w	800a846 <__retarget_lock_acquire_recursive>
 800b706:	bf00      	nop
 800b708:	20000568 	.word	0x20000568

0800b70c <__malloc_unlock>:
 800b70c:	4801      	ldr	r0, [pc, #4]	@ (800b714 <__malloc_unlock+0x8>)
 800b70e:	f7ff b89b 	b.w	800a848 <__retarget_lock_release_recursive>
 800b712:	bf00      	nop
 800b714:	20000568 	.word	0x20000568

0800b718 <_Balloc>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	69c6      	ldr	r6, [r0, #28]
 800b71c:	4604      	mov	r4, r0
 800b71e:	460d      	mov	r5, r1
 800b720:	b976      	cbnz	r6, 800b740 <_Balloc+0x28>
 800b722:	2010      	movs	r0, #16
 800b724:	f7ff ff42 	bl	800b5ac <malloc>
 800b728:	4602      	mov	r2, r0
 800b72a:	61e0      	str	r0, [r4, #28]
 800b72c:	b920      	cbnz	r0, 800b738 <_Balloc+0x20>
 800b72e:	4b18      	ldr	r3, [pc, #96]	@ (800b790 <_Balloc+0x78>)
 800b730:	216b      	movs	r1, #107	@ 0x6b
 800b732:	4818      	ldr	r0, [pc, #96]	@ (800b794 <_Balloc+0x7c>)
 800b734:	f001 ff60 	bl	800d5f8 <__assert_func>
 800b738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b73c:	6006      	str	r6, [r0, #0]
 800b73e:	60c6      	str	r6, [r0, #12]
 800b740:	69e6      	ldr	r6, [r4, #28]
 800b742:	68f3      	ldr	r3, [r6, #12]
 800b744:	b183      	cbz	r3, 800b768 <_Balloc+0x50>
 800b746:	69e3      	ldr	r3, [r4, #28]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b74e:	b9b8      	cbnz	r0, 800b780 <_Balloc+0x68>
 800b750:	2101      	movs	r1, #1
 800b752:	4620      	mov	r0, r4
 800b754:	fa01 f605 	lsl.w	r6, r1, r5
 800b758:	1d72      	adds	r2, r6, #5
 800b75a:	0092      	lsls	r2, r2, #2
 800b75c:	f001 ff6a 	bl	800d634 <_calloc_r>
 800b760:	b160      	cbz	r0, 800b77c <_Balloc+0x64>
 800b762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b766:	e00e      	b.n	800b786 <_Balloc+0x6e>
 800b768:	2221      	movs	r2, #33	@ 0x21
 800b76a:	2104      	movs	r1, #4
 800b76c:	4620      	mov	r0, r4
 800b76e:	f001 ff61 	bl	800d634 <_calloc_r>
 800b772:	69e3      	ldr	r3, [r4, #28]
 800b774:	60f0      	str	r0, [r6, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e4      	bne.n	800b746 <_Balloc+0x2e>
 800b77c:	2000      	movs	r0, #0
 800b77e:	bd70      	pop	{r4, r5, r6, pc}
 800b780:	6802      	ldr	r2, [r0, #0]
 800b782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b786:	2300      	movs	r3, #0
 800b788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b78c:	e7f7      	b.n	800b77e <_Balloc+0x66>
 800b78e:	bf00      	nop
 800b790:	0800e01e 	.word	0x0800e01e
 800b794:	0800e09e 	.word	0x0800e09e

0800b798 <_Bfree>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	69c6      	ldr	r6, [r0, #28]
 800b79c:	4605      	mov	r5, r0
 800b79e:	460c      	mov	r4, r1
 800b7a0:	b976      	cbnz	r6, 800b7c0 <_Bfree+0x28>
 800b7a2:	2010      	movs	r0, #16
 800b7a4:	f7ff ff02 	bl	800b5ac <malloc>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	61e8      	str	r0, [r5, #28]
 800b7ac:	b920      	cbnz	r0, 800b7b8 <_Bfree+0x20>
 800b7ae:	4b09      	ldr	r3, [pc, #36]	@ (800b7d4 <_Bfree+0x3c>)
 800b7b0:	218f      	movs	r1, #143	@ 0x8f
 800b7b2:	4809      	ldr	r0, [pc, #36]	@ (800b7d8 <_Bfree+0x40>)
 800b7b4:	f001 ff20 	bl	800d5f8 <__assert_func>
 800b7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7bc:	6006      	str	r6, [r0, #0]
 800b7be:	60c6      	str	r6, [r0, #12]
 800b7c0:	b13c      	cbz	r4, 800b7d2 <_Bfree+0x3a>
 800b7c2:	69eb      	ldr	r3, [r5, #28]
 800b7c4:	6862      	ldr	r2, [r4, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7cc:	6021      	str	r1, [r4, #0]
 800b7ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	0800e01e 	.word	0x0800e01e
 800b7d8:	0800e09e 	.word	0x0800e09e

0800b7dc <__multadd>:
 800b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e0:	f101 0c14 	add.w	ip, r1, #20
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	461e      	mov	r6, r3
 800b7ea:	690d      	ldr	r5, [r1, #16]
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	b299      	uxth	r1, r3
 800b7f6:	4285      	cmp	r5, r0
 800b7f8:	fb02 6101 	mla	r1, r2, r1, r6
 800b7fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b800:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b804:	b289      	uxth	r1, r1
 800b806:	fb02 3306 	mla	r3, r2, r6, r3
 800b80a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b80e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b812:	f84c 1b04 	str.w	r1, [ip], #4
 800b816:	dcea      	bgt.n	800b7ee <__multadd+0x12>
 800b818:	b30e      	cbz	r6, 800b85e <__multadd+0x82>
 800b81a:	68a3      	ldr	r3, [r4, #8]
 800b81c:	42ab      	cmp	r3, r5
 800b81e:	dc19      	bgt.n	800b854 <__multadd+0x78>
 800b820:	6861      	ldr	r1, [r4, #4]
 800b822:	4638      	mov	r0, r7
 800b824:	3101      	adds	r1, #1
 800b826:	f7ff ff77 	bl	800b718 <_Balloc>
 800b82a:	4680      	mov	r8, r0
 800b82c:	b928      	cbnz	r0, 800b83a <__multadd+0x5e>
 800b82e:	4602      	mov	r2, r0
 800b830:	4b0c      	ldr	r3, [pc, #48]	@ (800b864 <__multadd+0x88>)
 800b832:	21ba      	movs	r1, #186	@ 0xba
 800b834:	480c      	ldr	r0, [pc, #48]	@ (800b868 <__multadd+0x8c>)
 800b836:	f001 fedf 	bl	800d5f8 <__assert_func>
 800b83a:	6922      	ldr	r2, [r4, #16]
 800b83c:	f104 010c 	add.w	r1, r4, #12
 800b840:	300c      	adds	r0, #12
 800b842:	3202      	adds	r2, #2
 800b844:	0092      	lsls	r2, r2, #2
 800b846:	f001 febf 	bl	800d5c8 <memcpy>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4644      	mov	r4, r8
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff ffa2 	bl	800b798 <_Bfree>
 800b854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b858:	3501      	adds	r5, #1
 800b85a:	615e      	str	r6, [r3, #20]
 800b85c:	6125      	str	r5, [r4, #16]
 800b85e:	4620      	mov	r0, r4
 800b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b864:	0800e08d 	.word	0x0800e08d
 800b868:	0800e09e 	.word	0x0800e09e

0800b86c <__s2b>:
 800b86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b870:	4615      	mov	r5, r2
 800b872:	461f      	mov	r7, r3
 800b874:	2209      	movs	r2, #9
 800b876:	3308      	adds	r3, #8
 800b878:	460c      	mov	r4, r1
 800b87a:	4606      	mov	r6, r0
 800b87c:	2100      	movs	r1, #0
 800b87e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b882:	2201      	movs	r2, #1
 800b884:	429a      	cmp	r2, r3
 800b886:	db09      	blt.n	800b89c <__s2b+0x30>
 800b888:	4630      	mov	r0, r6
 800b88a:	f7ff ff45 	bl	800b718 <_Balloc>
 800b88e:	b940      	cbnz	r0, 800b8a2 <__s2b+0x36>
 800b890:	4602      	mov	r2, r0
 800b892:	4b19      	ldr	r3, [pc, #100]	@ (800b8f8 <__s2b+0x8c>)
 800b894:	21d3      	movs	r1, #211	@ 0xd3
 800b896:	4819      	ldr	r0, [pc, #100]	@ (800b8fc <__s2b+0x90>)
 800b898:	f001 feae 	bl	800d5f8 <__assert_func>
 800b89c:	0052      	lsls	r2, r2, #1
 800b89e:	3101      	adds	r1, #1
 800b8a0:	e7f0      	b.n	800b884 <__s2b+0x18>
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	2d09      	cmp	r5, #9
 800b8a6:	6143      	str	r3, [r0, #20]
 800b8a8:	f04f 0301 	mov.w	r3, #1
 800b8ac:	6103      	str	r3, [r0, #16]
 800b8ae:	dd16      	ble.n	800b8de <__s2b+0x72>
 800b8b0:	f104 0909 	add.w	r9, r4, #9
 800b8b4:	442c      	add	r4, r5
 800b8b6:	46c8      	mov	r8, r9
 800b8b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8bc:	4601      	mov	r1, r0
 800b8be:	220a      	movs	r2, #10
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	3b30      	subs	r3, #48	@ 0x30
 800b8c4:	f7ff ff8a 	bl	800b7dc <__multadd>
 800b8c8:	45a0      	cmp	r8, r4
 800b8ca:	d1f5      	bne.n	800b8b8 <__s2b+0x4c>
 800b8cc:	f1a5 0408 	sub.w	r4, r5, #8
 800b8d0:	444c      	add	r4, r9
 800b8d2:	1b2d      	subs	r5, r5, r4
 800b8d4:	1963      	adds	r3, r4, r5
 800b8d6:	42bb      	cmp	r3, r7
 800b8d8:	db04      	blt.n	800b8e4 <__s2b+0x78>
 800b8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8de:	340a      	adds	r4, #10
 800b8e0:	2509      	movs	r5, #9
 800b8e2:	e7f6      	b.n	800b8d2 <__s2b+0x66>
 800b8e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8e8:	4601      	mov	r1, r0
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	3b30      	subs	r3, #48	@ 0x30
 800b8f0:	f7ff ff74 	bl	800b7dc <__multadd>
 800b8f4:	e7ee      	b.n	800b8d4 <__s2b+0x68>
 800b8f6:	bf00      	nop
 800b8f8:	0800e08d 	.word	0x0800e08d
 800b8fc:	0800e09e 	.word	0x0800e09e

0800b900 <__hi0bits>:
 800b900:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b904:	4603      	mov	r3, r0
 800b906:	bf36      	itet	cc
 800b908:	0403      	lslcc	r3, r0, #16
 800b90a:	2000      	movcs	r0, #0
 800b90c:	2010      	movcc	r0, #16
 800b90e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b912:	bf3c      	itt	cc
 800b914:	021b      	lslcc	r3, r3, #8
 800b916:	3008      	addcc	r0, #8
 800b918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b91c:	bf3c      	itt	cc
 800b91e:	011b      	lslcc	r3, r3, #4
 800b920:	3004      	addcc	r0, #4
 800b922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b926:	bf3c      	itt	cc
 800b928:	009b      	lslcc	r3, r3, #2
 800b92a:	3002      	addcc	r0, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db05      	blt.n	800b93c <__hi0bits+0x3c>
 800b930:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b934:	f100 0001 	add.w	r0, r0, #1
 800b938:	bf08      	it	eq
 800b93a:	2020      	moveq	r0, #32
 800b93c:	4770      	bx	lr

0800b93e <__lo0bits>:
 800b93e:	6803      	ldr	r3, [r0, #0]
 800b940:	4602      	mov	r2, r0
 800b942:	f013 0007 	ands.w	r0, r3, #7
 800b946:	d00b      	beq.n	800b960 <__lo0bits+0x22>
 800b948:	07d9      	lsls	r1, r3, #31
 800b94a:	d421      	bmi.n	800b990 <__lo0bits+0x52>
 800b94c:	0798      	lsls	r0, r3, #30
 800b94e:	bf47      	ittee	mi
 800b950:	085b      	lsrmi	r3, r3, #1
 800b952:	2001      	movmi	r0, #1
 800b954:	089b      	lsrpl	r3, r3, #2
 800b956:	2002      	movpl	r0, #2
 800b958:	bf4c      	ite	mi
 800b95a:	6013      	strmi	r3, [r2, #0]
 800b95c:	6013      	strpl	r3, [r2, #0]
 800b95e:	4770      	bx	lr
 800b960:	b299      	uxth	r1, r3
 800b962:	b909      	cbnz	r1, 800b968 <__lo0bits+0x2a>
 800b964:	0c1b      	lsrs	r3, r3, #16
 800b966:	2010      	movs	r0, #16
 800b968:	b2d9      	uxtb	r1, r3
 800b96a:	b909      	cbnz	r1, 800b970 <__lo0bits+0x32>
 800b96c:	3008      	adds	r0, #8
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	0719      	lsls	r1, r3, #28
 800b972:	bf04      	itt	eq
 800b974:	091b      	lsreq	r3, r3, #4
 800b976:	3004      	addeq	r0, #4
 800b978:	0799      	lsls	r1, r3, #30
 800b97a:	bf04      	itt	eq
 800b97c:	089b      	lsreq	r3, r3, #2
 800b97e:	3002      	addeq	r0, #2
 800b980:	07d9      	lsls	r1, r3, #31
 800b982:	d403      	bmi.n	800b98c <__lo0bits+0x4e>
 800b984:	085b      	lsrs	r3, r3, #1
 800b986:	f100 0001 	add.w	r0, r0, #1
 800b98a:	d003      	beq.n	800b994 <__lo0bits+0x56>
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	4770      	bx	lr
 800b990:	2000      	movs	r0, #0
 800b992:	4770      	bx	lr
 800b994:	2020      	movs	r0, #32
 800b996:	4770      	bx	lr

0800b998 <__i2b>:
 800b998:	b510      	push	{r4, lr}
 800b99a:	460c      	mov	r4, r1
 800b99c:	2101      	movs	r1, #1
 800b99e:	f7ff febb 	bl	800b718 <_Balloc>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	b928      	cbnz	r0, 800b9b2 <__i2b+0x1a>
 800b9a6:	4b05      	ldr	r3, [pc, #20]	@ (800b9bc <__i2b+0x24>)
 800b9a8:	f240 1145 	movw	r1, #325	@ 0x145
 800b9ac:	4804      	ldr	r0, [pc, #16]	@ (800b9c0 <__i2b+0x28>)
 800b9ae:	f001 fe23 	bl	800d5f8 <__assert_func>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	6144      	str	r4, [r0, #20]
 800b9b6:	6103      	str	r3, [r0, #16]
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0800e08d 	.word	0x0800e08d
 800b9c0:	0800e09e 	.word	0x0800e09e

0800b9c4 <__multiply>:
 800b9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	690a      	ldr	r2, [r1, #16]
 800b9cc:	460f      	mov	r7, r1
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	bfa2      	ittt	ge
 800b9d6:	4623      	movge	r3, r4
 800b9d8:	460c      	movge	r4, r1
 800b9da:	461f      	movge	r7, r3
 800b9dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b9e6:	6861      	ldr	r1, [r4, #4]
 800b9e8:	eb0a 0609 	add.w	r6, sl, r9
 800b9ec:	42b3      	cmp	r3, r6
 800b9ee:	bfb8      	it	lt
 800b9f0:	3101      	addlt	r1, #1
 800b9f2:	f7ff fe91 	bl	800b718 <_Balloc>
 800b9f6:	b930      	cbnz	r0, 800ba06 <__multiply+0x42>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	4b45      	ldr	r3, [pc, #276]	@ (800bb10 <__multiply+0x14c>)
 800b9fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba00:	4844      	ldr	r0, [pc, #272]	@ (800bb14 <__multiply+0x150>)
 800ba02:	f001 fdf9 	bl	800d5f8 <__assert_func>
 800ba06:	f100 0514 	add.w	r5, r0, #20
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba10:	462b      	mov	r3, r5
 800ba12:	4543      	cmp	r3, r8
 800ba14:	d321      	bcc.n	800ba5a <__multiply+0x96>
 800ba16:	f107 0114 	add.w	r1, r7, #20
 800ba1a:	f104 0214 	add.w	r2, r4, #20
 800ba1e:	f104 0715 	add.w	r7, r4, #21
 800ba22:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba26:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	1b13      	subs	r3, r2, r4
 800ba2e:	3b15      	subs	r3, #21
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	3304      	adds	r3, #4
 800ba36:	42ba      	cmp	r2, r7
 800ba38:	bf38      	it	cc
 800ba3a:	2304      	movcc	r3, #4
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	9b02      	ldr	r3, [sp, #8]
 800ba40:	9103      	str	r1, [sp, #12]
 800ba42:	428b      	cmp	r3, r1
 800ba44:	d80c      	bhi.n	800ba60 <__multiply+0x9c>
 800ba46:	2e00      	cmp	r6, #0
 800ba48:	dd03      	ble.n	800ba52 <__multiply+0x8e>
 800ba4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d05b      	beq.n	800bb0a <__multiply+0x146>
 800ba52:	6106      	str	r6, [r0, #16]
 800ba54:	b005      	add	sp, #20
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5a:	f843 2b04 	str.w	r2, [r3], #4
 800ba5e:	e7d8      	b.n	800ba12 <__multiply+0x4e>
 800ba60:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba64:	f1ba 0f00 	cmp.w	sl, #0
 800ba68:	d024      	beq.n	800bab4 <__multiply+0xf0>
 800ba6a:	f104 0e14 	add.w	lr, r4, #20
 800ba6e:	46a9      	mov	r9, r5
 800ba70:	f04f 0c00 	mov.w	ip, #0
 800ba74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba78:	f8d9 3000 	ldr.w	r3, [r9]
 800ba7c:	fa1f fb87 	uxth.w	fp, r7
 800ba80:	4572      	cmp	r2, lr
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ba8c:	f8d9 7000 	ldr.w	r7, [r9]
 800ba90:	4463      	add	r3, ip
 800ba92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ba96:	fb0a c70b 	mla	r7, sl, fp, ip
 800ba9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800baa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800baa8:	f849 3b04 	str.w	r3, [r9], #4
 800baac:	d8e2      	bhi.n	800ba74 <__multiply+0xb0>
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	f845 c003 	str.w	ip, [r5, r3]
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	3104      	adds	r1, #4
 800bab8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800babc:	f1b9 0f00 	cmp.w	r9, #0
 800bac0:	d021      	beq.n	800bb06 <__multiply+0x142>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	f104 0c14 	add.w	ip, r4, #20
 800bac8:	46ae      	mov	lr, r5
 800baca:	f04f 0a00 	mov.w	sl, #0
 800bace:	f8bc b000 	ldrh.w	fp, [ip]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bad8:	fb09 770b 	mla	r7, r9, fp, r7
 800badc:	4457      	add	r7, sl
 800bade:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bae2:	f84e 3b04 	str.w	r3, [lr], #4
 800bae6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800baea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baee:	f8be 3000 	ldrh.w	r3, [lr]
 800baf2:	4562      	cmp	r2, ip
 800baf4:	fb09 330a 	mla	r3, r9, sl, r3
 800baf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bafc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb00:	d8e5      	bhi.n	800bace <__multiply+0x10a>
 800bb02:	9f01      	ldr	r7, [sp, #4]
 800bb04:	51eb      	str	r3, [r5, r7]
 800bb06:	3504      	adds	r5, #4
 800bb08:	e799      	b.n	800ba3e <__multiply+0x7a>
 800bb0a:	3e01      	subs	r6, #1
 800bb0c:	e79b      	b.n	800ba46 <__multiply+0x82>
 800bb0e:	bf00      	nop
 800bb10:	0800e08d 	.word	0x0800e08d
 800bb14:	0800e09e 	.word	0x0800e09e

0800bb18 <__pow5mult>:
 800bb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb1c:	4615      	mov	r5, r2
 800bb1e:	f012 0203 	ands.w	r2, r2, #3
 800bb22:	4607      	mov	r7, r0
 800bb24:	460e      	mov	r6, r1
 800bb26:	d007      	beq.n	800bb38 <__pow5mult+0x20>
 800bb28:	3a01      	subs	r2, #1
 800bb2a:	4c25      	ldr	r4, [pc, #148]	@ (800bbc0 <__pow5mult+0xa8>)
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb32:	f7ff fe53 	bl	800b7dc <__multadd>
 800bb36:	4606      	mov	r6, r0
 800bb38:	10ad      	asrs	r5, r5, #2
 800bb3a:	d03d      	beq.n	800bbb8 <__pow5mult+0xa0>
 800bb3c:	69fc      	ldr	r4, [r7, #28]
 800bb3e:	b97c      	cbnz	r4, 800bb60 <__pow5mult+0x48>
 800bb40:	2010      	movs	r0, #16
 800bb42:	f7ff fd33 	bl	800b5ac <malloc>
 800bb46:	4602      	mov	r2, r0
 800bb48:	61f8      	str	r0, [r7, #28]
 800bb4a:	b928      	cbnz	r0, 800bb58 <__pow5mult+0x40>
 800bb4c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbc4 <__pow5mult+0xac>)
 800bb4e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb52:	481d      	ldr	r0, [pc, #116]	@ (800bbc8 <__pow5mult+0xb0>)
 800bb54:	f001 fd50 	bl	800d5f8 <__assert_func>
 800bb58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb5c:	6004      	str	r4, [r0, #0]
 800bb5e:	60c4      	str	r4, [r0, #12]
 800bb60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb68:	b94c      	cbnz	r4, 800bb7e <__pow5mult+0x66>
 800bb6a:	f240 2171 	movw	r1, #625	@ 0x271
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f7ff ff12 	bl	800b998 <__i2b>
 800bb74:	2300      	movs	r3, #0
 800bb76:	4604      	mov	r4, r0
 800bb78:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	07eb      	lsls	r3, r5, #31
 800bb84:	d50a      	bpl.n	800bb9c <__pow5mult+0x84>
 800bb86:	4631      	mov	r1, r6
 800bb88:	4622      	mov	r2, r4
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	f7ff ff1a 	bl	800b9c4 <__multiply>
 800bb90:	4680      	mov	r8, r0
 800bb92:	4631      	mov	r1, r6
 800bb94:	4638      	mov	r0, r7
 800bb96:	4646      	mov	r6, r8
 800bb98:	f7ff fdfe 	bl	800b798 <_Bfree>
 800bb9c:	106d      	asrs	r5, r5, #1
 800bb9e:	d00b      	beq.n	800bbb8 <__pow5mult+0xa0>
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	b938      	cbnz	r0, 800bbb4 <__pow5mult+0x9c>
 800bba4:	4622      	mov	r2, r4
 800bba6:	4621      	mov	r1, r4
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ff0b 	bl	800b9c4 <__multiply>
 800bbae:	6020      	str	r0, [r4, #0]
 800bbb0:	f8c0 9000 	str.w	r9, [r0]
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	e7e4      	b.n	800bb82 <__pow5mult+0x6a>
 800bbb8:	4630      	mov	r0, r6
 800bbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0800e0f8 	.word	0x0800e0f8
 800bbc4:	0800e01e 	.word	0x0800e01e
 800bbc8:	0800e09e 	.word	0x0800e09e

0800bbcc <__lshift>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	460c      	mov	r4, r1
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	4691      	mov	r9, r2
 800bbd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	6849      	ldr	r1, [r1, #4]
 800bbde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	f108 0601 	add.w	r6, r8, #1
 800bbe8:	42b3      	cmp	r3, r6
 800bbea:	db0b      	blt.n	800bc04 <__lshift+0x38>
 800bbec:	4638      	mov	r0, r7
 800bbee:	f7ff fd93 	bl	800b718 <_Balloc>
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	b948      	cbnz	r0, 800bc0a <__lshift+0x3e>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	4b28      	ldr	r3, [pc, #160]	@ (800bc9c <__lshift+0xd0>)
 800bbfa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbfe:	4828      	ldr	r0, [pc, #160]	@ (800bca0 <__lshift+0xd4>)
 800bc00:	f001 fcfa 	bl	800d5f8 <__assert_func>
 800bc04:	3101      	adds	r1, #1
 800bc06:	005b      	lsls	r3, r3, #1
 800bc08:	e7ee      	b.n	800bbe8 <__lshift+0x1c>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f100 0114 	add.w	r1, r0, #20
 800bc10:	f100 0210 	add.w	r2, r0, #16
 800bc14:	4618      	mov	r0, r3
 800bc16:	4553      	cmp	r3, sl
 800bc18:	db33      	blt.n	800bc82 <__lshift+0xb6>
 800bc1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc1e:	f104 0314 	add.w	r3, r4, #20
 800bc22:	6920      	ldr	r0, [r4, #16]
 800bc24:	f019 091f 	ands.w	r9, r9, #31
 800bc28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc30:	d02b      	beq.n	800bc8a <__lshift+0xbe>
 800bc32:	f1c9 0e20 	rsb	lr, r9, #32
 800bc36:	468a      	mov	sl, r1
 800bc38:	2200      	movs	r2, #0
 800bc3a:	6818      	ldr	r0, [r3, #0]
 800bc3c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc40:	4310      	orrs	r0, r2
 800bc42:	f84a 0b04 	str.w	r0, [sl], #4
 800bc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4a:	459c      	cmp	ip, r3
 800bc4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc50:	d8f3      	bhi.n	800bc3a <__lshift+0x6e>
 800bc52:	ebac 0304 	sub.w	r3, ip, r4
 800bc56:	f104 0015 	add.w	r0, r4, #21
 800bc5a:	3b15      	subs	r3, #21
 800bc5c:	f023 0303 	bic.w	r3, r3, #3
 800bc60:	3304      	adds	r3, #4
 800bc62:	4584      	cmp	ip, r0
 800bc64:	bf38      	it	cc
 800bc66:	2304      	movcc	r3, #4
 800bc68:	50ca      	str	r2, [r1, r3]
 800bc6a:	b10a      	cbz	r2, 800bc70 <__lshift+0xa4>
 800bc6c:	f108 0602 	add.w	r6, r8, #2
 800bc70:	3e01      	subs	r6, #1
 800bc72:	4638      	mov	r0, r7
 800bc74:	4621      	mov	r1, r4
 800bc76:	612e      	str	r6, [r5, #16]
 800bc78:	f7ff fd8e 	bl	800b798 <_Bfree>
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc82:	3301      	adds	r3, #1
 800bc84:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc88:	e7c5      	b.n	800bc16 <__lshift+0x4a>
 800bc8a:	3904      	subs	r1, #4
 800bc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc90:	459c      	cmp	ip, r3
 800bc92:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc96:	d8f9      	bhi.n	800bc8c <__lshift+0xc0>
 800bc98:	e7ea      	b.n	800bc70 <__lshift+0xa4>
 800bc9a:	bf00      	nop
 800bc9c:	0800e08d 	.word	0x0800e08d
 800bca0:	0800e09e 	.word	0x0800e09e

0800bca4 <__mcmp>:
 800bca4:	4603      	mov	r3, r0
 800bca6:	690a      	ldr	r2, [r1, #16]
 800bca8:	6900      	ldr	r0, [r0, #16]
 800bcaa:	1a80      	subs	r0, r0, r2
 800bcac:	b530      	push	{r4, r5, lr}
 800bcae:	d10e      	bne.n	800bcce <__mcmp+0x2a>
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	3114      	adds	r1, #20
 800bcb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcc4:	4295      	cmp	r5, r2
 800bcc6:	d003      	beq.n	800bcd0 <__mcmp+0x2c>
 800bcc8:	d205      	bcs.n	800bcd6 <__mcmp+0x32>
 800bcca:	f04f 30ff 	mov.w	r0, #4294967295
 800bcce:	bd30      	pop	{r4, r5, pc}
 800bcd0:	42a3      	cmp	r3, r4
 800bcd2:	d3f3      	bcc.n	800bcbc <__mcmp+0x18>
 800bcd4:	e7fb      	b.n	800bcce <__mcmp+0x2a>
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	e7f9      	b.n	800bcce <__mcmp+0x2a>
	...

0800bcdc <__mdiff>:
 800bcdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce0:	4689      	mov	r9, r1
 800bce2:	4606      	mov	r6, r0
 800bce4:	4611      	mov	r1, r2
 800bce6:	4614      	mov	r4, r2
 800bce8:	4648      	mov	r0, r9
 800bcea:	f7ff ffdb 	bl	800bca4 <__mcmp>
 800bcee:	1e05      	subs	r5, r0, #0
 800bcf0:	d112      	bne.n	800bd18 <__mdiff+0x3c>
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f7ff fd0f 	bl	800b718 <_Balloc>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	b928      	cbnz	r0, 800bd0a <__mdiff+0x2e>
 800bcfe:	4b41      	ldr	r3, [pc, #260]	@ (800be04 <__mdiff+0x128>)
 800bd00:	f240 2137 	movw	r1, #567	@ 0x237
 800bd04:	4840      	ldr	r0, [pc, #256]	@ (800be08 <__mdiff+0x12c>)
 800bd06:	f001 fc77 	bl	800d5f8 <__assert_func>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd10:	4610      	mov	r0, r2
 800bd12:	b003      	add	sp, #12
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd18:	bfbc      	itt	lt
 800bd1a:	464b      	movlt	r3, r9
 800bd1c:	46a1      	movlt	r9, r4
 800bd1e:	4630      	mov	r0, r6
 800bd20:	bfb8      	it	lt
 800bd22:	2501      	movlt	r5, #1
 800bd24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd28:	bfb4      	ite	lt
 800bd2a:	461c      	movlt	r4, r3
 800bd2c:	2500      	movge	r5, #0
 800bd2e:	f7ff fcf3 	bl	800b718 <_Balloc>
 800bd32:	4602      	mov	r2, r0
 800bd34:	b918      	cbnz	r0, 800bd3e <__mdiff+0x62>
 800bd36:	4b33      	ldr	r3, [pc, #204]	@ (800be04 <__mdiff+0x128>)
 800bd38:	f240 2145 	movw	r1, #581	@ 0x245
 800bd3c:	e7e2      	b.n	800bd04 <__mdiff+0x28>
 800bd3e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd42:	f104 0e14 	add.w	lr, r4, #20
 800bd46:	6926      	ldr	r6, [r4, #16]
 800bd48:	f100 0b14 	add.w	fp, r0, #20
 800bd4c:	60c5      	str	r5, [r0, #12]
 800bd4e:	f109 0514 	add.w	r5, r9, #20
 800bd52:	f109 0310 	add.w	r3, r9, #16
 800bd56:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd5a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd5e:	46d9      	mov	r9, fp
 800bd60:	f04f 0c00 	mov.w	ip, #0
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd6c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd70:	4576      	cmp	r6, lr
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	fa1f f38a 	uxth.w	r3, sl
 800bd78:	4619      	mov	r1, r3
 800bd7a:	b283      	uxth	r3, r0
 800bd7c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bd80:	eba1 0303 	sub.w	r3, r1, r3
 800bd84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd88:	4463      	add	r3, ip
 800bd8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd98:	f849 3b04 	str.w	r3, [r9], #4
 800bd9c:	d8e3      	bhi.n	800bd66 <__mdiff+0x8a>
 800bd9e:	1b33      	subs	r3, r6, r4
 800bda0:	3415      	adds	r4, #21
 800bda2:	3b15      	subs	r3, #21
 800bda4:	f023 0303 	bic.w	r3, r3, #3
 800bda8:	3304      	adds	r3, #4
 800bdaa:	42a6      	cmp	r6, r4
 800bdac:	bf38      	it	cc
 800bdae:	2304      	movcc	r3, #4
 800bdb0:	441d      	add	r5, r3
 800bdb2:	445b      	add	r3, fp
 800bdb4:	462c      	mov	r4, r5
 800bdb6:	461e      	mov	r6, r3
 800bdb8:	4544      	cmp	r4, r8
 800bdba:	d30e      	bcc.n	800bdda <__mdiff+0xfe>
 800bdbc:	f108 0103 	add.w	r1, r8, #3
 800bdc0:	1b49      	subs	r1, r1, r5
 800bdc2:	3d03      	subs	r5, #3
 800bdc4:	f021 0103 	bic.w	r1, r1, #3
 800bdc8:	45a8      	cmp	r8, r5
 800bdca:	bf38      	it	cc
 800bdcc:	2100      	movcc	r1, #0
 800bdce:	440b      	add	r3, r1
 800bdd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdd4:	b199      	cbz	r1, 800bdfe <__mdiff+0x122>
 800bdd6:	6117      	str	r7, [r2, #16]
 800bdd8:	e79a      	b.n	800bd10 <__mdiff+0x34>
 800bdda:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdde:	46e6      	mov	lr, ip
 800bde0:	fa1f fc81 	uxth.w	ip, r1
 800bde4:	0c08      	lsrs	r0, r1, #16
 800bde6:	4471      	add	r1, lr
 800bde8:	44f4      	add	ip, lr
 800bdea:	b289      	uxth	r1, r1
 800bdec:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bdf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdf8:	f846 1b04 	str.w	r1, [r6], #4
 800bdfc:	e7dc      	b.n	800bdb8 <__mdiff+0xdc>
 800bdfe:	3f01      	subs	r7, #1
 800be00:	e7e6      	b.n	800bdd0 <__mdiff+0xf4>
 800be02:	bf00      	nop
 800be04:	0800e08d 	.word	0x0800e08d
 800be08:	0800e09e 	.word	0x0800e09e

0800be0c <__ulp>:
 800be0c:	b082      	sub	sp, #8
 800be0e:	4b11      	ldr	r3, [pc, #68]	@ (800be54 <__ulp+0x48>)
 800be10:	ed8d 0b00 	vstr	d0, [sp]
 800be14:	9a01      	ldr	r2, [sp, #4]
 800be16:	4013      	ands	r3, r2
 800be18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dc08      	bgt.n	800be32 <__ulp+0x26>
 800be20:	425b      	negs	r3, r3
 800be22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be2a:	da04      	bge.n	800be36 <__ulp+0x2a>
 800be2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be30:	4113      	asrs	r3, r2
 800be32:	2200      	movs	r2, #0
 800be34:	e008      	b.n	800be48 <__ulp+0x3c>
 800be36:	f1a2 0314 	sub.w	r3, r2, #20
 800be3a:	2b1e      	cmp	r3, #30
 800be3c:	bfd6      	itet	le
 800be3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be42:	2201      	movgt	r2, #1
 800be44:	40da      	lsrle	r2, r3
 800be46:	2300      	movs	r3, #0
 800be48:	4619      	mov	r1, r3
 800be4a:	4610      	mov	r0, r2
 800be4c:	ec41 0b10 	vmov	d0, r0, r1
 800be50:	b002      	add	sp, #8
 800be52:	4770      	bx	lr
 800be54:	7ff00000 	.word	0x7ff00000

0800be58 <__b2d>:
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	6906      	ldr	r6, [r0, #16]
 800be5e:	f100 0814 	add.w	r8, r0, #20
 800be62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be66:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be6a:	1f37      	subs	r7, r6, #4
 800be6c:	4610      	mov	r0, r2
 800be6e:	f7ff fd47 	bl	800b900 <__hi0bits>
 800be72:	f1c0 0320 	rsb	r3, r0, #32
 800be76:	280a      	cmp	r0, #10
 800be78:	600b      	str	r3, [r1, #0]
 800be7a:	491d      	ldr	r1, [pc, #116]	@ (800bef0 <__b2d+0x98>)
 800be7c:	dc16      	bgt.n	800beac <__b2d+0x54>
 800be7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800be82:	45b8      	cmp	r8, r7
 800be84:	f100 0015 	add.w	r0, r0, #21
 800be88:	fa22 f30c 	lsr.w	r3, r2, ip
 800be8c:	fa02 f000 	lsl.w	r0, r2, r0
 800be90:	ea43 0501 	orr.w	r5, r3, r1
 800be94:	bf34      	ite	cc
 800be96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800be9a:	2300      	movcs	r3, #0
 800be9c:	fa23 f30c 	lsr.w	r3, r3, ip
 800bea0:	4303      	orrs	r3, r0
 800bea2:	461c      	mov	r4, r3
 800bea4:	ec45 4b10 	vmov	d0, r4, r5
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beac:	45b8      	cmp	r8, r7
 800beae:	bf3a      	itte	cc
 800beb0:	f1a6 0708 	subcc.w	r7, r6, #8
 800beb4:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800beb8:	2300      	movcs	r3, #0
 800beba:	380b      	subs	r0, #11
 800bebc:	d014      	beq.n	800bee8 <__b2d+0x90>
 800bebe:	f1c0 0120 	rsb	r1, r0, #32
 800bec2:	4082      	lsls	r2, r0
 800bec4:	4547      	cmp	r7, r8
 800bec6:	fa23 f401 	lsr.w	r4, r3, r1
 800beca:	fa03 f300 	lsl.w	r3, r3, r0
 800bece:	ea42 0204 	orr.w	r2, r2, r4
 800bed2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bed6:	bf8c      	ite	hi
 800bed8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bedc:	2200      	movls	r2, #0
 800bede:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bee2:	40ca      	lsrs	r2, r1
 800bee4:	4313      	orrs	r3, r2
 800bee6:	e7dc      	b.n	800bea2 <__b2d+0x4a>
 800bee8:	ea42 0501 	orr.w	r5, r2, r1
 800beec:	e7d9      	b.n	800bea2 <__b2d+0x4a>
 800beee:	bf00      	nop
 800bef0:	3ff00000 	.word	0x3ff00000

0800bef4 <__d2b>:
 800bef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	460f      	mov	r7, r1
 800befa:	2101      	movs	r1, #1
 800befc:	4616      	mov	r6, r2
 800befe:	ec59 8b10 	vmov	r8, r9, d0
 800bf02:	f7ff fc09 	bl	800b718 <_Balloc>
 800bf06:	4604      	mov	r4, r0
 800bf08:	b930      	cbnz	r0, 800bf18 <__d2b+0x24>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4b23      	ldr	r3, [pc, #140]	@ (800bf9c <__d2b+0xa8>)
 800bf0e:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf12:	4823      	ldr	r0, [pc, #140]	@ (800bfa0 <__d2b+0xac>)
 800bf14:	f001 fb70 	bl	800d5f8 <__assert_func>
 800bf18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf20:	b10d      	cbz	r5, 800bf26 <__d2b+0x32>
 800bf22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	f1b8 0300 	subs.w	r3, r8, #0
 800bf2c:	d023      	beq.n	800bf76 <__d2b+0x82>
 800bf2e:	4668      	mov	r0, sp
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	f7ff fd04 	bl	800b93e <__lo0bits>
 800bf36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf3a:	b1d0      	cbz	r0, 800bf72 <__d2b+0x7e>
 800bf3c:	f1c0 0320 	rsb	r3, r0, #32
 800bf40:	fa02 f303 	lsl.w	r3, r2, r3
 800bf44:	40c2      	lsrs	r2, r0
 800bf46:	430b      	orrs	r3, r1
 800bf48:	9201      	str	r2, [sp, #4]
 800bf4a:	6163      	str	r3, [r4, #20]
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	61a3      	str	r3, [r4, #24]
 800bf52:	bf0c      	ite	eq
 800bf54:	2201      	moveq	r2, #1
 800bf56:	2202      	movne	r2, #2
 800bf58:	6122      	str	r2, [r4, #16]
 800bf5a:	b1a5      	cbz	r5, 800bf86 <__d2b+0x92>
 800bf5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf60:	4405      	add	r5, r0
 800bf62:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf66:	603d      	str	r5, [r7, #0]
 800bf68:	6030      	str	r0, [r6, #0]
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	b003      	add	sp, #12
 800bf6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf72:	6161      	str	r1, [r4, #20]
 800bf74:	e7ea      	b.n	800bf4c <__d2b+0x58>
 800bf76:	a801      	add	r0, sp, #4
 800bf78:	f7ff fce1 	bl	800b93e <__lo0bits>
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	3020      	adds	r0, #32
 800bf80:	2201      	movs	r2, #1
 800bf82:	6163      	str	r3, [r4, #20]
 800bf84:	e7e8      	b.n	800bf58 <__d2b+0x64>
 800bf86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf8e:	6038      	str	r0, [r7, #0]
 800bf90:	6918      	ldr	r0, [r3, #16]
 800bf92:	f7ff fcb5 	bl	800b900 <__hi0bits>
 800bf96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf9a:	e7e5      	b.n	800bf68 <__d2b+0x74>
 800bf9c:	0800e08d 	.word	0x0800e08d
 800bfa0:	0800e09e 	.word	0x0800e09e

0800bfa4 <__ratio>:
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	b085      	sub	sp, #20
 800bfaa:	e9cd 1000 	strd	r1, r0, [sp]
 800bfae:	a902      	add	r1, sp, #8
 800bfb0:	f7ff ff52 	bl	800be58 <__b2d>
 800bfb4:	a903      	add	r1, sp, #12
 800bfb6:	9800      	ldr	r0, [sp, #0]
 800bfb8:	ec55 4b10 	vmov	r4, r5, d0
 800bfbc:	f7ff ff4c 	bl	800be58 <__b2d>
 800bfc0:	9b01      	ldr	r3, [sp, #4]
 800bfc2:	462f      	mov	r7, r5
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	6919      	ldr	r1, [r3, #16]
 800bfc8:	9b00      	ldr	r3, [sp, #0]
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	1ac9      	subs	r1, r1, r3
 800bfce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bfd2:	ec5b ab10 	vmov	sl, fp, d0
 800bfd6:	1a9b      	subs	r3, r3, r2
 800bfd8:	46d9      	mov	r9, fp
 800bfda:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	bfcd      	iteet	gt
 800bfe2:	462a      	movgt	r2, r5
 800bfe4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfe8:	465a      	movle	r2, fp
 800bfea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfee:	bfd8      	it	le
 800bff0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bff4:	4652      	mov	r2, sl
 800bff6:	4639      	mov	r1, r7
 800bff8:	464b      	mov	r3, r9
 800bffa:	f7f4 fc3b 	bl	8000874 <__aeabi_ddiv>
 800bffe:	ec41 0b10 	vmov	d0, r0, r1
 800c002:	b005      	add	sp, #20
 800c004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c008 <__copybits>:
 800c008:	3901      	subs	r1, #1
 800c00a:	f102 0314 	add.w	r3, r2, #20
 800c00e:	1149      	asrs	r1, r1, #5
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	3101      	adds	r1, #1
 800c014:	6914      	ldr	r4, [r2, #16]
 800c016:	1f05      	subs	r5, r0, #4
 800c018:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c01c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c020:	42a3      	cmp	r3, r4
 800c022:	d30c      	bcc.n	800c03e <__copybits+0x36>
 800c024:	1aa3      	subs	r3, r4, r2
 800c026:	3211      	adds	r2, #17
 800c028:	3b11      	subs	r3, #17
 800c02a:	f023 0303 	bic.w	r3, r3, #3
 800c02e:	42a2      	cmp	r2, r4
 800c030:	bf88      	it	hi
 800c032:	2300      	movhi	r3, #0
 800c034:	4418      	add	r0, r3
 800c036:	2300      	movs	r3, #0
 800c038:	4288      	cmp	r0, r1
 800c03a:	d305      	bcc.n	800c048 <__copybits+0x40>
 800c03c:	bd70      	pop	{r4, r5, r6, pc}
 800c03e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c042:	f845 6f04 	str.w	r6, [r5, #4]!
 800c046:	e7eb      	b.n	800c020 <__copybits+0x18>
 800c048:	f840 3b04 	str.w	r3, [r0], #4
 800c04c:	e7f4      	b.n	800c038 <__copybits+0x30>

0800c04e <__any_on>:
 800c04e:	f100 0214 	add.w	r2, r0, #20
 800c052:	114b      	asrs	r3, r1, #5
 800c054:	6900      	ldr	r0, [r0, #16]
 800c056:	4298      	cmp	r0, r3
 800c058:	b510      	push	{r4, lr}
 800c05a:	db11      	blt.n	800c080 <__any_on+0x32>
 800c05c:	dd0a      	ble.n	800c074 <__any_on+0x26>
 800c05e:	f011 011f 	ands.w	r1, r1, #31
 800c062:	d007      	beq.n	800c074 <__any_on+0x26>
 800c064:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c068:	fa24 f001 	lsr.w	r0, r4, r1
 800c06c:	fa00 f101 	lsl.w	r1, r0, r1
 800c070:	428c      	cmp	r4, r1
 800c072:	d10b      	bne.n	800c08c <__any_on+0x3e>
 800c074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c078:	4293      	cmp	r3, r2
 800c07a:	d803      	bhi.n	800c084 <__any_on+0x36>
 800c07c:	2000      	movs	r0, #0
 800c07e:	bd10      	pop	{r4, pc}
 800c080:	4603      	mov	r3, r0
 800c082:	e7f7      	b.n	800c074 <__any_on+0x26>
 800c084:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c088:	2900      	cmp	r1, #0
 800c08a:	d0f5      	beq.n	800c078 <__any_on+0x2a>
 800c08c:	2001      	movs	r0, #1
 800c08e:	e7f6      	b.n	800c07e <__any_on+0x30>

0800c090 <sulp>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	4616      	mov	r6, r2
 800c098:	ec45 4b10 	vmov	d0, r4, r5
 800c09c:	f7ff feb6 	bl	800be0c <__ulp>
 800c0a0:	ec51 0b10 	vmov	r0, r1, d0
 800c0a4:	b17e      	cbz	r6, 800c0c6 <sulp+0x36>
 800c0a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c0aa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd09      	ble.n	800c0c6 <sulp+0x36>
 800c0b2:	051b      	lsls	r3, r3, #20
 800c0b4:	2400      	movs	r4, #0
 800c0b6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c0c0:	462b      	mov	r3, r5
 800c0c2:	f7f4 faad 	bl	8000620 <__aeabi_dmul>
 800c0c6:	ec41 0b10 	vmov	d0, r0, r1
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	0000      	movs	r0, r0
	...

0800c0d0 <_strtod_l>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	b09f      	sub	sp, #124	@ 0x7c
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	f04f 0a00 	mov.w	sl, #0
 800c0dc:	f04f 0b00 	mov.w	fp, #0
 800c0e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	9005      	str	r0, [sp, #20]
 800c0e6:	921a      	str	r2, [sp, #104]	@ 0x68
 800c0e8:	460a      	mov	r2, r1
 800c0ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0ec:	7811      	ldrb	r1, [r2, #0]
 800c0ee:	292b      	cmp	r1, #43	@ 0x2b
 800c0f0:	d04a      	beq.n	800c188 <_strtod_l+0xb8>
 800c0f2:	d838      	bhi.n	800c166 <_strtod_l+0x96>
 800c0f4:	290d      	cmp	r1, #13
 800c0f6:	d832      	bhi.n	800c15e <_strtod_l+0x8e>
 800c0f8:	2908      	cmp	r1, #8
 800c0fa:	d832      	bhi.n	800c162 <_strtod_l+0x92>
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	d03b      	beq.n	800c178 <_strtod_l+0xa8>
 800c100:	2200      	movs	r2, #0
 800c102:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c104:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c106:	782a      	ldrb	r2, [r5, #0]
 800c108:	2a30      	cmp	r2, #48	@ 0x30
 800c10a:	f040 80b3 	bne.w	800c274 <_strtod_l+0x1a4>
 800c10e:	786a      	ldrb	r2, [r5, #1]
 800c110:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c114:	2a58      	cmp	r2, #88	@ 0x58
 800c116:	d16e      	bne.n	800c1f6 <_strtod_l+0x126>
 800c118:	9302      	str	r3, [sp, #8]
 800c11a:	a919      	add	r1, sp, #100	@ 0x64
 800c11c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c11e:	4a90      	ldr	r2, [pc, #576]	@ (800c360 <_strtod_l+0x290>)
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	ab1a      	add	r3, sp, #104	@ 0x68
 800c124:	9805      	ldr	r0, [sp, #20]
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c12a:	f001 fafd 	bl	800d728 <__gethex>
 800c12e:	f010 060f 	ands.w	r6, r0, #15
 800c132:	4604      	mov	r4, r0
 800c134:	d005      	beq.n	800c142 <_strtod_l+0x72>
 800c136:	2e06      	cmp	r6, #6
 800c138:	d128      	bne.n	800c18c <_strtod_l+0xbc>
 800c13a:	3501      	adds	r5, #1
 800c13c:	2300      	movs	r3, #0
 800c13e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c140:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 858e 	bne.w	800cc66 <_strtod_l+0xb96>
 800c14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c14c:	b1cb      	cbz	r3, 800c182 <_strtod_l+0xb2>
 800c14e:	4652      	mov	r2, sl
 800c150:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c154:	ec43 2b10 	vmov	d0, r2, r3
 800c158:	b01f      	add	sp, #124	@ 0x7c
 800c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15e:	2920      	cmp	r1, #32
 800c160:	d1ce      	bne.n	800c100 <_strtod_l+0x30>
 800c162:	3201      	adds	r2, #1
 800c164:	e7c1      	b.n	800c0ea <_strtod_l+0x1a>
 800c166:	292d      	cmp	r1, #45	@ 0x2d
 800c168:	d1ca      	bne.n	800c100 <_strtod_l+0x30>
 800c16a:	2101      	movs	r1, #1
 800c16c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c16e:	1c51      	adds	r1, r2, #1
 800c170:	9119      	str	r1, [sp, #100]	@ 0x64
 800c172:	7852      	ldrb	r2, [r2, #1]
 800c174:	2a00      	cmp	r2, #0
 800c176:	d1c5      	bne.n	800c104 <_strtod_l+0x34>
 800c178:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c17a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f040 8570 	bne.w	800cc62 <_strtod_l+0xb92>
 800c182:	4652      	mov	r2, sl
 800c184:	465b      	mov	r3, fp
 800c186:	e7e5      	b.n	800c154 <_strtod_l+0x84>
 800c188:	2100      	movs	r1, #0
 800c18a:	e7ef      	b.n	800c16c <_strtod_l+0x9c>
 800c18c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c18e:	b13a      	cbz	r2, 800c1a0 <_strtod_l+0xd0>
 800c190:	2135      	movs	r1, #53	@ 0x35
 800c192:	a81c      	add	r0, sp, #112	@ 0x70
 800c194:	f7ff ff38 	bl	800c008 <__copybits>
 800c198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c19a:	9805      	ldr	r0, [sp, #20]
 800c19c:	f7ff fafc 	bl	800b798 <_Bfree>
 800c1a0:	3e01      	subs	r6, #1
 800c1a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c1a4:	2e04      	cmp	r6, #4
 800c1a6:	d806      	bhi.n	800c1b6 <_strtod_l+0xe6>
 800c1a8:	e8df f006 	tbb	[pc, r6]
 800c1ac:	201d0314 	.word	0x201d0314
 800c1b0:	14          	.byte	0x14
 800c1b1:	00          	.byte	0x00
 800c1b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c1b6:	05e1      	lsls	r1, r4, #23
 800c1b8:	bf48      	it	mi
 800c1ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c1be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1c2:	0d1b      	lsrs	r3, r3, #20
 800c1c4:	051b      	lsls	r3, r3, #20
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1bb      	bne.n	800c142 <_strtod_l+0x72>
 800c1ca:	f7fe fb11 	bl	800a7f0 <__errno>
 800c1ce:	2322      	movs	r3, #34	@ 0x22
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	e7b6      	b.n	800c142 <_strtod_l+0x72>
 800c1d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c1d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c1dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c1e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c1e4:	e7e7      	b.n	800c1b6 <_strtod_l+0xe6>
 800c1e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c368 <_strtod_l+0x298>
 800c1ea:	e7e4      	b.n	800c1b6 <_strtod_l+0xe6>
 800c1ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c1f0:	f04f 3aff 	mov.w	sl, #4294967295
 800c1f4:	e7df      	b.n	800c1b6 <_strtod_l+0xe6>
 800c1f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1f8:	1c5a      	adds	r2, r3, #1
 800c1fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1fc:	785b      	ldrb	r3, [r3, #1]
 800c1fe:	2b30      	cmp	r3, #48	@ 0x30
 800c200:	d0f9      	beq.n	800c1f6 <_strtod_l+0x126>
 800c202:	2b00      	cmp	r3, #0
 800c204:	d09d      	beq.n	800c142 <_strtod_l+0x72>
 800c206:	2301      	movs	r3, #1
 800c208:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20a:	220a      	movs	r2, #10
 800c20c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c20e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c210:	2300      	movs	r3, #0
 800c212:	461f      	mov	r7, r3
 800c214:	9308      	str	r3, [sp, #32]
 800c216:	930a      	str	r3, [sp, #40]	@ 0x28
 800c218:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c21a:	7805      	ldrb	r5, [r0, #0]
 800c21c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c220:	b2d9      	uxtb	r1, r3
 800c222:	2909      	cmp	r1, #9
 800c224:	d928      	bls.n	800c278 <_strtod_l+0x1a8>
 800c226:	2201      	movs	r2, #1
 800c228:	494e      	ldr	r1, [pc, #312]	@ (800c364 <_strtod_l+0x294>)
 800c22a:	f001 f9ab 	bl	800d584 <strncmp>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d033      	beq.n	800c29a <_strtod_l+0x1ca>
 800c232:	2000      	movs	r0, #0
 800c234:	462a      	mov	r2, r5
 800c236:	463d      	mov	r5, r7
 800c238:	4681      	mov	r9, r0
 800c23a:	4603      	mov	r3, r0
 800c23c:	2a65      	cmp	r2, #101	@ 0x65
 800c23e:	d001      	beq.n	800c244 <_strtod_l+0x174>
 800c240:	2a45      	cmp	r2, #69	@ 0x45
 800c242:	d114      	bne.n	800c26e <_strtod_l+0x19e>
 800c244:	b91d      	cbnz	r5, 800c24e <_strtod_l+0x17e>
 800c246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c248:	4302      	orrs	r2, r0
 800c24a:	d095      	beq.n	800c178 <_strtod_l+0xa8>
 800c24c:	2500      	movs	r5, #0
 800c24e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c250:	1c62      	adds	r2, r4, #1
 800c252:	9219      	str	r2, [sp, #100]	@ 0x64
 800c254:	7862      	ldrb	r2, [r4, #1]
 800c256:	2a2b      	cmp	r2, #43	@ 0x2b
 800c258:	d078      	beq.n	800c34c <_strtod_l+0x27c>
 800c25a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c25c:	d07c      	beq.n	800c358 <_strtod_l+0x288>
 800c25e:	f04f 0c00 	mov.w	ip, #0
 800c262:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c266:	2909      	cmp	r1, #9
 800c268:	f240 8084 	bls.w	800c374 <_strtod_l+0x2a4>
 800c26c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	e0a4      	b.n	800c3be <_strtod_l+0x2ee>
 800c274:	2300      	movs	r3, #0
 800c276:	e7c7      	b.n	800c208 <_strtod_l+0x138>
 800c278:	2f08      	cmp	r7, #8
 800c27a:	f100 0001 	add.w	r0, r0, #1
 800c27e:	f107 0701 	add.w	r7, r7, #1
 800c282:	bfd5      	itete	le
 800c284:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c286:	9908      	ldrgt	r1, [sp, #32]
 800c288:	fb02 3301 	mlale	r3, r2, r1, r3
 800c28c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c290:	bfd4      	ite	le
 800c292:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c294:	9308      	strgt	r3, [sp, #32]
 800c296:	9019      	str	r0, [sp, #100]	@ 0x64
 800c298:	e7be      	b.n	800c218 <_strtod_l+0x148>
 800c29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2a0:	785a      	ldrb	r2, [r3, #1]
 800c2a2:	b37f      	cbz	r7, 800c304 <_strtod_l+0x234>
 800c2a4:	4681      	mov	r9, r0
 800c2a6:	463d      	mov	r5, r7
 800c2a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c2ac:	2b09      	cmp	r3, #9
 800c2ae:	d912      	bls.n	800c2d6 <_strtod_l+0x206>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e7c3      	b.n	800c23c <_strtod_l+0x16c>
 800c2b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2bc:	785a      	ldrb	r2, [r3, #1]
 800c2be:	2a30      	cmp	r2, #48	@ 0x30
 800c2c0:	d0f8      	beq.n	800c2b4 <_strtod_l+0x1e4>
 800c2c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c2c6:	2b08      	cmp	r3, #8
 800c2c8:	f200 84d2 	bhi.w	800cc70 <_strtod_l+0xba0>
 800c2cc:	4681      	mov	r9, r0
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2d6:	3a30      	subs	r2, #48	@ 0x30
 800c2d8:	f100 0301 	add.w	r3, r0, #1
 800c2dc:	d02a      	beq.n	800c334 <_strtod_l+0x264>
 800c2de:	4499      	add	r9, r3
 800c2e0:	eb00 0c05 	add.w	ip, r0, r5
 800c2e4:	462b      	mov	r3, r5
 800c2e6:	210a      	movs	r1, #10
 800c2e8:	4563      	cmp	r3, ip
 800c2ea:	d10d      	bne.n	800c308 <_strtod_l+0x238>
 800c2ec:	1c69      	adds	r1, r5, #1
 800c2ee:	4401      	add	r1, r0
 800c2f0:	4428      	add	r0, r5
 800c2f2:	2808      	cmp	r0, #8
 800c2f4:	dc16      	bgt.n	800c324 <_strtod_l+0x254>
 800c2f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2f8:	230a      	movs	r3, #10
 800c2fa:	fb03 2300 	mla	r3, r3, r0, r2
 800c2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c300:	2300      	movs	r3, #0
 800c302:	e018      	b.n	800c336 <_strtod_l+0x266>
 800c304:	4638      	mov	r0, r7
 800c306:	e7da      	b.n	800c2be <_strtod_l+0x1ee>
 800c308:	2b08      	cmp	r3, #8
 800c30a:	f103 0301 	add.w	r3, r3, #1
 800c30e:	dc03      	bgt.n	800c318 <_strtod_l+0x248>
 800c310:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c312:	434e      	muls	r6, r1
 800c314:	960a      	str	r6, [sp, #40]	@ 0x28
 800c316:	e7e7      	b.n	800c2e8 <_strtod_l+0x218>
 800c318:	2b10      	cmp	r3, #16
 800c31a:	bfde      	ittt	le
 800c31c:	9e08      	ldrle	r6, [sp, #32]
 800c31e:	434e      	mulle	r6, r1
 800c320:	9608      	strle	r6, [sp, #32]
 800c322:	e7e1      	b.n	800c2e8 <_strtod_l+0x218>
 800c324:	280f      	cmp	r0, #15
 800c326:	dceb      	bgt.n	800c300 <_strtod_l+0x230>
 800c328:	9808      	ldr	r0, [sp, #32]
 800c32a:	230a      	movs	r3, #10
 800c32c:	fb03 2300 	mla	r3, r3, r0, r2
 800c330:	9308      	str	r3, [sp, #32]
 800c332:	e7e5      	b.n	800c300 <_strtod_l+0x230>
 800c334:	4629      	mov	r1, r5
 800c336:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c338:	460d      	mov	r5, r1
 800c33a:	1c50      	adds	r0, r2, #1
 800c33c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c33e:	4618      	mov	r0, r3
 800c340:	7852      	ldrb	r2, [r2, #1]
 800c342:	e7b1      	b.n	800c2a8 <_strtod_l+0x1d8>
 800c344:	f04f 0900 	mov.w	r9, #0
 800c348:	2301      	movs	r3, #1
 800c34a:	e77c      	b.n	800c246 <_strtod_l+0x176>
 800c34c:	f04f 0c00 	mov.w	ip, #0
 800c350:	1ca2      	adds	r2, r4, #2
 800c352:	9219      	str	r2, [sp, #100]	@ 0x64
 800c354:	78a2      	ldrb	r2, [r4, #2]
 800c356:	e784      	b.n	800c262 <_strtod_l+0x192>
 800c358:	f04f 0c01 	mov.w	ip, #1
 800c35c:	e7f8      	b.n	800c350 <_strtod_l+0x280>
 800c35e:	bf00      	nop
 800c360:	0800e210 	.word	0x0800e210
 800c364:	0800e1f8 	.word	0x0800e1f8
 800c368:	7ff00000 	.word	0x7ff00000
 800c36c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c36e:	1c51      	adds	r1, r2, #1
 800c370:	9119      	str	r1, [sp, #100]	@ 0x64
 800c372:	7852      	ldrb	r2, [r2, #1]
 800c374:	2a30      	cmp	r2, #48	@ 0x30
 800c376:	d0f9      	beq.n	800c36c <_strtod_l+0x29c>
 800c378:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c37c:	2908      	cmp	r1, #8
 800c37e:	f63f af76 	bhi.w	800c26e <_strtod_l+0x19e>
 800c382:	3a30      	subs	r2, #48	@ 0x30
 800c384:	f04f 080a 	mov.w	r8, #10
 800c388:	920e      	str	r2, [sp, #56]	@ 0x38
 800c38a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c38c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c38e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c390:	1c56      	adds	r6, r2, #1
 800c392:	9619      	str	r6, [sp, #100]	@ 0x64
 800c394:	7852      	ldrb	r2, [r2, #1]
 800c396:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c39a:	f1be 0f09 	cmp.w	lr, #9
 800c39e:	d939      	bls.n	800c414 <_strtod_l+0x344>
 800c3a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3a6:	1a76      	subs	r6, r6, r1
 800c3a8:	2e08      	cmp	r6, #8
 800c3aa:	dc03      	bgt.n	800c3b4 <_strtod_l+0x2e4>
 800c3ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3ae:	4588      	cmp	r8, r1
 800c3b0:	bfa8      	it	ge
 800c3b2:	4688      	movge	r8, r1
 800c3b4:	f1bc 0f00 	cmp.w	ip, #0
 800c3b8:	d001      	beq.n	800c3be <_strtod_l+0x2ee>
 800c3ba:	f1c8 0800 	rsb	r8, r8, #0
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	d14e      	bne.n	800c460 <_strtod_l+0x390>
 800c3c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3c4:	4308      	orrs	r0, r1
 800c3c6:	f47f aebc 	bne.w	800c142 <_strtod_l+0x72>
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f47f aed4 	bne.w	800c178 <_strtod_l+0xa8>
 800c3d0:	2a69      	cmp	r2, #105	@ 0x69
 800c3d2:	d028      	beq.n	800c426 <_strtod_l+0x356>
 800c3d4:	dc25      	bgt.n	800c422 <_strtod_l+0x352>
 800c3d6:	2a49      	cmp	r2, #73	@ 0x49
 800c3d8:	d025      	beq.n	800c426 <_strtod_l+0x356>
 800c3da:	2a4e      	cmp	r2, #78	@ 0x4e
 800c3dc:	f47f aecc 	bne.w	800c178 <_strtod_l+0xa8>
 800c3e0:	499b      	ldr	r1, [pc, #620]	@ (800c650 <_strtod_l+0x580>)
 800c3e2:	a819      	add	r0, sp, #100	@ 0x64
 800c3e4:	f001 fbc0 	bl	800db68 <__match>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f43f aec5 	beq.w	800c178 <_strtod_l+0xa8>
 800c3ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b28      	cmp	r3, #40	@ 0x28
 800c3f4:	d12e      	bne.n	800c454 <_strtod_l+0x384>
 800c3f6:	aa1c      	add	r2, sp, #112	@ 0x70
 800c3f8:	4996      	ldr	r1, [pc, #600]	@ (800c654 <_strtod_l+0x584>)
 800c3fa:	a819      	add	r0, sp, #100	@ 0x64
 800c3fc:	f001 fbc8 	bl	800db90 <__hexnan>
 800c400:	2805      	cmp	r0, #5
 800c402:	d127      	bne.n	800c454 <_strtod_l+0x384>
 800c404:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c406:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c40a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c40e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c412:	e696      	b.n	800c142 <_strtod_l+0x72>
 800c414:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c416:	fb08 2101 	mla	r1, r8, r1, r2
 800c41a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c41e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c420:	e7b5      	b.n	800c38e <_strtod_l+0x2be>
 800c422:	2a6e      	cmp	r2, #110	@ 0x6e
 800c424:	e7da      	b.n	800c3dc <_strtod_l+0x30c>
 800c426:	498c      	ldr	r1, [pc, #560]	@ (800c658 <_strtod_l+0x588>)
 800c428:	a819      	add	r0, sp, #100	@ 0x64
 800c42a:	f001 fb9d 	bl	800db68 <__match>
 800c42e:	2800      	cmp	r0, #0
 800c430:	f43f aea2 	beq.w	800c178 <_strtod_l+0xa8>
 800c434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c436:	a819      	add	r0, sp, #100	@ 0x64
 800c438:	4988      	ldr	r1, [pc, #544]	@ (800c65c <_strtod_l+0x58c>)
 800c43a:	3b01      	subs	r3, #1
 800c43c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c43e:	f001 fb93 	bl	800db68 <__match>
 800c442:	b910      	cbnz	r0, 800c44a <_strtod_l+0x37a>
 800c444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c446:	3301      	adds	r3, #1
 800c448:	9319      	str	r3, [sp, #100]	@ 0x64
 800c44a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c66c <_strtod_l+0x59c>
 800c44e:	f04f 0a00 	mov.w	sl, #0
 800c452:	e676      	b.n	800c142 <_strtod_l+0x72>
 800c454:	4882      	ldr	r0, [pc, #520]	@ (800c660 <_strtod_l+0x590>)
 800c456:	f001 f8c7 	bl	800d5e8 <nan>
 800c45a:	ec5b ab10 	vmov	sl, fp, d0
 800c45e:	e670      	b.n	800c142 <_strtod_l+0x72>
 800c460:	eba8 0309 	sub.w	r3, r8, r9
 800c464:	2f00      	cmp	r7, #0
 800c466:	bf08      	it	eq
 800c468:	462f      	moveq	r7, r5
 800c46a:	2d10      	cmp	r5, #16
 800c46c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c46e:	462c      	mov	r4, r5
 800c470:	9309      	str	r3, [sp, #36]	@ 0x24
 800c472:	bfa8      	it	ge
 800c474:	2410      	movge	r4, #16
 800c476:	f7f4 f859 	bl	800052c <__aeabi_ui2d>
 800c47a:	2d09      	cmp	r5, #9
 800c47c:	4682      	mov	sl, r0
 800c47e:	468b      	mov	fp, r1
 800c480:	dc13      	bgt.n	800c4aa <_strtod_l+0x3da>
 800c482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	f43f ae5c 	beq.w	800c142 <_strtod_l+0x72>
 800c48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c48c:	dd78      	ble.n	800c580 <_strtod_l+0x4b0>
 800c48e:	2b16      	cmp	r3, #22
 800c490:	dc5f      	bgt.n	800c552 <_strtod_l+0x482>
 800c492:	4974      	ldr	r1, [pc, #464]	@ (800c664 <_strtod_l+0x594>)
 800c494:	4652      	mov	r2, sl
 800c496:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c49a:	465b      	mov	r3, fp
 800c49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a0:	f7f4 f8be 	bl	8000620 <__aeabi_dmul>
 800c4a4:	4682      	mov	sl, r0
 800c4a6:	468b      	mov	fp, r1
 800c4a8:	e64b      	b.n	800c142 <_strtod_l+0x72>
 800c4aa:	4b6e      	ldr	r3, [pc, #440]	@ (800c664 <_strtod_l+0x594>)
 800c4ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4b0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c4b4:	f7f4 f8b4 	bl	8000620 <__aeabi_dmul>
 800c4b8:	4682      	mov	sl, r0
 800c4ba:	468b      	mov	fp, r1
 800c4bc:	9808      	ldr	r0, [sp, #32]
 800c4be:	f7f4 f835 	bl	800052c <__aeabi_ui2d>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4650      	mov	r0, sl
 800c4c8:	4659      	mov	r1, fp
 800c4ca:	f7f3 fef3 	bl	80002b4 <__adddf3>
 800c4ce:	2d0f      	cmp	r5, #15
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	ddd5      	ble.n	800c482 <_strtod_l+0x3b2>
 800c4d6:	1b2c      	subs	r4, r5, r4
 800c4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4da:	441c      	add	r4, r3
 800c4dc:	2c00      	cmp	r4, #0
 800c4de:	f340 8096 	ble.w	800c60e <_strtod_l+0x53e>
 800c4e2:	f014 030f 	ands.w	r3, r4, #15
 800c4e6:	d00a      	beq.n	800c4fe <_strtod_l+0x42e>
 800c4e8:	495e      	ldr	r1, [pc, #376]	@ (800c664 <_strtod_l+0x594>)
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4f0:	465b      	mov	r3, fp
 800c4f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f6:	f7f4 f893 	bl	8000620 <__aeabi_dmul>
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	468b      	mov	fp, r1
 800c4fe:	f034 040f 	bics.w	r4, r4, #15
 800c502:	d073      	beq.n	800c5ec <_strtod_l+0x51c>
 800c504:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c508:	dd48      	ble.n	800c59c <_strtod_l+0x4cc>
 800c50a:	2400      	movs	r4, #0
 800c50c:	46a0      	mov	r8, r4
 800c50e:	46a1      	mov	r9, r4
 800c510:	940a      	str	r4, [sp, #40]	@ 0x28
 800c512:	2322      	movs	r3, #34	@ 0x22
 800c514:	9a05      	ldr	r2, [sp, #20]
 800c516:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c66c <_strtod_l+0x59c>
 800c51a:	f04f 0a00 	mov.w	sl, #0
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c522:	2b00      	cmp	r3, #0
 800c524:	f43f ae0d 	beq.w	800c142 <_strtod_l+0x72>
 800c528:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c52a:	9805      	ldr	r0, [sp, #20]
 800c52c:	f7ff f934 	bl	800b798 <_Bfree>
 800c530:	4649      	mov	r1, r9
 800c532:	9805      	ldr	r0, [sp, #20]
 800c534:	f7ff f930 	bl	800b798 <_Bfree>
 800c538:	4641      	mov	r1, r8
 800c53a:	9805      	ldr	r0, [sp, #20]
 800c53c:	f7ff f92c 	bl	800b798 <_Bfree>
 800c540:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c542:	9805      	ldr	r0, [sp, #20]
 800c544:	f7ff f928 	bl	800b798 <_Bfree>
 800c548:	4621      	mov	r1, r4
 800c54a:	9805      	ldr	r0, [sp, #20]
 800c54c:	f7ff f924 	bl	800b798 <_Bfree>
 800c550:	e5f7      	b.n	800c142 <_strtod_l+0x72>
 800c552:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c558:	4293      	cmp	r3, r2
 800c55a:	dbbc      	blt.n	800c4d6 <_strtod_l+0x406>
 800c55c:	f1c5 050f 	rsb	r5, r5, #15
 800c560:	4c40      	ldr	r4, [pc, #256]	@ (800c664 <_strtod_l+0x594>)
 800c562:	4652      	mov	r2, sl
 800c564:	465b      	mov	r3, fp
 800c566:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c56e:	f7f4 f857 	bl	8000620 <__aeabi_dmul>
 800c572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c574:	1b5d      	subs	r5, r3, r5
 800c576:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c57a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c57e:	e78f      	b.n	800c4a0 <_strtod_l+0x3d0>
 800c580:	3316      	adds	r3, #22
 800c582:	dba8      	blt.n	800c4d6 <_strtod_l+0x406>
 800c584:	eba9 0808 	sub.w	r8, r9, r8
 800c588:	4b36      	ldr	r3, [pc, #216]	@ (800c664 <_strtod_l+0x594>)
 800c58a:	4650      	mov	r0, sl
 800c58c:	4659      	mov	r1, fp
 800c58e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c592:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c596:	f7f4 f96d 	bl	8000874 <__aeabi_ddiv>
 800c59a:	e783      	b.n	800c4a4 <_strtod_l+0x3d4>
 800c59c:	4b32      	ldr	r3, [pc, #200]	@ (800c668 <_strtod_l+0x598>)
 800c59e:	1124      	asrs	r4, r4, #4
 800c5a0:	4650      	mov	r0, sl
 800c5a2:	4659      	mov	r1, fp
 800c5a4:	9308      	str	r3, [sp, #32]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	461e      	mov	r6, r3
 800c5aa:	2c01      	cmp	r4, #1
 800c5ac:	dc21      	bgt.n	800c5f2 <_strtod_l+0x522>
 800c5ae:	b10b      	cbz	r3, 800c5b4 <_strtod_l+0x4e4>
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	468b      	mov	fp, r1
 800c5b4:	492c      	ldr	r1, [pc, #176]	@ (800c668 <_strtod_l+0x598>)
 800c5b6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c5ba:	4652      	mov	r2, sl
 800c5bc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c5c0:	465b      	mov	r3, fp
 800c5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c6:	f7f4 f82b 	bl	8000620 <__aeabi_dmul>
 800c5ca:	4b28      	ldr	r3, [pc, #160]	@ (800c66c <_strtod_l+0x59c>)
 800c5cc:	460a      	mov	r2, r1
 800c5ce:	4682      	mov	sl, r0
 800c5d0:	400b      	ands	r3, r1
 800c5d2:	4927      	ldr	r1, [pc, #156]	@ (800c670 <_strtod_l+0x5a0>)
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	d898      	bhi.n	800c50a <_strtod_l+0x43a>
 800c5d8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c5dc:	428b      	cmp	r3, r1
 800c5de:	bf86      	itte	hi
 800c5e0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c674 <_strtod_l+0x5a4>
 800c5e4:	f04f 3aff 	movhi.w	sl, #4294967295
 800c5e8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9308      	str	r3, [sp, #32]
 800c5f0:	e07a      	b.n	800c6e8 <_strtod_l+0x618>
 800c5f2:	07e2      	lsls	r2, r4, #31
 800c5f4:	d505      	bpl.n	800c602 <_strtod_l+0x532>
 800c5f6:	9b08      	ldr	r3, [sp, #32]
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f7f4 f810 	bl	8000620 <__aeabi_dmul>
 800c600:	2301      	movs	r3, #1
 800c602:	9a08      	ldr	r2, [sp, #32]
 800c604:	3601      	adds	r6, #1
 800c606:	1064      	asrs	r4, r4, #1
 800c608:	3208      	adds	r2, #8
 800c60a:	9208      	str	r2, [sp, #32]
 800c60c:	e7cd      	b.n	800c5aa <_strtod_l+0x4da>
 800c60e:	d0ed      	beq.n	800c5ec <_strtod_l+0x51c>
 800c610:	4264      	negs	r4, r4
 800c612:	f014 020f 	ands.w	r2, r4, #15
 800c616:	d00a      	beq.n	800c62e <_strtod_l+0x55e>
 800c618:	4b12      	ldr	r3, [pc, #72]	@ (800c664 <_strtod_l+0x594>)
 800c61a:	4650      	mov	r0, sl
 800c61c:	4659      	mov	r1, fp
 800c61e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f7f4 f925 	bl	8000874 <__aeabi_ddiv>
 800c62a:	4682      	mov	sl, r0
 800c62c:	468b      	mov	fp, r1
 800c62e:	1124      	asrs	r4, r4, #4
 800c630:	d0dc      	beq.n	800c5ec <_strtod_l+0x51c>
 800c632:	2c1f      	cmp	r4, #31
 800c634:	dd20      	ble.n	800c678 <_strtod_l+0x5a8>
 800c636:	2400      	movs	r4, #0
 800c638:	46a0      	mov	r8, r4
 800c63a:	46a1      	mov	r9, r4
 800c63c:	940a      	str	r4, [sp, #40]	@ 0x28
 800c63e:	2322      	movs	r3, #34	@ 0x22
 800c640:	9a05      	ldr	r2, [sp, #20]
 800c642:	f04f 0a00 	mov.w	sl, #0
 800c646:	f04f 0b00 	mov.w	fp, #0
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e768      	b.n	800c520 <_strtod_l+0x450>
 800c64e:	bf00      	nop
 800c650:	0800dfe5 	.word	0x0800dfe5
 800c654:	0800e1fc 	.word	0x0800e1fc
 800c658:	0800dfdd 	.word	0x0800dfdd
 800c65c:	0800e014 	.word	0x0800e014
 800c660:	0800e3a5 	.word	0x0800e3a5
 800c664:	0800e130 	.word	0x0800e130
 800c668:	0800e108 	.word	0x0800e108
 800c66c:	7ff00000 	.word	0x7ff00000
 800c670:	7ca00000 	.word	0x7ca00000
 800c674:	7fefffff 	.word	0x7fefffff
 800c678:	f014 0310 	ands.w	r3, r4, #16
 800c67c:	4650      	mov	r0, sl
 800c67e:	4659      	mov	r1, fp
 800c680:	4ea9      	ldr	r6, [pc, #676]	@ (800c928 <_strtod_l+0x858>)
 800c682:	bf18      	it	ne
 800c684:	236a      	movne	r3, #106	@ 0x6a
 800c686:	9308      	str	r3, [sp, #32]
 800c688:	2300      	movs	r3, #0
 800c68a:	07e2      	lsls	r2, r4, #31
 800c68c:	d504      	bpl.n	800c698 <_strtod_l+0x5c8>
 800c68e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c692:	f7f3 ffc5 	bl	8000620 <__aeabi_dmul>
 800c696:	2301      	movs	r3, #1
 800c698:	1064      	asrs	r4, r4, #1
 800c69a:	f106 0608 	add.w	r6, r6, #8
 800c69e:	d1f4      	bne.n	800c68a <_strtod_l+0x5ba>
 800c6a0:	b10b      	cbz	r3, 800c6a6 <_strtod_l+0x5d6>
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	468b      	mov	fp, r1
 800c6a6:	9b08      	ldr	r3, [sp, #32]
 800c6a8:	b1b3      	cbz	r3, 800c6d8 <_strtod_l+0x608>
 800c6aa:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c6ae:	4659      	mov	r1, fp
 800c6b0:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd0f      	ble.n	800c6d8 <_strtod_l+0x608>
 800c6b8:	2b1f      	cmp	r3, #31
 800c6ba:	dd55      	ble.n	800c768 <_strtod_l+0x698>
 800c6bc:	2b34      	cmp	r3, #52	@ 0x34
 800c6be:	f04f 0a00 	mov.w	sl, #0
 800c6c2:	bfdb      	ittet	le
 800c6c4:	f04f 33ff 	movle.w	r3, #4294967295
 800c6c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c6cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c6d0:	4093      	lslle	r3, r2
 800c6d2:	bfd8      	it	le
 800c6d4:	ea03 0b01 	andle.w	fp, r3, r1
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4650      	mov	r0, sl
 800c6de:	4659      	mov	r1, fp
 800c6e0:	f7f4 fa06 	bl	8000af0 <__aeabi_dcmpeq>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d1a6      	bne.n	800c636 <_strtod_l+0x566>
 800c6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ea:	463a      	mov	r2, r7
 800c6ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	462b      	mov	r3, r5
 800c6f2:	9805      	ldr	r0, [sp, #20]
 800c6f4:	f7ff f8ba 	bl	800b86c <__s2b>
 800c6f8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f43f af05 	beq.w	800c50a <_strtod_l+0x43a>
 800c700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c702:	eba9 0308 	sub.w	r3, r9, r8
 800c706:	2400      	movs	r4, #0
 800c708:	2a00      	cmp	r2, #0
 800c70a:	46a0      	mov	r8, r4
 800c70c:	bfa8      	it	ge
 800c70e:	2300      	movge	r3, #0
 800c710:	9312      	str	r3, [sp, #72]	@ 0x48
 800c712:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c716:	9316      	str	r3, [sp, #88]	@ 0x58
 800c718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c71a:	9805      	ldr	r0, [sp, #20]
 800c71c:	6859      	ldr	r1, [r3, #4]
 800c71e:	f7fe fffb 	bl	800b718 <_Balloc>
 800c722:	4681      	mov	r9, r0
 800c724:	2800      	cmp	r0, #0
 800c726:	f43f aef4 	beq.w	800c512 <_strtod_l+0x442>
 800c72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c72c:	300c      	adds	r0, #12
 800c72e:	691a      	ldr	r2, [r3, #16]
 800c730:	f103 010c 	add.w	r1, r3, #12
 800c734:	3202      	adds	r2, #2
 800c736:	0092      	lsls	r2, r2, #2
 800c738:	f000 ff46 	bl	800d5c8 <memcpy>
 800c73c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c73e:	a91b      	add	r1, sp, #108	@ 0x6c
 800c740:	9805      	ldr	r0, [sp, #20]
 800c742:	ec4b ab10 	vmov	d0, sl, fp
 800c746:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c74a:	f7ff fbd3 	bl	800bef4 <__d2b>
 800c74e:	901a      	str	r0, [sp, #104]	@ 0x68
 800c750:	2800      	cmp	r0, #0
 800c752:	f43f aede 	beq.w	800c512 <_strtod_l+0x442>
 800c756:	2101      	movs	r1, #1
 800c758:	9805      	ldr	r0, [sp, #20]
 800c75a:	f7ff f91d 	bl	800b998 <__i2b>
 800c75e:	4680      	mov	r8, r0
 800c760:	b948      	cbnz	r0, 800c776 <_strtod_l+0x6a6>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	e6d4      	b.n	800c512 <_strtod_l+0x442>
 800c768:	f04f 32ff 	mov.w	r2, #4294967295
 800c76c:	fa02 f303 	lsl.w	r3, r2, r3
 800c770:	ea03 0a0a 	and.w	sl, r3, sl
 800c774:	e7b0      	b.n	800c6d8 <_strtod_l+0x608>
 800c776:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c778:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c77a:	2d00      	cmp	r5, #0
 800c77c:	bfa9      	itett	ge
 800c77e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c780:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c782:	18ef      	addge	r7, r5, r3
 800c784:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c786:	bfb8      	it	lt
 800c788:	1b5e      	sublt	r6, r3, r5
 800c78a:	9b08      	ldr	r3, [sp, #32]
 800c78c:	bfb8      	it	lt
 800c78e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c790:	1aed      	subs	r5, r5, r3
 800c792:	4b66      	ldr	r3, [pc, #408]	@ (800c92c <_strtod_l+0x85c>)
 800c794:	4415      	add	r5, r2
 800c796:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c79a:	3d01      	subs	r5, #1
 800c79c:	429d      	cmp	r5, r3
 800c79e:	da4f      	bge.n	800c840 <_strtod_l+0x770>
 800c7a0:	1b5b      	subs	r3, r3, r5
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	2b1f      	cmp	r3, #31
 800c7a6:	eba2 0203 	sub.w	r2, r2, r3
 800c7aa:	dc3d      	bgt.n	800c828 <_strtod_l+0x758>
 800c7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c7b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7b6:	18bd      	adds	r5, r7, r2
 800c7b8:	9b08      	ldr	r3, [sp, #32]
 800c7ba:	4416      	add	r6, r2
 800c7bc:	42af      	cmp	r7, r5
 800c7be:	441e      	add	r6, r3
 800c7c0:	463b      	mov	r3, r7
 800c7c2:	bfa8      	it	ge
 800c7c4:	462b      	movge	r3, r5
 800c7c6:	42b3      	cmp	r3, r6
 800c7c8:	bfa8      	it	ge
 800c7ca:	4633      	movge	r3, r6
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bfc2      	ittt	gt
 800c7d0:	1aed      	subgt	r5, r5, r3
 800c7d2:	1af6      	subgt	r6, r6, r3
 800c7d4:	1aff      	subgt	r7, r7, r3
 800c7d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	dd16      	ble.n	800c80a <_strtod_l+0x73a>
 800c7dc:	4641      	mov	r1, r8
 800c7de:	461a      	mov	r2, r3
 800c7e0:	9805      	ldr	r0, [sp, #20]
 800c7e2:	f7ff f999 	bl	800bb18 <__pow5mult>
 800c7e6:	4680      	mov	r8, r0
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d0ba      	beq.n	800c762 <_strtod_l+0x692>
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7f0:	9805      	ldr	r0, [sp, #20]
 800c7f2:	f7ff f8e7 	bl	800b9c4 <__multiply>
 800c7f6:	900e      	str	r0, [sp, #56]	@ 0x38
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	f43f ae8a 	beq.w	800c512 <_strtod_l+0x442>
 800c7fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c800:	9805      	ldr	r0, [sp, #20]
 800c802:	f7fe ffc9 	bl	800b798 <_Bfree>
 800c806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c808:	931a      	str	r3, [sp, #104]	@ 0x68
 800c80a:	2d00      	cmp	r5, #0
 800c80c:	dc1d      	bgt.n	800c84a <_strtod_l+0x77a>
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	dd23      	ble.n	800c85c <_strtod_l+0x78c>
 800c814:	4649      	mov	r1, r9
 800c816:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c818:	9805      	ldr	r0, [sp, #20]
 800c81a:	f7ff f97d 	bl	800bb18 <__pow5mult>
 800c81e:	4681      	mov	r9, r0
 800c820:	b9e0      	cbnz	r0, 800c85c <_strtod_l+0x78c>
 800c822:	f04f 0900 	mov.w	r9, #0
 800c826:	e674      	b.n	800c512 <_strtod_l+0x442>
 800c828:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c82c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c82e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c832:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c836:	35e2      	adds	r5, #226	@ 0xe2
 800c838:	fa01 f305 	lsl.w	r3, r1, r5
 800c83c:	9310      	str	r3, [sp, #64]	@ 0x40
 800c83e:	e7ba      	b.n	800c7b6 <_strtod_l+0x6e6>
 800c840:	2300      	movs	r3, #0
 800c842:	9310      	str	r3, [sp, #64]	@ 0x40
 800c844:	2301      	movs	r3, #1
 800c846:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c848:	e7b5      	b.n	800c7b6 <_strtod_l+0x6e6>
 800c84a:	462a      	mov	r2, r5
 800c84c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c84e:	9805      	ldr	r0, [sp, #20]
 800c850:	f7ff f9bc 	bl	800bbcc <__lshift>
 800c854:	901a      	str	r0, [sp, #104]	@ 0x68
 800c856:	2800      	cmp	r0, #0
 800c858:	d1d9      	bne.n	800c80e <_strtod_l+0x73e>
 800c85a:	e65a      	b.n	800c512 <_strtod_l+0x442>
 800c85c:	2e00      	cmp	r6, #0
 800c85e:	dd07      	ble.n	800c870 <_strtod_l+0x7a0>
 800c860:	4649      	mov	r1, r9
 800c862:	4632      	mov	r2, r6
 800c864:	9805      	ldr	r0, [sp, #20]
 800c866:	f7ff f9b1 	bl	800bbcc <__lshift>
 800c86a:	4681      	mov	r9, r0
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d0d8      	beq.n	800c822 <_strtod_l+0x752>
 800c870:	2f00      	cmp	r7, #0
 800c872:	dd08      	ble.n	800c886 <_strtod_l+0x7b6>
 800c874:	4641      	mov	r1, r8
 800c876:	463a      	mov	r2, r7
 800c878:	9805      	ldr	r0, [sp, #20]
 800c87a:	f7ff f9a7 	bl	800bbcc <__lshift>
 800c87e:	4680      	mov	r8, r0
 800c880:	2800      	cmp	r0, #0
 800c882:	f43f ae46 	beq.w	800c512 <_strtod_l+0x442>
 800c886:	464a      	mov	r2, r9
 800c888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c88a:	9805      	ldr	r0, [sp, #20]
 800c88c:	f7ff fa26 	bl	800bcdc <__mdiff>
 800c890:	4604      	mov	r4, r0
 800c892:	2800      	cmp	r0, #0
 800c894:	f43f ae3d 	beq.w	800c512 <_strtod_l+0x442>
 800c898:	68c3      	ldr	r3, [r0, #12]
 800c89a:	4641      	mov	r1, r8
 800c89c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c89e:	2300      	movs	r3, #0
 800c8a0:	60c3      	str	r3, [r0, #12]
 800c8a2:	f7ff f9ff 	bl	800bca4 <__mcmp>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	da46      	bge.n	800c938 <_strtod_l+0x868>
 800c8aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ac:	ea53 030a 	orrs.w	r3, r3, sl
 800c8b0:	d16c      	bne.n	800c98c <_strtod_l+0x8bc>
 800c8b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d168      	bne.n	800c98c <_strtod_l+0x8bc>
 800c8ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8be:	0d1b      	lsrs	r3, r3, #20
 800c8c0:	051b      	lsls	r3, r3, #20
 800c8c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8c6:	d961      	bls.n	800c98c <_strtod_l+0x8bc>
 800c8c8:	6963      	ldr	r3, [r4, #20]
 800c8ca:	b913      	cbnz	r3, 800c8d2 <_strtod_l+0x802>
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	dd5c      	ble.n	800c98c <_strtod_l+0x8bc>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	9805      	ldr	r0, [sp, #20]
 800c8d8:	f7ff f978 	bl	800bbcc <__lshift>
 800c8dc:	4641      	mov	r1, r8
 800c8de:	4604      	mov	r4, r0
 800c8e0:	f7ff f9e0 	bl	800bca4 <__mcmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	dd51      	ble.n	800c98c <_strtod_l+0x8bc>
 800c8e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8ec:	9a08      	ldr	r2, [sp, #32]
 800c8ee:	0d1b      	lsrs	r3, r3, #20
 800c8f0:	051b      	lsls	r3, r3, #20
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	d06b      	beq.n	800c9ce <_strtod_l+0x8fe>
 800c8f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8fa:	d868      	bhi.n	800c9ce <_strtod_l+0x8fe>
 800c8fc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c900:	f67f ae9d 	bls.w	800c63e <_strtod_l+0x56e>
 800c904:	4b0a      	ldr	r3, [pc, #40]	@ (800c930 <_strtod_l+0x860>)
 800c906:	4650      	mov	r0, sl
 800c908:	4659      	mov	r1, fp
 800c90a:	2200      	movs	r2, #0
 800c90c:	f7f3 fe88 	bl	8000620 <__aeabi_dmul>
 800c910:	4b08      	ldr	r3, [pc, #32]	@ (800c934 <_strtod_l+0x864>)
 800c912:	4682      	mov	sl, r0
 800c914:	468b      	mov	fp, r1
 800c916:	400b      	ands	r3, r1
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f47f ae05 	bne.w	800c528 <_strtod_l+0x458>
 800c91e:	2322      	movs	r3, #34	@ 0x22
 800c920:	9a05      	ldr	r2, [sp, #20]
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	e600      	b.n	800c528 <_strtod_l+0x458>
 800c926:	bf00      	nop
 800c928:	0800e228 	.word	0x0800e228
 800c92c:	fffffc02 	.word	0xfffffc02
 800c930:	39500000 	.word	0x39500000
 800c934:	7ff00000 	.word	0x7ff00000
 800c938:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c93c:	d165      	bne.n	800ca0a <_strtod_l+0x93a>
 800c93e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c944:	b35a      	cbz	r2, 800c99e <_strtod_l+0x8ce>
 800c946:	4a9e      	ldr	r2, [pc, #632]	@ (800cbc0 <_strtod_l+0xaf0>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d12b      	bne.n	800c9a4 <_strtod_l+0x8d4>
 800c94c:	9b08      	ldr	r3, [sp, #32]
 800c94e:	4651      	mov	r1, sl
 800c950:	b303      	cbz	r3, 800c994 <_strtod_l+0x8c4>
 800c952:	465a      	mov	r2, fp
 800c954:	4b9b      	ldr	r3, [pc, #620]	@ (800cbc4 <_strtod_l+0xaf4>)
 800c956:	4013      	ands	r3, r2
 800c958:	f04f 32ff 	mov.w	r2, #4294967295
 800c95c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c960:	d81b      	bhi.n	800c99a <_strtod_l+0x8ca>
 800c962:	0d1b      	lsrs	r3, r3, #20
 800c964:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c968:	fa02 f303 	lsl.w	r3, r2, r3
 800c96c:	4299      	cmp	r1, r3
 800c96e:	d119      	bne.n	800c9a4 <_strtod_l+0x8d4>
 800c970:	4b95      	ldr	r3, [pc, #596]	@ (800cbc8 <_strtod_l+0xaf8>)
 800c972:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c974:	429a      	cmp	r2, r3
 800c976:	d102      	bne.n	800c97e <_strtod_l+0x8ae>
 800c978:	3101      	adds	r1, #1
 800c97a:	f43f adca 	beq.w	800c512 <_strtod_l+0x442>
 800c97e:	4b91      	ldr	r3, [pc, #580]	@ (800cbc4 <_strtod_l+0xaf4>)
 800c980:	f04f 0a00 	mov.w	sl, #0
 800c984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c986:	401a      	ands	r2, r3
 800c988:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c98c:	9b08      	ldr	r3, [sp, #32]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1b8      	bne.n	800c904 <_strtod_l+0x834>
 800c992:	e5c9      	b.n	800c528 <_strtod_l+0x458>
 800c994:	f04f 33ff 	mov.w	r3, #4294967295
 800c998:	e7e8      	b.n	800c96c <_strtod_l+0x89c>
 800c99a:	4613      	mov	r3, r2
 800c99c:	e7e6      	b.n	800c96c <_strtod_l+0x89c>
 800c99e:	ea53 030a 	orrs.w	r3, r3, sl
 800c9a2:	d0a1      	beq.n	800c8e8 <_strtod_l+0x818>
 800c9a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9a6:	b1db      	cbz	r3, 800c9e0 <_strtod_l+0x910>
 800c9a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9aa:	4213      	tst	r3, r2
 800c9ac:	d0ee      	beq.n	800c98c <_strtod_l+0x8bc>
 800c9ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9b0:	4650      	mov	r0, sl
 800c9b2:	9a08      	ldr	r2, [sp, #32]
 800c9b4:	4659      	mov	r1, fp
 800c9b6:	b1bb      	cbz	r3, 800c9e8 <_strtod_l+0x918>
 800c9b8:	f7ff fb6a 	bl	800c090 <sulp>
 800c9bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9c0:	ec53 2b10 	vmov	r2, r3, d0
 800c9c4:	f7f3 fc76 	bl	80002b4 <__adddf3>
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	468b      	mov	fp, r1
 800c9cc:	e7de      	b.n	800c98c <_strtod_l+0x8bc>
 800c9ce:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c9d2:	f04f 3aff 	mov.w	sl, #4294967295
 800c9d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c9da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c9de:	e7d5      	b.n	800c98c <_strtod_l+0x8bc>
 800c9e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9e2:	ea13 0f0a 	tst.w	r3, sl
 800c9e6:	e7e1      	b.n	800c9ac <_strtod_l+0x8dc>
 800c9e8:	f7ff fb52 	bl	800c090 <sulp>
 800c9ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9f0:	ec53 2b10 	vmov	r2, r3, d0
 800c9f4:	f7f3 fc5c 	bl	80002b0 <__aeabi_dsub>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	468b      	mov	fp, r1
 800ca00:	f7f4 f876 	bl	8000af0 <__aeabi_dcmpeq>
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d0c1      	beq.n	800c98c <_strtod_l+0x8bc>
 800ca08:	e619      	b.n	800c63e <_strtod_l+0x56e>
 800ca0a:	4641      	mov	r1, r8
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	f7ff fac9 	bl	800bfa4 <__ratio>
 800ca12:	2200      	movs	r2, #0
 800ca14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca18:	ec57 6b10 	vmov	r6, r7, d0
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	4639      	mov	r1, r7
 800ca20:	f7f4 f87a 	bl	8000b18 <__aeabi_dcmple>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d06f      	beq.n	800cb08 <_strtod_l+0xa38>
 800ca28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d17a      	bne.n	800cb24 <_strtod_l+0xa54>
 800ca2e:	f1ba 0f00 	cmp.w	sl, #0
 800ca32:	d158      	bne.n	800cae6 <_strtod_l+0xa16>
 800ca34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d15a      	bne.n	800caf4 <_strtod_l+0xa24>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4b62      	ldr	r3, [pc, #392]	@ (800cbcc <_strtod_l+0xafc>)
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f4 f85d 	bl	8000b04 <__aeabi_dcmplt>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d159      	bne.n	800cb02 <_strtod_l+0xa32>
 800ca4e:	4630      	mov	r0, r6
 800ca50:	4639      	mov	r1, r7
 800ca52:	2200      	movs	r2, #0
 800ca54:	4b5e      	ldr	r3, [pc, #376]	@ (800cbd0 <_strtod_l+0xb00>)
 800ca56:	f7f3 fde3 	bl	8000620 <__aeabi_dmul>
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	460f      	mov	r7, r1
 800ca5e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca62:	9606      	str	r6, [sp, #24]
 800ca64:	9307      	str	r3, [sp, #28]
 800ca66:	4d57      	ldr	r5, [pc, #348]	@ (800cbc4 <_strtod_l+0xaf4>)
 800ca68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca72:	401d      	ands	r5, r3
 800ca74:	4b57      	ldr	r3, [pc, #348]	@ (800cbd4 <_strtod_l+0xb04>)
 800ca76:	429d      	cmp	r5, r3
 800ca78:	f040 80b0 	bne.w	800cbdc <_strtod_l+0xb0c>
 800ca7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca7e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ca82:	ec4b ab10 	vmov	d0, sl, fp
 800ca86:	f7ff f9c1 	bl	800be0c <__ulp>
 800ca8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca8e:	ec51 0b10 	vmov	r0, r1, d0
 800ca92:	f7f3 fdc5 	bl	8000620 <__aeabi_dmul>
 800ca96:	4652      	mov	r2, sl
 800ca98:	465b      	mov	r3, fp
 800ca9a:	f7f3 fc0b 	bl	80002b4 <__adddf3>
 800ca9e:	460b      	mov	r3, r1
 800caa0:	4948      	ldr	r1, [pc, #288]	@ (800cbc4 <_strtod_l+0xaf4>)
 800caa2:	4682      	mov	sl, r0
 800caa4:	4a4c      	ldr	r2, [pc, #304]	@ (800cbd8 <_strtod_l+0xb08>)
 800caa6:	4019      	ands	r1, r3
 800caa8:	4291      	cmp	r1, r2
 800caaa:	d942      	bls.n	800cb32 <_strtod_l+0xa62>
 800caac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800caae:	4b46      	ldr	r3, [pc, #280]	@ (800cbc8 <_strtod_l+0xaf8>)
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d103      	bne.n	800cabc <_strtod_l+0x9ec>
 800cab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cab6:	3301      	adds	r3, #1
 800cab8:	f43f ad2b 	beq.w	800c512 <_strtod_l+0x442>
 800cabc:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800cbc8 <_strtod_l+0xaf8>
 800cac0:	f04f 3aff 	mov.w	sl, #4294967295
 800cac4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cac6:	9805      	ldr	r0, [sp, #20]
 800cac8:	f7fe fe66 	bl	800b798 <_Bfree>
 800cacc:	4649      	mov	r1, r9
 800cace:	9805      	ldr	r0, [sp, #20]
 800cad0:	f7fe fe62 	bl	800b798 <_Bfree>
 800cad4:	4641      	mov	r1, r8
 800cad6:	9805      	ldr	r0, [sp, #20]
 800cad8:	f7fe fe5e 	bl	800b798 <_Bfree>
 800cadc:	4621      	mov	r1, r4
 800cade:	9805      	ldr	r0, [sp, #20]
 800cae0:	f7fe fe5a 	bl	800b798 <_Bfree>
 800cae4:	e618      	b.n	800c718 <_strtod_l+0x648>
 800cae6:	f1ba 0f01 	cmp.w	sl, #1
 800caea:	d103      	bne.n	800caf4 <_strtod_l+0xa24>
 800caec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f43f ada5 	beq.w	800c63e <_strtod_l+0x56e>
 800caf4:	2600      	movs	r6, #0
 800caf6:	4f35      	ldr	r7, [pc, #212]	@ (800cbcc <_strtod_l+0xafc>)
 800caf8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800cba0 <_strtod_l+0xad0>
 800cafc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb00:	e7b1      	b.n	800ca66 <_strtod_l+0x996>
 800cb02:	2600      	movs	r6, #0
 800cb04:	4f32      	ldr	r7, [pc, #200]	@ (800cbd0 <_strtod_l+0xb00>)
 800cb06:	e7aa      	b.n	800ca5e <_strtod_l+0x98e>
 800cb08:	4b31      	ldr	r3, [pc, #196]	@ (800cbd0 <_strtod_l+0xb00>)
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f7f3 fd86 	bl	8000620 <__aeabi_dmul>
 800cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb16:	4606      	mov	r6, r0
 800cb18:	460f      	mov	r7, r1
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d09f      	beq.n	800ca5e <_strtod_l+0x98e>
 800cb1e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb22:	e7a0      	b.n	800ca66 <_strtod_l+0x996>
 800cb24:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800cba8 <_strtod_l+0xad8>
 800cb28:	ec57 6b17 	vmov	r6, r7, d7
 800cb2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb30:	e799      	b.n	800ca66 <_strtod_l+0x996>
 800cb32:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb36:	9b08      	ldr	r3, [sp, #32]
 800cb38:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1c1      	bne.n	800cac4 <_strtod_l+0x9f4>
 800cb40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb44:	0d1b      	lsrs	r3, r3, #20
 800cb46:	051b      	lsls	r3, r3, #20
 800cb48:	429d      	cmp	r5, r3
 800cb4a:	d1bb      	bne.n	800cac4 <_strtod_l+0x9f4>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	4639      	mov	r1, r7
 800cb50:	f7f4 f8c6 	bl	8000ce0 <__aeabi_d2lz>
 800cb54:	f7f3 fd36 	bl	80005c4 <__aeabi_l2d>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	4639      	mov	r1, r7
 800cb60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb64:	f7f3 fba4 	bl	80002b0 <__aeabi_dsub>
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	ea46 060a 	orr.w	r6, r6, sl
 800cb70:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb76:	431e      	orrs	r6, r3
 800cb78:	d06d      	beq.n	800cc56 <_strtod_l+0xb86>
 800cb7a:	a30d      	add	r3, pc, #52	@ (adr r3, 800cbb0 <_strtod_l+0xae0>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	f7f3 ffc0 	bl	8000b04 <__aeabi_dcmplt>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f47f accf 	bne.w	800c528 <_strtod_l+0x458>
 800cb8a:	a30b      	add	r3, pc, #44	@ (adr r3, 800cbb8 <_strtod_l+0xae8>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb94:	f7f3 ffd4 	bl	8000b40 <__aeabi_dcmpgt>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d093      	beq.n	800cac4 <_strtod_l+0x9f4>
 800cb9c:	e4c4      	b.n	800c528 <_strtod_l+0x458>
 800cb9e:	bf00      	nop
 800cba0:	00000000 	.word	0x00000000
 800cba4:	bff00000 	.word	0xbff00000
 800cba8:	00000000 	.word	0x00000000
 800cbac:	3ff00000 	.word	0x3ff00000
 800cbb0:	94a03595 	.word	0x94a03595
 800cbb4:	3fdfffff 	.word	0x3fdfffff
 800cbb8:	35afe535 	.word	0x35afe535
 800cbbc:	3fe00000 	.word	0x3fe00000
 800cbc0:	000fffff 	.word	0x000fffff
 800cbc4:	7ff00000 	.word	0x7ff00000
 800cbc8:	7fefffff 	.word	0x7fefffff
 800cbcc:	3ff00000 	.word	0x3ff00000
 800cbd0:	3fe00000 	.word	0x3fe00000
 800cbd4:	7fe00000 	.word	0x7fe00000
 800cbd8:	7c9fffff 	.word	0x7c9fffff
 800cbdc:	9b08      	ldr	r3, [sp, #32]
 800cbde:	b323      	cbz	r3, 800cc2a <_strtod_l+0xb5a>
 800cbe0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cbe4:	d821      	bhi.n	800cc2a <_strtod_l+0xb5a>
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	4639      	mov	r1, r7
 800cbea:	a327      	add	r3, pc, #156	@ (adr r3, 800cc88 <_strtod_l+0xbb8>)
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	f7f3 ff92 	bl	8000b18 <__aeabi_dcmple>
 800cbf4:	b1a0      	cbz	r0, 800cc20 <_strtod_l+0xb50>
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7f3 ffe9 	bl	8000bd0 <__aeabi_d2uiz>
 800cbfe:	2801      	cmp	r0, #1
 800cc00:	bf38      	it	cc
 800cc02:	2001      	movcc	r0, #1
 800cc04:	f7f3 fc92 	bl	800052c <__aeabi_ui2d>
 800cc08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	460f      	mov	r7, r1
 800cc0e:	b9fb      	cbnz	r3, 800cc50 <_strtod_l+0xb80>
 800cc10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc14:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc16:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc26:	1b5b      	subs	r3, r3, r5
 800cc28:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc2a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc32:	f7ff f8eb 	bl	800be0c <__ulp>
 800cc36:	4650      	mov	r0, sl
 800cc38:	4659      	mov	r1, fp
 800cc3a:	ec53 2b10 	vmov	r2, r3, d0
 800cc3e:	f7f3 fcef 	bl	8000620 <__aeabi_dmul>
 800cc42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc46:	f7f3 fb35 	bl	80002b4 <__adddf3>
 800cc4a:	4682      	mov	sl, r0
 800cc4c:	468b      	mov	fp, r1
 800cc4e:	e772      	b.n	800cb36 <_strtod_l+0xa66>
 800cc50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cc54:	e7e0      	b.n	800cc18 <_strtod_l+0xb48>
 800cc56:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc90 <_strtod_l+0xbc0>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f7f3 ff52 	bl	8000b04 <__aeabi_dcmplt>
 800cc60:	e79a      	b.n	800cb98 <_strtod_l+0xac8>
 800cc62:	2300      	movs	r3, #0
 800cc64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc68:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	f7ff ba6d 	b.w	800c14a <_strtod_l+0x7a>
 800cc70:	2a65      	cmp	r2, #101	@ 0x65
 800cc72:	f43f ab67 	beq.w	800c344 <_strtod_l+0x274>
 800cc76:	2a45      	cmp	r2, #69	@ 0x45
 800cc78:	f43f ab64 	beq.w	800c344 <_strtod_l+0x274>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f7ff bba0 	b.w	800c3c2 <_strtod_l+0x2f2>
 800cc82:	bf00      	nop
 800cc84:	f3af 8000 	nop.w
 800cc88:	ffc00000 	.word	0xffc00000
 800cc8c:	41dfffff 	.word	0x41dfffff
 800cc90:	94a03595 	.word	0x94a03595
 800cc94:	3fcfffff 	.word	0x3fcfffff

0800cc98 <_strtod_r>:
 800cc98:	4b01      	ldr	r3, [pc, #4]	@ (800cca0 <_strtod_r+0x8>)
 800cc9a:	f7ff ba19 	b.w	800c0d0 <_strtod_l>
 800cc9e:	bf00      	nop
 800cca0:	20000080 	.word	0x20000080

0800cca4 <_strtol_l.constprop.0>:
 800cca4:	2b24      	cmp	r3, #36	@ 0x24
 800cca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccaa:	4686      	mov	lr, r0
 800ccac:	4690      	mov	r8, r2
 800ccae:	d801      	bhi.n	800ccb4 <_strtol_l.constprop.0+0x10>
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d106      	bne.n	800ccc2 <_strtol_l.constprop.0+0x1e>
 800ccb4:	f7fd fd9c 	bl	800a7f0 <__errno>
 800ccb8:	2316      	movs	r3, #22
 800ccba:	6003      	str	r3, [r0, #0]
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	4833      	ldr	r0, [pc, #204]	@ (800cd94 <_strtol_l.constprop.0+0xf0>)
 800ccc6:	462a      	mov	r2, r5
 800ccc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cccc:	5d06      	ldrb	r6, [r0, r4]
 800ccce:	f016 0608 	ands.w	r6, r6, #8
 800ccd2:	d1f8      	bne.n	800ccc6 <_strtol_l.constprop.0+0x22>
 800ccd4:	2c2d      	cmp	r4, #45	@ 0x2d
 800ccd6:	d12d      	bne.n	800cd34 <_strtol_l.constprop.0+0x90>
 800ccd8:	782c      	ldrb	r4, [r5, #0]
 800ccda:	2601      	movs	r6, #1
 800ccdc:	1c95      	adds	r5, r2, #2
 800ccde:	f033 0210 	bics.w	r2, r3, #16
 800cce2:	d109      	bne.n	800ccf8 <_strtol_l.constprop.0+0x54>
 800cce4:	2c30      	cmp	r4, #48	@ 0x30
 800cce6:	d12a      	bne.n	800cd3e <_strtol_l.constprop.0+0x9a>
 800cce8:	782a      	ldrb	r2, [r5, #0]
 800ccea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ccee:	2a58      	cmp	r2, #88	@ 0x58
 800ccf0:	d125      	bne.n	800cd3e <_strtol_l.constprop.0+0x9a>
 800ccf2:	786c      	ldrb	r4, [r5, #1]
 800ccf4:	2310      	movs	r3, #16
 800ccf6:	3502      	adds	r5, #2
 800ccf8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd02:	4610      	mov	r0, r2
 800cd04:	fbbc f9f3 	udiv	r9, ip, r3
 800cd08:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd10:	2f09      	cmp	r7, #9
 800cd12:	d81b      	bhi.n	800cd4c <_strtol_l.constprop.0+0xa8>
 800cd14:	463c      	mov	r4, r7
 800cd16:	42a3      	cmp	r3, r4
 800cd18:	dd27      	ble.n	800cd6a <_strtol_l.constprop.0+0xc6>
 800cd1a:	1c57      	adds	r7, r2, #1
 800cd1c:	d007      	beq.n	800cd2e <_strtol_l.constprop.0+0x8a>
 800cd1e:	4581      	cmp	r9, r0
 800cd20:	d320      	bcc.n	800cd64 <_strtol_l.constprop.0+0xc0>
 800cd22:	d101      	bne.n	800cd28 <_strtol_l.constprop.0+0x84>
 800cd24:	45a2      	cmp	sl, r4
 800cd26:	db1d      	blt.n	800cd64 <_strtol_l.constprop.0+0xc0>
 800cd28:	fb00 4003 	mla	r0, r0, r3, r4
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd32:	e7eb      	b.n	800cd0c <_strtol_l.constprop.0+0x68>
 800cd34:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd36:	bf04      	itt	eq
 800cd38:	782c      	ldrbeq	r4, [r5, #0]
 800cd3a:	1c95      	addeq	r5, r2, #2
 800cd3c:	e7cf      	b.n	800ccde <_strtol_l.constprop.0+0x3a>
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1da      	bne.n	800ccf8 <_strtol_l.constprop.0+0x54>
 800cd42:	2c30      	cmp	r4, #48	@ 0x30
 800cd44:	bf0c      	ite	eq
 800cd46:	2308      	moveq	r3, #8
 800cd48:	230a      	movne	r3, #10
 800cd4a:	e7d5      	b.n	800ccf8 <_strtol_l.constprop.0+0x54>
 800cd4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cd50:	2f19      	cmp	r7, #25
 800cd52:	d801      	bhi.n	800cd58 <_strtol_l.constprop.0+0xb4>
 800cd54:	3c37      	subs	r4, #55	@ 0x37
 800cd56:	e7de      	b.n	800cd16 <_strtol_l.constprop.0+0x72>
 800cd58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cd5c:	2f19      	cmp	r7, #25
 800cd5e:	d804      	bhi.n	800cd6a <_strtol_l.constprop.0+0xc6>
 800cd60:	3c57      	subs	r4, #87	@ 0x57
 800cd62:	e7d8      	b.n	800cd16 <_strtol_l.constprop.0+0x72>
 800cd64:	f04f 32ff 	mov.w	r2, #4294967295
 800cd68:	e7e1      	b.n	800cd2e <_strtol_l.constprop.0+0x8a>
 800cd6a:	1c53      	adds	r3, r2, #1
 800cd6c:	d108      	bne.n	800cd80 <_strtol_l.constprop.0+0xdc>
 800cd6e:	2322      	movs	r3, #34	@ 0x22
 800cd70:	4660      	mov	r0, ip
 800cd72:	f8ce 3000 	str.w	r3, [lr]
 800cd76:	f1b8 0f00 	cmp.w	r8, #0
 800cd7a:	d0a0      	beq.n	800ccbe <_strtol_l.constprop.0+0x1a>
 800cd7c:	1e69      	subs	r1, r5, #1
 800cd7e:	e006      	b.n	800cd8e <_strtol_l.constprop.0+0xea>
 800cd80:	b106      	cbz	r6, 800cd84 <_strtol_l.constprop.0+0xe0>
 800cd82:	4240      	negs	r0, r0
 800cd84:	f1b8 0f00 	cmp.w	r8, #0
 800cd88:	d099      	beq.n	800ccbe <_strtol_l.constprop.0+0x1a>
 800cd8a:	2a00      	cmp	r2, #0
 800cd8c:	d1f6      	bne.n	800cd7c <_strtol_l.constprop.0+0xd8>
 800cd8e:	f8c8 1000 	str.w	r1, [r8]
 800cd92:	e794      	b.n	800ccbe <_strtol_l.constprop.0+0x1a>
 800cd94:	0800e251 	.word	0x0800e251

0800cd98 <_strtol_r>:
 800cd98:	f7ff bf84 	b.w	800cca4 <_strtol_l.constprop.0>

0800cd9c <__ssputs_r>:
 800cd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda0:	461f      	mov	r7, r3
 800cda2:	688e      	ldr	r6, [r1, #8]
 800cda4:	4682      	mov	sl, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	42be      	cmp	r6, r7
 800cdaa:	4690      	mov	r8, r2
 800cdac:	680b      	ldr	r3, [r1, #0]
 800cdae:	d82d      	bhi.n	800ce0c <__ssputs_r+0x70>
 800cdb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cdb8:	d026      	beq.n	800ce08 <__ssputs_r+0x6c>
 800cdba:	6965      	ldr	r5, [r4, #20]
 800cdbc:	6909      	ldr	r1, [r1, #16]
 800cdbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdc2:	eba3 0901 	sub.w	r9, r3, r1
 800cdc6:	1c7b      	adds	r3, r7, #1
 800cdc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdcc:	444b      	add	r3, r9
 800cdce:	106d      	asrs	r5, r5, #1
 800cdd0:	429d      	cmp	r5, r3
 800cdd2:	bf38      	it	cc
 800cdd4:	461d      	movcc	r5, r3
 800cdd6:	0553      	lsls	r3, r2, #21
 800cdd8:	d527      	bpl.n	800ce2a <__ssputs_r+0x8e>
 800cdda:	4629      	mov	r1, r5
 800cddc:	f7fe fc10 	bl	800b600 <_malloc_r>
 800cde0:	4606      	mov	r6, r0
 800cde2:	b360      	cbz	r0, 800ce3e <__ssputs_r+0xa2>
 800cde4:	464a      	mov	r2, r9
 800cde6:	6921      	ldr	r1, [r4, #16]
 800cde8:	f000 fbee 	bl	800d5c8 <memcpy>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	6126      	str	r6, [r4, #16]
 800cdfa:	444e      	add	r6, r9
 800cdfc:	6165      	str	r5, [r4, #20]
 800cdfe:	eba5 0509 	sub.w	r5, r5, r9
 800ce02:	6026      	str	r6, [r4, #0]
 800ce04:	463e      	mov	r6, r7
 800ce06:	60a5      	str	r5, [r4, #8]
 800ce08:	42be      	cmp	r6, r7
 800ce0a:	d900      	bls.n	800ce0e <__ssputs_r+0x72>
 800ce0c:	463e      	mov	r6, r7
 800ce0e:	4632      	mov	r2, r6
 800ce10:	4641      	mov	r1, r8
 800ce12:	6820      	ldr	r0, [r4, #0]
 800ce14:	f000 fb9c 	bl	800d550 <memmove>
 800ce18:	68a3      	ldr	r3, [r4, #8]
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	1b9b      	subs	r3, r3, r6
 800ce1e:	60a3      	str	r3, [r4, #8]
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	4433      	add	r3, r6
 800ce24:	6023      	str	r3, [r4, #0]
 800ce26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2a:	462a      	mov	r2, r5
 800ce2c:	f000 ff5d 	bl	800dcea <_realloc_r>
 800ce30:	4606      	mov	r6, r0
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d1e0      	bne.n	800cdf8 <__ssputs_r+0x5c>
 800ce36:	6921      	ldr	r1, [r4, #16]
 800ce38:	4650      	mov	r0, sl
 800ce3a:	f7fe fb6d 	bl	800b518 <_free_r>
 800ce3e:	230c      	movs	r3, #12
 800ce40:	f04f 30ff 	mov.w	r0, #4294967295
 800ce44:	f8ca 3000 	str.w	r3, [sl]
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	e7e9      	b.n	800ce26 <__ssputs_r+0x8a>
	...

0800ce54 <_svfiprintf_r>:
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	4698      	mov	r8, r3
 800ce5a:	898b      	ldrh	r3, [r1, #12]
 800ce5c:	b09d      	sub	sp, #116	@ 0x74
 800ce5e:	4607      	mov	r7, r0
 800ce60:	061b      	lsls	r3, r3, #24
 800ce62:	460d      	mov	r5, r1
 800ce64:	4614      	mov	r4, r2
 800ce66:	d510      	bpl.n	800ce8a <_svfiprintf_r+0x36>
 800ce68:	690b      	ldr	r3, [r1, #16]
 800ce6a:	b973      	cbnz	r3, 800ce8a <_svfiprintf_r+0x36>
 800ce6c:	2140      	movs	r1, #64	@ 0x40
 800ce6e:	f7fe fbc7 	bl	800b600 <_malloc_r>
 800ce72:	6028      	str	r0, [r5, #0]
 800ce74:	6128      	str	r0, [r5, #16]
 800ce76:	b930      	cbnz	r0, 800ce86 <_svfiprintf_r+0x32>
 800ce78:	230c      	movs	r3, #12
 800ce7a:	603b      	str	r3, [r7, #0]
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	b01d      	add	sp, #116	@ 0x74
 800ce82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce86:	2340      	movs	r3, #64	@ 0x40
 800ce88:	616b      	str	r3, [r5, #20]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce90:	f04f 0901 	mov.w	r9, #1
 800ce94:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800d038 <_svfiprintf_r+0x1e4>
 800ce98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce9a:	2320      	movs	r3, #32
 800ce9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cea0:	2330      	movs	r3, #48	@ 0x30
 800cea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cea6:	4623      	mov	r3, r4
 800cea8:	469a      	mov	sl, r3
 800ceaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceae:	b10a      	cbz	r2, 800ceb4 <_svfiprintf_r+0x60>
 800ceb0:	2a25      	cmp	r2, #37	@ 0x25
 800ceb2:	d1f9      	bne.n	800cea8 <_svfiprintf_r+0x54>
 800ceb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ceb8:	d00b      	beq.n	800ced2 <_svfiprintf_r+0x7e>
 800ceba:	465b      	mov	r3, fp
 800cebc:	4622      	mov	r2, r4
 800cebe:	4629      	mov	r1, r5
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff ff6b 	bl	800cd9c <__ssputs_r>
 800cec6:	3001      	adds	r0, #1
 800cec8:	f000 80a7 	beq.w	800d01a <_svfiprintf_r+0x1c6>
 800cecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cece:	445a      	add	r2, fp
 800ced0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ced2:	f89a 3000 	ldrb.w	r3, [sl]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 809f 	beq.w	800d01a <_svfiprintf_r+0x1c6>
 800cedc:	2300      	movs	r3, #0
 800cede:	f04f 32ff 	mov.w	r2, #4294967295
 800cee2:	f10a 0a01 	add.w	sl, sl, #1
 800cee6:	9304      	str	r3, [sp, #16]
 800cee8:	9307      	str	r3, [sp, #28]
 800ceea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceee:	931a      	str	r3, [sp, #104]	@ 0x68
 800cef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cef4:	4654      	mov	r4, sl
 800cef6:	2205      	movs	r2, #5
 800cef8:	484f      	ldr	r0, [pc, #316]	@ (800d038 <_svfiprintf_r+0x1e4>)
 800cefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cefe:	f7fd fca4 	bl	800a84a <memchr>
 800cf02:	9a04      	ldr	r2, [sp, #16]
 800cf04:	b9d8      	cbnz	r0, 800cf3e <_svfiprintf_r+0xea>
 800cf06:	06d0      	lsls	r0, r2, #27
 800cf08:	bf44      	itt	mi
 800cf0a:	2320      	movmi	r3, #32
 800cf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf10:	0711      	lsls	r1, r2, #28
 800cf12:	bf44      	itt	mi
 800cf14:	232b      	movmi	r3, #43	@ 0x2b
 800cf16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf20:	d015      	beq.n	800cf4e <_svfiprintf_r+0xfa>
 800cf22:	9a07      	ldr	r2, [sp, #28]
 800cf24:	4654      	mov	r4, sl
 800cf26:	2000      	movs	r0, #0
 800cf28:	f04f 0c0a 	mov.w	ip, #10
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf32:	3b30      	subs	r3, #48	@ 0x30
 800cf34:	2b09      	cmp	r3, #9
 800cf36:	d94b      	bls.n	800cfd0 <_svfiprintf_r+0x17c>
 800cf38:	b1b0      	cbz	r0, 800cf68 <_svfiprintf_r+0x114>
 800cf3a:	9207      	str	r2, [sp, #28]
 800cf3c:	e014      	b.n	800cf68 <_svfiprintf_r+0x114>
 800cf3e:	eba0 0308 	sub.w	r3, r0, r8
 800cf42:	46a2      	mov	sl, r4
 800cf44:	fa09 f303 	lsl.w	r3, r9, r3
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	e7d2      	b.n	800cef4 <_svfiprintf_r+0xa0>
 800cf4e:	9b03      	ldr	r3, [sp, #12]
 800cf50:	1d19      	adds	r1, r3, #4
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	9103      	str	r1, [sp, #12]
 800cf58:	bfbb      	ittet	lt
 800cf5a:	425b      	neglt	r3, r3
 800cf5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf60:	9307      	strge	r3, [sp, #28]
 800cf62:	9307      	strlt	r3, [sp, #28]
 800cf64:	bfb8      	it	lt
 800cf66:	9204      	strlt	r2, [sp, #16]
 800cf68:	7823      	ldrb	r3, [r4, #0]
 800cf6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf6c:	d10a      	bne.n	800cf84 <_svfiprintf_r+0x130>
 800cf6e:	7863      	ldrb	r3, [r4, #1]
 800cf70:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf72:	d132      	bne.n	800cfda <_svfiprintf_r+0x186>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	3402      	adds	r4, #2
 800cf78:	1d1a      	adds	r2, r3, #4
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf80:	9203      	str	r2, [sp, #12]
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d048 <_svfiprintf_r+0x1f4>
 800cf88:	2203      	movs	r2, #3
 800cf8a:	7821      	ldrb	r1, [r4, #0]
 800cf8c:	4650      	mov	r0, sl
 800cf8e:	f7fd fc5c 	bl	800a84a <memchr>
 800cf92:	b138      	cbz	r0, 800cfa4 <_svfiprintf_r+0x150>
 800cf94:	eba0 000a 	sub.w	r0, r0, sl
 800cf98:	2240      	movs	r2, #64	@ 0x40
 800cf9a:	9b04      	ldr	r3, [sp, #16]
 800cf9c:	3401      	adds	r4, #1
 800cf9e:	4082      	lsls	r2, r0
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	9304      	str	r3, [sp, #16]
 800cfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa8:	2206      	movs	r2, #6
 800cfaa:	4824      	ldr	r0, [pc, #144]	@ (800d03c <_svfiprintf_r+0x1e8>)
 800cfac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfb0:	f7fd fc4b 	bl	800a84a <memchr>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d036      	beq.n	800d026 <_svfiprintf_r+0x1d2>
 800cfb8:	4b21      	ldr	r3, [pc, #132]	@ (800d040 <_svfiprintf_r+0x1ec>)
 800cfba:	bb1b      	cbnz	r3, 800d004 <_svfiprintf_r+0x1b0>
 800cfbc:	9b03      	ldr	r3, [sp, #12]
 800cfbe:	3307      	adds	r3, #7
 800cfc0:	f023 0307 	bic.w	r3, r3, #7
 800cfc4:	3308      	adds	r3, #8
 800cfc6:	9303      	str	r3, [sp, #12]
 800cfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfca:	4433      	add	r3, r6
 800cfcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfce:	e76a      	b.n	800cea6 <_svfiprintf_r+0x52>
 800cfd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfd4:	460c      	mov	r4, r1
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7a8      	b.n	800cf2c <_svfiprintf_r+0xd8>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	3401      	adds	r4, #1
 800cfde:	f04f 0c0a 	mov.w	ip, #10
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	9305      	str	r3, [sp, #20]
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfec:	3a30      	subs	r2, #48	@ 0x30
 800cfee:	2a09      	cmp	r2, #9
 800cff0:	d903      	bls.n	800cffa <_svfiprintf_r+0x1a6>
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0c6      	beq.n	800cf84 <_svfiprintf_r+0x130>
 800cff6:	9105      	str	r1, [sp, #20]
 800cff8:	e7c4      	b.n	800cf84 <_svfiprintf_r+0x130>
 800cffa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cffe:	4604      	mov	r4, r0
 800d000:	2301      	movs	r3, #1
 800d002:	e7f0      	b.n	800cfe6 <_svfiprintf_r+0x192>
 800d004:	ab03      	add	r3, sp, #12
 800d006:	462a      	mov	r2, r5
 800d008:	a904      	add	r1, sp, #16
 800d00a:	4638      	mov	r0, r7
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	4b0d      	ldr	r3, [pc, #52]	@ (800d044 <_svfiprintf_r+0x1f0>)
 800d010:	f7fc fc96 	bl	8009940 <_printf_float>
 800d014:	1c42      	adds	r2, r0, #1
 800d016:	4606      	mov	r6, r0
 800d018:	d1d6      	bne.n	800cfc8 <_svfiprintf_r+0x174>
 800d01a:	89ab      	ldrh	r3, [r5, #12]
 800d01c:	065b      	lsls	r3, r3, #25
 800d01e:	f53f af2d 	bmi.w	800ce7c <_svfiprintf_r+0x28>
 800d022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d024:	e72c      	b.n	800ce80 <_svfiprintf_r+0x2c>
 800d026:	ab03      	add	r3, sp, #12
 800d028:	462a      	mov	r2, r5
 800d02a:	a904      	add	r1, sp, #16
 800d02c:	4638      	mov	r0, r7
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	4b04      	ldr	r3, [pc, #16]	@ (800d044 <_svfiprintf_r+0x1f0>)
 800d032:	f7fc ff21 	bl	8009e78 <_printf_i>
 800d036:	e7ed      	b.n	800d014 <_svfiprintf_r+0x1c0>
 800d038:	0800e351 	.word	0x0800e351
 800d03c:	0800e35b 	.word	0x0800e35b
 800d040:	08009941 	.word	0x08009941
 800d044:	0800cd9d 	.word	0x0800cd9d
 800d048:	0800e357 	.word	0x0800e357

0800d04c <__sfputc_r>:
 800d04c:	6893      	ldr	r3, [r2, #8]
 800d04e:	3b01      	subs	r3, #1
 800d050:	2b00      	cmp	r3, #0
 800d052:	6093      	str	r3, [r2, #8]
 800d054:	b410      	push	{r4}
 800d056:	da08      	bge.n	800d06a <__sfputc_r+0x1e>
 800d058:	6994      	ldr	r4, [r2, #24]
 800d05a:	42a3      	cmp	r3, r4
 800d05c:	db01      	blt.n	800d062 <__sfputc_r+0x16>
 800d05e:	290a      	cmp	r1, #10
 800d060:	d103      	bne.n	800d06a <__sfputc_r+0x1e>
 800d062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d066:	f000 b9df 	b.w	800d428 <__swbuf_r>
 800d06a:	6813      	ldr	r3, [r2, #0]
 800d06c:	1c58      	adds	r0, r3, #1
 800d06e:	6010      	str	r0, [r2, #0]
 800d070:	4608      	mov	r0, r1
 800d072:	7019      	strb	r1, [r3, #0]
 800d074:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <__sfputs_r>:
 800d07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07c:	4606      	mov	r6, r0
 800d07e:	460f      	mov	r7, r1
 800d080:	4614      	mov	r4, r2
 800d082:	18d5      	adds	r5, r2, r3
 800d084:	42ac      	cmp	r4, r5
 800d086:	d101      	bne.n	800d08c <__sfputs_r+0x12>
 800d088:	2000      	movs	r0, #0
 800d08a:	e007      	b.n	800d09c <__sfputs_r+0x22>
 800d08c:	463a      	mov	r2, r7
 800d08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d092:	4630      	mov	r0, r6
 800d094:	f7ff ffda 	bl	800d04c <__sfputc_r>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d1f3      	bne.n	800d084 <__sfputs_r+0xa>
 800d09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0a0 <_vfiprintf_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	b09d      	sub	sp, #116	@ 0x74
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	4698      	mov	r8, r3
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	b118      	cbz	r0, 800d0b8 <_vfiprintf_r+0x18>
 800d0b0:	6a03      	ldr	r3, [r0, #32]
 800d0b2:	b90b      	cbnz	r3, 800d0b8 <_vfiprintf_r+0x18>
 800d0b4:	f7fd fa9e 	bl	800a5f4 <__sinit>
 800d0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0ba:	07d9      	lsls	r1, r3, #31
 800d0bc:	d405      	bmi.n	800d0ca <_vfiprintf_r+0x2a>
 800d0be:	89ab      	ldrh	r3, [r5, #12]
 800d0c0:	059a      	lsls	r2, r3, #22
 800d0c2:	d402      	bmi.n	800d0ca <_vfiprintf_r+0x2a>
 800d0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0c6:	f7fd fbbe 	bl	800a846 <__retarget_lock_acquire_recursive>
 800d0ca:	89ab      	ldrh	r3, [r5, #12]
 800d0cc:	071b      	lsls	r3, r3, #28
 800d0ce:	d501      	bpl.n	800d0d4 <_vfiprintf_r+0x34>
 800d0d0:	692b      	ldr	r3, [r5, #16]
 800d0d2:	b99b      	cbnz	r3, 800d0fc <_vfiprintf_r+0x5c>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f000 f9e4 	bl	800d4a4 <__swsetup_r>
 800d0dc:	b170      	cbz	r0, 800d0fc <_vfiprintf_r+0x5c>
 800d0de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0e0:	07dc      	lsls	r4, r3, #31
 800d0e2:	d504      	bpl.n	800d0ee <_vfiprintf_r+0x4e>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	b01d      	add	sp, #116	@ 0x74
 800d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	0598      	lsls	r0, r3, #22
 800d0f2:	d4f7      	bmi.n	800d0e4 <_vfiprintf_r+0x44>
 800d0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0f6:	f7fd fba7 	bl	800a848 <__retarget_lock_release_recursive>
 800d0fa:	e7f3      	b.n	800d0e4 <_vfiprintf_r+0x44>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d102:	f04f 0901 	mov.w	r9, #1
 800d106:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d2bc <_vfiprintf_r+0x21c>
 800d10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d10c:	2320      	movs	r3, #32
 800d10e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d112:	2330      	movs	r3, #48	@ 0x30
 800d114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d118:	4623      	mov	r3, r4
 800d11a:	469a      	mov	sl, r3
 800d11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d120:	b10a      	cbz	r2, 800d126 <_vfiprintf_r+0x86>
 800d122:	2a25      	cmp	r2, #37	@ 0x25
 800d124:	d1f9      	bne.n	800d11a <_vfiprintf_r+0x7a>
 800d126:	ebba 0b04 	subs.w	fp, sl, r4
 800d12a:	d00b      	beq.n	800d144 <_vfiprintf_r+0xa4>
 800d12c:	465b      	mov	r3, fp
 800d12e:	4622      	mov	r2, r4
 800d130:	4629      	mov	r1, r5
 800d132:	4630      	mov	r0, r6
 800d134:	f7ff ffa1 	bl	800d07a <__sfputs_r>
 800d138:	3001      	adds	r0, #1
 800d13a:	f000 80a7 	beq.w	800d28c <_vfiprintf_r+0x1ec>
 800d13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d140:	445a      	add	r2, fp
 800d142:	9209      	str	r2, [sp, #36]	@ 0x24
 800d144:	f89a 3000 	ldrb.w	r3, [sl]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 809f 	beq.w	800d28c <_vfiprintf_r+0x1ec>
 800d14e:	2300      	movs	r3, #0
 800d150:	f04f 32ff 	mov.w	r2, #4294967295
 800d154:	f10a 0a01 	add.w	sl, sl, #1
 800d158:	9304      	str	r3, [sp, #16]
 800d15a:	9307      	str	r3, [sp, #28]
 800d15c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d160:	931a      	str	r3, [sp, #104]	@ 0x68
 800d162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d166:	4654      	mov	r4, sl
 800d168:	2205      	movs	r2, #5
 800d16a:	4854      	ldr	r0, [pc, #336]	@ (800d2bc <_vfiprintf_r+0x21c>)
 800d16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d170:	f7fd fb6b 	bl	800a84a <memchr>
 800d174:	9a04      	ldr	r2, [sp, #16]
 800d176:	b9d8      	cbnz	r0, 800d1b0 <_vfiprintf_r+0x110>
 800d178:	06d1      	lsls	r1, r2, #27
 800d17a:	bf44      	itt	mi
 800d17c:	2320      	movmi	r3, #32
 800d17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d182:	0713      	lsls	r3, r2, #28
 800d184:	bf44      	itt	mi
 800d186:	232b      	movmi	r3, #43	@ 0x2b
 800d188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d18c:	f89a 3000 	ldrb.w	r3, [sl]
 800d190:	2b2a      	cmp	r3, #42	@ 0x2a
 800d192:	d015      	beq.n	800d1c0 <_vfiprintf_r+0x120>
 800d194:	9a07      	ldr	r2, [sp, #28]
 800d196:	4654      	mov	r4, sl
 800d198:	2000      	movs	r0, #0
 800d19a:	f04f 0c0a 	mov.w	ip, #10
 800d19e:	4621      	mov	r1, r4
 800d1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a4:	3b30      	subs	r3, #48	@ 0x30
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d94b      	bls.n	800d242 <_vfiprintf_r+0x1a2>
 800d1aa:	b1b0      	cbz	r0, 800d1da <_vfiprintf_r+0x13a>
 800d1ac:	9207      	str	r2, [sp, #28]
 800d1ae:	e014      	b.n	800d1da <_vfiprintf_r+0x13a>
 800d1b0:	eba0 0308 	sub.w	r3, r0, r8
 800d1b4:	46a2      	mov	sl, r4
 800d1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	e7d2      	b.n	800d166 <_vfiprintf_r+0xc6>
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	1d19      	adds	r1, r3, #4
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	9103      	str	r1, [sp, #12]
 800d1ca:	bfbb      	ittet	lt
 800d1cc:	425b      	neglt	r3, r3
 800d1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d1d2:	9307      	strge	r3, [sp, #28]
 800d1d4:	9307      	strlt	r3, [sp, #28]
 800d1d6:	bfb8      	it	lt
 800d1d8:	9204      	strlt	r2, [sp, #16]
 800d1da:	7823      	ldrb	r3, [r4, #0]
 800d1dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1de:	d10a      	bne.n	800d1f6 <_vfiprintf_r+0x156>
 800d1e0:	7863      	ldrb	r3, [r4, #1]
 800d1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e4:	d132      	bne.n	800d24c <_vfiprintf_r+0x1ac>
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	3402      	adds	r4, #2
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1f2:	9203      	str	r2, [sp, #12]
 800d1f4:	9305      	str	r3, [sp, #20]
 800d1f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2cc <_vfiprintf_r+0x22c>
 800d1fa:	2203      	movs	r2, #3
 800d1fc:	7821      	ldrb	r1, [r4, #0]
 800d1fe:	4650      	mov	r0, sl
 800d200:	f7fd fb23 	bl	800a84a <memchr>
 800d204:	b138      	cbz	r0, 800d216 <_vfiprintf_r+0x176>
 800d206:	eba0 000a 	sub.w	r0, r0, sl
 800d20a:	2240      	movs	r2, #64	@ 0x40
 800d20c:	9b04      	ldr	r3, [sp, #16]
 800d20e:	3401      	adds	r4, #1
 800d210:	4082      	lsls	r2, r0
 800d212:	4313      	orrs	r3, r2
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21a:	2206      	movs	r2, #6
 800d21c:	4828      	ldr	r0, [pc, #160]	@ (800d2c0 <_vfiprintf_r+0x220>)
 800d21e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d222:	f7fd fb12 	bl	800a84a <memchr>
 800d226:	2800      	cmp	r0, #0
 800d228:	d03f      	beq.n	800d2aa <_vfiprintf_r+0x20a>
 800d22a:	4b26      	ldr	r3, [pc, #152]	@ (800d2c4 <_vfiprintf_r+0x224>)
 800d22c:	bb1b      	cbnz	r3, 800d276 <_vfiprintf_r+0x1d6>
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	3307      	adds	r3, #7
 800d232:	f023 0307 	bic.w	r3, r3, #7
 800d236:	3308      	adds	r3, #8
 800d238:	9303      	str	r3, [sp, #12]
 800d23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23c:	443b      	add	r3, r7
 800d23e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d240:	e76a      	b.n	800d118 <_vfiprintf_r+0x78>
 800d242:	fb0c 3202 	mla	r2, ip, r2, r3
 800d246:	460c      	mov	r4, r1
 800d248:	2001      	movs	r0, #1
 800d24a:	e7a8      	b.n	800d19e <_vfiprintf_r+0xfe>
 800d24c:	2300      	movs	r3, #0
 800d24e:	3401      	adds	r4, #1
 800d250:	f04f 0c0a 	mov.w	ip, #10
 800d254:	4619      	mov	r1, r3
 800d256:	9305      	str	r3, [sp, #20]
 800d258:	4620      	mov	r0, r4
 800d25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d25e:	3a30      	subs	r2, #48	@ 0x30
 800d260:	2a09      	cmp	r2, #9
 800d262:	d903      	bls.n	800d26c <_vfiprintf_r+0x1cc>
 800d264:	2b00      	cmp	r3, #0
 800d266:	d0c6      	beq.n	800d1f6 <_vfiprintf_r+0x156>
 800d268:	9105      	str	r1, [sp, #20]
 800d26a:	e7c4      	b.n	800d1f6 <_vfiprintf_r+0x156>
 800d26c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d270:	4604      	mov	r4, r0
 800d272:	2301      	movs	r3, #1
 800d274:	e7f0      	b.n	800d258 <_vfiprintf_r+0x1b8>
 800d276:	ab03      	add	r3, sp, #12
 800d278:	462a      	mov	r2, r5
 800d27a:	a904      	add	r1, sp, #16
 800d27c:	4630      	mov	r0, r6
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	4b11      	ldr	r3, [pc, #68]	@ (800d2c8 <_vfiprintf_r+0x228>)
 800d282:	f7fc fb5d 	bl	8009940 <_printf_float>
 800d286:	4607      	mov	r7, r0
 800d288:	1c78      	adds	r0, r7, #1
 800d28a:	d1d6      	bne.n	800d23a <_vfiprintf_r+0x19a>
 800d28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d28e:	07d9      	lsls	r1, r3, #31
 800d290:	d405      	bmi.n	800d29e <_vfiprintf_r+0x1fe>
 800d292:	89ab      	ldrh	r3, [r5, #12]
 800d294:	059a      	lsls	r2, r3, #22
 800d296:	d402      	bmi.n	800d29e <_vfiprintf_r+0x1fe>
 800d298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29a:	f7fd fad5 	bl	800a848 <__retarget_lock_release_recursive>
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	065b      	lsls	r3, r3, #25
 800d2a2:	f53f af1f 	bmi.w	800d0e4 <_vfiprintf_r+0x44>
 800d2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a8:	e71e      	b.n	800d0e8 <_vfiprintf_r+0x48>
 800d2aa:	ab03      	add	r3, sp, #12
 800d2ac:	462a      	mov	r2, r5
 800d2ae:	a904      	add	r1, sp, #16
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	9300      	str	r3, [sp, #0]
 800d2b4:	4b04      	ldr	r3, [pc, #16]	@ (800d2c8 <_vfiprintf_r+0x228>)
 800d2b6:	f7fc fddf 	bl	8009e78 <_printf_i>
 800d2ba:	e7e4      	b.n	800d286 <_vfiprintf_r+0x1e6>
 800d2bc:	0800e351 	.word	0x0800e351
 800d2c0:	0800e35b 	.word	0x0800e35b
 800d2c4:	08009941 	.word	0x08009941
 800d2c8:	0800d07b 	.word	0x0800d07b
 800d2cc:	0800e357 	.word	0x0800e357

0800d2d0 <__sflush_r>:
 800d2d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d8:	0716      	lsls	r6, r2, #28
 800d2da:	4605      	mov	r5, r0
 800d2dc:	460c      	mov	r4, r1
 800d2de:	d454      	bmi.n	800d38a <__sflush_r+0xba>
 800d2e0:	684b      	ldr	r3, [r1, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	dc02      	bgt.n	800d2ec <__sflush_r+0x1c>
 800d2e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dd48      	ble.n	800d37e <__sflush_r+0xae>
 800d2ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2ee:	2e00      	cmp	r6, #0
 800d2f0:	d045      	beq.n	800d37e <__sflush_r+0xae>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d2f8:	682f      	ldr	r7, [r5, #0]
 800d2fa:	6a21      	ldr	r1, [r4, #32]
 800d2fc:	602b      	str	r3, [r5, #0]
 800d2fe:	d030      	beq.n	800d362 <__sflush_r+0x92>
 800d300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	0759      	lsls	r1, r3, #29
 800d306:	d505      	bpl.n	800d314 <__sflush_r+0x44>
 800d308:	6863      	ldr	r3, [r4, #4]
 800d30a:	1ad2      	subs	r2, r2, r3
 800d30c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d30e:	b10b      	cbz	r3, 800d314 <__sflush_r+0x44>
 800d310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d312:	1ad2      	subs	r2, r2, r3
 800d314:	2300      	movs	r3, #0
 800d316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d318:	6a21      	ldr	r1, [r4, #32]
 800d31a:	4628      	mov	r0, r5
 800d31c:	47b0      	blx	r6
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	d106      	bne.n	800d332 <__sflush_r+0x62>
 800d324:	6829      	ldr	r1, [r5, #0]
 800d326:	291d      	cmp	r1, #29
 800d328:	d82b      	bhi.n	800d382 <__sflush_r+0xb2>
 800d32a:	4a2a      	ldr	r2, [pc, #168]	@ (800d3d4 <__sflush_r+0x104>)
 800d32c:	410a      	asrs	r2, r1
 800d32e:	07d6      	lsls	r6, r2, #31
 800d330:	d427      	bmi.n	800d382 <__sflush_r+0xb2>
 800d332:	2200      	movs	r2, #0
 800d334:	04d9      	lsls	r1, r3, #19
 800d336:	6062      	str	r2, [r4, #4]
 800d338:	6922      	ldr	r2, [r4, #16]
 800d33a:	6022      	str	r2, [r4, #0]
 800d33c:	d504      	bpl.n	800d348 <__sflush_r+0x78>
 800d33e:	1c42      	adds	r2, r0, #1
 800d340:	d101      	bne.n	800d346 <__sflush_r+0x76>
 800d342:	682b      	ldr	r3, [r5, #0]
 800d344:	b903      	cbnz	r3, 800d348 <__sflush_r+0x78>
 800d346:	6560      	str	r0, [r4, #84]	@ 0x54
 800d348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d34a:	602f      	str	r7, [r5, #0]
 800d34c:	b1b9      	cbz	r1, 800d37e <__sflush_r+0xae>
 800d34e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d352:	4299      	cmp	r1, r3
 800d354:	d002      	beq.n	800d35c <__sflush_r+0x8c>
 800d356:	4628      	mov	r0, r5
 800d358:	f7fe f8de 	bl	800b518 <_free_r>
 800d35c:	2300      	movs	r3, #0
 800d35e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d360:	e00d      	b.n	800d37e <__sflush_r+0xae>
 800d362:	2301      	movs	r3, #1
 800d364:	4628      	mov	r0, r5
 800d366:	47b0      	blx	r6
 800d368:	4602      	mov	r2, r0
 800d36a:	1c50      	adds	r0, r2, #1
 800d36c:	d1c9      	bne.n	800d302 <__sflush_r+0x32>
 800d36e:	682b      	ldr	r3, [r5, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d0c6      	beq.n	800d302 <__sflush_r+0x32>
 800d374:	2b1d      	cmp	r3, #29
 800d376:	d001      	beq.n	800d37c <__sflush_r+0xac>
 800d378:	2b16      	cmp	r3, #22
 800d37a:	d11d      	bne.n	800d3b8 <__sflush_r+0xe8>
 800d37c:	602f      	str	r7, [r5, #0]
 800d37e:	2000      	movs	r0, #0
 800d380:	e021      	b.n	800d3c6 <__sflush_r+0xf6>
 800d382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d386:	b21b      	sxth	r3, r3
 800d388:	e01a      	b.n	800d3c0 <__sflush_r+0xf0>
 800d38a:	690f      	ldr	r7, [r1, #16]
 800d38c:	2f00      	cmp	r7, #0
 800d38e:	d0f6      	beq.n	800d37e <__sflush_r+0xae>
 800d390:	0793      	lsls	r3, r2, #30
 800d392:	680e      	ldr	r6, [r1, #0]
 800d394:	600f      	str	r7, [r1, #0]
 800d396:	bf0c      	ite	eq
 800d398:	694b      	ldreq	r3, [r1, #20]
 800d39a:	2300      	movne	r3, #0
 800d39c:	eba6 0807 	sub.w	r8, r6, r7
 800d3a0:	608b      	str	r3, [r1, #8]
 800d3a2:	f1b8 0f00 	cmp.w	r8, #0
 800d3a6:	ddea      	ble.n	800d37e <__sflush_r+0xae>
 800d3a8:	4643      	mov	r3, r8
 800d3aa:	463a      	mov	r2, r7
 800d3ac:	6a21      	ldr	r1, [r4, #32]
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3b2:	47b0      	blx	r6
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	dc08      	bgt.n	800d3ca <__sflush_r+0xfa>
 800d3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c4:	81a3      	strh	r3, [r4, #12]
 800d3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ca:	4407      	add	r7, r0
 800d3cc:	eba8 0800 	sub.w	r8, r8, r0
 800d3d0:	e7e7      	b.n	800d3a2 <__sflush_r+0xd2>
 800d3d2:	bf00      	nop
 800d3d4:	dfbffffe 	.word	0xdfbffffe

0800d3d8 <_fflush_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	690b      	ldr	r3, [r1, #16]
 800d3dc:	4605      	mov	r5, r0
 800d3de:	460c      	mov	r4, r1
 800d3e0:	b913      	cbnz	r3, 800d3e8 <_fflush_r+0x10>
 800d3e2:	2500      	movs	r5, #0
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	b118      	cbz	r0, 800d3f2 <_fflush_r+0x1a>
 800d3ea:	6a03      	ldr	r3, [r0, #32]
 800d3ec:	b90b      	cbnz	r3, 800d3f2 <_fflush_r+0x1a>
 800d3ee:	f7fd f901 	bl	800a5f4 <__sinit>
 800d3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d0f3      	beq.n	800d3e2 <_fflush_r+0xa>
 800d3fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d3fc:	07d0      	lsls	r0, r2, #31
 800d3fe:	d404      	bmi.n	800d40a <_fflush_r+0x32>
 800d400:	0599      	lsls	r1, r3, #22
 800d402:	d402      	bmi.n	800d40a <_fflush_r+0x32>
 800d404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d406:	f7fd fa1e 	bl	800a846 <__retarget_lock_acquire_recursive>
 800d40a:	4628      	mov	r0, r5
 800d40c:	4621      	mov	r1, r4
 800d40e:	f7ff ff5f 	bl	800d2d0 <__sflush_r>
 800d412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d414:	4605      	mov	r5, r0
 800d416:	07da      	lsls	r2, r3, #31
 800d418:	d4e4      	bmi.n	800d3e4 <_fflush_r+0xc>
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	059b      	lsls	r3, r3, #22
 800d41e:	d4e1      	bmi.n	800d3e4 <_fflush_r+0xc>
 800d420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d422:	f7fd fa11 	bl	800a848 <__retarget_lock_release_recursive>
 800d426:	e7dd      	b.n	800d3e4 <_fflush_r+0xc>

0800d428 <__swbuf_r>:
 800d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42a:	460e      	mov	r6, r1
 800d42c:	4614      	mov	r4, r2
 800d42e:	4605      	mov	r5, r0
 800d430:	b118      	cbz	r0, 800d43a <__swbuf_r+0x12>
 800d432:	6a03      	ldr	r3, [r0, #32]
 800d434:	b90b      	cbnz	r3, 800d43a <__swbuf_r+0x12>
 800d436:	f7fd f8dd 	bl	800a5f4 <__sinit>
 800d43a:	69a3      	ldr	r3, [r4, #24]
 800d43c:	60a3      	str	r3, [r4, #8]
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	071a      	lsls	r2, r3, #28
 800d442:	d501      	bpl.n	800d448 <__swbuf_r+0x20>
 800d444:	6923      	ldr	r3, [r4, #16]
 800d446:	b943      	cbnz	r3, 800d45a <__swbuf_r+0x32>
 800d448:	4621      	mov	r1, r4
 800d44a:	4628      	mov	r0, r5
 800d44c:	f000 f82a 	bl	800d4a4 <__swsetup_r>
 800d450:	b118      	cbz	r0, 800d45a <__swbuf_r+0x32>
 800d452:	f04f 37ff 	mov.w	r7, #4294967295
 800d456:	4638      	mov	r0, r7
 800d458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	b2f6      	uxtb	r6, r6
 800d45e:	6922      	ldr	r2, [r4, #16]
 800d460:	4637      	mov	r7, r6
 800d462:	1a98      	subs	r0, r3, r2
 800d464:	6963      	ldr	r3, [r4, #20]
 800d466:	4283      	cmp	r3, r0
 800d468:	dc05      	bgt.n	800d476 <__swbuf_r+0x4e>
 800d46a:	4621      	mov	r1, r4
 800d46c:	4628      	mov	r0, r5
 800d46e:	f7ff ffb3 	bl	800d3d8 <_fflush_r>
 800d472:	2800      	cmp	r0, #0
 800d474:	d1ed      	bne.n	800d452 <__swbuf_r+0x2a>
 800d476:	68a3      	ldr	r3, [r4, #8]
 800d478:	3b01      	subs	r3, #1
 800d47a:	60a3      	str	r3, [r4, #8]
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	6022      	str	r2, [r4, #0]
 800d482:	701e      	strb	r6, [r3, #0]
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	6962      	ldr	r2, [r4, #20]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d004      	beq.n	800d496 <__swbuf_r+0x6e>
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	07db      	lsls	r3, r3, #31
 800d490:	d5e1      	bpl.n	800d456 <__swbuf_r+0x2e>
 800d492:	2e0a      	cmp	r6, #10
 800d494:	d1df      	bne.n	800d456 <__swbuf_r+0x2e>
 800d496:	4621      	mov	r1, r4
 800d498:	4628      	mov	r0, r5
 800d49a:	f7ff ff9d 	bl	800d3d8 <_fflush_r>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0d9      	beq.n	800d456 <__swbuf_r+0x2e>
 800d4a2:	e7d6      	b.n	800d452 <__swbuf_r+0x2a>

0800d4a4 <__swsetup_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	4b29      	ldr	r3, [pc, #164]	@ (800d54c <__swsetup_r+0xa8>)
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	b118      	cbz	r0, 800d4b8 <__swsetup_r+0x14>
 800d4b0:	6a03      	ldr	r3, [r0, #32]
 800d4b2:	b90b      	cbnz	r3, 800d4b8 <__swsetup_r+0x14>
 800d4b4:	f7fd f89e 	bl	800a5f4 <__sinit>
 800d4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4bc:	0719      	lsls	r1, r3, #28
 800d4be:	d422      	bmi.n	800d506 <__swsetup_r+0x62>
 800d4c0:	06da      	lsls	r2, r3, #27
 800d4c2:	d407      	bmi.n	800d4d4 <__swsetup_r+0x30>
 800d4c4:	2209      	movs	r2, #9
 800d4c6:	602a      	str	r2, [r5, #0]
 800d4c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d0:	81a3      	strh	r3, [r4, #12]
 800d4d2:	e033      	b.n	800d53c <__swsetup_r+0x98>
 800d4d4:	0758      	lsls	r0, r3, #29
 800d4d6:	d512      	bpl.n	800d4fe <__swsetup_r+0x5a>
 800d4d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4da:	b141      	cbz	r1, 800d4ee <__swsetup_r+0x4a>
 800d4dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4e0:	4299      	cmp	r1, r3
 800d4e2:	d002      	beq.n	800d4ea <__swsetup_r+0x46>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f7fe f817 	bl	800b518 <_free_r>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4f4:	81a3      	strh	r3, [r4, #12]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6063      	str	r3, [r4, #4]
 800d4fa:	6923      	ldr	r3, [r4, #16]
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	89a3      	ldrh	r3, [r4, #12]
 800d500:	f043 0308 	orr.w	r3, r3, #8
 800d504:	81a3      	strh	r3, [r4, #12]
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	b94b      	cbnz	r3, 800d51e <__swsetup_r+0x7a>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d514:	d003      	beq.n	800d51e <__swsetup_r+0x7a>
 800d516:	4621      	mov	r1, r4
 800d518:	4628      	mov	r0, r5
 800d51a:	f000 fc58 	bl	800ddce <__smakebuf_r>
 800d51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d522:	f013 0201 	ands.w	r2, r3, #1
 800d526:	d00a      	beq.n	800d53e <__swsetup_r+0x9a>
 800d528:	2200      	movs	r2, #0
 800d52a:	60a2      	str	r2, [r4, #8]
 800d52c:	6962      	ldr	r2, [r4, #20]
 800d52e:	4252      	negs	r2, r2
 800d530:	61a2      	str	r2, [r4, #24]
 800d532:	6922      	ldr	r2, [r4, #16]
 800d534:	b942      	cbnz	r2, 800d548 <__swsetup_r+0xa4>
 800d536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d53a:	d1c5      	bne.n	800d4c8 <__swsetup_r+0x24>
 800d53c:	bd38      	pop	{r3, r4, r5, pc}
 800d53e:	0799      	lsls	r1, r3, #30
 800d540:	bf58      	it	pl
 800d542:	6962      	ldrpl	r2, [r4, #20]
 800d544:	60a2      	str	r2, [r4, #8]
 800d546:	e7f4      	b.n	800d532 <__swsetup_r+0x8e>
 800d548:	2000      	movs	r0, #0
 800d54a:	e7f7      	b.n	800d53c <__swsetup_r+0x98>
 800d54c:	20000030 	.word	0x20000030

0800d550 <memmove>:
 800d550:	4288      	cmp	r0, r1
 800d552:	b510      	push	{r4, lr}
 800d554:	eb01 0402 	add.w	r4, r1, r2
 800d558:	d902      	bls.n	800d560 <memmove+0x10>
 800d55a:	4284      	cmp	r4, r0
 800d55c:	4623      	mov	r3, r4
 800d55e:	d807      	bhi.n	800d570 <memmove+0x20>
 800d560:	1e43      	subs	r3, r0, #1
 800d562:	42a1      	cmp	r1, r4
 800d564:	d008      	beq.n	800d578 <memmove+0x28>
 800d566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d56e:	e7f8      	b.n	800d562 <memmove+0x12>
 800d570:	4402      	add	r2, r0
 800d572:	4601      	mov	r1, r0
 800d574:	428a      	cmp	r2, r1
 800d576:	d100      	bne.n	800d57a <memmove+0x2a>
 800d578:	bd10      	pop	{r4, pc}
 800d57a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d57e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d582:	e7f7      	b.n	800d574 <memmove+0x24>

0800d584 <strncmp>:
 800d584:	b510      	push	{r4, lr}
 800d586:	b16a      	cbz	r2, 800d5a4 <strncmp+0x20>
 800d588:	3901      	subs	r1, #1
 800d58a:	1884      	adds	r4, r0, r2
 800d58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d590:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d594:	429a      	cmp	r2, r3
 800d596:	d103      	bne.n	800d5a0 <strncmp+0x1c>
 800d598:	42a0      	cmp	r0, r4
 800d59a:	d001      	beq.n	800d5a0 <strncmp+0x1c>
 800d59c:	2a00      	cmp	r2, #0
 800d59e:	d1f5      	bne.n	800d58c <strncmp+0x8>
 800d5a0:	1ad0      	subs	r0, r2, r3
 800d5a2:	bd10      	pop	{r4, pc}
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	e7fc      	b.n	800d5a2 <strncmp+0x1e>

0800d5a8 <_sbrk_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4d05      	ldr	r5, [pc, #20]	@ (800d5c4 <_sbrk_r+0x1c>)
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	602b      	str	r3, [r5, #0]
 800d5b4:	f7f4 fe98 	bl	80022e8 <_sbrk>
 800d5b8:	1c43      	adds	r3, r0, #1
 800d5ba:	d102      	bne.n	800d5c2 <_sbrk_r+0x1a>
 800d5bc:	682b      	ldr	r3, [r5, #0]
 800d5be:	b103      	cbz	r3, 800d5c2 <_sbrk_r+0x1a>
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	20000564 	.word	0x20000564

0800d5c8 <memcpy>:
 800d5c8:	440a      	add	r2, r1
 800d5ca:	1e43      	subs	r3, r0, #1
 800d5cc:	4291      	cmp	r1, r2
 800d5ce:	d100      	bne.n	800d5d2 <memcpy+0xa>
 800d5d0:	4770      	bx	lr
 800d5d2:	b510      	push	{r4, lr}
 800d5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5d8:	4291      	cmp	r1, r2
 800d5da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5de:	d1f9      	bne.n	800d5d4 <memcpy+0xc>
 800d5e0:	bd10      	pop	{r4, pc}
 800d5e2:	0000      	movs	r0, r0
 800d5e4:	0000      	movs	r0, r0
	...

0800d5e8 <nan>:
 800d5e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5f0 <nan+0x8>
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	00000000 	.word	0x00000000
 800d5f4:	7ff80000 	.word	0x7ff80000

0800d5f8 <__assert_func>:
 800d5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5fa:	4614      	mov	r4, r2
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4b09      	ldr	r3, [pc, #36]	@ (800d624 <__assert_func+0x2c>)
 800d600:	4605      	mov	r5, r0
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68d8      	ldr	r0, [r3, #12]
 800d606:	b954      	cbnz	r4, 800d61e <__assert_func+0x26>
 800d608:	4b07      	ldr	r3, [pc, #28]	@ (800d628 <__assert_func+0x30>)
 800d60a:	461c      	mov	r4, r3
 800d60c:	9100      	str	r1, [sp, #0]
 800d60e:	4907      	ldr	r1, [pc, #28]	@ (800d62c <__assert_func+0x34>)
 800d610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d614:	462b      	mov	r3, r5
 800d616:	f000 fba3 	bl	800dd60 <fiprintf>
 800d61a:	f000 fc37 	bl	800de8c <abort>
 800d61e:	4b04      	ldr	r3, [pc, #16]	@ (800d630 <__assert_func+0x38>)
 800d620:	e7f4      	b.n	800d60c <__assert_func+0x14>
 800d622:	bf00      	nop
 800d624:	20000030 	.word	0x20000030
 800d628:	0800e3a5 	.word	0x0800e3a5
 800d62c:	0800e377 	.word	0x0800e377
 800d630:	0800e36a 	.word	0x0800e36a

0800d634 <_calloc_r>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	fba1 5402 	umull	r5, r4, r1, r2
 800d63a:	b93c      	cbnz	r4, 800d64c <_calloc_r+0x18>
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7fd ffdf 	bl	800b600 <_malloc_r>
 800d642:	4606      	mov	r6, r0
 800d644:	b928      	cbnz	r0, 800d652 <_calloc_r+0x1e>
 800d646:	2600      	movs	r6, #0
 800d648:	4630      	mov	r0, r6
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	220c      	movs	r2, #12
 800d64e:	6002      	str	r2, [r0, #0]
 800d650:	e7f9      	b.n	800d646 <_calloc_r+0x12>
 800d652:	462a      	mov	r2, r5
 800d654:	4621      	mov	r1, r4
 800d656:	f7fd f878 	bl	800a74a <memset>
 800d65a:	e7f5      	b.n	800d648 <_calloc_r+0x14>

0800d65c <rshift>:
 800d65c:	6903      	ldr	r3, [r0, #16]
 800d65e:	114a      	asrs	r2, r1, #5
 800d660:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d668:	f100 0414 	add.w	r4, r0, #20
 800d66c:	dd45      	ble.n	800d6fa <rshift+0x9e>
 800d66e:	f011 011f 	ands.w	r1, r1, #31
 800d672:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d676:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d67a:	d10c      	bne.n	800d696 <rshift+0x3a>
 800d67c:	f100 0710 	add.w	r7, r0, #16
 800d680:	4629      	mov	r1, r5
 800d682:	42b1      	cmp	r1, r6
 800d684:	d334      	bcc.n	800d6f0 <rshift+0x94>
 800d686:	1a9b      	subs	r3, r3, r2
 800d688:	1eea      	subs	r2, r5, #3
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4296      	cmp	r6, r2
 800d68e:	bf38      	it	cc
 800d690:	2300      	movcc	r3, #0
 800d692:	4423      	add	r3, r4
 800d694:	e015      	b.n	800d6c2 <rshift+0x66>
 800d696:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d69a:	f1c1 0820 	rsb	r8, r1, #32
 800d69e:	f105 0e04 	add.w	lr, r5, #4
 800d6a2:	46a1      	mov	r9, r4
 800d6a4:	40cf      	lsrs	r7, r1
 800d6a6:	4576      	cmp	r6, lr
 800d6a8:	46f4      	mov	ip, lr
 800d6aa:	d815      	bhi.n	800d6d8 <rshift+0x7c>
 800d6ac:	1a9a      	subs	r2, r3, r2
 800d6ae:	3501      	adds	r5, #1
 800d6b0:	0092      	lsls	r2, r2, #2
 800d6b2:	3a04      	subs	r2, #4
 800d6b4:	42ae      	cmp	r6, r5
 800d6b6:	bf38      	it	cc
 800d6b8:	2200      	movcc	r2, #0
 800d6ba:	18a3      	adds	r3, r4, r2
 800d6bc:	50a7      	str	r7, [r4, r2]
 800d6be:	b107      	cbz	r7, 800d6c2 <rshift+0x66>
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	1b1a      	subs	r2, r3, r4
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d6ca:	bf08      	it	eq
 800d6cc:	2300      	moveq	r3, #0
 800d6ce:	6102      	str	r2, [r0, #16]
 800d6d0:	bf08      	it	eq
 800d6d2:	6143      	streq	r3, [r0, #20]
 800d6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6d8:	f8dc c000 	ldr.w	ip, [ip]
 800d6dc:	fa0c fc08 	lsl.w	ip, ip, r8
 800d6e0:	ea4c 0707 	orr.w	r7, ip, r7
 800d6e4:	f849 7b04 	str.w	r7, [r9], #4
 800d6e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6ec:	40cf      	lsrs	r7, r1
 800d6ee:	e7da      	b.n	800d6a6 <rshift+0x4a>
 800d6f0:	f851 cb04 	ldr.w	ip, [r1], #4
 800d6f4:	f847 cf04 	str.w	ip, [r7, #4]!
 800d6f8:	e7c3      	b.n	800d682 <rshift+0x26>
 800d6fa:	4623      	mov	r3, r4
 800d6fc:	e7e1      	b.n	800d6c2 <rshift+0x66>

0800d6fe <__hexdig_fun>:
 800d6fe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d702:	2b09      	cmp	r3, #9
 800d704:	d802      	bhi.n	800d70c <__hexdig_fun+0xe>
 800d706:	3820      	subs	r0, #32
 800d708:	b2c0      	uxtb	r0, r0
 800d70a:	4770      	bx	lr
 800d70c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d710:	2b05      	cmp	r3, #5
 800d712:	d801      	bhi.n	800d718 <__hexdig_fun+0x1a>
 800d714:	3847      	subs	r0, #71	@ 0x47
 800d716:	e7f7      	b.n	800d708 <__hexdig_fun+0xa>
 800d718:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d71c:	2b05      	cmp	r3, #5
 800d71e:	d801      	bhi.n	800d724 <__hexdig_fun+0x26>
 800d720:	3827      	subs	r0, #39	@ 0x27
 800d722:	e7f1      	b.n	800d708 <__hexdig_fun+0xa>
 800d724:	2000      	movs	r0, #0
 800d726:	4770      	bx	lr

0800d728 <__gethex>:
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	b085      	sub	sp, #20
 800d72e:	468a      	mov	sl, r1
 800d730:	4690      	mov	r8, r2
 800d732:	9302      	str	r3, [sp, #8]
 800d734:	680b      	ldr	r3, [r1, #0]
 800d736:	9001      	str	r0, [sp, #4]
 800d738:	1c9c      	adds	r4, r3, #2
 800d73a:	46a1      	mov	r9, r4
 800d73c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d740:	2830      	cmp	r0, #48	@ 0x30
 800d742:	d0fa      	beq.n	800d73a <__gethex+0x12>
 800d744:	eba9 0303 	sub.w	r3, r9, r3
 800d748:	f1a3 0b02 	sub.w	fp, r3, #2
 800d74c:	f7ff ffd7 	bl	800d6fe <__hexdig_fun>
 800d750:	4605      	mov	r5, r0
 800d752:	2800      	cmp	r0, #0
 800d754:	d166      	bne.n	800d824 <__gethex+0xfc>
 800d756:	2201      	movs	r2, #1
 800d758:	499e      	ldr	r1, [pc, #632]	@ (800d9d4 <__gethex+0x2ac>)
 800d75a:	4648      	mov	r0, r9
 800d75c:	f7ff ff12 	bl	800d584 <strncmp>
 800d760:	4607      	mov	r7, r0
 800d762:	2800      	cmp	r0, #0
 800d764:	d165      	bne.n	800d832 <__gethex+0x10a>
 800d766:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d76a:	4626      	mov	r6, r4
 800d76c:	f7ff ffc7 	bl	800d6fe <__hexdig_fun>
 800d770:	2800      	cmp	r0, #0
 800d772:	d060      	beq.n	800d836 <__gethex+0x10e>
 800d774:	4623      	mov	r3, r4
 800d776:	7818      	ldrb	r0, [r3, #0]
 800d778:	4699      	mov	r9, r3
 800d77a:	3301      	adds	r3, #1
 800d77c:	2830      	cmp	r0, #48	@ 0x30
 800d77e:	d0fa      	beq.n	800d776 <__gethex+0x4e>
 800d780:	f7ff ffbd 	bl	800d6fe <__hexdig_fun>
 800d784:	fab0 f580 	clz	r5, r0
 800d788:	f04f 0b01 	mov.w	fp, #1
 800d78c:	096d      	lsrs	r5, r5, #5
 800d78e:	464a      	mov	r2, r9
 800d790:	4616      	mov	r6, r2
 800d792:	3201      	adds	r2, #1
 800d794:	7830      	ldrb	r0, [r6, #0]
 800d796:	f7ff ffb2 	bl	800d6fe <__hexdig_fun>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d1f8      	bne.n	800d790 <__gethex+0x68>
 800d79e:	2201      	movs	r2, #1
 800d7a0:	498c      	ldr	r1, [pc, #560]	@ (800d9d4 <__gethex+0x2ac>)
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff feee 	bl	800d584 <strncmp>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d13e      	bne.n	800d82a <__gethex+0x102>
 800d7ac:	b944      	cbnz	r4, 800d7c0 <__gethex+0x98>
 800d7ae:	1c74      	adds	r4, r6, #1
 800d7b0:	4622      	mov	r2, r4
 800d7b2:	4616      	mov	r6, r2
 800d7b4:	3201      	adds	r2, #1
 800d7b6:	7830      	ldrb	r0, [r6, #0]
 800d7b8:	f7ff ffa1 	bl	800d6fe <__hexdig_fun>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d1f8      	bne.n	800d7b2 <__gethex+0x8a>
 800d7c0:	1ba4      	subs	r4, r4, r6
 800d7c2:	00a7      	lsls	r7, r4, #2
 800d7c4:	7833      	ldrb	r3, [r6, #0]
 800d7c6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d7ca:	2b50      	cmp	r3, #80	@ 0x50
 800d7cc:	d13d      	bne.n	800d84a <__gethex+0x122>
 800d7ce:	7873      	ldrb	r3, [r6, #1]
 800d7d0:	2b2b      	cmp	r3, #43	@ 0x2b
 800d7d2:	d032      	beq.n	800d83a <__gethex+0x112>
 800d7d4:	2b2d      	cmp	r3, #45	@ 0x2d
 800d7d6:	d033      	beq.n	800d840 <__gethex+0x118>
 800d7d8:	1c71      	adds	r1, r6, #1
 800d7da:	2400      	movs	r4, #0
 800d7dc:	7808      	ldrb	r0, [r1, #0]
 800d7de:	f7ff ff8e 	bl	800d6fe <__hexdig_fun>
 800d7e2:	1e43      	subs	r3, r0, #1
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2b18      	cmp	r3, #24
 800d7e8:	d82f      	bhi.n	800d84a <__gethex+0x122>
 800d7ea:	f1a0 0210 	sub.w	r2, r0, #16
 800d7ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d7f2:	f7ff ff84 	bl	800d6fe <__hexdig_fun>
 800d7f6:	f100 3cff 	add.w	ip, r0, #4294967295
 800d7fa:	230a      	movs	r3, #10
 800d7fc:	fa5f fc8c 	uxtb.w	ip, ip
 800d800:	f1bc 0f18 	cmp.w	ip, #24
 800d804:	d91e      	bls.n	800d844 <__gethex+0x11c>
 800d806:	b104      	cbz	r4, 800d80a <__gethex+0xe2>
 800d808:	4252      	negs	r2, r2
 800d80a:	4417      	add	r7, r2
 800d80c:	f8ca 1000 	str.w	r1, [sl]
 800d810:	b1ed      	cbz	r5, 800d84e <__gethex+0x126>
 800d812:	f1bb 0f00 	cmp.w	fp, #0
 800d816:	bf0c      	ite	eq
 800d818:	2506      	moveq	r5, #6
 800d81a:	2500      	movne	r5, #0
 800d81c:	4628      	mov	r0, r5
 800d81e:	b005      	add	sp, #20
 800d820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d824:	2500      	movs	r5, #0
 800d826:	462c      	mov	r4, r5
 800d828:	e7b1      	b.n	800d78e <__gethex+0x66>
 800d82a:	2c00      	cmp	r4, #0
 800d82c:	d1c8      	bne.n	800d7c0 <__gethex+0x98>
 800d82e:	4627      	mov	r7, r4
 800d830:	e7c8      	b.n	800d7c4 <__gethex+0x9c>
 800d832:	464e      	mov	r6, r9
 800d834:	462f      	mov	r7, r5
 800d836:	2501      	movs	r5, #1
 800d838:	e7c4      	b.n	800d7c4 <__gethex+0x9c>
 800d83a:	2400      	movs	r4, #0
 800d83c:	1cb1      	adds	r1, r6, #2
 800d83e:	e7cd      	b.n	800d7dc <__gethex+0xb4>
 800d840:	2401      	movs	r4, #1
 800d842:	e7fb      	b.n	800d83c <__gethex+0x114>
 800d844:	fb03 0002 	mla	r0, r3, r2, r0
 800d848:	e7cf      	b.n	800d7ea <__gethex+0xc2>
 800d84a:	4631      	mov	r1, r6
 800d84c:	e7de      	b.n	800d80c <__gethex+0xe4>
 800d84e:	eba6 0309 	sub.w	r3, r6, r9
 800d852:	4629      	mov	r1, r5
 800d854:	3b01      	subs	r3, #1
 800d856:	2b07      	cmp	r3, #7
 800d858:	dc0a      	bgt.n	800d870 <__gethex+0x148>
 800d85a:	9801      	ldr	r0, [sp, #4]
 800d85c:	f7fd ff5c 	bl	800b718 <_Balloc>
 800d860:	4604      	mov	r4, r0
 800d862:	b940      	cbnz	r0, 800d876 <__gethex+0x14e>
 800d864:	4b5c      	ldr	r3, [pc, #368]	@ (800d9d8 <__gethex+0x2b0>)
 800d866:	4602      	mov	r2, r0
 800d868:	21e4      	movs	r1, #228	@ 0xe4
 800d86a:	485c      	ldr	r0, [pc, #368]	@ (800d9dc <__gethex+0x2b4>)
 800d86c:	f7ff fec4 	bl	800d5f8 <__assert_func>
 800d870:	3101      	adds	r1, #1
 800d872:	105b      	asrs	r3, r3, #1
 800d874:	e7ef      	b.n	800d856 <__gethex+0x12e>
 800d876:	f100 0a14 	add.w	sl, r0, #20
 800d87a:	2300      	movs	r3, #0
 800d87c:	4655      	mov	r5, sl
 800d87e:	469b      	mov	fp, r3
 800d880:	45b1      	cmp	r9, r6
 800d882:	d337      	bcc.n	800d8f4 <__gethex+0x1cc>
 800d884:	f845 bb04 	str.w	fp, [r5], #4
 800d888:	eba5 050a 	sub.w	r5, r5, sl
 800d88c:	4658      	mov	r0, fp
 800d88e:	10ad      	asrs	r5, r5, #2
 800d890:	6125      	str	r5, [r4, #16]
 800d892:	016d      	lsls	r5, r5, #5
 800d894:	f7fe f834 	bl	800b900 <__hi0bits>
 800d898:	f8d8 6000 	ldr.w	r6, [r8]
 800d89c:	1a2d      	subs	r5, r5, r0
 800d89e:	42b5      	cmp	r5, r6
 800d8a0:	dd54      	ble.n	800d94c <__gethex+0x224>
 800d8a2:	1bad      	subs	r5, r5, r6
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f7fe fbd1 	bl	800c04e <__any_on>
 800d8ac:	4681      	mov	r9, r0
 800d8ae:	b178      	cbz	r0, 800d8d0 <__gethex+0x1a8>
 800d8b0:	1e6b      	subs	r3, r5, #1
 800d8b2:	f04f 0901 	mov.w	r9, #1
 800d8b6:	1159      	asrs	r1, r3, #5
 800d8b8:	f003 021f 	and.w	r2, r3, #31
 800d8bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d8c0:	fa09 f202 	lsl.w	r2, r9, r2
 800d8c4:	420a      	tst	r2, r1
 800d8c6:	d003      	beq.n	800d8d0 <__gethex+0x1a8>
 800d8c8:	454b      	cmp	r3, r9
 800d8ca:	dc36      	bgt.n	800d93a <__gethex+0x212>
 800d8cc:	f04f 0902 	mov.w	r9, #2
 800d8d0:	442f      	add	r7, r5
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f7ff fec1 	bl	800d65c <rshift>
 800d8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d8de:	42bb      	cmp	r3, r7
 800d8e0:	da42      	bge.n	800d968 <__gethex+0x240>
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	9801      	ldr	r0, [sp, #4]
 800d8e6:	f7fd ff57 	bl	800b798 <_Bfree>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8ee:	25a3      	movs	r5, #163	@ 0xa3
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	e793      	b.n	800d81c <__gethex+0xf4>
 800d8f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d8f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d8fa:	d012      	beq.n	800d922 <__gethex+0x1fa>
 800d8fc:	2b20      	cmp	r3, #32
 800d8fe:	d104      	bne.n	800d90a <__gethex+0x1e2>
 800d900:	f845 bb04 	str.w	fp, [r5], #4
 800d904:	f04f 0b00 	mov.w	fp, #0
 800d908:	465b      	mov	r3, fp
 800d90a:	7830      	ldrb	r0, [r6, #0]
 800d90c:	9303      	str	r3, [sp, #12]
 800d90e:	f7ff fef6 	bl	800d6fe <__hexdig_fun>
 800d912:	9b03      	ldr	r3, [sp, #12]
 800d914:	f000 000f 	and.w	r0, r0, #15
 800d918:	4098      	lsls	r0, r3
 800d91a:	3304      	adds	r3, #4
 800d91c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d920:	e7ae      	b.n	800d880 <__gethex+0x158>
 800d922:	45b1      	cmp	r9, r6
 800d924:	d8ea      	bhi.n	800d8fc <__gethex+0x1d4>
 800d926:	2201      	movs	r2, #1
 800d928:	492a      	ldr	r1, [pc, #168]	@ (800d9d4 <__gethex+0x2ac>)
 800d92a:	4630      	mov	r0, r6
 800d92c:	9303      	str	r3, [sp, #12]
 800d92e:	f7ff fe29 	bl	800d584 <strncmp>
 800d932:	9b03      	ldr	r3, [sp, #12]
 800d934:	2800      	cmp	r0, #0
 800d936:	d1e1      	bne.n	800d8fc <__gethex+0x1d4>
 800d938:	e7a2      	b.n	800d880 <__gethex+0x158>
 800d93a:	1ea9      	subs	r1, r5, #2
 800d93c:	4620      	mov	r0, r4
 800d93e:	f7fe fb86 	bl	800c04e <__any_on>
 800d942:	2800      	cmp	r0, #0
 800d944:	d0c2      	beq.n	800d8cc <__gethex+0x1a4>
 800d946:	f04f 0903 	mov.w	r9, #3
 800d94a:	e7c1      	b.n	800d8d0 <__gethex+0x1a8>
 800d94c:	da09      	bge.n	800d962 <__gethex+0x23a>
 800d94e:	1b75      	subs	r5, r6, r5
 800d950:	4621      	mov	r1, r4
 800d952:	9801      	ldr	r0, [sp, #4]
 800d954:	462a      	mov	r2, r5
 800d956:	1b7f      	subs	r7, r7, r5
 800d958:	f7fe f938 	bl	800bbcc <__lshift>
 800d95c:	4604      	mov	r4, r0
 800d95e:	f100 0a14 	add.w	sl, r0, #20
 800d962:	f04f 0900 	mov.w	r9, #0
 800d966:	e7b8      	b.n	800d8da <__gethex+0x1b2>
 800d968:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d96c:	42bd      	cmp	r5, r7
 800d96e:	dd6f      	ble.n	800da50 <__gethex+0x328>
 800d970:	1bed      	subs	r5, r5, r7
 800d972:	42ae      	cmp	r6, r5
 800d974:	dc34      	bgt.n	800d9e0 <__gethex+0x2b8>
 800d976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d022      	beq.n	800d9c4 <__gethex+0x29c>
 800d97e:	2b03      	cmp	r3, #3
 800d980:	d024      	beq.n	800d9cc <__gethex+0x2a4>
 800d982:	2b01      	cmp	r3, #1
 800d984:	d115      	bne.n	800d9b2 <__gethex+0x28a>
 800d986:	42ae      	cmp	r6, r5
 800d988:	d113      	bne.n	800d9b2 <__gethex+0x28a>
 800d98a:	2e01      	cmp	r6, #1
 800d98c:	d10b      	bne.n	800d9a6 <__gethex+0x27e>
 800d98e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d992:	2562      	movs	r5, #98	@ 0x62
 800d994:	9a02      	ldr	r2, [sp, #8]
 800d996:	6013      	str	r3, [r2, #0]
 800d998:	2301      	movs	r3, #1
 800d99a:	6123      	str	r3, [r4, #16]
 800d99c:	f8ca 3000 	str.w	r3, [sl]
 800d9a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9a2:	601c      	str	r4, [r3, #0]
 800d9a4:	e73a      	b.n	800d81c <__gethex+0xf4>
 800d9a6:	1e71      	subs	r1, r6, #1
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f7fe fb50 	bl	800c04e <__any_on>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d1ed      	bne.n	800d98e <__gethex+0x266>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	9801      	ldr	r0, [sp, #4]
 800d9b6:	f7fd feef 	bl	800b798 <_Bfree>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9be:	2550      	movs	r5, #80	@ 0x50
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	e72b      	b.n	800d81c <__gethex+0xf4>
 800d9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1f3      	bne.n	800d9b2 <__gethex+0x28a>
 800d9ca:	e7e0      	b.n	800d98e <__gethex+0x266>
 800d9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1dd      	bne.n	800d98e <__gethex+0x266>
 800d9d2:	e7ee      	b.n	800d9b2 <__gethex+0x28a>
 800d9d4:	0800e1f8 	.word	0x0800e1f8
 800d9d8:	0800e08d 	.word	0x0800e08d
 800d9dc:	0800e3a6 	.word	0x0800e3a6
 800d9e0:	1e6f      	subs	r7, r5, #1
 800d9e2:	f1b9 0f00 	cmp.w	r9, #0
 800d9e6:	d130      	bne.n	800da4a <__gethex+0x322>
 800d9e8:	b127      	cbz	r7, 800d9f4 <__gethex+0x2cc>
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f7fe fb2e 	bl	800c04e <__any_on>
 800d9f2:	4681      	mov	r9, r0
 800d9f4:	117a      	asrs	r2, r7, #5
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	f007 071f 	and.w	r7, r7, #31
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da02:	4620      	mov	r0, r4
 800da04:	40bb      	lsls	r3, r7
 800da06:	1b76      	subs	r6, r6, r5
 800da08:	2502      	movs	r5, #2
 800da0a:	4213      	tst	r3, r2
 800da0c:	bf18      	it	ne
 800da0e:	f049 0902 	orrne.w	r9, r9, #2
 800da12:	f7ff fe23 	bl	800d65c <rshift>
 800da16:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da1a:	f1b9 0f00 	cmp.w	r9, #0
 800da1e:	d047      	beq.n	800dab0 <__gethex+0x388>
 800da20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d015      	beq.n	800da54 <__gethex+0x32c>
 800da28:	2b03      	cmp	r3, #3
 800da2a:	d017      	beq.n	800da5c <__gethex+0x334>
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d109      	bne.n	800da44 <__gethex+0x31c>
 800da30:	f019 0f02 	tst.w	r9, #2
 800da34:	d006      	beq.n	800da44 <__gethex+0x31c>
 800da36:	f8da 3000 	ldr.w	r3, [sl]
 800da3a:	ea49 0903 	orr.w	r9, r9, r3
 800da3e:	f019 0f01 	tst.w	r9, #1
 800da42:	d10e      	bne.n	800da62 <__gethex+0x33a>
 800da44:	f045 0510 	orr.w	r5, r5, #16
 800da48:	e032      	b.n	800dab0 <__gethex+0x388>
 800da4a:	f04f 0901 	mov.w	r9, #1
 800da4e:	e7d1      	b.n	800d9f4 <__gethex+0x2cc>
 800da50:	2501      	movs	r5, #1
 800da52:	e7e2      	b.n	800da1a <__gethex+0x2f2>
 800da54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da56:	f1c3 0301 	rsb	r3, r3, #1
 800da5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d0f0      	beq.n	800da44 <__gethex+0x31c>
 800da62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da66:	f104 0314 	add.w	r3, r4, #20
 800da6a:	f04f 0c00 	mov.w	ip, #0
 800da6e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da72:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da76:	4618      	mov	r0, r3
 800da78:	f853 2b04 	ldr.w	r2, [r3], #4
 800da7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da80:	d01b      	beq.n	800daba <__gethex+0x392>
 800da82:	3201      	adds	r2, #1
 800da84:	6002      	str	r2, [r0, #0]
 800da86:	2d02      	cmp	r5, #2
 800da88:	f104 0314 	add.w	r3, r4, #20
 800da8c:	d13c      	bne.n	800db08 <__gethex+0x3e0>
 800da8e:	f8d8 2000 	ldr.w	r2, [r8]
 800da92:	3a01      	subs	r2, #1
 800da94:	42b2      	cmp	r2, r6
 800da96:	d109      	bne.n	800daac <__gethex+0x384>
 800da98:	1171      	asrs	r1, r6, #5
 800da9a:	2201      	movs	r2, #1
 800da9c:	f006 061f 	and.w	r6, r6, #31
 800daa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daa4:	fa02 f606 	lsl.w	r6, r2, r6
 800daa8:	421e      	tst	r6, r3
 800daaa:	d13a      	bne.n	800db22 <__gethex+0x3fa>
 800daac:	f045 0520 	orr.w	r5, r5, #32
 800dab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dab2:	601c      	str	r4, [r3, #0]
 800dab4:	9b02      	ldr	r3, [sp, #8]
 800dab6:	601f      	str	r7, [r3, #0]
 800dab8:	e6b0      	b.n	800d81c <__gethex+0xf4>
 800daba:	4299      	cmp	r1, r3
 800dabc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dac0:	d8d9      	bhi.n	800da76 <__gethex+0x34e>
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	459b      	cmp	fp, r3
 800dac6:	db17      	blt.n	800daf8 <__gethex+0x3d0>
 800dac8:	6861      	ldr	r1, [r4, #4]
 800daca:	9801      	ldr	r0, [sp, #4]
 800dacc:	3101      	adds	r1, #1
 800dace:	f7fd fe23 	bl	800b718 <_Balloc>
 800dad2:	4681      	mov	r9, r0
 800dad4:	b918      	cbnz	r0, 800dade <__gethex+0x3b6>
 800dad6:	4b1a      	ldr	r3, [pc, #104]	@ (800db40 <__gethex+0x418>)
 800dad8:	4602      	mov	r2, r0
 800dada:	2184      	movs	r1, #132	@ 0x84
 800dadc:	e6c5      	b.n	800d86a <__gethex+0x142>
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	f104 010c 	add.w	r1, r4, #12
 800dae4:	300c      	adds	r0, #12
 800dae6:	3202      	adds	r2, #2
 800dae8:	0092      	lsls	r2, r2, #2
 800daea:	f7ff fd6d 	bl	800d5c8 <memcpy>
 800daee:	4621      	mov	r1, r4
 800daf0:	464c      	mov	r4, r9
 800daf2:	9801      	ldr	r0, [sp, #4]
 800daf4:	f7fd fe50 	bl	800b798 <_Bfree>
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db00:	6122      	str	r2, [r4, #16]
 800db02:	2201      	movs	r2, #1
 800db04:	615a      	str	r2, [r3, #20]
 800db06:	e7be      	b.n	800da86 <__gethex+0x35e>
 800db08:	6922      	ldr	r2, [r4, #16]
 800db0a:	455a      	cmp	r2, fp
 800db0c:	dd0b      	ble.n	800db26 <__gethex+0x3fe>
 800db0e:	2101      	movs	r1, #1
 800db10:	4620      	mov	r0, r4
 800db12:	f7ff fda3 	bl	800d65c <rshift>
 800db16:	3701      	adds	r7, #1
 800db18:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db1c:	42bb      	cmp	r3, r7
 800db1e:	f6ff aee0 	blt.w	800d8e2 <__gethex+0x1ba>
 800db22:	2501      	movs	r5, #1
 800db24:	e7c2      	b.n	800daac <__gethex+0x384>
 800db26:	f016 061f 	ands.w	r6, r6, #31
 800db2a:	d0fa      	beq.n	800db22 <__gethex+0x3fa>
 800db2c:	4453      	add	r3, sl
 800db2e:	f1c6 0620 	rsb	r6, r6, #32
 800db32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db36:	f7fd fee3 	bl	800b900 <__hi0bits>
 800db3a:	42b0      	cmp	r0, r6
 800db3c:	dbe7      	blt.n	800db0e <__gethex+0x3e6>
 800db3e:	e7f0      	b.n	800db22 <__gethex+0x3fa>
 800db40:	0800e08d 	.word	0x0800e08d

0800db44 <L_shift>:
 800db44:	f1c2 0208 	rsb	r2, r2, #8
 800db48:	0092      	lsls	r2, r2, #2
 800db4a:	b570      	push	{r4, r5, r6, lr}
 800db4c:	f1c2 0620 	rsb	r6, r2, #32
 800db50:	6843      	ldr	r3, [r0, #4]
 800db52:	6804      	ldr	r4, [r0, #0]
 800db54:	fa03 f506 	lsl.w	r5, r3, r6
 800db58:	40d3      	lsrs	r3, r2
 800db5a:	432c      	orrs	r4, r5
 800db5c:	6004      	str	r4, [r0, #0]
 800db5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800db62:	4288      	cmp	r0, r1
 800db64:	d3f4      	bcc.n	800db50 <L_shift+0xc>
 800db66:	bd70      	pop	{r4, r5, r6, pc}

0800db68 <__match>:
 800db68:	6803      	ldr	r3, [r0, #0]
 800db6a:	3301      	adds	r3, #1
 800db6c:	b530      	push	{r4, r5, lr}
 800db6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db72:	b914      	cbnz	r4, 800db7a <__match+0x12>
 800db74:	6003      	str	r3, [r0, #0]
 800db76:	2001      	movs	r0, #1
 800db78:	bd30      	pop	{r4, r5, pc}
 800db7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800db82:	2d19      	cmp	r5, #25
 800db84:	bf98      	it	ls
 800db86:	3220      	addls	r2, #32
 800db88:	42a2      	cmp	r2, r4
 800db8a:	d0f0      	beq.n	800db6e <__match+0x6>
 800db8c:	2000      	movs	r0, #0
 800db8e:	e7f3      	b.n	800db78 <__match+0x10>

0800db90 <__hexnan>:
 800db90:	680b      	ldr	r3, [r1, #0]
 800db92:	6801      	ldr	r1, [r0, #0]
 800db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db98:	115e      	asrs	r6, r3, #5
 800db9a:	f013 031f 	ands.w	r3, r3, #31
 800db9e:	f04f 0500 	mov.w	r5, #0
 800dba2:	b087      	sub	sp, #28
 800dba4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dba8:	4682      	mov	sl, r0
 800dbaa:	4690      	mov	r8, r2
 800dbac:	46ab      	mov	fp, r5
 800dbae:	bf18      	it	ne
 800dbb0:	3604      	addne	r6, #4
 800dbb2:	9301      	str	r3, [sp, #4]
 800dbb4:	9502      	str	r5, [sp, #8]
 800dbb6:	1f37      	subs	r7, r6, #4
 800dbb8:	f846 5c04 	str.w	r5, [r6, #-4]
 800dbbc:	46b9      	mov	r9, r7
 800dbbe:	463c      	mov	r4, r7
 800dbc0:	1c4b      	adds	r3, r1, #1
 800dbc2:	784a      	ldrb	r2, [r1, #1]
 800dbc4:	9303      	str	r3, [sp, #12]
 800dbc6:	b342      	cbz	r2, 800dc1a <__hexnan+0x8a>
 800dbc8:	4610      	mov	r0, r2
 800dbca:	9105      	str	r1, [sp, #20]
 800dbcc:	9204      	str	r2, [sp, #16]
 800dbce:	f7ff fd96 	bl	800d6fe <__hexdig_fun>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d151      	bne.n	800dc7a <__hexnan+0xea>
 800dbd6:	9a04      	ldr	r2, [sp, #16]
 800dbd8:	9905      	ldr	r1, [sp, #20]
 800dbda:	2a20      	cmp	r2, #32
 800dbdc:	d818      	bhi.n	800dc10 <__hexnan+0x80>
 800dbde:	9b02      	ldr	r3, [sp, #8]
 800dbe0:	459b      	cmp	fp, r3
 800dbe2:	dd13      	ble.n	800dc0c <__hexnan+0x7c>
 800dbe4:	454c      	cmp	r4, r9
 800dbe6:	d206      	bcs.n	800dbf6 <__hexnan+0x66>
 800dbe8:	2d07      	cmp	r5, #7
 800dbea:	dc04      	bgt.n	800dbf6 <__hexnan+0x66>
 800dbec:	462a      	mov	r2, r5
 800dbee:	4649      	mov	r1, r9
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f7ff ffa7 	bl	800db44 <L_shift>
 800dbf6:	4544      	cmp	r4, r8
 800dbf8:	d951      	bls.n	800dc9e <__hexnan+0x10e>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f1a4 0904 	sub.w	r9, r4, #4
 800dc00:	f8cd b008 	str.w	fp, [sp, #8]
 800dc04:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc08:	461d      	mov	r5, r3
 800dc0a:	464c      	mov	r4, r9
 800dc0c:	9903      	ldr	r1, [sp, #12]
 800dc0e:	e7d7      	b.n	800dbc0 <__hexnan+0x30>
 800dc10:	2a29      	cmp	r2, #41	@ 0x29
 800dc12:	d156      	bne.n	800dcc2 <__hexnan+0x132>
 800dc14:	3102      	adds	r1, #2
 800dc16:	f8ca 1000 	str.w	r1, [sl]
 800dc1a:	f1bb 0f00 	cmp.w	fp, #0
 800dc1e:	d050      	beq.n	800dcc2 <__hexnan+0x132>
 800dc20:	454c      	cmp	r4, r9
 800dc22:	d206      	bcs.n	800dc32 <__hexnan+0xa2>
 800dc24:	2d07      	cmp	r5, #7
 800dc26:	dc04      	bgt.n	800dc32 <__hexnan+0xa2>
 800dc28:	462a      	mov	r2, r5
 800dc2a:	4649      	mov	r1, r9
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f7ff ff89 	bl	800db44 <L_shift>
 800dc32:	4544      	cmp	r4, r8
 800dc34:	d935      	bls.n	800dca2 <__hexnan+0x112>
 800dc36:	f1a8 0204 	sub.w	r2, r8, #4
 800dc3a:	4623      	mov	r3, r4
 800dc3c:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc40:	429f      	cmp	r7, r3
 800dc42:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc46:	d2f9      	bcs.n	800dc3c <__hexnan+0xac>
 800dc48:	1b3b      	subs	r3, r7, r4
 800dc4a:	3e03      	subs	r6, #3
 800dc4c:	3401      	adds	r4, #1
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f023 0303 	bic.w	r3, r3, #3
 800dc54:	3304      	adds	r3, #4
 800dc56:	42b4      	cmp	r4, r6
 800dc58:	bf88      	it	hi
 800dc5a:	2304      	movhi	r3, #4
 800dc5c:	4443      	add	r3, r8
 800dc5e:	f843 2b04 	str.w	r2, [r3], #4
 800dc62:	429f      	cmp	r7, r3
 800dc64:	d2fb      	bcs.n	800dc5e <__hexnan+0xce>
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	b91b      	cbnz	r3, 800dc72 <__hexnan+0xe2>
 800dc6a:	4547      	cmp	r7, r8
 800dc6c:	d127      	bne.n	800dcbe <__hexnan+0x12e>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	603b      	str	r3, [r7, #0]
 800dc72:	2005      	movs	r0, #5
 800dc74:	b007      	add	sp, #28
 800dc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7a:	3501      	adds	r5, #1
 800dc7c:	f10b 0b01 	add.w	fp, fp, #1
 800dc80:	2d08      	cmp	r5, #8
 800dc82:	dd05      	ble.n	800dc90 <__hexnan+0x100>
 800dc84:	4544      	cmp	r4, r8
 800dc86:	d9c1      	bls.n	800dc0c <__hexnan+0x7c>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	3c04      	subs	r4, #4
 800dc8c:	2501      	movs	r5, #1
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	6822      	ldr	r2, [r4, #0]
 800dc92:	f000 000f 	and.w	r0, r0, #15
 800dc96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc9a:	6020      	str	r0, [r4, #0]
 800dc9c:	e7b6      	b.n	800dc0c <__hexnan+0x7c>
 800dc9e:	2508      	movs	r5, #8
 800dca0:	e7b4      	b.n	800dc0c <__hexnan+0x7c>
 800dca2:	9b01      	ldr	r3, [sp, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d0de      	beq.n	800dc66 <__hexnan+0xd6>
 800dca8:	f1c3 0320 	rsb	r3, r3, #32
 800dcac:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb0:	40da      	lsrs	r2, r3
 800dcb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dcb6:	4013      	ands	r3, r2
 800dcb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800dcbc:	e7d3      	b.n	800dc66 <__hexnan+0xd6>
 800dcbe:	3f04      	subs	r7, #4
 800dcc0:	e7d1      	b.n	800dc66 <__hexnan+0xd6>
 800dcc2:	2004      	movs	r0, #4
 800dcc4:	e7d6      	b.n	800dc74 <__hexnan+0xe4>

0800dcc6 <__ascii_mbtowc>:
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	b901      	cbnz	r1, 800dccc <__ascii_mbtowc+0x6>
 800dcca:	a901      	add	r1, sp, #4
 800dccc:	b142      	cbz	r2, 800dce0 <__ascii_mbtowc+0x1a>
 800dcce:	b14b      	cbz	r3, 800dce4 <__ascii_mbtowc+0x1e>
 800dcd0:	7813      	ldrb	r3, [r2, #0]
 800dcd2:	600b      	str	r3, [r1, #0]
 800dcd4:	7812      	ldrb	r2, [r2, #0]
 800dcd6:	1e10      	subs	r0, r2, #0
 800dcd8:	bf18      	it	ne
 800dcda:	2001      	movne	r0, #1
 800dcdc:	b002      	add	sp, #8
 800dcde:	4770      	bx	lr
 800dce0:	4610      	mov	r0, r2
 800dce2:	e7fb      	b.n	800dcdc <__ascii_mbtowc+0x16>
 800dce4:	f06f 0001 	mvn.w	r0, #1
 800dce8:	e7f8      	b.n	800dcdc <__ascii_mbtowc+0x16>

0800dcea <_realloc_r>:
 800dcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4615      	mov	r5, r2
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	b921      	cbnz	r1, 800dd00 <_realloc_r+0x16>
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfc:	f7fd bc80 	b.w	800b600 <_malloc_r>
 800dd00:	b92a      	cbnz	r2, 800dd0e <_realloc_r+0x24>
 800dd02:	f7fd fc09 	bl	800b518 <_free_r>
 800dd06:	2400      	movs	r4, #0
 800dd08:	4620      	mov	r0, r4
 800dd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0e:	f000 f8c4 	bl	800de9a <_malloc_usable_size_r>
 800dd12:	4285      	cmp	r5, r0
 800dd14:	4606      	mov	r6, r0
 800dd16:	d802      	bhi.n	800dd1e <_realloc_r+0x34>
 800dd18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd1c:	d8f4      	bhi.n	800dd08 <_realloc_r+0x1e>
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4640      	mov	r0, r8
 800dd22:	f7fd fc6d 	bl	800b600 <_malloc_r>
 800dd26:	4607      	mov	r7, r0
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d0ec      	beq.n	800dd06 <_realloc_r+0x1c>
 800dd2c:	42b5      	cmp	r5, r6
 800dd2e:	462a      	mov	r2, r5
 800dd30:	4621      	mov	r1, r4
 800dd32:	bf28      	it	cs
 800dd34:	4632      	movcs	r2, r6
 800dd36:	f7ff fc47 	bl	800d5c8 <memcpy>
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	4640      	mov	r0, r8
 800dd3e:	463c      	mov	r4, r7
 800dd40:	f7fd fbea 	bl	800b518 <_free_r>
 800dd44:	e7e0      	b.n	800dd08 <_realloc_r+0x1e>

0800dd46 <__ascii_wctomb>:
 800dd46:	4603      	mov	r3, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	b141      	cbz	r1, 800dd5e <__ascii_wctomb+0x18>
 800dd4c:	2aff      	cmp	r2, #255	@ 0xff
 800dd4e:	d904      	bls.n	800dd5a <__ascii_wctomb+0x14>
 800dd50:	228a      	movs	r2, #138	@ 0x8a
 800dd52:	f04f 30ff 	mov.w	r0, #4294967295
 800dd56:	601a      	str	r2, [r3, #0]
 800dd58:	4770      	bx	lr
 800dd5a:	2001      	movs	r0, #1
 800dd5c:	700a      	strb	r2, [r1, #0]
 800dd5e:	4770      	bx	lr

0800dd60 <fiprintf>:
 800dd60:	b40e      	push	{r1, r2, r3}
 800dd62:	b503      	push	{r0, r1, lr}
 800dd64:	ab03      	add	r3, sp, #12
 800dd66:	4601      	mov	r1, r0
 800dd68:	4805      	ldr	r0, [pc, #20]	@ (800dd80 <fiprintf+0x20>)
 800dd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd6e:	6800      	ldr	r0, [r0, #0]
 800dd70:	9301      	str	r3, [sp, #4]
 800dd72:	f7ff f995 	bl	800d0a0 <_vfiprintf_r>
 800dd76:	b002      	add	sp, #8
 800dd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd7c:	b003      	add	sp, #12
 800dd7e:	4770      	bx	lr
 800dd80:	20000030 	.word	0x20000030

0800dd84 <__swhatbuf_r>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	460c      	mov	r4, r1
 800dd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd8c:	b096      	sub	sp, #88	@ 0x58
 800dd8e:	4615      	mov	r5, r2
 800dd90:	2900      	cmp	r1, #0
 800dd92:	461e      	mov	r6, r3
 800dd94:	da0c      	bge.n	800ddb0 <__swhatbuf_r+0x2c>
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	2100      	movs	r1, #0
 800dd9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd9e:	bf14      	ite	ne
 800dda0:	2340      	movne	r3, #64	@ 0x40
 800dda2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dda6:	2000      	movs	r0, #0
 800dda8:	6031      	str	r1, [r6, #0]
 800ddaa:	602b      	str	r3, [r5, #0]
 800ddac:	b016      	add	sp, #88	@ 0x58
 800ddae:	bd70      	pop	{r4, r5, r6, pc}
 800ddb0:	466a      	mov	r2, sp
 800ddb2:	f000 f849 	bl	800de48 <_fstat_r>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	dbed      	blt.n	800dd96 <__swhatbuf_r+0x12>
 800ddba:	9901      	ldr	r1, [sp, #4]
 800ddbc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddc0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddc4:	4259      	negs	r1, r3
 800ddc6:	4159      	adcs	r1, r3
 800ddc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddcc:	e7eb      	b.n	800dda6 <__swhatbuf_r+0x22>

0800ddce <__smakebuf_r>:
 800ddce:	898b      	ldrh	r3, [r1, #12]
 800ddd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddd2:	079d      	lsls	r5, r3, #30
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	d507      	bpl.n	800ddea <__smakebuf_r+0x1c>
 800ddda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddde:	6023      	str	r3, [r4, #0]
 800dde0:	6123      	str	r3, [r4, #16]
 800dde2:	2301      	movs	r3, #1
 800dde4:	6163      	str	r3, [r4, #20]
 800dde6:	b003      	add	sp, #12
 800dde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddea:	ab01      	add	r3, sp, #4
 800ddec:	466a      	mov	r2, sp
 800ddee:	f7ff ffc9 	bl	800dd84 <__swhatbuf_r>
 800ddf2:	9f00      	ldr	r7, [sp, #0]
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	f7fd fc01 	bl	800b600 <_malloc_r>
 800ddfe:	b948      	cbnz	r0, 800de14 <__smakebuf_r+0x46>
 800de00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de04:	059a      	lsls	r2, r3, #22
 800de06:	d4ee      	bmi.n	800dde6 <__smakebuf_r+0x18>
 800de08:	f023 0303 	bic.w	r3, r3, #3
 800de0c:	f043 0302 	orr.w	r3, r3, #2
 800de10:	81a3      	strh	r3, [r4, #12]
 800de12:	e7e2      	b.n	800ddda <__smakebuf_r+0xc>
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	6020      	str	r0, [r4, #0]
 800de18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	9b01      	ldr	r3, [sp, #4]
 800de20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de24:	b15b      	cbz	r3, 800de3e <__smakebuf_r+0x70>
 800de26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de2a:	4630      	mov	r0, r6
 800de2c:	f000 f81e 	bl	800de6c <_isatty_r>
 800de30:	b128      	cbz	r0, 800de3e <__smakebuf_r+0x70>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f023 0303 	bic.w	r3, r3, #3
 800de38:	f043 0301 	orr.w	r3, r3, #1
 800de3c:	81a3      	strh	r3, [r4, #12]
 800de3e:	89a3      	ldrh	r3, [r4, #12]
 800de40:	431d      	orrs	r5, r3
 800de42:	81a5      	strh	r5, [r4, #12]
 800de44:	e7cf      	b.n	800dde6 <__smakebuf_r+0x18>
	...

0800de48 <_fstat_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	2300      	movs	r3, #0
 800de4c:	4d06      	ldr	r5, [pc, #24]	@ (800de68 <_fstat_r+0x20>)
 800de4e:	4604      	mov	r4, r0
 800de50:	4608      	mov	r0, r1
 800de52:	4611      	mov	r1, r2
 800de54:	602b      	str	r3, [r5, #0]
 800de56:	f7f4 fa1e 	bl	8002296 <_fstat>
 800de5a:	1c43      	adds	r3, r0, #1
 800de5c:	d102      	bne.n	800de64 <_fstat_r+0x1c>
 800de5e:	682b      	ldr	r3, [r5, #0]
 800de60:	b103      	cbz	r3, 800de64 <_fstat_r+0x1c>
 800de62:	6023      	str	r3, [r4, #0]
 800de64:	bd38      	pop	{r3, r4, r5, pc}
 800de66:	bf00      	nop
 800de68:	20000564 	.word	0x20000564

0800de6c <_isatty_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	2300      	movs	r3, #0
 800de70:	4d05      	ldr	r5, [pc, #20]	@ (800de88 <_isatty_r+0x1c>)
 800de72:	4604      	mov	r4, r0
 800de74:	4608      	mov	r0, r1
 800de76:	602b      	str	r3, [r5, #0]
 800de78:	f7f4 fa1d 	bl	80022b6 <_isatty>
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	d102      	bne.n	800de86 <_isatty_r+0x1a>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	b103      	cbz	r3, 800de86 <_isatty_r+0x1a>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	20000564 	.word	0x20000564

0800de8c <abort>:
 800de8c:	2006      	movs	r0, #6
 800de8e:	b508      	push	{r3, lr}
 800de90:	f000 f834 	bl	800defc <raise>
 800de94:	2001      	movs	r0, #1
 800de96:	f7f4 f9ae 	bl	80021f6 <_exit>

0800de9a <_malloc_usable_size_r>:
 800de9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de9e:	1f18      	subs	r0, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bfbc      	itt	lt
 800dea4:	580b      	ldrlt	r3, [r1, r0]
 800dea6:	18c0      	addlt	r0, r0, r3
 800dea8:	4770      	bx	lr

0800deaa <_raise_r>:
 800deaa:	291f      	cmp	r1, #31
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	4605      	mov	r5, r0
 800deb0:	460c      	mov	r4, r1
 800deb2:	d904      	bls.n	800debe <_raise_r+0x14>
 800deb4:	2316      	movs	r3, #22
 800deb6:	6003      	str	r3, [r0, #0]
 800deb8:	f04f 30ff 	mov.w	r0, #4294967295
 800debc:	bd38      	pop	{r3, r4, r5, pc}
 800debe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dec0:	b112      	cbz	r2, 800dec8 <_raise_r+0x1e>
 800dec2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dec6:	b94b      	cbnz	r3, 800dedc <_raise_r+0x32>
 800dec8:	4628      	mov	r0, r5
 800deca:	f000 f831 	bl	800df30 <_getpid_r>
 800dece:	4622      	mov	r2, r4
 800ded0:	4601      	mov	r1, r0
 800ded2:	4628      	mov	r0, r5
 800ded4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ded8:	f000 b818 	b.w	800df0c <_kill_r>
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d00a      	beq.n	800def6 <_raise_r+0x4c>
 800dee0:	1c59      	adds	r1, r3, #1
 800dee2:	d103      	bne.n	800deec <_raise_r+0x42>
 800dee4:	2316      	movs	r3, #22
 800dee6:	6003      	str	r3, [r0, #0]
 800dee8:	2001      	movs	r0, #1
 800deea:	e7e7      	b.n	800debc <_raise_r+0x12>
 800deec:	2100      	movs	r1, #0
 800deee:	4620      	mov	r0, r4
 800def0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800def4:	4798      	blx	r3
 800def6:	2000      	movs	r0, #0
 800def8:	e7e0      	b.n	800debc <_raise_r+0x12>
	...

0800defc <raise>:
 800defc:	4b02      	ldr	r3, [pc, #8]	@ (800df08 <raise+0xc>)
 800defe:	4601      	mov	r1, r0
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	f7ff bfd2 	b.w	800deaa <_raise_r>
 800df06:	bf00      	nop
 800df08:	20000030 	.word	0x20000030

0800df0c <_kill_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	2300      	movs	r3, #0
 800df10:	4d06      	ldr	r5, [pc, #24]	@ (800df2c <_kill_r+0x20>)
 800df12:	4604      	mov	r4, r0
 800df14:	4608      	mov	r0, r1
 800df16:	4611      	mov	r1, r2
 800df18:	602b      	str	r3, [r5, #0]
 800df1a:	f7f4 f95c 	bl	80021d6 <_kill>
 800df1e:	1c43      	adds	r3, r0, #1
 800df20:	d102      	bne.n	800df28 <_kill_r+0x1c>
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	b103      	cbz	r3, 800df28 <_kill_r+0x1c>
 800df26:	6023      	str	r3, [r4, #0]
 800df28:	bd38      	pop	{r3, r4, r5, pc}
 800df2a:	bf00      	nop
 800df2c:	20000564 	.word	0x20000564

0800df30 <_getpid_r>:
 800df30:	f7f4 b949 	b.w	80021c6 <_getpid>

0800df34 <_init>:
 800df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df36:	bf00      	nop
 800df38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df3a:	bc08      	pop	{r3}
 800df3c:	469e      	mov	lr, r3
 800df3e:	4770      	bx	lr

0800df40 <_fini>:
 800df40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df42:	bf00      	nop
 800df44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df46:	bc08      	pop	{r3}
 800df48:	469e      	mov	lr, r3
 800df4a:	4770      	bx	lr
